
max-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0801c1e8  0801c1e8  0002c1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c928  0801c928  00030388  2**0
                  CONTENTS
  4 .ARM          00000008  0801c928  0801c928  0002c928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c930  0801c930  00030388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c930  0801c930  0002c930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c934  0801c934  0002c934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  0801c938  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000507c  20000388  0801ccc0  00030388  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20005404  0801ccc0  00035404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ef36  00000000  00000000  000303b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006657  00000000  00000000  0005f2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002168  00000000  00000000  00065948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e60  00000000  00000000  00067ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f97  00000000  00000000  00069910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fd4d  00000000  00000000  000918a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7bf5  00000000  00000000  000b15f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001891e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a378  00000000  00000000  00189264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000388 	.word	0x20000388
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c1cc 	.word	0x0801c1cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000038c 	.word	0x2000038c
 80001cc:	0801c1cc 	.word	0x0801c1cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d2:	f1a4 0401 	sub.w	r4, r4, #1
 80003d6:	d1e9      	bne.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b972 	b.w	8000f98 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4688      	mov	r8, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d14b      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	4615      	mov	r5, r2
 8000cde:	d967      	bls.n	8000db0 <__udivmoddi4+0xe4>
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	b14a      	cbz	r2, 8000cfa <__udivmoddi4+0x2e>
 8000ce6:	f1c2 0720 	rsb	r7, r2, #32
 8000cea:	fa01 f302 	lsl.w	r3, r1, r2
 8000cee:	fa20 f707 	lsr.w	r7, r0, r7
 8000cf2:	4095      	lsls	r5, r2
 8000cf4:	ea47 0803 	orr.w	r8, r7, r3
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d04:	fa1f fc85 	uxth.w	ip, r5
 8000d08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d10:	fb07 f10c 	mul.w	r1, r7, ip
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x60>
 8000d18:	18eb      	adds	r3, r5, r3
 8000d1a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1e:	f080 811b 	bcs.w	8000f58 <__udivmoddi4+0x28c>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 8118 	bls.w	8000f58 <__udivmoddi4+0x28c>
 8000d28:	3f02      	subs	r7, #2
 8000d2a:	442b      	add	r3, r5
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x8c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d54:	3802      	subs	r0, #2
 8000d56:	442c      	add	r4, r5
 8000d58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d5c:	eba4 040c 	sub.w	r4, r4, ip
 8000d60:	2700      	movs	r7, #0
 8000d62:	b11e      	cbz	r6, 8000d6c <__udivmoddi4+0xa0>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xbe>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80eb 	beq.w	8000f52 <__udivmoddi4+0x286>
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d82:	4638      	mov	r0, r7
 8000d84:	4639      	mov	r1, r7
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f783 	clz	r7, r3
 8000d8e:	2f00      	cmp	r7, #0
 8000d90:	d147      	bne.n	8000e22 <__udivmoddi4+0x156>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd0>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2c4>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	4698      	mov	r8, r3
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa0>
 8000daa:	e9c6 4800 	strd	r4, r8, [r6]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xe8>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 808f 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbe:	1b49      	subs	r1, r1, r5
 8000dc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc4:	fa1f f885 	uxth.w	r8, r5
 8000dc8:	2701      	movs	r7, #1
 8000dca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000de0:	18eb      	adds	r3, r5, r3
 8000de2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4299      	cmp	r1, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2bc>
 8000dee:	4684      	mov	ip, r0
 8000df0:	1a59      	subs	r1, r3, r1
 8000df2:	b2a3      	uxth	r3, r4
 8000df4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e00:	fb08 f800 	mul.w	r8, r8, r0
 8000e04:	45a0      	cmp	r8, r4
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x14c>
 8000e08:	192c      	adds	r4, r5, r4
 8000e0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14a>
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	f200 80b6 	bhi.w	8000f82 <__udivmoddi4+0x2b6>
 8000e16:	4618      	mov	r0, r3
 8000e18:	eba4 0408 	sub.w	r4, r4, r8
 8000e1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e20:	e79f      	b.n	8000d62 <__udivmoddi4+0x96>
 8000e22:	f1c7 0c20 	rsb	ip, r7, #32
 8000e26:	40bb      	lsls	r3, r7
 8000e28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e30:	fa01 f407 	lsl.w	r4, r1, r7
 8000e34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e40:	4325      	orrs	r5, r4
 8000e42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e46:	0c2c      	lsrs	r4, r5, #16
 8000e48:	fb08 3319 	mls	r3, r8, r9, r3
 8000e4c:	fa1f fa8e 	uxth.w	sl, lr
 8000e50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e54:	fb09 f40a 	mul.w	r4, r9, sl
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1e 0303 	adds.w	r3, lr, r3
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e6c:	f080 8087 	bcs.w	8000f7e <__udivmoddi4+0x2b2>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f240 8084 	bls.w	8000f7e <__udivmoddi4+0x2b2>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4473      	add	r3, lr
 8000e7c:	1b1b      	subs	r3, r3, r4
 8000e7e:	b2ad      	uxth	r5, r5
 8000e80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e84:	fb08 3310 	mls	r3, r8, r0, r3
 8000e88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e90:	45a2      	cmp	sl, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1e 0404 	adds.w	r4, lr, r4
 8000e98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e9c:	d26b      	bcs.n	8000f76 <__udivmoddi4+0x2aa>
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	d969      	bls.n	8000f76 <__udivmoddi4+0x2aa>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4474      	add	r4, lr
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	eba4 040a 	sub.w	r4, r4, sl
 8000eb2:	454c      	cmp	r4, r9
 8000eb4:	46c2      	mov	sl, r8
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	d354      	bcc.n	8000f64 <__udivmoddi4+0x298>
 8000eba:	d051      	beq.n	8000f60 <__udivmoddi4+0x294>
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d069      	beq.n	8000f94 <__udivmoddi4+0x2c8>
 8000ec0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ecc:	40fd      	lsrs	r5, r7
 8000ece:	40fc      	lsrs	r4, r7
 8000ed0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed8:	2700      	movs	r7, #0
 8000eda:	e747      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee4:	4095      	lsls	r5, r2
 8000ee6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eea:	fa21 f303 	lsr.w	r3, r1, r3
 8000eee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ef2:	4338      	orrs	r0, r7
 8000ef4:	0c01      	lsrs	r1, r0, #16
 8000ef6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000efa:	fa1f f885 	uxth.w	r8, r5
 8000efe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f06:	fb07 f308 	mul.w	r3, r7, r8
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x256>
 8000f12:	1869      	adds	r1, r5, r1
 8000f14:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f18:	d22f      	bcs.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d92d      	bls.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1e:	3f02      	subs	r7, #2
 8000f20:	4429      	add	r1, r5
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	b281      	uxth	r1, r0
 8000f26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb00 f308 	mul.w	r3, r0, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x27e>
 8000f3a:	1869      	adds	r1, r5, r1
 8000f3c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f40:	d217      	bcs.n	8000f72 <__udivmoddi4+0x2a6>
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d915      	bls.n	8000f72 <__udivmoddi4+0x2a6>
 8000f46:	3802      	subs	r0, #2
 8000f48:	4429      	add	r1, r5
 8000f4a:	1ac9      	subs	r1, r1, r3
 8000f4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f50:	e73b      	b.n	8000dca <__udivmoddi4+0xfe>
 8000f52:	4637      	mov	r7, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e709      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000f58:	4607      	mov	r7, r0
 8000f5a:	e6e7      	b.n	8000d2c <__udivmoddi4+0x60>
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x8c>
 8000f60:	4541      	cmp	r1, r8
 8000f62:	d2ab      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f68:	eb69 020e 	sbc.w	r2, r9, lr
 8000f6c:	3801      	subs	r0, #1
 8000f6e:	4613      	mov	r3, r2
 8000f70:	e7a4      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f72:	4660      	mov	r0, ip
 8000f74:	e7e9      	b.n	8000f4a <__udivmoddi4+0x27e>
 8000f76:	4618      	mov	r0, r3
 8000f78:	e795      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7a:	4667      	mov	r7, ip
 8000f7c:	e7d1      	b.n	8000f22 <__udivmoddi4+0x256>
 8000f7e:	4681      	mov	r9, r0
 8000f80:	e77c      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f82:	3802      	subs	r0, #2
 8000f84:	442c      	add	r4, r5
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0x14c>
 8000f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f8c:	442b      	add	r3, r5
 8000f8e:	e72f      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f90:	4638      	mov	r0, r7
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xda>
 8000f94:	4637      	mov	r7, r6
 8000f96:	e6e9      	b.n	8000d6c <__udivmoddi4+0xa0>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fb6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <MX_ADC1_Init+0xa0>)
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_ADC1_Init+0x98>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_ADC1_Init+0x98>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_ADC1_Init+0x98>)
 8000ffe:	f00c fdcb 	bl	800db98 <HAL_ADC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001008:	f005 fba0 	bl	800674c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800100c:	2301      	movs	r3, #1
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001014:	2307      	movs	r3, #7
 8001016:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_ADC1_Init+0x98>)
 800101e:	f00c ff0f 	bl	800de40 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001028:	f005 fb90 	bl	800674c <Error_Handler>
  }

}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20004880 	.word	0x20004880
 8001038:	40012000 	.word	0x40012000
 800103c:	0f000001 	.word	0x0f000001

08001040 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a2e      	ldr	r2, [pc, #184]	; (8001118 <HAL_ADC_MspInit+0xd8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d156      	bne.n	8001110 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_ADC_MspInit+0xdc>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a2c      	ldr	r2, [pc, #176]	; (800111c <HAL_ADC_MspInit+0xdc>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_ADC_MspInit+0xdc>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_ADC_MspInit+0xdc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <HAL_ADC_MspInit+0xdc>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_ADC_MspInit+0xdc>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_Pin;
 800109a:	2302      	movs	r3, #2
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	481c      	ldr	r0, [pc, #112]	; (8001120 <HAL_ADC_MspInit+0xe0>)
 80010ae:	f00d ffd5 	bl	800f05c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010b4:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <HAL_ADC_MspInit+0xe8>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 80010f6:	f00d fa25 	bl	800e544 <HAL_DMA_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001100:	f005 fb24 	bl	800674c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 8001108:	639a      	str	r2, [r3, #56]	; 0x38
 800110a:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_ADC_MspInit+0xe4>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	200048c8 	.word	0x200048c8
 8001128:	40026410 	.word	0x40026410

0800112c <SetBrightness>:

static const uint16_t 	LUM_MIN = 0u;      /* Abs luminosity minimum */
static const uint16_t 	LUM_MAX = 4095u;   /* Abs luminosity maximum */

void SetBrightness(uint16_t br)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
    htim5.Instance->CCR4 = br;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <SetBrightness+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	88fa      	ldrh	r2, [r7, #6]
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800113e:	210c      	movs	r1, #12
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <SetBrightness+0x24>)
 8001142:	f010 fc81 	bl	8011a48 <HAL_TIM_PWM_Start>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20004d14 	.word	0x20004d14

08001154 <SetBrightnessOn>:

void SetBrightnessOn()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim5);
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <SetBrightnessOn+0x18>)
 800115a:	f010 fc02 	bl	8011962 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800115e:	210c      	movs	r1, #12
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <SetBrightnessOn+0x18>)
 8001162:	f010 fc71 	bl	8011a48 <HAL_TIM_PWM_Start>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20004d14 	.word	0x20004d14

08001170 <SetBacklight>:

void SetBacklight(uint8_t r,
				  uint8_t g,
				  uint8_t b)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	460b      	mov	r3, r1
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	4613      	mov	r3, r2
 8001180:	717b      	strb	r3, [r7, #5]
    static uint8_t R, G, B;

    if (r != R || g != G || b != B) {
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <SetBacklight+0x70>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	429a      	cmp	r2, r3
 800118a:	d109      	bne.n	80011a0 <SetBacklight+0x30>
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <SetBacklight+0x74>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	79ba      	ldrb	r2, [r7, #6]
 8001192:	429a      	cmp	r2, r3
 8001194:	d104      	bne.n	80011a0 <SetBacklight+0x30>
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <SetBacklight+0x78>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	797a      	ldrb	r2, [r7, #5]
 800119c:	429a      	cmp	r2, r3
 800119e:	d01a      	beq.n	80011d6 <SetBacklight+0x66>
        R = r;
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <SetBacklight+0x70>)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	7013      	strb	r3, [r2, #0]
        G = g;
 80011a6:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <SetBacklight+0x74>)
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	7013      	strb	r3, [r2, #0]
        B = b;
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <SetBacklight+0x78>)
 80011ae:	797b      	ldrb	r3, [r7, #5]
 80011b0:	7013      	strb	r3, [r2, #0]

        ws2812_pixel_rgb_to_buf_dma(r, g, b, 0);
 80011b2:	797a      	ldrb	r2, [r7, #5]
 80011b4:	79b9      	ldrb	r1, [r7, #6]
 80011b6:	79f8      	ldrb	r0, [r7, #7]
 80011b8:	2300      	movs	r3, #0
 80011ba:	f00c fbc7 	bl	800d94c <ws2812_pixel_rgb_to_buf_dma>
        ws2812_pixel_rgb_to_buf_dma(r, g, b, 1);
 80011be:	797a      	ldrb	r2, [r7, #5]
 80011c0:	79b9      	ldrb	r1, [r7, #6]
 80011c2:	79f8      	ldrb	r0, [r7, #7]
 80011c4:	2301      	movs	r3, #1
 80011c6:	f00c fbc1 	bl	800d94c <ws2812_pixel_rgb_to_buf_dma>
        HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, BUF_DMA, ARRAY_LEN);
 80011ca:	2360      	movs	r3, #96	; 0x60
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <SetBacklight+0x7c>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <SetBacklight+0x80>)
 80011d2:	f010 fccf 	bl	8011b74 <HAL_TIM_PWM_Start_DMA>
    }
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200003a4 	.word	0x200003a4
 80011e4:	200003a5 	.word	0x200003a5
 80011e8:	200003a6 	.word	0x200003a6
 80011ec:	2000525c 	.word	0x2000525c
 80011f0:	20004d94 	.word	0x20004d94

080011f4 <Beep>:

void Beep()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011f8:	2104      	movs	r1, #4
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <Beep+0x20>)
 80011fc:	f010 fc24 	bl	8011a48 <HAL_TIM_PWM_Start>
    HAL_Delay(10);
 8001200:	200a      	movs	r0, #10
 8001202:	f00c fca7 	bl	800db54 <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001206:	2104      	movs	r1, #4
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <Beep+0x20>)
 800120a:	f010 fc5b 	bl	8011ac4 <HAL_TIM_PWM_Stop>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20004d54 	.word	0x20004d54

08001218 <calc_brightness_linear>:

float calc_brightness_linear(float l,
                             float b_inf,
                             float b_sup)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001222:	edc7 0a02 	vstr	s1, [r7, #8]
 8001226:	ed87 1a01 	vstr	s2, [r7, #4]
    float k, b, y;

    k = (b_inf - b_sup);
 800122a:	ed97 7a02 	vldr	s14, [r7, #8]
 800122e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001236:	edc7 7a07 	vstr	s15, [r7, #28]
    k /=  (float)(LUM_MAX - LUM_MIN);
 800123a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800123e:	461a      	mov	r2, r3
 8001240:	2300      	movs	r3, #0
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001254:	edc7 7a07 	vstr	s15, [r7, #28]
    b = b_sup;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	61bb      	str	r3, [r7, #24]
    y = k * l + b;
 800125c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001260:	edd7 7a03 	vldr	s15, [r7, #12]
 8001264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001268:	ed97 7a06 	vldr	s14, [r7, #24]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	edc7 7a05 	vstr	s15, [r7, #20]

    return y;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	ee07 3a90 	vmov	s15, r3
}
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	3724      	adds	r7, #36	; 0x24
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <ReadCoefficients>:
#include <math.h>

static const uint32_t 	BMP280_READ_DELAY = 5000u;

void ReadCoefficients(Bmp280 *bmp)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    uint8_t address[1];

    CS_SET();
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001296:	48d2      	ldr	r0, [pc, #840]	; (80015e0 <ReadCoefficients+0x358>)
 8001298:	f00e f892 	bl	800f3c0 <HAL_GPIO_WritePin>
    data[0] = 0xF4 & ~0x80;
 800129c:	2374      	movs	r3, #116	; 0x74
 800129e:	743b      	strb	r3, [r7, #16]
    data[1] = 0b00100111;
 80012a0:	2327      	movs	r3, #39	; 0x27
 80012a2:	747b      	strb	r3, [r7, #17]
    HAL_SPI_Transmit(bmp->hspi, data, 2, BMP280_READ_DELAY);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ac:	f107 0110 	add.w	r1, r7, #16
 80012b0:	2202      	movs	r2, #2
 80012b2:	f00f fe3b 	bl	8010f2c <HAL_SPI_Transmit>
    CS_RESET();
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012bc:	48c8      	ldr	r0, [pc, #800]	; (80015e0 <ReadCoefficients+0x358>)
 80012be:	f00e f87f 	bl	800f3c0 <HAL_GPIO_WritePin>

    // cooeff's
    // T1
    CS_SET();
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c8:	48c5      	ldr	r0, [pc, #788]	; (80015e0 <ReadCoefficients+0x358>)
 80012ca:	f00e f879 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_T1 | 0x80;
 80012ce:	2388      	movs	r3, #136	; 0x88
 80012d0:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012da:	f107 010c 	add.w	r1, r7, #12
 80012de:	2201      	movs	r2, #1
 80012e0:	f00f fe24 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_T1, 2, BMP280_READ_DELAY);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80012ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80012f2:	2202      	movs	r2, #2
 80012f4:	f00f ff4e 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fe:	48b8      	ldr	r0, [pc, #736]	; (80015e0 <ReadCoefficients+0x358>)
 8001300:	f00e f85e 	bl	800f3c0 <HAL_GPIO_WritePin>

    // T2
    CS_SET();
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130a:	48b5      	ldr	r0, [pc, #724]	; (80015e0 <ReadCoefficients+0x358>)
 800130c:	f00e f858 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_T2 | 0x80;
 8001310:	238a      	movs	r3, #138	; 0x8a
 8001312:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	f241 3388 	movw	r3, #5000	; 0x1388
 800131c:	f107 010c 	add.w	r1, r7, #12
 8001320:	2201      	movs	r2, #1
 8001322:	f00f fe03 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_T2, 2, BMP280_READ_DELAY);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8001330:	f241 3388 	movw	r3, #5000	; 0x1388
 8001334:	2202      	movs	r2, #2
 8001336:	f00f ff2d 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001340:	48a7      	ldr	r0, [pc, #668]	; (80015e0 <ReadCoefficients+0x358>)
 8001342:	f00e f83d 	bl	800f3c0 <HAL_GPIO_WritePin>

    // T3
    CS_SET();
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134c:	48a4      	ldr	r0, [pc, #656]	; (80015e0 <ReadCoefficients+0x358>)
 800134e:	f00e f837 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_T3 | 0x80;
 8001352:	238c      	movs	r3, #140	; 0x8c
 8001354:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f241 3388 	movw	r3, #5000	; 0x1388
 800135e:	f107 010c 	add.w	r1, r7, #12
 8001362:	2201      	movs	r2, #1
 8001364:	f00f fde2 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_T3, 2, BMP280_READ_DELAY);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8001372:	f241 3388 	movw	r3, #5000	; 0x1388
 8001376:	2202      	movs	r2, #2
 8001378:	f00f ff0c 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001382:	4897      	ldr	r0, [pc, #604]	; (80015e0 <ReadCoefficients+0x358>)
 8001384:	f00e f81c 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P1
    CS_SET();
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138e:	4894      	ldr	r0, [pc, #592]	; (80015e0 <ReadCoefficients+0x358>)
 8001390:	f00e f816 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P1 | 0x80;
 8001394:	238e      	movs	r3, #142	; 0x8e
 8001396:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	f241 3388 	movw	r3, #5000	; 0x1388
 80013a0:	f107 010c 	add.w	r1, r7, #12
 80013a4:	2201      	movs	r2, #1
 80013a6:	f00f fdc1 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P1, 2, BMP280_READ_DELAY);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 80013b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013b8:	2202      	movs	r2, #2
 80013ba:	f00f feeb 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c4:	4886      	ldr	r0, [pc, #536]	; (80015e0 <ReadCoefficients+0x358>)
 80013c6:	f00d fffb 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P2
    CS_SET();
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d0:	4883      	ldr	r0, [pc, #524]	; (80015e0 <ReadCoefficients+0x358>)
 80013d2:	f00d fff5 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P2 | 0x80;
 80013d6:	2390      	movs	r3, #144	; 0x90
 80013d8:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f241 3388 	movw	r3, #5000	; 0x1388
 80013e2:	f107 010c 	add.w	r1, r7, #12
 80013e6:	2201      	movs	r2, #1
 80013e8:	f00f fda0 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P2, 2, BMP280_READ_DELAY);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80013f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80013fa:	2202      	movs	r2, #2
 80013fc:	f00f feca 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001406:	4876      	ldr	r0, [pc, #472]	; (80015e0 <ReadCoefficients+0x358>)
 8001408:	f00d ffda 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P3
    CS_SET();
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001412:	4873      	ldr	r0, [pc, #460]	; (80015e0 <ReadCoefficients+0x358>)
 8001414:	f00d ffd4 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P3 | 0x80;
 8001418:	2392      	movs	r3, #146	; 0x92
 800141a:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	f241 3388 	movw	r3, #5000	; 0x1388
 8001424:	f107 010c 	add.w	r1, r7, #12
 8001428:	2201      	movs	r2, #1
 800142a:	f00f fd7f 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P3, 2, BMP280_READ_DELAY);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f103 0142 	add.w	r1, r3, #66	; 0x42
 8001438:	f241 3388 	movw	r3, #5000	; 0x1388
 800143c:	2202      	movs	r2, #2
 800143e:	f00f fea9 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001448:	4865      	ldr	r0, [pc, #404]	; (80015e0 <ReadCoefficients+0x358>)
 800144a:	f00d ffb9 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P4
    CS_SET();
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001454:	4862      	ldr	r0, [pc, #392]	; (80015e0 <ReadCoefficients+0x358>)
 8001456:	f00d ffb3 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P4 | 0x80;
 800145a:	2394      	movs	r3, #148	; 0x94
 800145c:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	f241 3388 	movw	r3, #5000	; 0x1388
 8001466:	f107 010c 	add.w	r1, r7, #12
 800146a:	2201      	movs	r2, #1
 800146c:	f00f fd5e 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P4, 2, BMP280_READ_DELAY);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800147a:	f241 3388 	movw	r3, #5000	; 0x1388
 800147e:	2202      	movs	r2, #2
 8001480:	f00f fe88 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148a:	4855      	ldr	r0, [pc, #340]	; (80015e0 <ReadCoefficients+0x358>)
 800148c:	f00d ff98 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P5
    CS_SET();
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001496:	4852      	ldr	r0, [pc, #328]	; (80015e0 <ReadCoefficients+0x358>)
 8001498:	f00d ff92 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P5 | 0x80;
 800149c:	2396      	movs	r3, #150	; 0x96
 800149e:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80014a8:	f107 010c 	add.w	r1, r7, #12
 80014ac:	2201      	movs	r2, #1
 80014ae:	f00f fd3d 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P5, 2, BMP280_READ_DELAY);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80014bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80014c0:	2202      	movs	r2, #2
 80014c2:	f00f fe67 	bl	8011194 <HAL_SPI_Receive>
    CS_SET();
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014cc:	4844      	ldr	r0, [pc, #272]	; (80015e0 <ReadCoefficients+0x358>)
 80014ce:	f00d ff77 	bl	800f3c0 <HAL_GPIO_WritePin>
    CS_RESET();
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d8:	4841      	ldr	r0, [pc, #260]	; (80015e0 <ReadCoefficients+0x358>)
 80014da:	f00d ff71 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P6
    CS_SET();
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e4:	483e      	ldr	r0, [pc, #248]	; (80015e0 <ReadCoefficients+0x358>)
 80014e6:	f00d ff6b 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P6 | 0x80;
 80014ea:	2398      	movs	r3, #152	; 0x98
 80014ec:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80014f6:	f107 010c 	add.w	r1, r7, #12
 80014fa:	2201      	movs	r2, #1
 80014fc:	f00f fd16 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P6, 2, BMP280_READ_DELAY);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800150a:	f241 3388 	movw	r3, #5000	; 0x1388
 800150e:	2202      	movs	r2, #2
 8001510:	f00f fe40 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151a:	4831      	ldr	r0, [pc, #196]	; (80015e0 <ReadCoefficients+0x358>)
 800151c:	f00d ff50 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P7
    CS_SET();
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001526:	482e      	ldr	r0, [pc, #184]	; (80015e0 <ReadCoefficients+0x358>)
 8001528:	f00d ff4a 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P7 | 0x80;
 800152c:	239a      	movs	r3, #154	; 0x9a
 800152e:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	f241 3388 	movw	r3, #5000	; 0x1388
 8001538:	f107 010c 	add.w	r1, r7, #12
 800153c:	2201      	movs	r2, #1
 800153e:	f00f fcf5 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P7, 2, BMP280_READ_DELAY);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 800154c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001550:	2202      	movs	r2, #2
 8001552:	f00f fe1f 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155c:	4820      	ldr	r0, [pc, #128]	; (80015e0 <ReadCoefficients+0x358>)
 800155e:	f00d ff2f 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P8
    CS_SET();
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001568:	481d      	ldr	r0, [pc, #116]	; (80015e0 <ReadCoefficients+0x358>)
 800156a:	f00d ff29 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P8 | 0x80;
 800156e:	239c      	movs	r3, #156	; 0x9c
 8001570:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	f241 3388 	movw	r3, #5000	; 0x1388
 800157a:	f107 010c 	add.w	r1, r7, #12
 800157e:	2201      	movs	r2, #1
 8001580:	f00f fcd4 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P8, 2, BMP280_READ_DELAY);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800158e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001592:	2202      	movs	r2, #2
 8001594:	f00f fdfe 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159e:	4810      	ldr	r0, [pc, #64]	; (80015e0 <ReadCoefficients+0x358>)
 80015a0:	f00d ff0e 	bl	800f3c0 <HAL_GPIO_WritePin>

    // P9
    CS_SET();
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <ReadCoefficients+0x358>)
 80015ac:	f00d ff08 	bl	800f3c0 <HAL_GPIO_WritePin>
    address[0] = BMP280_REGISTER_DIG_P9 | 0x80;
 80015b0:	239e      	movs	r3, #158	; 0x9e
 80015b2:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80015bc:	f107 010c 	add.w	r1, r7, #12
 80015c0:	2201      	movs	r2, #1
 80015c2:	f00f fcb3 	bl	8010f2c <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp->hspi, (uint8_t *)&bmp->dig_P9, 2, BMP280_READ_DELAY);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f103 014e 	add.w	r1, r3, #78	; 0x4e
 80015d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80015d4:	2202      	movs	r2, #2
 80015d6:	f00f fddd 	bl	8011194 <HAL_SPI_Receive>
    CS_RESET();
 80015da:	2201      	movs	r2, #1
 80015dc:	e002      	b.n	80015e4 <ReadCoefficients+0x35c>
 80015de:	bf00      	nop
 80015e0:	40020000 	.word	0x40020000
 80015e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <ReadCoefficients+0x370>)
 80015ea:	f00d fee9 	bl	800f3c0 <HAL_GPIO_WritePin>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020000 	.word	0x40020000

080015fc <bmp280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
static
BMP280_S32_t bmp280_compensate_T_int32(Bmp280 *bmp, BMP280_S32_t adc_T)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    BMP280_S32_t var1, var2, T;

    var1 = ((((adc_T>>3) - ((BMP280_S32_t)bmp->dig_T1<<1))) * ((BMP280_S32_t)bmp->dig_T2)) >> 11;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	10da      	asrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	12db      	asrs	r3, r3, #11
 800161e:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T>>4) - ((BMP280_S32_t)bmp->dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)bmp->dig_T1))) >> 12) * ((BMP280_S32_t)bmp->dig_T3)) >> 14;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	111b      	asrs	r3, r3, #4
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	1112      	asrs	r2, r2, #4
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	8f09      	ldrh	r1, [r1, #56]	; 0x38
 8001632:	1a52      	subs	r2, r2, r1
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	131b      	asrs	r3, r3, #12
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	f9b2 203c 	ldrsh.w	r2, [r2, #60]	; 0x3c
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	139b      	asrs	r3, r3, #14
 8001646:	613b      	str	r3, [r7, #16]
    bmp->t_fine = var1 + var2;
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	441a      	add	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
    T = (bmp->t_fine * 5 + 128) >> 8;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3380      	adds	r3, #128	; 0x80
 800165e:	121b      	asrs	r3, r3, #8
 8001660:	60fb      	str	r3, [r7, #12]
    return T;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <bmp280_compensate_P_int32>:

// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
static
BMP280_U32_t bmp280_compensate_P_int32(Bmp280 *bmp, BMP280_S32_t adc_P)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    BMP280_S32_t var1, var2;
    BMP280_U32_t p;

    var1 = (((BMP280_S32_t)bmp->t_fine)>>1) - (BMP280_S32_t)64000;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167e:	105b      	asrs	r3, r3, #1
 8001680:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001684:	613b      	str	r3, [r7, #16]
    var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)bmp->dig_P6);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	109b      	asrs	r3, r3, #2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	1092      	asrs	r2, r2, #2
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	12db      	asrs	r3, r3, #11
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	; 0x48
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]
    var2 = var2 + ((var1*((BMP280_S32_t)bmp->dig_P5))<<1);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80016a6:	461a      	mov	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	fb03 f302 	mul.w	r3, r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
    var2 = (var2>>2)+(((BMP280_S32_t)bmp->dig_P4)<<16);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	109a      	asrs	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
    var1 = (((bmp->dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((BMP280_S32_t)bmp->dig_P2) * var1)>>1))>>18;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80016cc:	4619      	mov	r1, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	109b      	asrs	r3, r3, #2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	1092      	asrs	r2, r2, #2
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	135b      	asrs	r3, r3, #13
 80016dc:	fb03 f301 	mul.w	r3, r3, r1
 80016e0:	10da      	asrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80016e8:	4619      	mov	r1, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	fb03 f301 	mul.w	r3, r3, r1
 80016f0:	105b      	asrs	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	149b      	asrs	r3, r3, #18
 80016f6:	613b      	str	r3, [r7, #16]
    var1 =((((32768+var1))*((BMP280_S32_t)bmp->dig_P1))>>15);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	13db      	asrs	r3, r3, #15
 8001708:	613b      	str	r3, [r7, #16]

    if (var1 == 0) {
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <bmp280_compensate_P_int32+0xa4>
        return 0; // avoid exception caused by division by zero
 8001710:	2300      	movs	r3, #0
 8001712:	e042      	b.n	800179a <bmp280_compensate_P_int32+0x12a>
    }

    p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	425b      	negs	r3, r3
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	1312      	asrs	r2, r2, #12
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	f640 4235 	movw	r2, #3125	; 0xc35
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 800172a:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800172e:	617b      	str	r3, [r7, #20]

    if (p < 0x80000000) {
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db06      	blt.n	8001744 <bmp280_compensate_P_int32+0xd4>
        p = (p << 1) / ((BMP280_U32_t)var1);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005a      	lsls	r2, r3, #1
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e005      	b.n	8001750 <bmp280_compensate_P_int32+0xe0>
    } else {
        p = (p / (BMP280_U32_t)var1) * 2;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	fbb2 f3f3 	udiv	r3, r2, r3
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
    }

    var1 = (((BMP280_S32_t)bmp->dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8001756:	4619      	mov	r1, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	08db      	lsrs	r3, r3, #3
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	08d2      	lsrs	r2, r2, #3
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	0b5b      	lsrs	r3, r3, #13
 8001766:	fb03 f301 	mul.w	r3, r3, r1
 800176a:	131b      	asrs	r3, r3, #12
 800176c:	613b      	str	r3, [r7, #16]
    var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)bmp->dig_P8))>>13;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800177a:	fb03 f302 	mul.w	r3, r3, r2
 800177e:	135b      	asrs	r3, r3, #13
 8001780:	60fb      	str	r3, [r7, #12]
    p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + bmp->dig_P7) >> 4));
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800178e:	4413      	add	r3, r2
 8001790:	111a      	asrs	r2, r3, #4
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
    return p;
 8001798:	697b      	ldr	r3, [r7, #20]
}
 800179a:	4618      	mov	r0, r3
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <Bmp280Create>:

void Bmp280Create(Bmp280 *bmp,
				  SPI_HandleTypeDef *hspi)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	bmp->hspi = hspi;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	601a      	str	r2, [r3, #0]

	ReadCoefficients(bmp);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fd65 	bl	8001288 <ReadCoefficients>

	KalmanFilterInit(&bmp->pressure_filter, 4.0f, 4.0f, 0.0250f);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80017f4 <Bmp280Create+0x4c>
 80017c6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80017ca:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 fe1c 	bl	800640c <KalmanFilterInit>
	KalmanFilterInit(&bmp->temp_filter, 4.0f, 4.0f, 0.0250f);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	331c      	adds	r3, #28
 80017d8:	ed9f 1a06 	vldr	s2, [pc, #24]	; 80017f4 <Bmp280Create+0x4c>
 80017dc:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80017e0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f004 fe11 	bl	800640c <KalmanFilterInit>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	3ccccccd 	.word	0x3ccccccd

080017f8 <Bmp280GetValuesInSi>:

void Bmp280GetValuesInSi(Bmp280 *bmp,
	      			 	 double *t,
						 double *p)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b08f      	sub	sp, #60	; 0x3c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	uint8_t address[1];

	// adc values
	CS_SET();
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180a:	4841      	ldr	r0, [pc, #260]	; (8001910 <Bmp280GetValuesInSi+0x118>)
 800180c:	f00d fdd8 	bl	800f3c0 <HAL_GPIO_WritePin>
	address[0] = 0xF7 | 0x80;
 8001810:	23f7      	movs	r3, #247	; 0xf7
 8001812:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(bmp->hspi, address, 1, BMP280_READ_DELAY);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	f241 3388 	movw	r3, #5000	; 0x1388
 800181c:	f107 0114 	add.w	r1, r7, #20
 8001820:	2201      	movs	r2, #1
 8001822:	f00f fb83 	bl	8010f2c <HAL_SPI_Transmit>
	HAL_SPI_Receive(bmp->hspi, data, 6, BMP280_READ_DELAY);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	f241 3388 	movw	r3, #5000	; 0x1388
 800182e:	f107 0118 	add.w	r1, r7, #24
 8001832:	2206      	movs	r2, #6
 8001834:	f00f fcae 	bl	8011194 <HAL_SPI_Receive>
	CS_RESET();
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183e:	4834      	ldr	r0, [pc, #208]	; (8001910 <Bmp280GetValuesInSi+0x118>)
 8001840:	f00d fdbe 	bl	800f3c0 <HAL_GPIO_WritePin>

	uint8_t adc_P_msb = data[0];
 8001844:	7e3b      	ldrb	r3, [r7, #24]
 8001846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t adc_P_lsb = data[1];
 800184a:	7e7b      	ldrb	r3, [r7, #25]
 800184c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t adc_P_xlsb = data[2];
 8001850:	7ebb      	ldrb	r3, [r7, #26]
 8001852:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint8_t adc_T_msb = data[3];
 8001856:	7efb      	ldrb	r3, [r7, #27]
 8001858:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t adc_T_lsb = data[4];
 800185c:	7f3b      	ldrb	r3, [r7, #28]
 800185e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t adc_T_xlsb = data[5];
 8001862:	7f7b      	ldrb	r3, [r7, #29]
 8001864:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	BMP280_S32_t adc_T = ((adc_T_msb << 16) | (adc_T_lsb << 8) | adc_T_xlsb) >> 4;
 8001868:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	431a      	orrs	r2, r3
 8001876:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800187a:	4313      	orrs	r3, r2
 800187c:	111b      	asrs	r3, r3, #4
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
	BMP280_S32_t adc_P = ((adc_P_msb << 16) | (adc_P_lsb << 8) | adc_P_xlsb) >> 4;
 8001880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	431a      	orrs	r2, r3
 800188e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001892:	4313      	orrs	r3, r2
 8001894:	111b      	asrs	r3, r3, #4
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28

	BMP280_S32_t T, P;

	T = bmp280_compensate_T_int32(bmp, adc_T);
 8001898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff feae 	bl	80015fc <bmp280_compensate_T_int32>
 80018a0:	6278      	str	r0, [r7, #36]	; 0x24
	P = bmp280_compensate_P_int32(bmp, adc_P);
 80018a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff fee3 	bl	8001670 <bmp280_compensate_P_int32>
 80018aa:	4603      	mov	r3, r0
 80018ac:	623b      	str	r3, [r7, #32]

	*t = KalmanFilterUpdate(&bmp->temp_filter, (float)T);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	331c      	adds	r3, #28
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	ee07 2a90 	vmov	s15, r2
 80018b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018bc:	eeb0 0a67 	vmov.f32	s0, s15
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fdbd 	bl	8006440 <KalmanFilterUpdate>
 80018c6:	ee10 3a10 	vmov	r3, s0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe46 	bl	800055c <__aeabi_f2d>
 80018d0:	4603      	mov	r3, r0
 80018d2:	460c      	mov	r4, r1
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	e9c2 3400 	strd	r3, r4, [r2]
	*p = KalmanFilterUpdate(&bmp->pressure_filter, (float)P);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3304      	adds	r3, #4
 80018de:	6a3a      	ldr	r2, [r7, #32]
 80018e0:	ee07 2a90 	vmov	s15, r2
 80018e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 fda7 	bl	8006440 <KalmanFilterUpdate>
 80018f2:	ee10 3a10 	vmov	r3, s0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe30 	bl	800055c <__aeabi_f2d>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001906:	bf00      	nop
 8001908:	373c      	adds	r7, #60	; 0x3c
 800190a:	46bd      	mov	sp, r7
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	bf00      	nop
 8001910:	40020000 	.word	0x40020000
 8001914:	00000000 	.word	0x00000000

08001918 <Bmp280GetValues>:

void Bmp280GetValues(Bmp280 *bmp,
					 double *t,
					 double *p)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	Bmp280GetValuesInSi(bmp, t, p);
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	68b9      	ldr	r1, [r7, #8]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff ff65 	bl	80017f8 <Bmp280GetValuesInSi>
	*p *= TO_MMHG;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001934:	a306      	add	r3, pc, #24	; (adr r3, 8001950 <Bmp280GetValues+0x38>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe67 	bl	800060c <__aeabi_dmul>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	599877b1 	.word	0x599877b1
 8001954:	3f7eb8f8 	.word	0x3f7eb8f8

08001958 <Bmp280GetAltitude>:

double Bmp280GetAltitude(Bmp280 *bmp,
						 double base)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b08b      	sub	sp, #44	; 0x2c
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	ed87 0b00 	vstr	d0, [r7]
	double alt;
	double t, p;

	Bmp280GetValuesInSi(bmp, &t, &p);
 8001964:	f107 0210 	add.w	r2, r7, #16
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	4619      	mov	r1, r3
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff ff42 	bl	80017f8 <Bmp280GetValuesInSi>
	p /= 100.0;
 8001974:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <Bmp280GetAltitude+0xa8>)
 800197e:	f7fe ff6f 	bl	8000860 <__aeabi_ddiv>
 8001982:	4603      	mov	r3, r0
 8001984:	460c      	mov	r4, r1
 8001986:	e9c7 3404 	strd	r3, r4, [r7, #16]

	alt = 44330.0 * (1.0 - pow(p / base, 0.1903));
 800198a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800198e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001992:	f7fe ff65 	bl	8000860 <__aeabi_ddiv>
 8001996:	4603      	mov	r3, r0
 8001998:	460c      	mov	r4, r1
 800199a:	ec44 3b17 	vmov	d7, r3, r4
 800199e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80019f0 <Bmp280GetAltitude+0x98>
 80019a2:	eeb0 0a47 	vmov.f32	s0, s14
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	f017 fd97 	bl	80194dc <pow>
 80019ae:	ec54 3b10 	vmov	r3, r4, d0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	f04f 0000 	mov.w	r0, #0
 80019ba:	4912      	ldr	r1, [pc, #72]	; (8001a04 <Bmp280GetAltitude+0xac>)
 80019bc:	f7fe fc6e 	bl	800029c <__aeabi_dsub>
 80019c0:	4603      	mov	r3, r0
 80019c2:	460c      	mov	r4, r1
 80019c4:	4618      	mov	r0, r3
 80019c6:	4621      	mov	r1, r4
 80019c8:	a30b      	add	r3, pc, #44	; (adr r3, 80019f8 <Bmp280GetAltitude+0xa0>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7fe fe1d 	bl	800060c <__aeabi_dmul>
 80019d2:	4603      	mov	r3, r0
 80019d4:	460c      	mov	r4, r1
 80019d6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	return alt;
 80019da:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019de:	ec44 3b17 	vmov	d7, r3, r4
}
 80019e2:	eeb0 0a47 	vmov.f32	s0, s14
 80019e6:	eef0 0a67 	vmov.f32	s1, s15
 80019ea:	372c      	adds	r7, #44	; 0x2c
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd90      	pop	{r4, r7, pc}
 80019f0:	1a36e2eb 	.word	0x1a36e2eb
 80019f4:	3fc85bc0 	.word	0x3fc85bc0
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40e5a540 	.word	0x40e5a540
 8001a00:	40590000 	.word	0x40590000
 8001a04:	3ff00000 	.word	0x3ff00000

08001a08 <DisplayCreate>:
void DisplayCreate(Display *display,
				   size_t n_places,
				   SPI_HandleTypeDef *hspi,
				   GPIO_TypeDef *port,
				   uint16_t pin)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
	display->hspi = hspi;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
	display->port = port;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	605a      	str	r2, [r3, #4]
	display->pin = pin;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8b3a      	ldrh	r2, [r7, #24]
 8001a26:	811a      	strh	r2, [r3, #8]
	display->transmit_timeout = 1000;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2e:	60da      	str	r2, [r3, #12]

	DisplayBufferCreate(&(display->display_buffer), n_places);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3310      	adds	r3, #16
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 f821 	bl	8003a7e <DisplayBufferCreate>
	DisplaySend(display);
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f804 	bl	8001a4a <DisplaySend>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <DisplaySend>:
{
	DisplayBufferDispose(&display->display_buffer);
}

HAL_StatusTypeDef DisplaySend(Display *display)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	/* Sending */
	ret = HAL_SPI_Transmit(display->hspi,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
						   display->display_buffer.buffer,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6919      	ldr	r1, [r3, #16]
						   display->display_buffer.buffer_size / sizeof(uint16_t),
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	085b      	lsrs	r3, r3, #1
	ret = HAL_SPI_Transmit(display->hspi,
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f00f fa61 	bl	8010f2c <HAL_SPI_Transmit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73fb      	strb	r3, [r7, #15]
						   display->transmit_timeout);
	HAL_GPIO_WritePin(display->port, display->pin, GPIO_PIN_SET);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6858      	ldr	r0, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	891b      	ldrh	r3, [r3, #8]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f00d fca1 	bl	800f3c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f00c f868 	bl	800db54 <HAL_Delay>
	HAL_GPIO_WritePin(display->port, display->pin, GPIO_PIN_RESET);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6858      	ldr	r0, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	891b      	ldrh	r3, [r3, #8]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f00d fc96 	bl	800f3c0 <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&hspi1, display->display_buffer.display_buffer, 7, 1000);
//		HAL_GPIO_TogglePin(LED_DATA_LATCH_GPIO_Port, LED_DATA_LATCH_Pin);
//		HAL_Delay(1);
//		HAL_GPIO_TogglePin(LED_DATA_LATCH_GPIO_Port, LED_DATA_LATCH_Pin);

	return ret;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <DisplayWrite>:

void DisplayWrite(Display *display,
				  Character str[],
                  Dot dot[],
                  size_t n)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
	DisplayBufferWrite(&display->display_buffer, str, dot, n);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f103 0010 	add.w	r0, r3, #16
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	f002 f80d 	bl	8003ad6 <DisplayBufferWrite>
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DisplaySync>:

	DisplayBufferWriteCharacters(&display->display_buffer, c, display->display_buffer.logical_size);
}

void DisplaySync(Display *display)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	DisplaySend(display);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffbc 	bl	8001a4a <DisplaySend>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <AsciiToCharacter>:
	DOT_HIGHLIGHT = 1
} Dot;
/* */

static inline Character AsciiToCharacter(char c)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	Character ch;

	switch (c) {
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	3b20      	subs	r3, #32
 8001aea:	2b5d      	cmp	r3, #93	; 0x5d
 8001aec:	f200 8202 	bhi.w	8001ef4 <AsciiToCharacter+0x418>
 8001af0:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <AsciiToCharacter+0x1c>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001e51 	.word	0x08001e51
 8001afc:	08001ef5 	.word	0x08001ef5
 8001b00:	08001eb9 	.word	0x08001eb9
 8001b04:	08001ec1 	.word	0x08001ec1
 8001b08:	08001ec9 	.word	0x08001ec9
 8001b0c:	08001ed1 	.word	0x08001ed1
 8001b10:	08001ed9 	.word	0x08001ed9
 8001b14:	08001eb3 	.word	0x08001eb3
 8001b18:	08001e85 	.word	0x08001e85
 8001b1c:	08001e8d 	.word	0x08001e8d
 8001b20:	08001ef5 	.word	0x08001ef5
 8001b24:	08001e5f 	.word	0x08001e5f
 8001b28:	08001ee1 	.word	0x08001ee1
 8001b2c:	08001e67 	.word	0x08001e67
 8001b30:	08001ee1 	.word	0x08001ee1
 8001b34:	08001e6f 	.word	0x08001e6f
 8001b38:	08001e01 	.word	0x08001e01
 8001b3c:	08001e09 	.word	0x08001e09
 8001b40:	08001e11 	.word	0x08001e11
 8001b44:	08001e19 	.word	0x08001e19
 8001b48:	08001e21 	.word	0x08001e21
 8001b4c:	08001e29 	.word	0x08001e29
 8001b50:	08001e31 	.word	0x08001e31
 8001b54:	08001e39 	.word	0x08001e39
 8001b58:	08001e41 	.word	0x08001e41
 8001b5c:	08001e49 	.word	0x08001e49
 8001b60:	08001ef5 	.word	0x08001ef5
 8001b64:	08001ef5 	.word	0x08001ef5
 8001b68:	08001e77 	.word	0x08001e77
 8001b6c:	08001e57 	.word	0x08001e57
 8001b70:	08001e7f 	.word	0x08001e7f
 8001b74:	08001ef5 	.word	0x08001ef5
 8001b78:	08001ef5 	.word	0x08001ef5
 8001b7c:	08001c71 	.word	0x08001c71
 8001b80:	08001c79 	.word	0x08001c79
 8001b84:	08001c81 	.word	0x08001c81
 8001b88:	08001c89 	.word	0x08001c89
 8001b8c:	08001c91 	.word	0x08001c91
 8001b90:	08001c99 	.word	0x08001c99
 8001b94:	08001ca1 	.word	0x08001ca1
 8001b98:	08001ca9 	.word	0x08001ca9
 8001b9c:	08001cb1 	.word	0x08001cb1
 8001ba0:	08001cb9 	.word	0x08001cb9
 8001ba4:	08001cc1 	.word	0x08001cc1
 8001ba8:	08001cc9 	.word	0x08001cc9
 8001bac:	08001cd1 	.word	0x08001cd1
 8001bb0:	08001cd9 	.word	0x08001cd9
 8001bb4:	08001ce1 	.word	0x08001ce1
 8001bb8:	08001ce9 	.word	0x08001ce9
 8001bbc:	08001cf1 	.word	0x08001cf1
 8001bc0:	08001cf9 	.word	0x08001cf9
 8001bc4:	08001d01 	.word	0x08001d01
 8001bc8:	08001d09 	.word	0x08001d09
 8001bcc:	08001d11 	.word	0x08001d11
 8001bd0:	08001d19 	.word	0x08001d19
 8001bd4:	08001d21 	.word	0x08001d21
 8001bd8:	08001d29 	.word	0x08001d29
 8001bdc:	08001d31 	.word	0x08001d31
 8001be0:	08001d39 	.word	0x08001d39
 8001be4:	08001e93 	.word	0x08001e93
 8001be8:	08001ef5 	.word	0x08001ef5
 8001bec:	08001e9b 	.word	0x08001e9b
 8001bf0:	08001ef5 	.word	0x08001ef5
 8001bf4:	08001eed 	.word	0x08001eed
 8001bf8:	08001ef5 	.word	0x08001ef5
 8001bfc:	08001d41 	.word	0x08001d41
 8001c00:	08001d49 	.word	0x08001d49
 8001c04:	08001d51 	.word	0x08001d51
 8001c08:	08001d59 	.word	0x08001d59
 8001c0c:	08001d61 	.word	0x08001d61
 8001c10:	08001d69 	.word	0x08001d69
 8001c14:	08001d71 	.word	0x08001d71
 8001c18:	08001d79 	.word	0x08001d79
 8001c1c:	08001d7f 	.word	0x08001d7f
 8001c20:	08001d85 	.word	0x08001d85
 8001c24:	08001d8d 	.word	0x08001d8d
 8001c28:	08001d95 	.word	0x08001d95
 8001c2c:	08001d9b 	.word	0x08001d9b
 8001c30:	08001da3 	.word	0x08001da3
 8001c34:	08001da9 	.word	0x08001da9
 8001c38:	08001db1 	.word	0x08001db1
 8001c3c:	08001db7 	.word	0x08001db7
 8001c40:	08001dbd 	.word	0x08001dbd
 8001c44:	08001dc3 	.word	0x08001dc3
 8001c48:	08001dcb 	.word	0x08001dcb
 8001c4c:	08001dd3 	.word	0x08001dd3
 8001c50:	08001ddb 	.word	0x08001ddb
 8001c54:	08001de1 	.word	0x08001de1
 8001c58:	08001de9 	.word	0x08001de9
 8001c5c:	08001df1 	.word	0x08001df1
 8001c60:	08001df9 	.word	0x08001df9
 8001c64:	08001ea3 	.word	0x08001ea3
 8001c68:	08001ee7 	.word	0x08001ee7
 8001c6c:	08001eab 	.word	0x08001eab
	case 'A':
		ch = CH_A;
 8001c70:	f642 5399 	movw	r3, #11673	; 0x2d99
 8001c74:	81fb      	strh	r3, [r7, #14]
		break;
 8001c76:	e141      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'B':
		ch = CH_B;
 8001c78:	f64e 53c4 	movw	r3, #60868	; 0xedc4
 8001c7c:	81fb      	strh	r3, [r7, #14]
		break;
 8001c7e:	e13d      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'C':
		ch = CH_C;
 8001c80:	f24c 1391 	movw	r3, #49553	; 0xc191
 8001c84:	81fb      	strh	r3, [r7, #14]
		break;
 8001c86:	e139      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'D':
		ch = CH_D;
 8001c88:	f24e 53c4 	movw	r3, #58820	; 0xe5c4
 8001c8c:	81fb      	strh	r3, [r7, #14]
		break;
 8001c8e:	e135      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'E':
		ch = CH_E;
 8001c90:	f64c 1399 	movw	r3, #51609	; 0xc999
 8001c94:	81fb      	strh	r3, [r7, #14]
		break;
 8001c96:	e131      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'F':
		ch = CH_F;
 8001c98:	f640 1399 	movw	r3, #2457	; 0x999
 8001c9c:	81fb      	strh	r3, [r7, #14]
		break;
 8001c9e:	e12d      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'G':
		ch = CH_G;
 8001ca0:	f64e 1391 	movw	r3, #59793	; 0xe991
 8001ca4:	81fb      	strh	r3, [r7, #14]
		break;
 8001ca6:	e129      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'H':
		ch = CH_H;
 8001ca8:	f642 4319 	movw	r3, #11289	; 0x2c19
 8001cac:	81fb      	strh	r3, [r7, #14]
		break;
 8001cae:	e125      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'I':
		ch = CH_I;
 8001cb0:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
 8001cb4:	81fb      	strh	r3, [r7, #14]
		break;
 8001cb6:	e121      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'J':
		ch = CH_J;
 8001cb8:	f24e 4301 	movw	r3, #58369	; 0xe401
 8001cbc:	81fb      	strh	r3, [r7, #14]
		break;
 8001cbe:	e11d      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'K':
		ch = CH_K;
 8001cc0:	f241 2319 	movw	r3, #4633	; 0x1219
 8001cc4:	81fb      	strh	r3, [r7, #14]
		break;
 8001cc6:	e119      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'L':
		ch = CH_L;
 8001cc8:	f24c 0311 	movw	r3, #49169	; 0xc011
 8001ccc:	81fb      	strh	r3, [r7, #14]
		break;
 8001cce:	e115      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'M':
		ch = CH_M;
 8001cd0:	f242 6331 	movw	r3, #9777	; 0x2631
 8001cd4:	81fb      	strh	r3, [r7, #14]
		break;
 8001cd6:	e111      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'N':
		ch = CH_N;
 8001cd8:	f243 4331 	movw	r3, #13361	; 0x3431
 8001cdc:	81fb      	strh	r3, [r7, #14]
		break;
 8001cde:	e10d      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'O':
		ch = CH_O;
 8001ce0:	f24e 5391 	movw	r3, #58769	; 0xe591
 8001ce4:	81fb      	strh	r3, [r7, #14]
		break;
 8001ce6:	e109      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'P':
		ch = CH_P;
 8001ce8:	f640 5399 	movw	r3, #3481	; 0xd99
 8001cec:	81fb      	strh	r3, [r7, #14]
		break;
 8001cee:	e105      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'Q':
		ch = CH_Q;
 8001cf0:	f24f 5391 	movw	r3, #62865	; 0xf591
 8001cf4:	81fb      	strh	r3, [r7, #14]
		break;
 8001cf6:	e101      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'R':
		ch = CH_R;
 8001cf8:	f641 5399 	movw	r3, #7577	; 0x1d99
 8001cfc:	81fb      	strh	r3, [r7, #14]
		break;
 8001cfe:	e0fd      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'S':
		ch = CH_S;
 8001d00:	f64e 1398 	movw	r3, #59800	; 0xe998
 8001d04:	81fb      	strh	r3, [r7, #14]
		break;
 8001d06:	e0f9      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'T':
		ch = CH_T;
 8001d08:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8001d0c:	81fb      	strh	r3, [r7, #14]
		break;
 8001d0e:	e0f5      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'U':
		ch = CH_U;
 8001d10:	f24e 4311 	movw	r3, #58385	; 0xe411
 8001d14:	81fb      	strh	r3, [r7, #14]
		break;
 8001d16:	e0f1      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'V':
		ch = CH_V;
 8001d18:	f240 2313 	movw	r3, #531	; 0x213
 8001d1c:	81fb      	strh	r3, [r7, #14]
		break;
 8001d1e:	e0ed      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'W':
		ch = CH_W;
 8001d20:	f243 4313 	movw	r3, #13331	; 0x3413
 8001d24:	81fb      	strh	r3, [r7, #14]
		break;
 8001d26:	e0e9      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'X':
		ch = CH_X;
 8001d28:	f241 2322 	movw	r3, #4642	; 0x1222
 8001d2c:	81fb      	strh	r3, [r7, #14]
		break;
 8001d2e:	e0e5      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'Y':
		ch = CH_Y;
 8001d30:	f64e 4318 	movw	r3, #60440	; 0xec18
 8001d34:	81fb      	strh	r3, [r7, #14]
		break;
 8001d36:	e0e1      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'Z':
		ch = CH_Z;
 8001d38:	f24c 3382 	movw	r3, #50050	; 0xc382
 8001d3c:	81fb      	strh	r3, [r7, #14]
		break;
 8001d3e:	e0dd      	b.n	8001efc <AsciiToCharacter+0x420>

	case 'a':
		ch = CH_a;
 8001d40:	f24c 030d 	movw	r3, #49165	; 0xc00d
 8001d44:	81fb      	strh	r3, [r7, #14]
		break;
 8001d46:	e0d9      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'b':
		ch = CH_b;
 8001d48:	f244 031d 	movw	r3, #16413	; 0x401d
 8001d4c:	81fb      	strh	r3, [r7, #14]
		break;
 8001d4e:	e0d5      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'c':
		ch = CH_c;
 8001d50:	f244 0309 	movw	r3, #16393	; 0x4009
 8001d54:	81fb      	strh	r3, [r7, #14]
		break;
 8001d56:	e0d1      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'd':
		ch = CH_d;
 8001d58:	f64a 4304 	movw	r3, #44036	; 0xac04
 8001d5c:	81fb      	strh	r3, [r7, #14]
		break;
 8001d5e:	e0cd      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'e':
		ch = CH_e;
 8001d60:	f244 030b 	movw	r3, #16395	; 0x400b
 8001d64:	81fb      	strh	r3, [r7, #14]
		break;
 8001d66:	e0c9      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'f':
		ch = CH_f;
 8001d68:	f640 134c 	movw	r3, #2380	; 0x94c
 8001d6c:	81fb      	strh	r3, [r7, #14]
		break;
 8001d6e:	e0c5      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'g':
		ch = CH_g;
 8001d70:	f244 03dc 	movw	r3, #16604	; 0x40dc
 8001d74:	81fb      	strh	r3, [r7, #14]
		break;
 8001d76:	e0c1      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'h':
		ch = CH_h;
 8001d78:	231d      	movs	r3, #29
 8001d7a:	81fb      	strh	r3, [r7, #14]
		break;
 8001d7c:	e0be      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'i':
		ch = CH_i;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	81fb      	strh	r3, [r7, #14]
		break;
 8001d82:	e0bb      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'j':
		ch = CH_j;
 8001d84:	f244 0345 	movw	r3, #16453	; 0x4045
 8001d88:	81fb      	strh	r3, [r7, #14]
		break;
 8001d8a:	e0b7      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'k':
		ch = CH_k;
 8001d8c:	f241 2344 	movw	r3, #4676	; 0x1244
 8001d90:	81fb      	strh	r3, [r7, #14]
		break;
 8001d92:	e0b3      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'l':
		ch = CH_l;
 8001d94:	2311      	movs	r3, #17
 8001d96:	81fb      	strh	r3, [r7, #14]
		break;
 8001d98:	e0b0      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'm':
		ch = CH_m;
 8001d9a:	f642 030d 	movw	r3, #10253	; 0x280d
 8001d9e:	81fb      	strh	r3, [r7, #14]
		break;
 8001da0:	e0ac      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'n':
		ch = CH_n;
 8001da2:	230d      	movs	r3, #13
 8001da4:	81fb      	strh	r3, [r7, #14]
		break;
 8001da6:	e0a9      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'o':
		ch = CH_o;
 8001da8:	f244 030d 	movw	r3, #16397	; 0x400d
 8001dac:	81fb      	strh	r3, [r7, #14]
		break;
 8001dae:	e0a5      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'p':
		ch = CH_p;
 8001db0:	23d9      	movs	r3, #217	; 0xd9
 8001db2:	81fb      	strh	r3, [r7, #14]
		break;
 8001db4:	e0a2      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'q':
		ch = CH_q;
 8001db6:	23dc      	movs	r3, #220	; 0xdc
 8001db8:	81fb      	strh	r3, [r7, #14]
		break;
 8001dba:	e09f      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'r':
		ch = CH_r;
 8001dbc:	2309      	movs	r3, #9
 8001dbe:	81fb      	strh	r3, [r7, #14]
		break;
 8001dc0:	e09c      	b.n	8001efc <AsciiToCharacter+0x420>
	case 's':
		ch = CH_s;
 8001dc2:	f244 039c 	movw	r3, #16540	; 0x409c
 8001dc6:	81fb      	strh	r3, [r7, #14]
		break;
 8001dc8:	e098      	b.n	8001efc <AsciiToCharacter+0x420>
	case 't':
		ch = CH_t;
 8001dca:	f244 0319 	movw	r3, #16409	; 0x4019
 8001dce:	81fb      	strh	r3, [r7, #14]
		break;
 8001dd0:	e094      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'u':
		ch = CH_u;
 8001dd2:	f244 0305 	movw	r3, #16389	; 0x4005
 8001dd6:	81fb      	strh	r3, [r7, #14]
		break;
 8001dd8:	e090      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'v':
		ch = CH_v;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	81fb      	strh	r3, [r7, #14]
		break;
 8001dde:	e08d      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'w':
		ch = CH_w;
 8001de0:	f243 0303 	movw	r3, #12291	; 0x3003
 8001de4:	81fb      	strh	r3, [r7, #14]
		break;
 8001de6:	e089      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'x':
		ch = CH_x;
 8001de8:	f241 2322 	movw	r3, #4642	; 0x1222
 8001dec:	81fb      	strh	r3, [r7, #14]
		break;
 8001dee:	e085      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'y':
		ch = CH_y;
 8001df0:	f64a 4340 	movw	r3, #44096	; 0xac40
 8001df4:	81fb      	strh	r3, [r7, #14]
		break;
 8001df6:	e081      	b.n	8001efc <AsciiToCharacter+0x420>
	case 'z':
		ch = CH_z;
 8001df8:	f244 030a 	movw	r3, #16394	; 0x400a
 8001dfc:	81fb      	strh	r3, [r7, #14]
		break;
 8001dfe:	e07d      	b.n	8001efc <AsciiToCharacter+0x420>

	case '0':
		ch = CH_0;
 8001e00:	f24e 5391 	movw	r3, #58769	; 0xe591
 8001e04:	81fb      	strh	r3, [r7, #14]
		break;
 8001e06:	e079      	b.n	8001efc <AsciiToCharacter+0x420>
	case '1':
		ch = CH_1;
 8001e08:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8001e0c:	81fb      	strh	r3, [r7, #14]
		break;
 8001e0e:	e075      	b.n	8001efc <AsciiToCharacter+0x420>
	case '2':
		ch = CH_2;
 8001e10:	f64c 5389 	movw	r3, #52617	; 0xcd89
 8001e14:	81fb      	strh	r3, [r7, #14]
		break;
 8001e16:	e071      	b.n	8001efc <AsciiToCharacter+0x420>
	case '3':
		ch = CH_3;
 8001e18:	f64e 5380 	movw	r3, #60800	; 0xed80
 8001e1c:	81fb      	strh	r3, [r7, #14]
		break;
 8001e1e:	e06d      	b.n	8001efc <AsciiToCharacter+0x420>
	case '4':
		ch = CH_4;
 8001e20:	f642 4318 	movw	r3, #11288	; 0x2c18
 8001e24:	81fb      	strh	r3, [r7, #14]
		break;
 8001e26:	e069      	b.n	8001efc <AsciiToCharacter+0x420>
	case '5':
		ch = CH_5;
 8001e28:	f64e 1398 	movw	r3, #59800	; 0xe998
 8001e2c:	81fb      	strh	r3, [r7, #14]
		break;
 8001e2e:	e065      	b.n	8001efc <AsciiToCharacter+0x420>
	case '6':
		ch = CH_6;
 8001e30:	f64e 1399 	movw	r3, #59801	; 0xe999
 8001e34:	81fb      	strh	r3, [r7, #14]
		break;
 8001e36:	e061      	b.n	8001efc <AsciiToCharacter+0x420>
	case '7':
		ch = CH_7;
 8001e38:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001e3c:	81fb      	strh	r3, [r7, #14]
		break;
 8001e3e:	e05d      	b.n	8001efc <AsciiToCharacter+0x420>
	case '8':
		ch = CH_8;
 8001e40:	f64e 5399 	movw	r3, #60825	; 0xed99
 8001e44:	81fb      	strh	r3, [r7, #14]
		break;
 8001e46:	e059      	b.n	8001efc <AsciiToCharacter+0x420>
	case '9':
		ch = CH_9;
 8001e48:	f64e 5398 	movw	r3, #60824	; 0xed98
 8001e4c:	81fb      	strh	r3, [r7, #14]
		break;
 8001e4e:	e055      	b.n	8001efc <AsciiToCharacter+0x420>

	case ' ':
		ch = CH_BLANK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	81fb      	strh	r3, [r7, #14]
		break;
 8001e54:	e052      	b.n	8001efc <AsciiToCharacter+0x420>
	case '=':
		ch = CH_EQ;
 8001e56:	f64c 0308 	movw	r3, #51208	; 0xc808
 8001e5a:	81fb      	strh	r3, [r7, #14]
		break;
 8001e5c:	e04e      	b.n	8001efc <AsciiToCharacter+0x420>
	case '+':
		ch = CH_PLUS;
 8001e5e:	f640 034c 	movw	r3, #2124	; 0x84c
 8001e62:	81fb      	strh	r3, [r7, #14]
		break;
 8001e64:	e04a      	b.n	8001efc <AsciiToCharacter+0x420>
	case '-':
		ch = CH_MINUS;
 8001e66:	f640 0308 	movw	r3, #2056	; 0x808
 8001e6a:	81fb      	strh	r3, [r7, #14]
		break;
 8001e6c:	e046      	b.n	8001efc <AsciiToCharacter+0x420>
	case '/':
		ch = CH_DIVISION;
 8001e6e:	f240 2302 	movw	r3, #514	; 0x202
 8001e72:	81fb      	strh	r3, [r7, #14]
		break;
 8001e74:	e042      	b.n	8001efc <AsciiToCharacter+0x420>
	case '<':
		ch = CH_LESS;
 8001e76:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001e7a:	81fb      	strh	r3, [r7, #14]
		break;
 8001e7c:	e03e      	b.n	8001efc <AsciiToCharacter+0x420>
	case '>':
		ch = CH_MORE;
 8001e7e:	2322      	movs	r3, #34	; 0x22
 8001e80:	81fb      	strh	r3, [r7, #14]
		break;
 8001e82:	e03b      	b.n	8001efc <AsciiToCharacter+0x420>

	case '(':
		ch = CH_OPEN_ROUND_BRACKET;
 8001e84:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001e88:	81fb      	strh	r3, [r7, #14]
		break;
 8001e8a:	e037      	b.n	8001efc <AsciiToCharacter+0x420>
	case ')':
		ch = CH_CLOSE_ROUND_BRACKET;
 8001e8c:	2322      	movs	r3, #34	; 0x22
 8001e8e:	81fb      	strh	r3, [r7, #14]
		break;
 8001e90:	e034      	b.n	8001efc <AsciiToCharacter+0x420>
	case '[':
		ch = CH_OPEN_SQUARE_BRACKET;
 8001e92:	f248 1344 	movw	r3, #33092	; 0x8144
 8001e96:	81fb      	strh	r3, [r7, #14]
		break;
 8001e98:	e030      	b.n	8001efc <AsciiToCharacter+0x420>
	case ']':
		ch = CH_CLOSE_SQUARE_BRACKET;
 8001e9a:	f244 03c4 	movw	r3, #16580	; 0x40c4
 8001e9e:	81fb      	strh	r3, [r7, #14]
		break;
 8001ea0:	e02c      	b.n	8001efc <AsciiToCharacter+0x420>
	case '{':
		ch = CH_OPEN_CURLY_BRACKET;
 8001ea2:	f248 134c 	movw	r3, #33100	; 0x814c
 8001ea6:	81fb      	strh	r3, [r7, #14]
		break;
 8001ea8:	e028      	b.n	8001efc <AsciiToCharacter+0x420>
	case '}':
		ch = CH_CLOSE_CURLY_BRACKET;
 8001eaa:	f644 03c4 	movw	r3, #18628	; 0x48c4
 8001eae:	81fb      	strh	r3, [r7, #14]
		break;
 8001eb0:	e024      	b.n	8001efc <AsciiToCharacter+0x420>

	case '\'':
		ch = CH_APOSTROPHE;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	81fb      	strh	r3, [r7, #14]
		break;
 8001eb6:	e021      	b.n	8001efc <AsciiToCharacter+0x420>
	case '"':
		ch = CH_QUOTE;
 8001eb8:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001ebc:	81fb      	strh	r3, [r7, #14]
		break;
 8001ebe:	e01d      	b.n	8001efc <AsciiToCharacter+0x420>
	case '#':
		ch = CH_NUMBER;
 8001ec0:	f64e 434c 	movw	r3, #60492	; 0xec4c
 8001ec4:	81fb      	strh	r3, [r7, #14]
		break;
 8001ec6:	e019      	b.n	8001efc <AsciiToCharacter+0x420>
	case '$':
		ch = CH_DOLLAR;
 8001ec8:	f64e 13dc 	movw	r3, #59868	; 0xe9dc
 8001ecc:	81fb      	strh	r3, [r7, #14]
		break;
 8001ece:	e015      	b.n	8001efc <AsciiToCharacter+0x420>
	case '%':
		ch = CH_PERSENT;
 8001ed0:	f64a 23de 	movw	r3, #43742	; 0xaade
 8001ed4:	81fb      	strh	r3, [r7, #14]
		break;
 8001ed6:	e011      	b.n	8001efc <AsciiToCharacter+0x420>
	case '&':
		ch = CH_AMP;
 8001ed8:	f24d 03e9 	movw	r3, #53481	; 0xd0e9
 8001edc:	81fb      	strh	r3, [r7, #14]
		break;
 8001ede:	e00d      	b.n	8001efc <AsciiToCharacter+0x420>
	case ',':
	case '.':
		ch = CH_COMMA;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	81fb      	strh	r3, [r7, #14]
		break;
 8001ee4:	e00a      	b.n	8001efc <AsciiToCharacter+0x420>
	case '|':
		ch = CH_BROKEN_BAR;
 8001ee6:	2344      	movs	r3, #68	; 0x44
 8001ee8:	81fb      	strh	r3, [r7, #14]
		break;
 8001eea:	e007      	b.n	8001efc <AsciiToCharacter+0x420>
	case '_':
		ch = CH_UNDERSCORE;
 8001eec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ef0:	81fb      	strh	r3, [r7, #14]
		break;
 8001ef2:	e003      	b.n	8001efc <AsciiToCharacter+0x420>

	default:
		ch = CH_ASTERISK;
 8001ef4:	f641 236e 	movw	r3, #6766	; 0x1a6e
 8001ef8:	81fb      	strh	r3, [r7, #14]
		break;
 8001efa:	bf00      	nop
	}

	return ch;
 8001efc:	89fb      	ldrh	r3, [r7, #14]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop

08001f0c <Display_Msg>:
#include <math.h>

void Display_Msg(Display *display,
                 Character msg[],
                 size_t n_places)
{
 8001f0c:	b5b0      	push	{r4, r5, r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	466b      	mov	r3, sp
 8001f1a:	461d      	mov	r5, r3
    Dot d[n_places];
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4603      	mov	r3, r0
 8001f20:	3b01      	subs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	4601      	mov	r1, r0
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	f04f 0400 	mov.w	r4, #0
 8001f32:	00d4      	lsls	r4, r2, #3
 8001f34:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f38:	00cb      	lsls	r3, r1, #3
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	f04f 0400 	mov.w	r4, #0
 8001f48:	00d4      	lsls	r4, r2, #3
 8001f4a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f4e:	00cb      	lsls	r3, r1, #3
 8001f50:	1dc3      	adds	r3, r0, #7
 8001f52:	08db      	lsrs	r3, r3, #3
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	ebad 0d03 	sub.w	sp, sp, r3
 8001f5a:	466b      	mov	r3, sp
 8001f5c:	3300      	adds	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]

    d[0] = DOT_OBSCURE;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_OBSCURE;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2200      	movs	r2, #0
 8001f76:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2200      	movs	r2, #0
 8001f82:	715a      	strb	r2, [r3, #5]

    DisplayWrite(display, msg, d, n_places);
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fd87 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fd97 	bl	8001ac4 <DisplaySync>
 8001f96:	46ad      	mov	sp, r5
}
 8001f98:	bf00      	nop
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bdb0      	pop	{r4, r5, r7, pc}

08001fa0 <Display_S1_1>:

void Display_S1_1(Display *display,
                  Rtc_Timestamp *ts)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	466b      	mov	r3, sp
 8001fac:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8001fae:	2306      	movs	r3, #6
 8001fb0:	61bb      	str	r3, [r7, #24]
    Character c[n_places];
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	f04f 0400 	mov.w	r4, #0
 8001fc8:	0114      	lsls	r4, r2, #4
 8001fca:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001fce:	010b      	lsls	r3, r1, #4
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	0114      	lsls	r4, r2, #4
 8001fe2:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001fe6:	010b      	lsls	r3, r1, #4
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	3301      	adds	r3, #1
 8001fee:	3307      	adds	r3, #7
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ff8:	466b      	mov	r3, sp
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	617b      	str	r3, [r7, #20]
    Dot d[n_places];
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	3b01      	subs	r3, #1
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	4619      	mov	r1, r3
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	f04f 0400 	mov.w	r4, #0
 8002018:	00d4      	lsls	r4, r2, #3
 800201a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800201e:	00cb      	lsls	r3, r1, #3
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	00d4      	lsls	r4, r2, #3
 8002032:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002036:	00cb      	lsls	r3, r1, #3
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3307      	adds	r3, #7
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	ebad 0d03 	sub.w	sp, sp, r3
 8002044:	466b      	mov	r3, sp
 8002046:	3300      	adds	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]

    uint8_t h1, h2;
    uint8_t m1, m2;

    h1 = ts->hour / 10;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	789b      	ldrb	r3, [r3, #2]
 800204e:	4a40      	ldr	r2, [pc, #256]	; (8002150 <Display_S1_1+0x1b0>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	72fb      	strb	r3, [r7, #11]
    h2 = ts->hour % 10;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	789a      	ldrb	r2, [r3, #2]
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <Display_S1_1+0x1b0>)
 800205e:	fba3 1302 	umull	r1, r3, r3, r2
 8002062:	08d9      	lsrs	r1, r3, #3
 8002064:	460b      	mov	r3, r1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	72bb      	strb	r3, [r7, #10]
    h1 += 0x30;
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	3330      	adds	r3, #48	; 0x30
 8002074:	72fb      	strb	r3, [r7, #11]
    h2 += 0x30;
 8002076:	7abb      	ldrb	r3, [r7, #10]
 8002078:	3330      	adds	r3, #48	; 0x30
 800207a:	72bb      	strb	r3, [r7, #10]

    c[4 - 1] = AsciiToCharacter((char) h2);
 800207c:	7abb      	ldrb	r3, [r7, #10]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fd2c 	bl	8001adc <AsciiToCharacter>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	80da      	strh	r2, [r3, #6]

    if (h1 != 0x30)
 800208c:	7afb      	ldrb	r3, [r7, #11]
 800208e:	2b30      	cmp	r3, #48	; 0x30
 8002090:	d008      	beq.n	80020a4 <Display_S1_1+0x104>
        c[5 - 1] = AsciiToCharacter((char) h1);
 8002092:	7afb      	ldrb	r3, [r7, #11]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fd21 	bl	8001adc <AsciiToCharacter>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	811a      	strh	r2, [r3, #8]
 80020a2:	e002      	b.n	80020aa <Display_S1_1+0x10a>
    else
        c[5 - 1] = CH_BLANK;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2200      	movs	r2, #0
 80020a8:	811a      	strh	r2, [r3, #8]

    m1 = ts->min / 10;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	785b      	ldrb	r3, [r3, #1]
 80020ae:	4a28      	ldr	r2, [pc, #160]	; (8002150 <Display_S1_1+0x1b0>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	727b      	strb	r3, [r7, #9]
    m2 = ts->min % 10;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	785a      	ldrb	r2, [r3, #1]
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <Display_S1_1+0x1b0>)
 80020be:	fba3 1302 	umull	r1, r3, r3, r2
 80020c2:	08d9      	lsrs	r1, r3, #3
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	723b      	strb	r3, [r7, #8]
    m1 += 0x30;
 80020d0:	7a7b      	ldrb	r3, [r7, #9]
 80020d2:	3330      	adds	r3, #48	; 0x30
 80020d4:	727b      	strb	r3, [r7, #9]
    m2 += 0x30;
 80020d6:	7a3b      	ldrb	r3, [r7, #8]
 80020d8:	3330      	adds	r3, #48	; 0x30
 80020da:	723b      	strb	r3, [r7, #8]
    c[2 - 1] = AsciiToCharacter((char) m2);
 80020dc:	7a3b      	ldrb	r3, [r7, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fcfc 	bl	8001adc <AsciiToCharacter>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	805a      	strh	r2, [r3, #2]
    c[3 - 1] = AsciiToCharacter((char) m1);
 80020ec:	7a7b      	ldrb	r3, [r7, #9]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fcf4 	bl	8001adc <AsciiToCharacter>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	809a      	strh	r2, [r3, #4]

    c[0] = AsciiToCharacter((char) ' ');
 80020fc:	2020      	movs	r0, #32
 80020fe:	f7ff fced 	bl	8001adc <AsciiToCharacter>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	801a      	strh	r2, [r3, #0]
    c[5] = CH_BLANK;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2200      	movs	r2, #0
 800210e:	815a      	strh	r2, [r3, #10]

    d[0] = DOT_OBSCURE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_OBSCURE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_HIGHLIGHT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	715a      	strb	r2, [r3, #5]

    DisplayWrite(display, c, d, n_places);
 8002134:	6979      	ldr	r1, [r7, #20]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fcaf 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fcbf 	bl	8001ac4 <DisplaySync>
 8002146:	46ad      	mov	sp, r5
}
 8002148:	bf00      	nop
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bdb0      	pop	{r4, r5, r7, pc}
 8002150:	cccccccd 	.word	0xcccccccd

08002154 <Display_S1_1_Msg>:

void Display_S1_1_Msg(Display *display)
{
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	466b      	mov	r3, sp
 800215e:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8002160:	2306      	movs	r3, #6
 8002162:	613b      	str	r3, [r7, #16]
    Character c[n_places];
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	3b01      	subs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4619      	mov	r1, r3
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	f04f 0400 	mov.w	r4, #0
 800217a:	0114      	lsls	r4, r2, #4
 800217c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002180:	010b      	lsls	r3, r1, #4
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f04f 0400 	mov.w	r4, #0
 8002192:	0114      	lsls	r4, r2, #4
 8002194:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002198:	010b      	lsls	r3, r1, #4
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	3301      	adds	r3, #1
 80021a0:	3307      	adds	r3, #7
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	ebad 0d03 	sub.w	sp, sp, r3
 80021aa:	466b      	mov	r3, sp
 80021ac:	3301      	adds	r3, #1
 80021ae:	085b      	lsrs	r3, r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]

    c[5] = CH_B;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f64e 52c4 	movw	r2, #60868	; 0xedc4
 80021ba:	815a      	strh	r2, [r3, #10]
    c[4] = CH_O;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f24e 5291 	movw	r2, #58769	; 0xe591
 80021c2:	811a      	strh	r2, [r3, #8]
    c[3] = CH_C;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f24c 1291 	movw	r2, #49553	; 0xc191
 80021ca:	80da      	strh	r2, [r3, #6]
    c[2] = CH_X;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f241 2222 	movw	r2, #4642	; 0x1222
 80021d2:	809a      	strh	r2, [r3, #4]
    c[1] = CH_O;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f24e 5291 	movw	r2, #58769	; 0xe591
 80021da:	805a      	strh	r2, [r3, #2]
    c[0] = CH_D_rus;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f24e 6202 	movw	r2, #58882	; 0xe602
 80021e2:	801a      	strh	r2, [r3, #0]

    Display_Msg(display, c, n_places);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fe8e 	bl	8001f0c <Display_Msg>
 80021f0:	46ad      	mov	sp, r5
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bdb0      	pop	{r4, r5, r7, pc}

080021fa <Display_S2_1_Msg>:

void Display_S2_1_Msg(Display *display)
{
 80021fa:	b5b0      	push	{r4, r5, r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	466b      	mov	r3, sp
 8002204:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8002206:	2306      	movs	r3, #6
 8002208:	613b      	str	r3, [r7, #16]
    Character c[n_places];
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	3b01      	subs	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f04f 0400 	mov.w	r4, #0
 8002220:	0114      	lsls	r4, r2, #4
 8002222:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002226:	010b      	lsls	r3, r1, #4
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f04f 0400 	mov.w	r4, #0
 8002238:	0114      	lsls	r4, r2, #4
 800223a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800223e:	010b      	lsls	r3, r1, #4
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	3301      	adds	r3, #1
 8002246:	3307      	adds	r3, #7
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	ebad 0d03 	sub.w	sp, sp, r3
 8002250:	466b      	mov	r3, sp
 8002252:	3301      	adds	r3, #1
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	60fb      	str	r3, [r7, #12]

    c[5] = CH_3;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f64e 5280 	movw	r2, #60800	; 0xed80
 8002260:	815a      	strh	r2, [r3, #10]
    c[4] = CH_A;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f642 5299 	movw	r2, #11673	; 0x2d99
 8002268:	811a      	strh	r2, [r3, #8]
    c[3] = CH_X;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f241 2222 	movw	r2, #4642	; 0x1222
 8002270:	80da      	strh	r2, [r3, #6]
    c[2] = CH_O;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f24e 5291 	movw	r2, #58769	; 0xe591
 8002278:	809a      	strh	r2, [r3, #4]
    c[1] = CH_D_rus;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f24e 6202 	movw	r2, #58882	; 0xe602
 8002280:	805a      	strh	r2, [r3, #2]
    c[0] = CH_BLANK;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]

    Display_Msg(display, c, n_places);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fe3c 	bl	8001f0c <Display_Msg>
 8002294:	46ad      	mov	sp, r5
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080022a0 <Display_P1>:

void Display_P1(Display *display,
			    double pressure)
{
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	ed87 0b00 	vstr	d0, [r7]
 80022ac:	466b      	mov	r3, sp
 80022ae:	461d      	mov	r5, r3
    const size_t n_places = 6;
 80022b0:	2306      	movs	r3, #6
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
    Character c[n_places];
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	3b01      	subs	r3, #1
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	f04f 0400 	mov.w	r4, #0
 80022ca:	0114      	lsls	r4, r2, #4
 80022cc:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80022d0:	010b      	lsls	r3, r1, #4
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	4619      	mov	r1, r3
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	f04f 0400 	mov.w	r4, #0
 80022e2:	0114      	lsls	r4, r2, #4
 80022e4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80022e8:	010b      	lsls	r3, r1, #4
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	3301      	adds	r3, #1
 80022f0:	3307      	adds	r3, #7
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	ebad 0d03 	sub.w	sp, sp, r3
 80022fa:	466b      	mov	r3, sp
 80022fc:	3301      	adds	r3, #1
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    Dot d[n_places];
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	3b01      	subs	r3, #1
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	4619      	mov	r1, r3
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	f04f 0400 	mov.w	r4, #0
 800231a:	00d4      	lsls	r4, r2, #3
 800231c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002320:	00cb      	lsls	r3, r1, #3
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	4619      	mov	r1, r3
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	00d4      	lsls	r4, r2, #3
 8002334:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002338:	00cb      	lsls	r3, r1, #3
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	3307      	adds	r3, #7
 800233e:	08db      	lsrs	r3, r3, #3
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	ebad 0d03 	sub.w	sp, sp, r3
 8002346:	466b      	mov	r3, sp
 8002348:	3300      	adds	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
    uint16_t p_int = pressure * 10.0;
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4b5b      	ldr	r3, [pc, #364]	; (80024c0 <Display_P1+0x220>)
 8002352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002356:	f7fe f959 	bl	800060c <__aeabi_dmul>
 800235a:	4603      	mov	r3, r0
 800235c:	460c      	mov	r4, r1
 800235e:	4618      	mov	r0, r3
 8002360:	4621      	mov	r1, r4
 8002362:	f7fe fc2b 	bl	8000bbc <__aeabi_d2uiz>
 8002366:	4603      	mov	r3, r0
 8002368:	837b      	strh	r3, [r7, #26]

    d[0] = DOT_OBSCURE;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_HIGHLIGHT;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2201      	movs	r2, #1
 8002374:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_OBSCURE;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	2200      	movs	r2, #0
 800237a:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2200      	movs	r2, #0
 8002380:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2200      	movs	r2, #0
 8002386:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2200      	movs	r2, #0
 800238c:	715a      	strb	r2, [r3, #5]

    c[5] = CH_P;
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f640 5299 	movw	r2, #3481	; 0xd99
 8002394:	815a      	strh	r2, [r3, #10]
    c[4] = CH_r;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	2209      	movs	r2, #9
 800239a:	811a      	strh	r2, [r3, #8]
    c[3] = CH_BLANK;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	2200      	movs	r2, #0
 80023a0:	80da      	strh	r2, [r3, #6]

    Character tmp;
    int blank_flag = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]

    tmp = AsciiToCharacter((int)(p_int / 1000) % 10 + 0x30);
 80023a6:	8b7b      	ldrh	r3, [r7, #26]
 80023a8:	4a46      	ldr	r2, [pc, #280]	; (80024c4 <Display_P1+0x224>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b45      	ldr	r3, [pc, #276]	; (80024c8 <Display_P1+0x228>)
 80023b4:	fba3 1302 	umull	r1, r3, r3, r2
 80023b8:	08d9      	lsrs	r1, r3, #3
 80023ba:	460b      	mov	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3330      	adds	r3, #48	; 0x30
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fb85 	bl	8001adc <AsciiToCharacter>
 80023d2:	4603      	mov	r3, r0
 80023d4:	827b      	strh	r3, [r7, #18]
    c[3] = (tmp != CH_0 ? tmp : CH_BLANK);
 80023d6:	8a7b      	ldrh	r3, [r7, #18]
 80023d8:	f24e 5291 	movw	r2, #58769	; 0xe591
 80023dc:	4293      	cmp	r3, r2
 80023de:	d001      	beq.n	80023e4 <Display_P1+0x144>
 80023e0:	8a7a      	ldrh	r2, [r7, #18]
 80023e2:	e000      	b.n	80023e6 <Display_P1+0x146>
 80023e4:	2200      	movs	r2, #0
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	80da      	strh	r2, [r3, #6]
    blank_flag = (tmp == CH_0);
 80023ea:	8a7b      	ldrh	r3, [r7, #18]
 80023ec:	f24e 5291 	movw	r2, #58769	; 0xe591
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	617b      	str	r3, [r7, #20]

    tmp = AsciiToCharacter((int)(p_int / 100) % 10 + 0x30);
 80023fc:	8b7b      	ldrh	r3, [r7, #26]
 80023fe:	4a33      	ldr	r2, [pc, #204]	; (80024cc <Display_P1+0x22c>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <Display_P1+0x228>)
 800240a:	fba3 1302 	umull	r1, r3, r3, r2
 800240e:	08d9      	lsrs	r1, r3, #3
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	b29b      	uxth	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3330      	adds	r3, #48	; 0x30
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fb5a 	bl	8001adc <AsciiToCharacter>
 8002428:	4603      	mov	r3, r0
 800242a:	827b      	strh	r3, [r7, #18]
    c[2] = ((blank_flag && tmp == CH_0) ? CH_BLANK : tmp);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <Display_P1+0x19c>
 8002432:	8a7b      	ldrh	r3, [r7, #18]
 8002434:	f24e 5291 	movw	r2, #58769	; 0xe591
 8002438:	4293      	cmp	r3, r2
 800243a:	d001      	beq.n	8002440 <Display_P1+0x1a0>
 800243c:	8a7a      	ldrh	r2, [r7, #18]
 800243e:	e000      	b.n	8002442 <Display_P1+0x1a2>
 8002440:	2200      	movs	r2, #0
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	809a      	strh	r2, [r3, #4]

    c[1] = AsciiToCharacter((int)(p_int / 10) % 10 + 0x30);
 8002446:	8b7b      	ldrh	r3, [r7, #26]
 8002448:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <Display_P1+0x228>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <Display_P1+0x228>)
 8002454:	fba3 1302 	umull	r1, r3, r3, r2
 8002458:	08d9      	lsrs	r1, r3, #3
 800245a:	460b      	mov	r3, r1
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b29b      	uxth	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3330      	adds	r3, #48	; 0x30
 800246a:	b2db      	uxtb	r3, r3
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fb35 	bl	8001adc <AsciiToCharacter>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	805a      	strh	r2, [r3, #2]
    c[0] = AsciiToCharacter((int)(p_int / 1) % 10 + 0x30);
 800247a:	8b7a      	ldrh	r2, [r7, #26]
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <Display_P1+0x228>)
 800247e:	fba3 1302 	umull	r1, r3, r3, r2
 8002482:	08d9      	lsrs	r1, r3, #3
 8002484:	460b      	mov	r3, r1
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3330      	adds	r3, #48	; 0x30
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fb20 	bl	8001adc <AsciiToCharacter>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	801a      	strh	r2, [r3, #0]

    DisplayWrite(display, c, d, n_places);
 80024a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff faf7 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7ff fb07 	bl	8001ac4 <DisplaySync>
 80024b6:	46ad      	mov	sp, r5
}
 80024b8:	bf00      	nop
 80024ba:	3730      	adds	r7, #48	; 0x30
 80024bc:	46bd      	mov	sp, r7
 80024be:	bdb0      	pop	{r4, r5, r7, pc}
 80024c0:	40240000 	.word	0x40240000
 80024c4:	10624dd3 	.word	0x10624dd3
 80024c8:	cccccccd 	.word	0xcccccccd
 80024cc:	51eb851f 	.word	0x51eb851f

080024d0 <Display_P2>:

void Display_P2(Display *display,
				double temp)
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	ed87 0b00 	vstr	d0, [r7]
 80024dc:	466b      	mov	r3, sp
 80024de:	461d      	mov	r5, r3
    const size_t n_places = 6;
 80024e0:	2306      	movs	r3, #6
 80024e2:	623b      	str	r3, [r7, #32]
    Character c[n_places];
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	f04f 0400 	mov.w	r4, #0
 80024fa:	0114      	lsls	r4, r2, #4
 80024fc:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002500:	010b      	lsls	r3, r1, #4
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	4619      	mov	r1, r3
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	f04f 0400 	mov.w	r4, #0
 8002512:	0114      	lsls	r4, r2, #4
 8002514:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002518:	010b      	lsls	r3, r1, #4
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	3301      	adds	r3, #1
 8002520:	3307      	adds	r3, #7
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	ebad 0d03 	sub.w	sp, sp, r3
 800252a:	466b      	mov	r3, sp
 800252c:	3301      	adds	r3, #1
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
    Dot d[n_places];
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	3b01      	subs	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	4619      	mov	r1, r3
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	f04f 0400 	mov.w	r4, #0
 800254a:	00d4      	lsls	r4, r2, #3
 800254c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002550:	00cb      	lsls	r3, r1, #3
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	f04f 0400 	mov.w	r4, #0
 8002562:	00d4      	lsls	r4, r2, #3
 8002564:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002568:	00cb      	lsls	r3, r1, #3
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	3307      	adds	r3, #7
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	ebad 0d03 	sub.w	sp, sp, r3
 8002576:	466b      	mov	r3, sp
 8002578:	3300      	adds	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
    uint16_t t_int = temp / 10.0;
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	4b45      	ldr	r3, [pc, #276]	; (8002698 <Display_P2+0x1c8>)
 8002582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002586:	f7fe f96b 	bl	8000860 <__aeabi_ddiv>
 800258a:	4603      	mov	r3, r0
 800258c:	460c      	mov	r4, r1
 800258e:	4618      	mov	r0, r3
 8002590:	4621      	mov	r1, r4
 8002592:	f7fe fb13 	bl	8000bbc <__aeabi_d2uiz>
 8002596:	4603      	mov	r3, r0
 8002598:	827b      	strh	r3, [r7, #18]

    d[0] = DOT_OBSCURE;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_HIGHLIGHT;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2201      	movs	r2, #1
 80025aa:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2200      	movs	r2, #0
 80025b0:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2200      	movs	r2, #0
 80025b6:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2200      	movs	r2, #0
 80025bc:	715a      	strb	r2, [r3, #5]

//    c[5] = CH_t;
    c[5] = CH_BLANK;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2200      	movs	r2, #0
 80025c2:	815a      	strh	r2, [r3, #10]
    c[4] = (t_int < 0 ? CH_MINUS : CH_PLUS);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f640 024c 	movw	r2, #2124	; 0x84c
 80025ca:	811a      	strh	r2, [r3, #8]
    c[3] = CH_BLANK;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2200      	movs	r2, #0
 80025d0:	80da      	strh	r2, [r3, #6]

    t_int = abs(t_int);

    Character tmp;

    tmp = AsciiToCharacter((int)(t_int / 100) % 10 + 0x30);
 80025d2:	8a7b      	ldrh	r3, [r7, #18]
 80025d4:	4a31      	ldr	r2, [pc, #196]	; (800269c <Display_P2+0x1cc>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <Display_P2+0x1d0>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	08d9      	lsrs	r1, r3, #3
 80025e6:	460b      	mov	r3, r1
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3330      	adds	r3, #48	; 0x30
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fa6f 	bl	8001adc <AsciiToCharacter>
 80025fe:	4603      	mov	r3, r0
 8002600:	823b      	strh	r3, [r7, #16]
    c[3] = (tmp != CH_0 ? tmp : CH_BLANK);
 8002602:	8a3b      	ldrh	r3, [r7, #16]
 8002604:	f24e 5291 	movw	r2, #58769	; 0xe591
 8002608:	4293      	cmp	r3, r2
 800260a:	d001      	beq.n	8002610 <Display_P2+0x140>
 800260c:	8a3a      	ldrh	r2, [r7, #16]
 800260e:	e000      	b.n	8002612 <Display_P2+0x142>
 8002610:	2200      	movs	r2, #0
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	80da      	strh	r2, [r3, #6]
    c[2] = AsciiToCharacter((int)(t_int / 10) % 10 + 0x30);
 8002616:	8a7b      	ldrh	r3, [r7, #18]
 8002618:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <Display_P2+0x1d0>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	08db      	lsrs	r3, r3, #3
 8002620:	b29a      	uxth	r2, r3
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <Display_P2+0x1d0>)
 8002624:	fba3 1302 	umull	r1, r3, r3, r2
 8002628:	08d9      	lsrs	r1, r3, #3
 800262a:	460b      	mov	r3, r1
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	b29b      	uxth	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3330      	adds	r3, #48	; 0x30
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fa4d 	bl	8001adc <AsciiToCharacter>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	809a      	strh	r2, [r3, #4]
    c[1] = AsciiToCharacter((int)(t_int / 1) % 10 + 0x30);
 800264a:	8a7a      	ldrh	r2, [r7, #18]
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <Display_P2+0x1d0>)
 800264e:	fba3 1302 	umull	r1, r3, r3, r2
 8002652:	08d9      	lsrs	r1, r3, #3
 8002654:	460b      	mov	r3, r1
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	b29b      	uxth	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3330      	adds	r3, #48	; 0x30
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fa38 	bl	8001adc <AsciiToCharacter>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	805a      	strh	r2, [r3, #2]
    c[0] = CH_c;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f244 0209 	movw	r2, #16393	; 0x4009
 800267a:	801a      	strh	r2, [r3, #0]

    DisplayWrite(display, c, d, n_places);
 800267c:	69f9      	ldr	r1, [r7, #28]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff fa0b 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7ff fa1b 	bl	8001ac4 <DisplaySync>
 800268e:	46ad      	mov	sp, r5
}
 8002690:	bf00      	nop
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bdb0      	pop	{r4, r5, r7, pc}
 8002698:	40240000 	.word	0x40240000
 800269c:	51eb851f 	.word	0x51eb851f
 80026a0:	cccccccd 	.word	0xcccccccd

080026a4 <Display_P3>:

void Display_P3(Display *display,
				double alt)
{
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	ed87 0b00 	vstr	d0, [r7]
 80026b0:	466b      	mov	r3, sp
 80026b2:	461d      	mov	r5, r3
    const size_t n_places = 6;
 80026b4:	2306      	movs	r3, #6
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
    Character c[n_places];
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	4619      	mov	r1, r3
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	f04f 0400 	mov.w	r4, #0
 80026ce:	0114      	lsls	r4, r2, #4
 80026d0:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80026d4:	010b      	lsls	r3, r1, #4
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	4619      	mov	r1, r3
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	f04f 0400 	mov.w	r4, #0
 80026e6:	0114      	lsls	r4, r2, #4
 80026e8:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80026ec:	010b      	lsls	r3, r1, #4
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	3301      	adds	r3, #1
 80026f4:	3307      	adds	r3, #7
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	ebad 0d03 	sub.w	sp, sp, r3
 80026fe:	466b      	mov	r3, sp
 8002700:	3301      	adds	r3, #1
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    Dot d[n_places];
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	623b      	str	r3, [r7, #32]
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	4619      	mov	r1, r3
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	f04f 0400 	mov.w	r4, #0
 800271e:	00d4      	lsls	r4, r2, #3
 8002720:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002724:	00cb      	lsls	r3, r1, #3
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	f04f 0400 	mov.w	r4, #0
 8002736:	00d4      	lsls	r4, r2, #3
 8002738:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800273c:	00cb      	lsls	r3, r1, #3
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	3307      	adds	r3, #7
 8002742:	08db      	lsrs	r3, r3, #3
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	ebad 0d03 	sub.w	sp, sp, r3
 800274a:	466b      	mov	r3, sp
 800274c:	3300      	adds	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    int16_t a_int = alt * 10.0;
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b6b      	ldr	r3, [pc, #428]	; (8002904 <Display_P3+0x260>)
 8002756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800275a:	f7fd ff57 	bl	800060c <__aeabi_dmul>
 800275e:	4603      	mov	r3, r0
 8002760:	460c      	mov	r4, r1
 8002762:	4618      	mov	r0, r3
 8002764:	4621      	mov	r1, r4
 8002766:	f7fe fa01 	bl	8000b6c <__aeabi_d2iz>
 800276a:	4603      	mov	r3, r0
 800276c:	837b      	strh	r3, [r7, #26]

    d[0] = DOT_OBSCURE;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_HIGHLIGHT;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2201      	movs	r2, #1
 8002778:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_OBSCURE;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2200      	movs	r2, #0
 800277e:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2200      	movs	r2, #0
 8002784:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2200      	movs	r2, #0
 800278a:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2200      	movs	r2, #0
 8002790:	715a      	strb	r2, [r3, #5]

    c[5] = CH_H;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f642 4219 	movw	r2, #11289	; 0x2c19
 8002798:	815a      	strh	r2, [r3, #10]
    c[4] = (a_int < 0 ? CH_MINUS : CH_PLUS);
 800279a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da02      	bge.n	80027a8 <Display_P3+0x104>
 80027a2:	f640 0208 	movw	r2, #2056	; 0x808
 80027a6:	e001      	b.n	80027ac <Display_P3+0x108>
 80027a8:	f640 024c 	movw	r2, #2124	; 0x84c
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	811a      	strh	r2, [r3, #8]
    c[3] = CH_BLANK;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	2200      	movs	r2, #0
 80027b4:	80da      	strh	r2, [r3, #6]

    Character tmp;
    int blank_flag = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
    a_int = abs(a_int);
 80027ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bfb8      	it	lt
 80027c2:	425b      	neglt	r3, r3
 80027c4:	837b      	strh	r3, [r7, #26]

    tmp = AsciiToCharacter((int)(a_int / 1000) % 10 + 0x30);
 80027c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027ca:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <Display_P3+0x264>)
 80027cc:	fb82 1203 	smull	r1, r2, r2, r3
 80027d0:	1192      	asrs	r2, r2, #6
 80027d2:	17db      	asrs	r3, r3, #31
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	4b4c      	ldr	r3, [pc, #304]	; (800290c <Display_P3+0x268>)
 80027da:	fb83 1302 	smull	r1, r3, r3, r2
 80027de:	1099      	asrs	r1, r3, #2
 80027e0:	17d3      	asrs	r3, r2, #31
 80027e2:	1ac9      	subs	r1, r1, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3330      	adds	r3, #48	; 0x30
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f970 	bl	8001adc <AsciiToCharacter>
 80027fc:	4603      	mov	r3, r0
 80027fe:	827b      	strh	r3, [r7, #18]
    c[3] = (tmp != CH_0 ? tmp : CH_BLANK);
 8002800:	8a7b      	ldrh	r3, [r7, #18]
 8002802:	f24e 5291 	movw	r2, #58769	; 0xe591
 8002806:	4293      	cmp	r3, r2
 8002808:	d001      	beq.n	800280e <Display_P3+0x16a>
 800280a:	8a7a      	ldrh	r2, [r7, #18]
 800280c:	e000      	b.n	8002810 <Display_P3+0x16c>
 800280e:	2200      	movs	r2, #0
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	80da      	strh	r2, [r3, #6]
    blank_flag = (tmp == CH_0);
 8002814:	8a7b      	ldrh	r3, [r7, #18]
 8002816:	f24e 5291 	movw	r2, #58769	; 0xe591
 800281a:	4293      	cmp	r3, r2
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	617b      	str	r3, [r7, #20]

    tmp = AsciiToCharacter((int)(a_int / 100) % 10 + 0x30);
 8002826:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800282a:	4a39      	ldr	r2, [pc, #228]	; (8002910 <Display_P3+0x26c>)
 800282c:	fb82 1203 	smull	r1, r2, r2, r3
 8002830:	1152      	asrs	r2, r2, #5
 8002832:	17db      	asrs	r3, r3, #31
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	b21a      	sxth	r2, r3
 8002838:	4b34      	ldr	r3, [pc, #208]	; (800290c <Display_P3+0x268>)
 800283a:	fb83 1302 	smull	r1, r3, r3, r2
 800283e:	1099      	asrs	r1, r3, #2
 8002840:	17d3      	asrs	r3, r2, #31
 8002842:	1ac9      	subs	r1, r1, r3
 8002844:	460b      	mov	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	b21b      	sxth	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	3330      	adds	r3, #48	; 0x30
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f940 	bl	8001adc <AsciiToCharacter>
 800285c:	4603      	mov	r3, r0
 800285e:	827b      	strh	r3, [r7, #18]
    c[2] = ((blank_flag && tmp == CH_0) ? CH_BLANK : tmp);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <Display_P3+0x1cc>
 8002866:	8a7b      	ldrh	r3, [r7, #18]
 8002868:	f24e 5291 	movw	r2, #58769	; 0xe591
 800286c:	4293      	cmp	r3, r2
 800286e:	d001      	beq.n	8002874 <Display_P3+0x1d0>
 8002870:	8a7a      	ldrh	r2, [r7, #18]
 8002872:	e000      	b.n	8002876 <Display_P3+0x1d2>
 8002874:	2200      	movs	r2, #0
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	809a      	strh	r2, [r3, #4]

    c[1] = AsciiToCharacter((int)(a_int / 10) % 10 + 0x30);
 800287a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800287e:	4a23      	ldr	r2, [pc, #140]	; (800290c <Display_P3+0x268>)
 8002880:	fb82 1203 	smull	r1, r2, r2, r3
 8002884:	1092      	asrs	r2, r2, #2
 8002886:	17db      	asrs	r3, r3, #31
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b21a      	sxth	r2, r3
 800288c:	4b1f      	ldr	r3, [pc, #124]	; (800290c <Display_P3+0x268>)
 800288e:	fb83 1302 	smull	r1, r3, r3, r2
 8002892:	1099      	asrs	r1, r3, #2
 8002894:	17d3      	asrs	r3, r2, #31
 8002896:	1ac9      	subs	r1, r1, r3
 8002898:	460b      	mov	r3, r1
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	3330      	adds	r3, #48	; 0x30
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff f916 	bl	8001adc <AsciiToCharacter>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	805a      	strh	r2, [r3, #2]
    c[0] = AsciiToCharacter((int)(a_int / 1) % 10 + 0x30);
 80028b8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <Display_P3+0x268>)
 80028be:	fb83 1302 	smull	r1, r3, r3, r2
 80028c2:	1099      	asrs	r1, r3, #2
 80028c4:	17d3      	asrs	r3, r2, #31
 80028c6:	1ac9      	subs	r1, r1, r3
 80028c8:	460b      	mov	r3, r1
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3330      	adds	r3, #48	; 0x30
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f8fe 	bl	8001adc <AsciiToCharacter>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	801a      	strh	r2, [r3, #0]

    DisplayWrite(display, c, d, n_places);
 80028e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff f8d5 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff f8e5 	bl	8001ac4 <DisplaySync>
 80028fa:	46ad      	mov	sp, r5
}
 80028fc:	bf00      	nop
 80028fe:	3730      	adds	r7, #48	; 0x30
 8002900:	46bd      	mov	sp, r7
 8002902:	bdb0      	pop	{r4, r5, r7, pc}
 8002904:	40240000 	.word	0x40240000
 8002908:	10624dd3 	.word	0x10624dd3
 800290c:	66666667 	.word	0x66666667
 8002910:	51eb851f 	.word	0x51eb851f

08002914 <Display_A1_1>:

void Display_A1_1(Display *display,
                  Rtc_Timestamp *ts)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	466b      	mov	r3, sp
 8002920:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8002922:	2306      	movs	r3, #6
 8002924:	623b      	str	r3, [r7, #32]
    Character c[n_places];
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	3b01      	subs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	0114      	lsls	r4, r2, #4
 800293e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002942:	010b      	lsls	r3, r1, #4
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	4619      	mov	r1, r3
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	f04f 0400 	mov.w	r4, #0
 8002954:	0114      	lsls	r4, r2, #4
 8002956:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800295a:	010b      	lsls	r3, r1, #4
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	3301      	adds	r3, #1
 8002962:	3307      	adds	r3, #7
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	ebad 0d03 	sub.w	sp, sp, r3
 800296c:	466b      	mov	r3, sp
 800296e:	3301      	adds	r3, #1
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
    Dot d[n_places];
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	3b01      	subs	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	4619      	mov	r1, r3
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	00d4      	lsls	r4, r2, #3
 800298e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002992:	00cb      	lsls	r3, r1, #3
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	4619      	mov	r1, r3
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	f04f 0400 	mov.w	r4, #0
 80029a4:	00d4      	lsls	r4, r2, #3
 80029a6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	3307      	adds	r3, #7
 80029b0:	08db      	lsrs	r3, r3, #3
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	ebad 0d03 	sub.w	sp, sp, r3
 80029b8:	466b      	mov	r3, sp
 80029ba:	3300      	adds	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]

    uint8_t h1, h2;
    uint8_t m1, m2;
    uint8_t s1, s2;

    h1 = ts->hour / 10;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	789b      	ldrb	r3, [r3, #2]
 80029c2:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <Display_A1_1+0x1f0>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	74fb      	strb	r3, [r7, #19]
    h2 = ts->hour % 10;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	789a      	ldrb	r2, [r3, #2]
 80029d0:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <Display_A1_1+0x1f0>)
 80029d2:	fba3 1302 	umull	r1, r3, r3, r2
 80029d6:	08d9      	lsrs	r1, r3, #3
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	74bb      	strb	r3, [r7, #18]
    h1 += 0x30;
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	3330      	adds	r3, #48	; 0x30
 80029e8:	74fb      	strb	r3, [r7, #19]
    h2 += 0x30;
 80029ea:	7cbb      	ldrb	r3, [r7, #18]
 80029ec:	3330      	adds	r3, #48	; 0x30
 80029ee:	74bb      	strb	r3, [r7, #18]
    c[4] = AsciiToCharacter((char) h2);
 80029f0:	7cbb      	ldrb	r3, [r7, #18]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f872 	bl	8001adc <AsciiToCharacter>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	811a      	strh	r2, [r3, #8]

    if (h1 != 0x30)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b30      	cmp	r3, #48	; 0x30
 8002a04:	d008      	beq.n	8002a18 <Display_A1_1+0x104>
        c[5] = AsciiToCharacter((char) h1);
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f867 	bl	8001adc <AsciiToCharacter>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	815a      	strh	r2, [r3, #10]
 8002a16:	e002      	b.n	8002a1e <Display_A1_1+0x10a>
    else
        c[5] = CH_BLANK;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	815a      	strh	r2, [r3, #10]

    m1 = ts->min / 10;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	4a38      	ldr	r2, [pc, #224]	; (8002b04 <Display_A1_1+0x1f0>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	747b      	strb	r3, [r7, #17]
    m2 = ts->min % 10;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	785a      	ldrb	r2, [r3, #1]
 8002a30:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <Display_A1_1+0x1f0>)
 8002a32:	fba3 1302 	umull	r1, r3, r3, r2
 8002a36:	08d9      	lsrs	r1, r3, #3
 8002a38:	460b      	mov	r3, r1
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	743b      	strb	r3, [r7, #16]
    m1 += 0x30;
 8002a44:	7c7b      	ldrb	r3, [r7, #17]
 8002a46:	3330      	adds	r3, #48	; 0x30
 8002a48:	747b      	strb	r3, [r7, #17]
    m2 += 0x30;
 8002a4a:	7c3b      	ldrb	r3, [r7, #16]
 8002a4c:	3330      	adds	r3, #48	; 0x30
 8002a4e:	743b      	strb	r3, [r7, #16]
    c[2] = AsciiToCharacter((char) m2);
 8002a50:	7c3b      	ldrb	r3, [r7, #16]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f842 	bl	8001adc <AsciiToCharacter>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	809a      	strh	r2, [r3, #4]
    c[3] = AsciiToCharacter((char) m1);
 8002a60:	7c7b      	ldrb	r3, [r7, #17]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f83a 	bl	8001adc <AsciiToCharacter>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	80da      	strh	r2, [r3, #6]

    s1 = ts->sec / 10;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <Display_A1_1+0x1f0>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	73fb      	strb	r3, [r7, #15]
    s2 = ts->sec % 10;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <Display_A1_1+0x1f0>)
 8002a84:	fba3 1302 	umull	r1, r3, r3, r2
 8002a88:	08d9      	lsrs	r1, r3, #3
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	73bb      	strb	r3, [r7, #14]
    s1 += 0x30;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	3330      	adds	r3, #48	; 0x30
 8002a9a:	73fb      	strb	r3, [r7, #15]
    s2 += 0x30;
 8002a9c:	7bbb      	ldrb	r3, [r7, #14]
 8002a9e:	3330      	adds	r3, #48	; 0x30
 8002aa0:	73bb      	strb	r3, [r7, #14]
    c[0] = AsciiToCharacter((char) s2);
 8002aa2:	7bbb      	ldrb	r3, [r7, #14]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff f819 	bl	8001adc <AsciiToCharacter>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	801a      	strh	r2, [r3, #0]
    c[1] = AsciiToCharacter((char) s1);
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f811 	bl	8001adc <AsciiToCharacter>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	805a      	strh	r2, [r3, #2]

    d[0] = DOT_OBSCURE;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_HIGHLIGHT;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_HIGHLIGHT;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2201      	movs	r2, #1
 8002ade:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	715a      	strb	r2, [r3, #5]

    DisplayWrite(display, c, d, n_places);
 8002ae6:	69f9      	ldr	r1, [r7, #28]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fe ffd6 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe ffe6 	bl	8001ac4 <DisplaySync>
 8002af8:	46ad      	mov	sp, r5
}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	; 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bdb0      	pop	{r4, r5, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	cccccccd 	.word	0xcccccccd

08002b08 <Display_A1_2>:

void Display_A1_2(Display *display,
                  Rtc_Timestamp *ts)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	466b      	mov	r3, sp
 8002b14:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8002b16:	2306      	movs	r3, #6
 8002b18:	61bb      	str	r3, [r7, #24]
    Character c[n_places];
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	4619      	mov	r1, r3
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	f04f 0400 	mov.w	r4, #0
 8002b30:	0114      	lsls	r4, r2, #4
 8002b32:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002b36:	010b      	lsls	r3, r1, #4
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	f04f 0400 	mov.w	r4, #0
 8002b48:	0114      	lsls	r4, r2, #4
 8002b4a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002b4e:	010b      	lsls	r3, r1, #4
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	3301      	adds	r3, #1
 8002b56:	3307      	adds	r3, #7
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	ebad 0d03 	sub.w	sp, sp, r3
 8002b60:	466b      	mov	r3, sp
 8002b62:	3301      	adds	r3, #1
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
    Dot d[n_places];
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	4619      	mov	r1, r3
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	00d4      	lsls	r4, r2, #3
 8002b82:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002b86:	00cb      	lsls	r3, r1, #3
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	f04f 0400 	mov.w	r4, #0
 8002b98:	00d4      	lsls	r4, r2, #3
 8002b9a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002b9e:	00cb      	lsls	r3, r1, #3
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	3307      	adds	r3, #7
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	ebad 0d03 	sub.w	sp, sp, r3
 8002bac:	466b      	mov	r3, sp
 8002bae:	3300      	adds	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]

    uint8_t h1, h2;
    uint8_t m1, m2;

    h1 = ts->hour / 10;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	789b      	ldrb	r3, [r3, #2]
 8002bb6:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <Display_A1_2+0x1cc>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	72fb      	strb	r3, [r7, #11]
    h2 = ts->hour % 10;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	789a      	ldrb	r2, [r3, #2]
 8002bc4:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <Display_A1_2+0x1cc>)
 8002bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bca:	08d9      	lsrs	r1, r3, #3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	72bb      	strb	r3, [r7, #10]
    h1 += 0x30;
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	3330      	adds	r3, #48	; 0x30
 8002bdc:	72fb      	strb	r3, [r7, #11]
    h2 += 0x30;
 8002bde:	7abb      	ldrb	r3, [r7, #10]
 8002be0:	3330      	adds	r3, #48	; 0x30
 8002be2:	72bb      	strb	r3, [r7, #10]

    c[4 - 1] = AsciiToCharacter((char) h2);
 8002be4:	7abb      	ldrb	r3, [r7, #10]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe ff78 	bl	8001adc <AsciiToCharacter>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	80da      	strh	r2, [r3, #6]

    if (h1 != 0x30)
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	2b30      	cmp	r3, #48	; 0x30
 8002bf8:	d008      	beq.n	8002c0c <Display_A1_2+0x104>
        c[5 - 1] = AsciiToCharacter((char) h1);
 8002bfa:	7afb      	ldrb	r3, [r7, #11]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe ff6d 	bl	8001adc <AsciiToCharacter>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	811a      	strh	r2, [r3, #8]
 8002c0a:	e002      	b.n	8002c12 <Display_A1_2+0x10a>
    else
        c[5 - 1] = CH_BLANK;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	811a      	strh	r2, [r3, #8]

    m1 = ts->min / 10;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	785b      	ldrb	r3, [r3, #1]
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <Display_A1_2+0x1cc>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	08db      	lsrs	r3, r3, #3
 8002c1e:	727b      	strb	r3, [r7, #9]
    m2 = ts->min % 10;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	785a      	ldrb	r2, [r3, #1]
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <Display_A1_2+0x1cc>)
 8002c26:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2a:	08d9      	lsrs	r1, r3, #3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	723b      	strb	r3, [r7, #8]
    m1 += 0x30;
 8002c38:	7a7b      	ldrb	r3, [r7, #9]
 8002c3a:	3330      	adds	r3, #48	; 0x30
 8002c3c:	727b      	strb	r3, [r7, #9]
    m2 += 0x30;
 8002c3e:	7a3b      	ldrb	r3, [r7, #8]
 8002c40:	3330      	adds	r3, #48	; 0x30
 8002c42:	723b      	strb	r3, [r7, #8]
    c[2 - 1] = AsciiToCharacter((char) m2);
 8002c44:	7a3b      	ldrb	r3, [r7, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe ff48 	bl	8001adc <AsciiToCharacter>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	805a      	strh	r2, [r3, #2]
    c[3 - 1] = AsciiToCharacter((char) m1);
 8002c54:	7a7b      	ldrb	r3, [r7, #9]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe ff40 	bl	8001adc <AsciiToCharacter>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	809a      	strh	r2, [r3, #4]

    c[0] = AsciiToCharacter((char) ' ');
 8002c64:	2020      	movs	r0, #32
 8002c66:	f7fe ff39 	bl	8001adc <AsciiToCharacter>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	801a      	strh	r2, [r3, #0]
    c[5] = AsciiToCharacter((char) ' ');
 8002c72:	2020      	movs	r0, #32
 8002c74:	f7fe ff32 	bl	8001adc <AsciiToCharacter>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	815a      	strh	r2, [r3, #10]

    d[0] = DOT_OBSCURE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_OBSCURE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	709a      	strb	r2, [r3, #2]
    d[3] = (ts->sec % 2 == 0 ? DOT_HIGHLIGHT : DOT_OBSCURE);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	715a      	strb	r2, [r3, #5]

    DisplayWrite(display, c, d, n_places);
 8002cb8:	6979      	ldr	r1, [r7, #20]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe feed 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7fe fefd 	bl	8001ac4 <DisplaySync>
 8002cca:	46ad      	mov	sp, r5
}
 8002ccc:	bf00      	nop
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd4:	cccccccd 	.word	0xcccccccd

08002cd8 <Display_A1_3>:

void Display_A1_3(Display *display,
                  Rtc_Timestamp *ts)
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	466b      	mov	r3, sp
 8002ce4:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	623b      	str	r3, [r7, #32]
    Character c[n_places];
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	0114      	lsls	r4, r2, #4
 8002d02:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002d06:	010b      	lsls	r3, r1, #4
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	0114      	lsls	r4, r2, #4
 8002d1a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002d1e:	010b      	lsls	r3, r1, #4
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	3301      	adds	r3, #1
 8002d26:	3307      	adds	r3, #7
 8002d28:	08db      	lsrs	r3, r3, #3
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	ebad 0d03 	sub.w	sp, sp, r3
 8002d30:	466b      	mov	r3, sp
 8002d32:	3301      	adds	r3, #1
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
    Dot d[n_places];
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	4619      	mov	r1, r3
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	00d4      	lsls	r4, r2, #3
 8002d52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002d56:	00cb      	lsls	r3, r1, #3
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	00d4      	lsls	r4, r2, #3
 8002d6a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002d6e:	00cb      	lsls	r3, r1, #3
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	3307      	adds	r3, #7
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	ebad 0d03 	sub.w	sp, sp, r3
 8002d7c:	466b      	mov	r3, sp
 8002d7e:	3300      	adds	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]

    uint8_t h1, h2;
    uint8_t m1, m2;
    uint8_t s1, s2;

    h1 = ts->mday / 10;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	78db      	ldrb	r3, [r3, #3]
 8002d86:	4a5f      	ldr	r2, [pc, #380]	; (8002f04 <Display_A1_3+0x22c>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	08db      	lsrs	r3, r3, #3
 8002d8e:	74fb      	strb	r3, [r7, #19]
    h2 = ts->mday % 10;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	78da      	ldrb	r2, [r3, #3]
 8002d94:	4b5b      	ldr	r3, [pc, #364]	; (8002f04 <Display_A1_3+0x22c>)
 8002d96:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9a:	08d9      	lsrs	r1, r3, #3
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	74bb      	strb	r3, [r7, #18]
    h1 += 0x30;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	3330      	adds	r3, #48	; 0x30
 8002dac:	74fb      	strb	r3, [r7, #19]
    h2 += 0x30;
 8002dae:	7cbb      	ldrb	r3, [r7, #18]
 8002db0:	3330      	adds	r3, #48	; 0x30
 8002db2:	74bb      	strb	r3, [r7, #18]
    c[4] = AsciiToCharacter((char) h2);
 8002db4:	7cbb      	ldrb	r3, [r7, #18]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fe90 	bl	8001adc <AsciiToCharacter>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	811a      	strh	r2, [r3, #8]

    if (h1 != 0x30)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b30      	cmp	r3, #48	; 0x30
 8002dc8:	d008      	beq.n	8002ddc <Display_A1_3+0x104>
        c[5] = AsciiToCharacter((char) h1);
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fe85 	bl	8001adc <AsciiToCharacter>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	815a      	strh	r2, [r3, #10]
 8002dda:	e002      	b.n	8002de2 <Display_A1_3+0x10a>
    else
        c[5] = CH_BLANK;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2200      	movs	r2, #0
 8002de0:	815a      	strh	r2, [r3, #10]

    m1 = ts->mon / 10;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	791b      	ldrb	r3, [r3, #4]
 8002de6:	4a47      	ldr	r2, [pc, #284]	; (8002f04 <Display_A1_3+0x22c>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	747b      	strb	r3, [r7, #17]
    m2 = ts->mon % 10;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	791a      	ldrb	r2, [r3, #4]
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <Display_A1_3+0x22c>)
 8002df6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfa:	08d9      	lsrs	r1, r3, #3
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	743b      	strb	r3, [r7, #16]
    m1 += 0x30;
 8002e08:	7c7b      	ldrb	r3, [r7, #17]
 8002e0a:	3330      	adds	r3, #48	; 0x30
 8002e0c:	747b      	strb	r3, [r7, #17]
    m2 += 0x30;
 8002e0e:	7c3b      	ldrb	r3, [r7, #16]
 8002e10:	3330      	adds	r3, #48	; 0x30
 8002e12:	743b      	strb	r3, [r7, #16]
    c[2] = AsciiToCharacter((char) m2);
 8002e14:	7c3b      	ldrb	r3, [r7, #16]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fe60 	bl	8001adc <AsciiToCharacter>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	809a      	strh	r2, [r3, #4]
    c[3] = AsciiToCharacter((char) m1);
 8002e24:	7c7b      	ldrb	r3, [r7, #17]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fe58 	bl	8001adc <AsciiToCharacter>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	80da      	strh	r2, [r3, #6]

    s1 = (ts->year % 100) / 10;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e3a:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <Display_A1_3+0x230>)
 8002e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e40:	1151      	asrs	r1, r2, #5
 8002e42:	17da      	asrs	r2, r3, #31
 8002e44:	1a8a      	subs	r2, r1, r2
 8002e46:	2164      	movs	r1, #100	; 0x64
 8002e48:	fb01 f202 	mul.w	r2, r1, r2
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	b21b      	sxth	r3, r3
 8002e50:	4a2e      	ldr	r2, [pc, #184]	; (8002f0c <Display_A1_3+0x234>)
 8002e52:	fb82 1203 	smull	r1, r2, r2, r3
 8002e56:	1092      	asrs	r2, r2, #2
 8002e58:	17db      	asrs	r3, r3, #31
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	b21b      	sxth	r3, r3
 8002e5e:	73fb      	strb	r3, [r7, #15]
    s2 = (ts->year % 100) % 10;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e66:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <Display_A1_3+0x230>)
 8002e68:	fb82 1203 	smull	r1, r2, r2, r3
 8002e6c:	1151      	asrs	r1, r2, #5
 8002e6e:	17da      	asrs	r2, r3, #31
 8002e70:	1a8a      	subs	r2, r1, r2
 8002e72:	2164      	movs	r1, #100	; 0x64
 8002e74:	fb01 f202 	mul.w	r2, r1, r2
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	b21a      	sxth	r2, r3
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <Display_A1_3+0x234>)
 8002e7e:	fb83 1302 	smull	r1, r3, r3, r2
 8002e82:	1099      	asrs	r1, r3, #2
 8002e84:	17d3      	asrs	r3, r2, #31
 8002e86:	1ac9      	subs	r1, r1, r3
 8002e88:	460b      	mov	r3, r1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	73bb      	strb	r3, [r7, #14]
    s1 += 0x30;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	3330      	adds	r3, #48	; 0x30
 8002e9a:	73fb      	strb	r3, [r7, #15]
    s2 += 0x30;
 8002e9c:	7bbb      	ldrb	r3, [r7, #14]
 8002e9e:	3330      	adds	r3, #48	; 0x30
 8002ea0:	73bb      	strb	r3, [r7, #14]
    c[0] = AsciiToCharacter((char) s2);
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fe19 	bl	8001adc <AsciiToCharacter>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	801a      	strh	r2, [r3, #0]
    c[1] = AsciiToCharacter((char) s1);
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe fe11 	bl	8001adc <AsciiToCharacter>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	805a      	strh	r2, [r3, #2]

    d[0] = DOT_OBSCURE;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_HIGHLIGHT;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_HIGHLIGHT;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2201      	movs	r2, #1
 8002ede:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	715a      	strb	r2, [r3, #5]

    DisplayWrite(display, c, d, n_places);
 8002ee6:	69f9      	ldr	r1, [r7, #28]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fe fdd6 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fde6 	bl	8001ac4 <DisplaySync>
 8002ef8:	46ad      	mov	sp, r5
}
 8002efa:	bf00      	nop
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bdb0      	pop	{r4, r5, r7, pc}
 8002f02:	bf00      	nop
 8002f04:	cccccccd 	.word	0xcccccccd
 8002f08:	51eb851f 	.word	0x51eb851f
 8002f0c:	66666667 	.word	0x66666667

08002f10 <Display_EditTime1>:

void Display_EditTime1(Display *display,
                       Rtc_Timestamp *ts)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
    Display_A1_1(display, ts);
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fcf9 	bl	8002914 <Display_A1_1>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <Display_EditTime2>:

void Display_EditTime2(Display *display,
                       Rtc_Timestamp *ts)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
    Display_A1_2(display, ts);
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fde6 	bl	8002b08 <Display_A1_2>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <Display_EditAging>:

void Display_EditAging(Display *display,
                       int8_t aging)
{
 8002f44:	b5b0      	push	{r4, r5, r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
 8002f50:	466b      	mov	r3, sp
 8002f52:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8002f54:	2306      	movs	r3, #6
 8002f56:	61bb      	str	r3, [r7, #24]
    Character c[n_places];
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	f04f 0400 	mov.w	r4, #0
 8002f6e:	0114      	lsls	r4, r2, #4
 8002f70:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002f74:	010b      	lsls	r3, r1, #4
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	0114      	lsls	r4, r2, #4
 8002f88:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8002f8c:	010b      	lsls	r3, r1, #4
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	3301      	adds	r3, #1
 8002f94:	3307      	adds	r3, #7
 8002f96:	08db      	lsrs	r3, r3, #3
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	ebad 0d03 	sub.w	sp, sp, r3
 8002f9e:	466b      	mov	r3, sp
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
    Dot d[n_places];
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	f04f 0400 	mov.w	r4, #0
 8002fbe:	00d4      	lsls	r4, r2, #3
 8002fc0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002fc4:	00cb      	lsls	r3, r1, #3
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f04f 0400 	mov.w	r4, #0
 8002fd6:	00d4      	lsls	r4, r2, #3
 8002fd8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002fdc:	00cb      	lsls	r3, r1, #3
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	3307      	adds	r3, #7
 8002fe2:	08db      	lsrs	r3, r3, #3
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	ebad 0d03 	sub.w	sp, sp, r3
 8002fea:	466b      	mov	r3, sp
 8002fec:	3300      	adds	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

    d[0] = DOT_OBSCURE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_OBSCURE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_HIGHLIGHT;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	715a      	strb	r2, [r3, #5]

    c[5] = CH_A;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f642 5299 	movw	r2, #11673	; 0x2d99
 800301a:	815a      	strh	r2, [r3, #10]
    c[4] = CH_G;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f64e 1291 	movw	r2, #59793	; 0xe991
 8003022:	811a      	strh	r2, [r3, #8]
    c[3] = CH_BLANK;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2200      	movs	r2, #0
 8003028:	80da      	strh	r2, [r3, #6]

    if (aging < 0) {
 800302a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302e:	2b00      	cmp	r3, #0
 8003030:	da09      	bge.n	8003046 <Display_EditAging+0x102>
        c[3] = CH_MINUS;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f640 0208 	movw	r2, #2056	; 0x808
 8003038:	80da      	strh	r2, [r3, #6]
        aging = abs(aging);
 800303a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303e:	2b00      	cmp	r3, #0
 8003040:	bfb8      	it	lt
 8003042:	425b      	neglt	r3, r3
 8003044:	70fb      	strb	r3, [r7, #3]
    }

    c[2] = AsciiToCharacter((aging / 100) % 10 + 0x30);
 8003046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304a:	4a31      	ldr	r2, [pc, #196]	; (8003110 <Display_EditAging+0x1cc>)
 800304c:	fb82 1203 	smull	r1, r2, r2, r3
 8003050:	1152      	asrs	r2, r2, #5
 8003052:	17db      	asrs	r3, r3, #31
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	b25a      	sxtb	r2, r3
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <Display_EditAging+0x1d0>)
 800305a:	fb83 1302 	smull	r1, r3, r3, r2
 800305e:	1099      	asrs	r1, r3, #2
 8003060:	17d3      	asrs	r3, r2, #31
 8003062:	1ac9      	subs	r1, r1, r3
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	b25b      	sxtb	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	3330      	adds	r3, #48	; 0x30
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fd30 	bl	8001adc <AsciiToCharacter>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	809a      	strh	r2, [r3, #4]
    c[1] = AsciiToCharacter((aging / 10) % 10 + 0x30);
 8003084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003088:	4a22      	ldr	r2, [pc, #136]	; (8003114 <Display_EditAging+0x1d0>)
 800308a:	fb82 1203 	smull	r1, r2, r2, r3
 800308e:	1092      	asrs	r2, r2, #2
 8003090:	17db      	asrs	r3, r3, #31
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b25a      	sxtb	r2, r3
 8003096:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <Display_EditAging+0x1d0>)
 8003098:	fb83 1302 	smull	r1, r3, r3, r2
 800309c:	1099      	asrs	r1, r3, #2
 800309e:	17d3      	asrs	r3, r2, #31
 80030a0:	1ac9      	subs	r1, r1, r3
 80030a2:	460b      	mov	r3, r1
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3330      	adds	r3, #48	; 0x30
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fd11 	bl	8001adc <AsciiToCharacter>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	805a      	strh	r2, [r3, #2]
    c[0] = AsciiToCharacter((aging / 1) % 10 + 0x30);
 80030c2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <Display_EditAging+0x1d0>)
 80030c8:	fb83 1302 	smull	r1, r3, r3, r2
 80030cc:	1099      	asrs	r1, r3, #2
 80030ce:	17d3      	asrs	r3, r2, #31
 80030d0:	1ac9      	subs	r1, r1, r3
 80030d2:	460b      	mov	r3, r1
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3330      	adds	r3, #48	; 0x30
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fcf9 	bl	8001adc <AsciiToCharacter>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	801a      	strh	r2, [r3, #0]

    DisplayWrite(display, c, d, n_places);
 80030f2:	6979      	ldr	r1, [r7, #20]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fe fcd0 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fce0 	bl	8001ac4 <DisplaySync>
 8003104:	46ad      	mov	sp, r5
}
 8003106:	bf00      	nop
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bdb0      	pop	{r4, r5, r7, pc}
 800310e:	bf00      	nop
 8003110:	51eb851f 	.word	0x51eb851f
 8003114:	66666667 	.word	0x66666667

08003118 <Display_EditLatitude>:

void Display_EditLatitude(Display *display,
                          double latitude)
{
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	ed87 0b00 	vstr	d0, [r7]
 8003124:	466b      	mov	r3, sp
 8003126:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8003128:	2306      	movs	r3, #6
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
    Character c[n_places];
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	4619      	mov	r1, r3
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	0114      	lsls	r4, r2, #4
 8003144:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8003148:	010b      	lsls	r3, r1, #4
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	4619      	mov	r1, r3
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	0114      	lsls	r4, r2, #4
 800315c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8003160:	010b      	lsls	r3, r1, #4
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	3301      	adds	r3, #1
 8003168:	3307      	adds	r3, #7
 800316a:	08db      	lsrs	r3, r3, #3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	ebad 0d03 	sub.w	sp, sp, r3
 8003172:	466b      	mov	r3, sp
 8003174:	3301      	adds	r3, #1
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
    Dot d[n_places];
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	4619      	mov	r1, r3
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	f04f 0400 	mov.w	r4, #0
 8003192:	00d4      	lsls	r4, r2, #3
 8003194:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003198:	00cb      	lsls	r3, r1, #3
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	4619      	mov	r1, r3
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	f04f 0400 	mov.w	r4, #0
 80031aa:	00d4      	lsls	r4, r2, #3
 80031ac:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80031b0:	00cb      	lsls	r3, r1, #3
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	3307      	adds	r3, #7
 80031b6:	08db      	lsrs	r3, r3, #3
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	ebad 0d03 	sub.w	sp, sp, r3
 80031be:	466b      	mov	r3, sp
 80031c0:	3300      	adds	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]

    d[0] = DOT_OBSCURE;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2200      	movs	r2, #0
 80031ce:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_HIGHLIGHT;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2201      	movs	r2, #1
 80031d4:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2200      	movs	r2, #0
 80031da:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2200      	movs	r2, #0
 80031e0:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2200      	movs	r2, #0
 80031e6:	715a      	strb	r2, [r3, #5]

    c[5] = (latitude > 0.0 ? CH_N : CH_S);
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031f4:	f7fd fc9a 	bl	8000b2c <__aeabi_dcmpgt>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <Display_EditLatitude+0xec>
 80031fe:	f243 4231 	movw	r2, #13361	; 0x3431
 8003202:	e001      	b.n	8003208 <Display_EditLatitude+0xf0>
 8003204:	f64e 1298 	movw	r2, #59800	; 0xe998
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	815a      	strh	r2, [r3, #10]
    c[4] = CH_BLANK;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	2200      	movs	r2, #0
 8003210:	811a      	strh	r2, [r3, #8]
    c[3] = CH_BLANK;
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	2200      	movs	r2, #0
 8003216:	80da      	strh	r2, [r3, #6]

    latitude = fabs(latitude);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003222:	607b      	str	r3, [r7, #4]
    int hi = latitude;
 8003224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003228:	f7fd fca0 	bl	8000b6c <__aeabi_d2iz>
 800322c:	4603      	mov	r3, r0
 800322e:	61bb      	str	r3, [r7, #24]
    int low = ((latitude - hi) * 100.0);
 8003230:	69b8      	ldr	r0, [r7, #24]
 8003232:	f7fd f981 	bl	8000538 <__aeabi_i2d>
 8003236:	4603      	mov	r3, r0
 8003238:	460c      	mov	r4, r1
 800323a:	461a      	mov	r2, r3
 800323c:	4623      	mov	r3, r4
 800323e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003242:	f7fd f82b 	bl	800029c <__aeabi_dsub>
 8003246:	4603      	mov	r3, r0
 8003248:	460c      	mov	r4, r1
 800324a:	4618      	mov	r0, r3
 800324c:	4621      	mov	r1, r4
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	4b45      	ldr	r3, [pc, #276]	; (8003368 <Display_EditLatitude+0x250>)
 8003254:	f7fd f9da 	bl	800060c <__aeabi_dmul>
 8003258:	4603      	mov	r3, r0
 800325a:	460c      	mov	r4, r1
 800325c:	4618      	mov	r0, r3
 800325e:	4621      	mov	r1, r4
 8003260:	f7fd fc84 	bl	8000b6c <__aeabi_d2iz>
 8003264:	4603      	mov	r3, r0
 8003266:	617b      	str	r3, [r7, #20]
    int r = hi * 100 + low;
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2264      	movs	r2, #100	; 0x64
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4413      	add	r3, r2
 8003274:	613b      	str	r3, [r7, #16]


    c[3] = AsciiToCharacter((r / 1000) % 10 + 0x30);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4a3c      	ldr	r2, [pc, #240]	; (800336c <Display_EditLatitude+0x254>)
 800327a:	fb82 1203 	smull	r1, r2, r2, r3
 800327e:	1192      	asrs	r2, r2, #6
 8003280:	17db      	asrs	r3, r3, #31
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <Display_EditLatitude+0x258>)
 8003286:	fb83 1302 	smull	r1, r3, r3, r2
 800328a:	1099      	asrs	r1, r3, #2
 800328c:	17d3      	asrs	r3, r2, #31
 800328e:	1ac9      	subs	r1, r1, r3
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	1ad1      	subs	r1, r2, r3
 800329a:	b2cb      	uxtb	r3, r1
 800329c:	3330      	adds	r3, #48	; 0x30
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fc1b 	bl	8001adc <AsciiToCharacter>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	80da      	strh	r2, [r3, #6]
    c[2] = AsciiToCharacter((r / 100) % 10 + 0x30);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4a30      	ldr	r2, [pc, #192]	; (8003374 <Display_EditLatitude+0x25c>)
 80032b2:	fb82 1203 	smull	r1, r2, r2, r3
 80032b6:	1152      	asrs	r2, r2, #5
 80032b8:	17db      	asrs	r3, r3, #31
 80032ba:	1ad2      	subs	r2, r2, r3
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <Display_EditLatitude+0x258>)
 80032be:	fb83 1302 	smull	r1, r3, r3, r2
 80032c2:	1099      	asrs	r1, r3, #2
 80032c4:	17d3      	asrs	r3, r2, #31
 80032c6:	1ac9      	subs	r1, r1, r3
 80032c8:	460b      	mov	r3, r1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	1ad1      	subs	r1, r2, r3
 80032d2:	b2cb      	uxtb	r3, r1
 80032d4:	3330      	adds	r3, #48	; 0x30
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe fbff 	bl	8001adc <AsciiToCharacter>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	809a      	strh	r2, [r3, #4]
    c[1] = AsciiToCharacter((r / 10) % 10 + 0x30);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4a21      	ldr	r2, [pc, #132]	; (8003370 <Display_EditLatitude+0x258>)
 80032ea:	fb82 1203 	smull	r1, r2, r2, r3
 80032ee:	1092      	asrs	r2, r2, #2
 80032f0:	17db      	asrs	r3, r3, #31
 80032f2:	1ad2      	subs	r2, r2, r3
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <Display_EditLatitude+0x258>)
 80032f6:	fb83 1302 	smull	r1, r3, r3, r2
 80032fa:	1099      	asrs	r1, r3, #2
 80032fc:	17d3      	asrs	r3, r2, #31
 80032fe:	1ac9      	subs	r1, r1, r3
 8003300:	460b      	mov	r3, r1
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	1ad1      	subs	r1, r2, r3
 800330a:	b2cb      	uxtb	r3, r1
 800330c:	3330      	adds	r3, #48	; 0x30
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fbe3 	bl	8001adc <AsciiToCharacter>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	805a      	strh	r2, [r3, #2]
    c[0] = AsciiToCharacter((r / 1) % 10 + 0x30);
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4b13      	ldr	r3, [pc, #76]	; (8003370 <Display_EditLatitude+0x258>)
 8003322:	fb83 1302 	smull	r1, r3, r3, r2
 8003326:	1099      	asrs	r1, r3, #2
 8003328:	17d3      	asrs	r3, r2, #31
 800332a:	1ac9      	subs	r1, r1, r3
 800332c:	460b      	mov	r3, r1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	1ad1      	subs	r1, r2, r3
 8003336:	b2cb      	uxtb	r3, r1
 8003338:	3330      	adds	r3, #48	; 0x30
 800333a:	b2db      	uxtb	r3, r3
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fbcd 	bl	8001adc <AsciiToCharacter>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	801a      	strh	r2, [r3, #0]

    DisplayWrite(display, c, d, n_places);
 800334a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7fe fba4 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7fe fbb4 	bl	8001ac4 <DisplaySync>
 800335c:	46ad      	mov	sp, r5
}
 800335e:	bf00      	nop
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	bf00      	nop
 8003368:	40590000 	.word	0x40590000
 800336c:	10624dd3 	.word	0x10624dd3
 8003370:	66666667 	.word	0x66666667
 8003374:	51eb851f 	.word	0x51eb851f

08003378 <Display_EditLongitude>:

void Display_EditLongitude(Display *display,
                           double longitude)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b08c      	sub	sp, #48	; 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	ed87 0b00 	vstr	d0, [r7]
 8003384:	466b      	mov	r3, sp
 8003386:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8003388:	2306      	movs	r3, #6
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
    Character c[n_places];
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	4619      	mov	r1, r3
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	f04f 0400 	mov.w	r4, #0
 80033a2:	0114      	lsls	r4, r2, #4
 80033a4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80033a8:	010b      	lsls	r3, r1, #4
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	4619      	mov	r1, r3
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	f04f 0400 	mov.w	r4, #0
 80033ba:	0114      	lsls	r4, r2, #4
 80033bc:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80033c0:	010b      	lsls	r3, r1, #4
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	3301      	adds	r3, #1
 80033c8:	3307      	adds	r3, #7
 80033ca:	08db      	lsrs	r3, r3, #3
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	ebad 0d03 	sub.w	sp, sp, r3
 80033d2:	466b      	mov	r3, sp
 80033d4:	3301      	adds	r3, #1
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
    Dot d[n_places];
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	3b01      	subs	r3, #1
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	4619      	mov	r1, r3
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	00d4      	lsls	r4, r2, #3
 80033f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80033f8:	00cb      	lsls	r3, r1, #3
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	4619      	mov	r1, r3
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	f04f 0400 	mov.w	r4, #0
 800340a:	00d4      	lsls	r4, r2, #3
 800340c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003410:	00cb      	lsls	r3, r1, #3
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	3307      	adds	r3, #7
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	ebad 0d03 	sub.w	sp, sp, r3
 800341e:	466b      	mov	r3, sp
 8003420:	3300      	adds	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]

    d[0] = DOT_OBSCURE;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2200      	movs	r2, #0
 800342e:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_HIGHLIGHT;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2201      	movs	r2, #1
 8003434:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2200      	movs	r2, #0
 800343a:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2200      	movs	r2, #0
 8003440:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2200      	movs	r2, #0
 8003446:	715a      	strb	r2, [r3, #5]

    c[5] = (longitude >= 0.0 ? CH_E : CH_W);
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003454:	f7fd fb60 	bl	8000b18 <__aeabi_dcmpge>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <Display_EditLongitude+0xec>
 800345e:	f64c 1299 	movw	r2, #51609	; 0xc999
 8003462:	e001      	b.n	8003468 <Display_EditLongitude+0xf0>
 8003464:	f243 4213 	movw	r2, #13331	; 0x3413
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	815a      	strh	r2, [r3, #10]
    c[4] = CH_BLANK;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	2200      	movs	r2, #0
 8003470:	811a      	strh	r2, [r3, #8]
    c[3] = CH_BLANK;
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	2200      	movs	r2, #0
 8003476:	80da      	strh	r2, [r3, #6]

    longitude = fabs(longitude);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003482:	607b      	str	r3, [r7, #4]
    int hi = longitude;
 8003484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003488:	f7fd fb70 	bl	8000b6c <__aeabi_d2iz>
 800348c:	4603      	mov	r3, r0
 800348e:	61bb      	str	r3, [r7, #24]
    int low = ((longitude - hi) * 100.0);
 8003490:	69b8      	ldr	r0, [r7, #24]
 8003492:	f7fd f851 	bl	8000538 <__aeabi_i2d>
 8003496:	4603      	mov	r3, r0
 8003498:	460c      	mov	r4, r1
 800349a:	461a      	mov	r2, r3
 800349c:	4623      	mov	r3, r4
 800349e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034a2:	f7fc fefb 	bl	800029c <__aeabi_dsub>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	4618      	mov	r0, r3
 80034ac:	4621      	mov	r1, r4
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <Display_EditLongitude+0x250>)
 80034b4:	f7fd f8aa 	bl	800060c <__aeabi_dmul>
 80034b8:	4603      	mov	r3, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	4618      	mov	r0, r3
 80034be:	4621      	mov	r1, r4
 80034c0:	f7fd fb54 	bl	8000b6c <__aeabi_d2iz>
 80034c4:	4603      	mov	r3, r0
 80034c6:	617b      	str	r3, [r7, #20]
    int r = hi * 100 + low;
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2264      	movs	r2, #100	; 0x64
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4413      	add	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]


    c[3] = AsciiToCharacter((r / 1000) % 10 + 0x30);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <Display_EditLongitude+0x254>)
 80034da:	fb82 1203 	smull	r1, r2, r2, r3
 80034de:	1192      	asrs	r2, r2, #6
 80034e0:	17db      	asrs	r3, r3, #31
 80034e2:	1ad2      	subs	r2, r2, r3
 80034e4:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <Display_EditLongitude+0x258>)
 80034e6:	fb83 1302 	smull	r1, r3, r3, r2
 80034ea:	1099      	asrs	r1, r3, #2
 80034ec:	17d3      	asrs	r3, r2, #31
 80034ee:	1ac9      	subs	r1, r1, r3
 80034f0:	460b      	mov	r3, r1
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	1ad1      	subs	r1, r2, r3
 80034fa:	b2cb      	uxtb	r3, r1
 80034fc:	3330      	adds	r3, #48	; 0x30
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe faeb 	bl	8001adc <AsciiToCharacter>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	80da      	strh	r2, [r3, #6]
    c[2] = AsciiToCharacter((r / 100) % 10 + 0x30);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4a30      	ldr	r2, [pc, #192]	; (80035d4 <Display_EditLongitude+0x25c>)
 8003512:	fb82 1203 	smull	r1, r2, r2, r3
 8003516:	1152      	asrs	r2, r2, #5
 8003518:	17db      	asrs	r3, r3, #31
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <Display_EditLongitude+0x258>)
 800351e:	fb83 1302 	smull	r1, r3, r3, r2
 8003522:	1099      	asrs	r1, r3, #2
 8003524:	17d3      	asrs	r3, r2, #31
 8003526:	1ac9      	subs	r1, r1, r3
 8003528:	460b      	mov	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	1ad1      	subs	r1, r2, r3
 8003532:	b2cb      	uxtb	r3, r1
 8003534:	3330      	adds	r3, #48	; 0x30
 8003536:	b2db      	uxtb	r3, r3
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe facf 	bl	8001adc <AsciiToCharacter>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	809a      	strh	r2, [r3, #4]
    c[1] = AsciiToCharacter((r / 10) % 10 + 0x30);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <Display_EditLongitude+0x258>)
 800354a:	fb82 1203 	smull	r1, r2, r2, r3
 800354e:	1092      	asrs	r2, r2, #2
 8003550:	17db      	asrs	r3, r3, #31
 8003552:	1ad2      	subs	r2, r2, r3
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <Display_EditLongitude+0x258>)
 8003556:	fb83 1302 	smull	r1, r3, r3, r2
 800355a:	1099      	asrs	r1, r3, #2
 800355c:	17d3      	asrs	r3, r2, #31
 800355e:	1ac9      	subs	r1, r1, r3
 8003560:	460b      	mov	r3, r1
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	1ad1      	subs	r1, r2, r3
 800356a:	b2cb      	uxtb	r3, r1
 800356c:	3330      	adds	r3, #48	; 0x30
 800356e:	b2db      	uxtb	r3, r3
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fab3 	bl	8001adc <AsciiToCharacter>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	805a      	strh	r2, [r3, #2]
    c[0] = AsciiToCharacter((r / 1) % 10 + 0x30);
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <Display_EditLongitude+0x258>)
 8003582:	fb83 1302 	smull	r1, r3, r3, r2
 8003586:	1099      	asrs	r1, r3, #2
 8003588:	17d3      	asrs	r3, r2, #31
 800358a:	1ac9      	subs	r1, r1, r3
 800358c:	460b      	mov	r3, r1
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	1ad1      	subs	r1, r2, r3
 8003596:	b2cb      	uxtb	r3, r1
 8003598:	3330      	adds	r3, #48	; 0x30
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fa9d 	bl	8001adc <AsciiToCharacter>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	801a      	strh	r2, [r3, #0]

    DisplayWrite(display, c, d, n_places);
 80035aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7fe fa74 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7fe fa84 	bl	8001ac4 <DisplaySync>
 80035bc:	46ad      	mov	sp, r5
}
 80035be:	bf00      	nop
 80035c0:	3730      	adds	r7, #48	; 0x30
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bdb0      	pop	{r4, r5, r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40590000 	.word	0x40590000
 80035cc:	10624dd3 	.word	0x10624dd3
 80035d0:	66666667 	.word	0x66666667
 80035d4:	51eb851f 	.word	0x51eb851f

080035d8 <Display_EditTimezone>:

void Display_EditTimezone(Display *display,
                          double tz)
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	ed87 0b00 	vstr	d0, [r7]
 80035e4:	466b      	mov	r3, sp
 80035e6:	461d      	mov	r5, r3
    const size_t n_places = 6;
 80035e8:	2306      	movs	r3, #6
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
    Character c[n_places];
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	4619      	mov	r1, r3
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	f04f 0400 	mov.w	r4, #0
 8003602:	0114      	lsls	r4, r2, #4
 8003604:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8003608:	010b      	lsls	r3, r1, #4
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f04f 0400 	mov.w	r4, #0
 800361a:	0114      	lsls	r4, r2, #4
 800361c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8003620:	010b      	lsls	r3, r1, #4
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	3301      	adds	r3, #1
 8003628:	3307      	adds	r3, #7
 800362a:	08db      	lsrs	r3, r3, #3
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	ebad 0d03 	sub.w	sp, sp, r3
 8003632:	466b      	mov	r3, sp
 8003634:	3301      	adds	r3, #1
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
    Dot d[n_places];
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	4619      	mov	r1, r3
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	f04f 0400 	mov.w	r4, #0
 8003652:	00d4      	lsls	r4, r2, #3
 8003654:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003658:	00cb      	lsls	r3, r1, #3
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	4619      	mov	r1, r3
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	f04f 0400 	mov.w	r4, #0
 800366a:	00d4      	lsls	r4, r2, #3
 800366c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003670:	00cb      	lsls	r3, r1, #3
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	3307      	adds	r3, #7
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	ebad 0d03 	sub.w	sp, sp, r3
 800367e:	466b      	mov	r3, sp
 8003680:	3300      	adds	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]

    d[0] = DOT_OBSCURE;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_OBSCURE;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	2200      	movs	r2, #0
 800368e:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_HIGHLIGHT;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2201      	movs	r2, #1
 8003694:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2200      	movs	r2, #0
 800369a:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2200      	movs	r2, #0
 80036a0:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2200      	movs	r2, #0
 80036a6:	715a      	strb	r2, [r3, #5]

    c[5] = CH_Z;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	f24c 3282 	movw	r2, #50050	; 0xc382
 80036ae:	815a      	strh	r2, [r3, #10]
    c[4] = (tz > 0.0 ? CH_PLUS : CH_MINUS);
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036bc:	f7fd fa36 	bl	8000b2c <__aeabi_dcmpgt>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <Display_EditTimezone+0xf4>
 80036c6:	f640 024c 	movw	r2, #2124	; 0x84c
 80036ca:	e001      	b.n	80036d0 <Display_EditTimezone+0xf8>
 80036cc:	f640 0208 	movw	r2, #2056	; 0x808
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	811a      	strh	r2, [r3, #8]
    c[3] = CH_BLANK;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	2200      	movs	r2, #0
 80036d8:	80da      	strh	r2, [r3, #6]

    tz = fabs(tz);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036e4:	607b      	str	r3, [r7, #4]
    int hi = tz;
 80036e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036ea:	f7fd fa3f 	bl	8000b6c <__aeabi_d2iz>
 80036ee:	4603      	mov	r3, r0
 80036f0:	61bb      	str	r3, [r7, #24]
    int low = ((tz - hi) * 100.0);
 80036f2:	69b8      	ldr	r0, [r7, #24]
 80036f4:	f7fc ff20 	bl	8000538 <__aeabi_i2d>
 80036f8:	4603      	mov	r3, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	461a      	mov	r2, r3
 80036fe:	4623      	mov	r3, r4
 8003700:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003704:	f7fc fdca 	bl	800029c <__aeabi_dsub>
 8003708:	4603      	mov	r3, r0
 800370a:	460c      	mov	r4, r1
 800370c:	4618      	mov	r0, r3
 800370e:	4621      	mov	r1, r4
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	4b44      	ldr	r3, [pc, #272]	; (8003828 <Display_EditTimezone+0x250>)
 8003716:	f7fc ff79 	bl	800060c <__aeabi_dmul>
 800371a:	4603      	mov	r3, r0
 800371c:	460c      	mov	r4, r1
 800371e:	4618      	mov	r0, r3
 8003720:	4621      	mov	r1, r4
 8003722:	f7fd fa23 	bl	8000b6c <__aeabi_d2iz>
 8003726:	4603      	mov	r3, r0
 8003728:	617b      	str	r3, [r7, #20]
    int r = hi * 100 + low;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2264      	movs	r2, #100	; 0x64
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4413      	add	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

    c[3] = AsciiToCharacter((r / 1000) % 10 + 0x30);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4a3c      	ldr	r2, [pc, #240]	; (800382c <Display_EditTimezone+0x254>)
 800373c:	fb82 1203 	smull	r1, r2, r2, r3
 8003740:	1192      	asrs	r2, r2, #6
 8003742:	17db      	asrs	r3, r3, #31
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <Display_EditTimezone+0x258>)
 8003748:	fb83 1302 	smull	r1, r3, r3, r2
 800374c:	1099      	asrs	r1, r3, #2
 800374e:	17d3      	asrs	r3, r2, #31
 8003750:	1ac9      	subs	r1, r1, r3
 8003752:	460b      	mov	r3, r1
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	1ad1      	subs	r1, r2, r3
 800375c:	b2cb      	uxtb	r3, r1
 800375e:	3330      	adds	r3, #48	; 0x30
 8003760:	b2db      	uxtb	r3, r3
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe f9ba 	bl	8001adc <AsciiToCharacter>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	80da      	strh	r2, [r3, #6]
    c[2] = AsciiToCharacter((r / 100) % 10 + 0x30);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4a30      	ldr	r2, [pc, #192]	; (8003834 <Display_EditTimezone+0x25c>)
 8003774:	fb82 1203 	smull	r1, r2, r2, r3
 8003778:	1152      	asrs	r2, r2, #5
 800377a:	17db      	asrs	r3, r3, #31
 800377c:	1ad2      	subs	r2, r2, r3
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <Display_EditTimezone+0x258>)
 8003780:	fb83 1302 	smull	r1, r3, r3, r2
 8003784:	1099      	asrs	r1, r3, #2
 8003786:	17d3      	asrs	r3, r2, #31
 8003788:	1ac9      	subs	r1, r1, r3
 800378a:	460b      	mov	r3, r1
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	1ad1      	subs	r1, r2, r3
 8003794:	b2cb      	uxtb	r3, r1
 8003796:	3330      	adds	r3, #48	; 0x30
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe f99e 	bl	8001adc <AsciiToCharacter>
 80037a0:	4603      	mov	r3, r0
 80037a2:	461a      	mov	r2, r3
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	809a      	strh	r2, [r3, #4]
    c[1] = AsciiToCharacter((r / 10) % 10 + 0x30);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4a21      	ldr	r2, [pc, #132]	; (8003830 <Display_EditTimezone+0x258>)
 80037ac:	fb82 1203 	smull	r1, r2, r2, r3
 80037b0:	1092      	asrs	r2, r2, #2
 80037b2:	17db      	asrs	r3, r3, #31
 80037b4:	1ad2      	subs	r2, r2, r3
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <Display_EditTimezone+0x258>)
 80037b8:	fb83 1302 	smull	r1, r3, r3, r2
 80037bc:	1099      	asrs	r1, r3, #2
 80037be:	17d3      	asrs	r3, r2, #31
 80037c0:	1ac9      	subs	r1, r1, r3
 80037c2:	460b      	mov	r3, r1
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	1ad1      	subs	r1, r2, r3
 80037cc:	b2cb      	uxtb	r3, r1
 80037ce:	3330      	adds	r3, #48	; 0x30
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe f982 	bl	8001adc <AsciiToCharacter>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	805a      	strh	r2, [r3, #2]
    c[0] = AsciiToCharacter((r / 1) % 10 + 0x30);
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <Display_EditTimezone+0x258>)
 80037e4:	fb83 1302 	smull	r1, r3, r3, r2
 80037e8:	1099      	asrs	r1, r3, #2
 80037ea:	17d3      	asrs	r3, r2, #31
 80037ec:	1ac9      	subs	r1, r1, r3
 80037ee:	460b      	mov	r3, r1
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	1ad1      	subs	r1, r2, r3
 80037f8:	b2cb      	uxtb	r3, r1
 80037fa:	3330      	adds	r3, #48	; 0x30
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe f96c 	bl	8001adc <AsciiToCharacter>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	801a      	strh	r2, [r3, #0]

    DisplayWrite(display, c, d, n_places);
 800380c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7fe f943 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7fe f953 	bl	8001ac4 <DisplaySync>
 800381e:	46ad      	mov	sp, r5
}
 8003820:	bf00      	nop
 8003822:	3730      	adds	r7, #48	; 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bdb0      	pop	{r4, r5, r7, pc}
 8003828:	40590000 	.word	0x40590000
 800382c:	10624dd3 	.word	0x10624dd3
 8003830:	66666667 	.word	0x66666667
 8003834:	51eb851f 	.word	0x51eb851f

08003838 <Display_EditPCorrection>:

void Display_EditPCorrection(Display *display,
        					 double p_correction)
{
 8003838:	b5b0      	push	{r4, r5, r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	ed87 0b00 	vstr	d0, [r7]
 8003844:	466b      	mov	r3, sp
 8003846:	461d      	mov	r5, r3
    const size_t n_places = 6;
 8003848:	2306      	movs	r3, #6
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
    Character c[n_places];
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	3b01      	subs	r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	0114      	lsls	r4, r2, #4
 8003864:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8003868:	010b      	lsls	r3, r1, #4
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	4619      	mov	r1, r3
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	f04f 0400 	mov.w	r4, #0
 800387a:	0114      	lsls	r4, r2, #4
 800387c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8003880:	010b      	lsls	r3, r1, #4
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	3301      	adds	r3, #1
 8003888:	3307      	adds	r3, #7
 800388a:	08db      	lsrs	r3, r3, #3
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	ebad 0d03 	sub.w	sp, sp, r3
 8003892:	466b      	mov	r3, sp
 8003894:	3301      	adds	r3, #1
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    Dot d[n_places];
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	3b01      	subs	r3, #1
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	4619      	mov	r1, r3
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	f04f 0400 	mov.w	r4, #0
 80038b2:	00d4      	lsls	r4, r2, #3
 80038b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80038b8:	00cb      	lsls	r3, r1, #3
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	4619      	mov	r1, r3
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	f04f 0400 	mov.w	r4, #0
 80038ca:	00d4      	lsls	r4, r2, #3
 80038cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80038d0:	00cb      	lsls	r3, r1, #3
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	3307      	adds	r3, #7
 80038d6:	08db      	lsrs	r3, r3, #3
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	ebad 0d03 	sub.w	sp, sp, r3
 80038de:	466b      	mov	r3, sp
 80038e0:	3300      	adds	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]

    d[0] = DOT_OBSCURE;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
    d[1] = DOT_HIGHLIGHT;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2201      	movs	r2, #1
 80038ee:	705a      	strb	r2, [r3, #1]
    d[2] = DOT_OBSCURE;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2200      	movs	r2, #0
 80038f4:	709a      	strb	r2, [r3, #2]
    d[3] = DOT_OBSCURE;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2200      	movs	r2, #0
 80038fa:	70da      	strb	r2, [r3, #3]
    d[4] = DOT_OBSCURE;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2200      	movs	r2, #0
 8003900:	711a      	strb	r2, [r3, #4]
    d[5] = DOT_OBSCURE;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2200      	movs	r2, #0
 8003906:	715a      	strb	r2, [r3, #5]

    c[5] = CH_P;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f640 5299 	movw	r2, #3481	; 0xd99
 800390e:	815a      	strh	r2, [r3, #10]
    c[4] = CH_c;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f244 0209 	movw	r2, #16393	; 0x4009
 8003916:	811a      	strh	r2, [r3, #8]
    c[3] = (p_correction > 0.0 ? CH_PLUS : CH_MINUS);
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003924:	f7fd f902 	bl	8000b2c <__aeabi_dcmpgt>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <Display_EditPCorrection+0xfc>
 800392e:	f640 024c 	movw	r2, #2124	; 0x84c
 8003932:	e001      	b.n	8003938 <Display_EditPCorrection+0x100>
 8003934:	f640 0208 	movw	r2, #2056	; 0x808
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	80da      	strh	r2, [r3, #6]

    p_correction = fabs(p_correction);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003946:	607b      	str	r3, [r7, #4]
    int hi = p_correction;
 8003948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800394c:	f7fd f90e 	bl	8000b6c <__aeabi_d2iz>
 8003950:	4603      	mov	r3, r0
 8003952:	61bb      	str	r3, [r7, #24]
    int low = ((p_correction - hi) * 10.0);
 8003954:	69b8      	ldr	r0, [r7, #24]
 8003956:	f7fc fdef 	bl	8000538 <__aeabi_i2d>
 800395a:	4603      	mov	r3, r0
 800395c:	460c      	mov	r4, r1
 800395e:	461a      	mov	r2, r3
 8003960:	4623      	mov	r3, r4
 8003962:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003966:	f7fc fc99 	bl	800029c <__aeabi_dsub>
 800396a:	4603      	mov	r3, r0
 800396c:	460c      	mov	r4, r1
 800396e:	4618      	mov	r0, r3
 8003970:	4621      	mov	r1, r4
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <Display_EditPCorrection+0x220>)
 8003978:	f7fc fe48 	bl	800060c <__aeabi_dmul>
 800397c:	4603      	mov	r3, r0
 800397e:	460c      	mov	r4, r1
 8003980:	4618      	mov	r0, r3
 8003982:	4621      	mov	r1, r4
 8003984:	f7fd f8f2 	bl	8000b6c <__aeabi_d2iz>
 8003988:	4603      	mov	r3, r0
 800398a:	617b      	str	r3, [r7, #20]
    int r = hi * 10 + low;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	461a      	mov	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4413      	add	r3, r2
 800399c:	613b      	str	r3, [r7, #16]

//    c[3] = AsciiToCharacter((r / 1000) % 10 + 0x30);
    c[2] = AsciiToCharacter((r / 100) % 10 + 0x30);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4a2e      	ldr	r2, [pc, #184]	; (8003a5c <Display_EditPCorrection+0x224>)
 80039a2:	fb82 1203 	smull	r1, r2, r2, r3
 80039a6:	1152      	asrs	r2, r2, #5
 80039a8:	17db      	asrs	r3, r3, #31
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <Display_EditPCorrection+0x228>)
 80039ae:	fb83 1302 	smull	r1, r3, r3, r2
 80039b2:	1099      	asrs	r1, r3, #2
 80039b4:	17d3      	asrs	r3, r2, #31
 80039b6:	1ac9      	subs	r1, r1, r3
 80039b8:	460b      	mov	r3, r1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	1ad1      	subs	r1, r2, r3
 80039c2:	b2cb      	uxtb	r3, r1
 80039c4:	3330      	adds	r3, #48	; 0x30
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe f887 	bl	8001adc <AsciiToCharacter>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	809a      	strh	r2, [r3, #4]
    c[1] = AsciiToCharacter((r / 10) % 10 + 0x30);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <Display_EditPCorrection+0x228>)
 80039da:	fb82 1203 	smull	r1, r2, r2, r3
 80039de:	1092      	asrs	r2, r2, #2
 80039e0:	17db      	asrs	r3, r3, #31
 80039e2:	1ad2      	subs	r2, r2, r3
 80039e4:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <Display_EditPCorrection+0x228>)
 80039e6:	fb83 1302 	smull	r1, r3, r3, r2
 80039ea:	1099      	asrs	r1, r3, #2
 80039ec:	17d3      	asrs	r3, r2, #31
 80039ee:	1ac9      	subs	r1, r1, r3
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	1ad1      	subs	r1, r2, r3
 80039fa:	b2cb      	uxtb	r3, r1
 80039fc:	3330      	adds	r3, #48	; 0x30
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe f86b 	bl	8001adc <AsciiToCharacter>
 8003a06:	4603      	mov	r3, r0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	805a      	strh	r2, [r3, #2]
    c[0] = AsciiToCharacter((r / 1) % 10 + 0x30);
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <Display_EditPCorrection+0x228>)
 8003a12:	fb83 1302 	smull	r1, r3, r3, r2
 8003a16:	1099      	asrs	r1, r3, #2
 8003a18:	17d3      	asrs	r3, r2, #31
 8003a1a:	1ac9      	subs	r1, r1, r3
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	1ad1      	subs	r1, r2, r3
 8003a26:	b2cb      	uxtb	r3, r1
 8003a28:	3330      	adds	r3, #48	; 0x30
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe f855 	bl	8001adc <AsciiToCharacter>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461a      	mov	r2, r3
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	801a      	strh	r2, [r3, #0]

    DisplayWrite(display, c, d, n_places);
 8003a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7fe f82c 	bl	8001a9e <DisplayWrite>
    DisplaySync(display);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7fe f83c 	bl	8001ac4 <DisplaySync>
 8003a4c:	46ad      	mov	sp, r5
}
 8003a4e:	bf00      	nop
 8003a50:	3730      	adds	r7, #48	; 0x30
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bdb0      	pop	{r4, r5, r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40240000 	.word	0x40240000
 8003a5c:	51eb851f 	.word	0x51eb851f
 8003a60:	66666667 	.word	0x66666667

08003a64 <Display_EditDate>:

void Display_EditDate(Display *display,
                      Rtc_Timestamp *ts)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
    Display_A1_3(display, ts);
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff f931 	bl	8002cd8 <Display_A1_3>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <DisplayBufferCreate>:

#define N_BITS_IN_BYTE 8

void DisplayBufferCreate(DisplayBuffer *buffer,
                   		 size_t logical_size)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
	 *  symbols            dots
	 * |5|4|3|2|1|0| xxxx |0|1|2|3|4|5|
	 * N ............................ 0
	 * */

	buffer->logical_size = logical_size;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
	buffer->symbols_buffer_size = logical_size;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	60da      	str	r2, [r3, #12]
	buffer->dots_buffer_size = (logical_size / (sizeof(uint16_t) * N_BITS_IN_BYTE) + 1);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	611a      	str	r2, [r3, #16]
	buffer->buffer_size = (buffer->symbols_buffer_size + buffer->dots_buffer_size) * sizeof(uint16_t);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	005a      	lsls	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]
    buffer->buffer = pvPortMalloc(buffer->buffer_size);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f011 f9a6 	bl	8014e04 <pvPortMalloc>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]

    memset(buffer->buffer, 0, buffer->buffer_size);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f011 fbb8 	bl	801523e <memset>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <DisplayBufferWrite>:

void DisplayBufferWrite(DisplayBuffer *buffer,
                  		Character str[],
                  		Dot dot[],
                  		size_t logical_size)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	603b      	str	r3, [r7, #0]
	DisplayBufferWriteDots(buffer, dot, logical_size);
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f809 	bl	8003b00 <DisplayBufferWriteDots>
	DisplayBufferWriteCharacters(buffer, str, logical_size);
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f853 	bl	8003b9e <DisplayBufferWriteCharacters>
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <DisplayBufferWriteDots>:

void DisplayBufferWriteDots(DisplayBuffer *buffer,
							Dot dot[],
							size_t logical_size)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
	size_t dot_buff_size = (logical_size / N_BITS_IN_BYTE) + 1;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	08db      	lsrs	r3, r3, #3
 8003b10:	3301      	adds	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
	uint8_t *dot_buff = (uint8_t*)pvPortMalloc(dot_buff_size);
 8003b14:	69f8      	ldr	r0, [r7, #28]
 8003b16:	f011 f975 	bl	8014e04 <pvPortMalloc>
 8003b1a:	61b8      	str	r0, [r7, #24]
	size_t k, l;

	/* Dots buffer */
	memset(dot_buff, 0, dot_buff_size);
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	69b8      	ldr	r0, [r7, #24]
 8003b22:	f011 fb8c 	bl	801523e <memset>

	for (size_t i = 0, j = logical_size-1;
 8003b26:	2300      	movs	r3, #0
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	e023      	b.n	8003b7a <DisplayBufferWriteDots+0x7a>
		 i != logical_size; ++i, --j)
	{
		k = i / 8;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	08db      	lsrs	r3, r3, #3
 8003b36:	617b      	str	r3, [r7, #20]
		l = i % 8;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	613b      	str	r3, [r7, #16]

		if (dot[j] == DOT_HIGHLIGHT) {
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d110      	bne.n	8003b6e <DisplayBufferWriteDots+0x6e>
			dot_buff[k] |= POW2(l);
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4413      	add	r3, r2
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	b25a      	sxtb	r2, r3
 8003b56:	2101      	movs	r1, #1
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	b25b      	sxtb	r3, r3
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b259      	sxtb	r1, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4413      	add	r3, r2
 8003b6a:	b2ca      	uxtb	r2, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
		 i != logical_size; ++i, --j)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	3301      	adds	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	623b      	str	r3, [r7, #32]
	for (size_t i = 0, j = logical_size-1;
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d1d7      	bne.n	8003b32 <DisplayBufferWriteDots+0x32>
		}
	}

	memcpy(buffer->buffer, dot_buff, dot_buff_size);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f011 fb4c 	bl	8015228 <memcpy>
	vPortFree(dot_buff);
 8003b90:	69b8      	ldr	r0, [r7, #24]
 8003b92:	f011 f9f9 	bl	8014f88 <vPortFree>
}
 8003b96:	bf00      	nop
 8003b98:	3728      	adds	r7, #40	; 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <DisplayBufferWriteCharacters>:

void DisplayBufferWriteCharacters(DisplayBuffer *buffer,
							 	  Character str[],
							 	  size_t logical_size)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
	/* Symbol buffer */
	for (size_t i = buffer->dots_buffer_size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e010      	b.n	8003bd4 <DisplayBufferWriteCharacters+0x36>
		 i != logical_size + buffer->dots_buffer_size;
		 ++i)
	{
		((uint16_t *)buffer->buffer)[i] = str[i-buffer->dots_buffer_size];
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	8812      	ldrh	r2, [r2, #0]
 8003bcc:	801a      	strh	r2, [r3, #0]
		 ++i)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
		 i != logical_size + buffer->dots_buffer_size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4413      	add	r3, r2
	for (size_t i = buffer->dots_buffer_size;
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d1e7      	bne.n	8003bb2 <DisplayBufferWriteCharacters+0x14>
	}
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <MX_DMA_Init+0x68>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <MX_DMA_Init+0x68>)
 8003c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <MX_DMA_Init+0x68>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <MX_DMA_Init+0x68>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <MX_DMA_Init+0x68>)
 8003c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c20:	6313      	str	r3, [r2, #48]	; 0x30
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <MX_DMA_Init+0x68>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2105      	movs	r1, #5
 8003c32:	2010      	movs	r0, #16
 8003c34:	f00a fc5c 	bl	800e4f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003c38:	2010      	movs	r0, #16
 8003c3a:	f00a fc75 	bl	800e528 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2105      	movs	r1, #5
 8003c42:	2038      	movs	r0, #56	; 0x38
 8003c44:	f00a fc54 	bl	800e4f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c48:	2038      	movs	r0, #56	; 0x38
 8003c4a:	f00a fc6d 	bl	800e528 <HAL_NVIC_EnableIRQ>

}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800

08003c5c <FlashErase>:
 */

#include "flash.h"

void FlashErase()
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef flash_ok;

	flash_ok = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	71fb      	strb	r3, [r7, #7]
	while(flash_ok != HAL_OK) {
 8003c66:	e003      	b.n	8003c70 <FlashErase+0x14>
		flash_ok = HAL_FLASH_Unlock();
 8003c68:	f00b f850 	bl	800ed0c <HAL_FLASH_Unlock>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	71fb      	strb	r3, [r7, #7]
	while(flash_ok != HAL_OK) {
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f8      	bne.n	8003c68 <FlashErase+0xc>
	}

	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8003c76:	2102      	movs	r1, #2
 8003c78:	200b      	movs	r0, #11
 8003c7a:	f00b f9a7 	bl	800efcc <FLASH_Erase_Sector>

	flash_ok = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	71fb      	strb	r3, [r7, #7]
	while(flash_ok != HAL_OK) {
 8003c82:	e003      	b.n	8003c8c <FlashErase+0x30>
		flash_ok = HAL_FLASH_Lock();
 8003c84:	f00b f864 	bl	800ed50 <HAL_FLASH_Lock>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	71fb      	strb	r3, [r7, #7]
	while(flash_ok != HAL_OK) {
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f8      	bne.n	8003c84 <FlashErase+0x28>
	}
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <FlashWrite>:

void FlashWrite(int tz_idx,
				double latitude,
				double longitude,
				double p_correction)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b08d      	sub	sp, #52	; 0x34
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	61f8      	str	r0, [r7, #28]
 8003ca4:	ed87 0b04 	vstr	d0, [r7, #16]
 8003ca8:	ed87 1b02 	vstr	d1, [r7, #8]
 8003cac:	ed87 2b00 	vstr	d2, [r7]
		uint32_t u32[2];
		uint64_t u64;
		double d;
	} cast;

	FlashErase();
 8003cb0:	f7ff ffd4 	bl	8003c5c <FlashErase>

	{
		flash_ok = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003cba:	e004      	b.n	8003cc6 <FlashWrite+0x2a>
			flash_ok = HAL_FLASH_Unlock();
 8003cbc:	f00b f826 	bl	800ed0c <HAL_FLASH_Unlock>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f6      	bne.n	8003cbc <FlashWrite+0x20>
		}

		flash_ok = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003cd4:	e00b      	b.n	8003cee <FlashWrite+0x52>
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD, TZ_IDX_ADDR, tz_idx);
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4623      	mov	r3, r4
 8003ce0:	494f      	ldr	r1, [pc, #316]	; (8003e20 <FlashWrite+0x184>)
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	f00a ffbe 	bl	800ec64 <HAL_FLASH_Program>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <FlashWrite+0x3a>
		}

		/* lat */
		cast.d = latitude;
 8003cf6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003cfa:	e9c7 3408 	strd	r3, r4, [r7, #32]
		flash_ok = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003d04:	e00b      	b.n	8003d1e <FlashWrite+0x82>
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD, LATITUDE_ADDR,
					cast.u32[0]);
 8003d06:	6a3b      	ldr	r3, [r7, #32]
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD, LATITUDE_ADDR,
 8003d08:	f04f 0400 	mov.w	r4, #0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4623      	mov	r3, r4
 8003d10:	4944      	ldr	r1, [pc, #272]	; (8003e24 <FlashWrite+0x188>)
 8003d12:	2002      	movs	r0, #2
 8003d14:	f00a ffa6 	bl	800ec64 <HAL_FLASH_Program>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ef      	bne.n	8003d06 <FlashWrite+0x6a>
		}

		flash_ok = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003d2c:	e00b      	b.n	8003d46 <FlashWrite+0xaa>
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
					LATITUDE_ADDR + sizeof(int), cast.u32[1]);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
 8003d30:	f04f 0400 	mov.w	r4, #0
 8003d34:	461a      	mov	r2, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	493b      	ldr	r1, [pc, #236]	; (8003e28 <FlashWrite+0x18c>)
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f00a ff92 	bl	800ec64 <HAL_FLASH_Program>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ef      	bne.n	8003d2e <FlashWrite+0x92>
		}
		/* ~ lat */

		/* long */
		cast.d = longitude;
 8003d4e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d52:	e9c7 3408 	strd	r3, r4, [r7, #32]
		flash_ok = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003d5c:	e00b      	b.n	8003d76 <FlashWrite+0xda>
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
										 LONGITUDE_ADDR,
										 cast.u32[0]);
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
 8003d60:	f04f 0400 	mov.w	r4, #0
 8003d64:	461a      	mov	r2, r3
 8003d66:	4623      	mov	r3, r4
 8003d68:	4930      	ldr	r1, [pc, #192]	; (8003e2c <FlashWrite+0x190>)
 8003d6a:	2002      	movs	r0, #2
 8003d6c:	f00a ff7a 	bl	800ec64 <HAL_FLASH_Program>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ef      	bne.n	8003d5e <FlashWrite+0xc2>
		}

		flash_ok = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003d84:	e00b      	b.n	8003d9e <FlashWrite+0x102>
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
										 LONGITUDE_ADDR + sizeof(int),
										 cast.u32[1]);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	4927      	ldr	r1, [pc, #156]	; (8003e30 <FlashWrite+0x194>)
 8003d92:	2002      	movs	r0, #2
 8003d94:	f00a ff66 	bl	800ec64 <HAL_FLASH_Program>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ef      	bne.n	8003d86 <FlashWrite+0xea>
		}
		/* ~ long */

		/* p_correction */
		cast.d = p_correction;
 8003da6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003daa:	e9c7 3408 	strd	r3, r4, [r7, #32]
		flash_ok = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003db4:	e00b      	b.n	8003dce <FlashWrite+0x132>
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
										 PRESSURE_CORRECTION_ADDR,
										 cast.u32[0]);
 8003db6:	6a3b      	ldr	r3, [r7, #32]
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
 8003db8:	f04f 0400 	mov.w	r4, #0
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	491c      	ldr	r1, [pc, #112]	; (8003e34 <FlashWrite+0x198>)
 8003dc2:	2002      	movs	r0, #2
 8003dc4:	f00a ff4e 	bl	800ec64 <HAL_FLASH_Program>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1ef      	bne.n	8003db6 <FlashWrite+0x11a>
		}

		flash_ok = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003ddc:	e00b      	b.n	8003df6 <FlashWrite+0x15a>
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
										 PRESSURE_CORRECTION_ADDR + sizeof(int),
										 cast.u32[1]);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			flash_ok = HAL_FLASH_Program(TYPEPROGRAM_WORD,
 8003de0:	f04f 0400 	mov.w	r4, #0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4623      	mov	r3, r4
 8003de8:	4913      	ldr	r1, [pc, #76]	; (8003e38 <FlashWrite+0x19c>)
 8003dea:	2002      	movs	r0, #2
 8003dec:	f00a ff3a 	bl	800ec64 <HAL_FLASH_Program>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ef      	bne.n	8003dde <FlashWrite+0x142>
		}
		/* ~p_correction */

		flash_ok = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003e04:	e004      	b.n	8003e10 <FlashWrite+0x174>
			flash_ok = HAL_FLASH_Lock();
 8003e06:	f00a ffa3 	bl	800ed50 <HAL_FLASH_Lock>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (flash_ok != HAL_OK) {
 8003e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f6      	bne.n	8003e06 <FlashWrite+0x16a>
		}
	}
}
 8003e18:	bf00      	nop
 8003e1a:	3734      	adds	r7, #52	; 0x34
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}
 8003e20:	080fff70 	.word	0x080fff70
 8003e24:	080fff80 	.word	0x080fff80
 8003e28:	080fff84 	.word	0x080fff84
 8003e2c:	080fff90 	.word	0x080fff90
 8003e30:	080fff94 	.word	0x080fff94
 8003e34:	080fff98 	.word	0x080fff98
 8003e38:	080fff9c 	.word	0x080fff9c

08003e3c <FlashReadTZ>:

int FlashReadTZ()
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
	int32_t idx = *(volatile int *)(TZ_IDX_ADDR);
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <FlashReadTZ+0x1c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	607b      	str	r3, [r7, #4]
	return idx;
 8003e48:	687b      	ldr	r3, [r7, #4]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	080fff70 	.word	0x080fff70

08003e5c <FlashReadLatitude>:

double FlashReadLatitude()
{
 8003e5c:	b490      	push	{r4, r7}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
	double v = *(volatile double *)(LATITUDE_ADDR);
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <FlashReadLatitude+0x28>)
 8003e64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e68:	e9c7 3400 	strd	r3, r4, [r7]
	return v;
 8003e6c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e70:	ec44 3b17 	vmov	d7, r3, r4
}
 8003e74:	eeb0 0a47 	vmov.f32	s0, s14
 8003e78:	eef0 0a67 	vmov.f32	s1, s15
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc90      	pop	{r4, r7}
 8003e82:	4770      	bx	lr
 8003e84:	080fff80 	.word	0x080fff80

08003e88 <FlashReadLongitude>:

double FlashReadLongitude()
{
 8003e88:	b490      	push	{r4, r7}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
	double v = *(volatile double *)(LONGITUDE_ADDR);
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <FlashReadLongitude+0x28>)
 8003e90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e94:	e9c7 3400 	strd	r3, r4, [r7]
	return v;
 8003e98:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e9c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea4:	eef0 0a67 	vmov.f32	s1, s15
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc90      	pop	{r4, r7}
 8003eae:	4770      	bx	lr
 8003eb0:	080fff90 	.word	0x080fff90

08003eb4 <FlashReadPCorrection>:

double	FlashReadPCorrection()
{
 8003eb4:	b490      	push	{r4, r7}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
	double v = *(volatile double *)(PRESSURE_CORRECTION_ADDR);
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <FlashReadPCorrection+0x28>)
 8003ebc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ec0:	e9c7 3400 	strd	r3, r4, [r7]
	return v;
 8003ec4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ec8:	ec44 3b17 	vmov	d7, r3, r4
}
 8003ecc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ed0:	eef0 0a67 	vmov.f32	s1, s15
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc90      	pop	{r4, r7}
 8003eda:	4770      	bx	lr
 8003edc:	080fff98 	.word	0x080fff98

08003ee0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <vApplicationGetIdleTaskMemory+0x2c>)
 8003ef0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4a06      	ldr	r2, [pc, #24]	; (8003f10 <vApplicationGetIdleTaskMemory+0x30>)
 8003ef6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2280      	movs	r2, #128	; 0x80
 8003efc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	200003a8 	.word	0x200003a8
 8003f10:	200003fc 	.word	0x200003fc

08003f14 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003f14:	b5b0      	push	{r4, r5, r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <MX_FREERTOS_Init+0x58>)
 8003f1c:	f107 041c 	add.w	r4, r7, #28
 8003f20:	461d      	mov	r5, r3
 8003f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003f2e:	f107 031c 	add.w	r3, r7, #28
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f00f ff3c 	bl	8013db2 <osThreadCreate>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <MX_FREERTOS_Init+0x5c>)
 8003f3e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(main_task, MainTask, osPriorityNormal, 0, 1024);
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <MX_FREERTOS_Init+0x60>)
 8003f42:	463c      	mov	r4, r7
 8003f44:	461d      	mov	r5, r3
 8003f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  main_task_handle = osThreadCreate(osThread(main_task), NULL);
 8003f52:	463b      	mov	r3, r7
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f00f ff2b 	bl	8013db2 <osThreadCreate>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <MX_FREERTOS_Init+0x64>)
 8003f60:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

}
 8003f62:	bf00      	nop
 8003f64:	3738      	adds	r7, #56	; 0x38
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	0801c1f4 	.word	0x0801c1f4
 8003f70:	20004928 	.word	0x20004928
 8003f74:	0801c21c 	.word	0x0801c21c
 8003f78:	20004b44 	.word	0x20004b44

08003f7c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003f84:	2001      	movs	r0, #1
 8003f86:	f00f ff60 	bl	8013e4a <osDelay>
 8003f8a:	e7fb      	b.n	8003f84 <StartDefaultTask+0x8>

08003f8c <MainTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MainTask(void const * argument)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	6078      	str	r0, [r7, #4]
	{
		/* Hardware setup */
		HAL_Delay(10);
 8003f94:	200a      	movs	r0, #10
 8003f96:	f009 fddd 	bl	800db54 <HAL_Delay>
		ws2812_init();
 8003f9a:	f009 fcb9 	bl	800d910 <ws2812_init>
		SetBrightnessOn();
 8003f9e:	f7fd f8d9 	bl	8001154 <SetBrightnessOn>
		SetBrightness(200u);
 8003fa2:	20c8      	movs	r0, #200	; 0xc8
 8003fa4:	f7fd f8c2 	bl	800112c <SetBrightness>
		Beep();
 8003fa8:	f7fd f924 	bl	80011f4 <Beep>
	}

	FsmDataCreate(&fsm);
 8003fac:	480f      	ldr	r0, [pc, #60]	; (8003fec <MainTask+0x60>)
 8003fae:	f000 f877 	bl	80040a0 <FsmDataCreate>
	FsmLuminosityCreate(&fsm_lum);
 8003fb2:	480f      	ldr	r0, [pc, #60]	; (8003ff0 <MainTask+0x64>)
 8003fb4:	f002 f86c 	bl	8006090 <FsmLuminosityCreate>

	DisplayCreate(&display, n_places, &hspi1,
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <MainTask+0x68>)
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <MainTask+0x6c>)
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <MainTask+0x70>)
 8003fc4:	480e      	ldr	r0, [pc, #56]	; (8004000 <MainTask+0x74>)
 8003fc6:	f7fd fd1f 	bl	8001a08 <DisplayCreate>
	LED_DATA_LATCH_GPIO_Port,
	LED_DATA_LATCH_Pin);

	/* Infinite loop */
	while (1) {
		FsmLuminosityDoCalc(&fsm_lum);
 8003fca:	4809      	ldr	r0, [pc, #36]	; (8003ff0 <MainTask+0x64>)
 8003fcc:	f002 f87c 	bl	80060c8 <FsmLuminosityDoCalc>

		FsmDataCalcCelestial(&fsm);
 8003fd0:	4806      	ldr	r0, [pc, #24]	; (8003fec <MainTask+0x60>)
 8003fd2:	f000 fa37 	bl	8004444 <FsmDataCalcCelestial>
		FsmDataSetBacklight(&fsm);
 8003fd6:	4805      	ldr	r0, [pc, #20]	; (8003fec <MainTask+0x60>)
 8003fd8:	f000 fb59 	bl	800468e <FsmDataSetBacklight>
		FsmDataProcess(&fsm);
 8003fdc:	4803      	ldr	r0, [pc, #12]	; (8003fec <MainTask+0x60>)
 8003fde:	f002 f81b 	bl	8006018 <FsmDataProcess>

		HAL_Delay(CYCLE_DELAY);
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f009 fdb5 	bl	800db54 <HAL_Delay>
		FsmLuminosityDoCalc(&fsm_lum);
 8003fea:	e7ee      	b.n	8003fca <MainTask+0x3e>
 8003fec:	20004930 	.word	0x20004930
 8003ff0:	20004b48 	.word	0x20004b48
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	40020000 	.word	0x40020000
 8003ffc:	20004c1c 	.word	0x20004c1c
 8004000:	20004b20 	.word	0x20004b20

08004004 <process_state>:
    FsmData_Do_MODE_EDIT_TIMEZONE,
	FsmData_Do_MODE_EDIT_P_CORRECTION,
    FsmData_Do_MODE_EDIT_DATE,
};

FSM_DATA_MODES process_state(FSM_DATA_MODES curr_state, FsmData *state_data) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	6039      	str	r1, [r7, #0]
 800400e:	71fb      	strb	r3, [r7, #7]
    return STATES_TABLE[curr_state](state_data);
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	4a05      	ldr	r2, [pc, #20]	; (8004028 <process_state+0x24>)
 8004014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004018:	6838      	ldr	r0, [r7, #0]
 800401a:	4798      	blx	r3
 800401c:	4603      	mov	r3, r0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	0801c280 	.word	0x0801c280

0800402c <FsmDataValidateTs>:

/* Private */

void FsmDataValidateTs(FsmData *fsm)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    if (fsm->ts.mday == 0 || fsm->ts.mon == 0 || fsm->ts.year < 2015) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	795b      	ldrb	r3, [r3, #5]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <FsmDataValidateTs+0x26>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	799b      	ldrb	r3, [r3, #6]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <FsmDataValidateTs+0x26>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800404a:	f240 72de 	movw	r2, #2014	; 0x7de
 800404e:	4293      	cmp	r3, r2
 8004050:	dc20      	bgt.n	8004094 <FsmDataValidateTs+0x68>
        /* Set to default */
        fsm->ts.mday = DT_MIN_DAY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	715a      	strb	r2, [r3, #5]
        fsm->ts.mon = DT_MIN_MON;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	719a      	strb	r2, [r3, #6]
        fsm->ts.year = DT_MIN_YEAR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2212      	movs	r2, #18
 8004062:	811a      	strh	r2, [r3, #8]

        fsm->ts.hour = DT_MIN_HOUR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	220c      	movs	r2, #12
 8004068:	711a      	strb	r2, [r3, #4]
        fsm->ts.min = DT_MIN_MIN;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	70da      	strb	r2, [r3, #3]
        fsm->ts.sec = DT_MIN_SEC;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	709a      	strb	r2, [r3, #2]
        Rtc_DS3231_set(fsm->ts);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800407c:	2000      	movs	r0, #0
 800407e:	4610      	mov	r0, r2
 8004080:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8004084:	2100      	movs	r1, #0
 8004086:	4611      	mov	r1, r2
 8004088:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800408c:	2200      	movs	r2, #0
 800408e:	461a      	mov	r2, r3
 8004090:	f002 fb70 	bl	8006774 <Rtc_DS3231_set>
    }
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	0000      	movs	r0, r0
	...

080040a0 <FsmDataCreate>:

/* Public */

void FsmDataCreate(FsmData *fsm)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b089      	sub	sp, #36	; 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
    memset(&fsm->ts, 0, sizeof(fsm->ts));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3302      	adds	r3, #2
 80040ac:	220c      	movs	r2, #12
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f011 f8c4 	bl	801523e <memset>
    memset(&fsm->sun_rise1, 0, sizeof(fsm->sun_rise1));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	330e      	adds	r3, #14
 80040ba:	220c      	movs	r2, #12
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f011 f8bd 	bl	801523e <memset>
    memset(&fsm->sun_set1, 0, sizeof(fsm->sun_set1));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	331a      	adds	r3, #26
 80040c8:	220c      	movs	r2, #12
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f011 f8b6 	bl	801523e <memset>
    memset(&fsm->sun_rise2, 0, sizeof(fsm->sun_rise2));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3326      	adds	r3, #38	; 0x26
 80040d6:	220c      	movs	r2, #12
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f011 f8af 	bl	801523e <memset>
    memset(&fsm->sun_set2, 0, sizeof(fsm->sun_set2));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3332      	adds	r3, #50	; 0x32
 80040e4:	220c      	movs	r2, #12
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f011 f8a8 	bl	801523e <memset>

    fsm->update_time = 0;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    fsm->update_aging = 0;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    fsm->update_latitude = 0;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    fsm->update_longitude = 0;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    fsm->update_timezone = 0;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    fsm->update_p_correction = 0;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    fsm->update_celestial = 0;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8

    fsm->btn1_state_prev = fsm->btn1_state_curr = BTN1_STATE();
 8004126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800412a:	48bd      	ldr	r0, [pc, #756]	; (8004420 <FsmDataCreate+0x380>)
 800412c:	f00b f930 	bl	800f390 <HAL_GPIO_ReadPin>
 8004130:	4603      	mov	r3, r0
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
    fsm->btn2_state_prev = fsm->btn2_state_curr = BTN2_STATE();
 8004146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800414a:	48b5      	ldr	r0, [pc, #724]	; (8004420 <FsmDataCreate+0x380>)
 800414c:	f00b f920 	bl	800f390 <HAL_GPIO_ReadPin>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
    fsm->btn3_state_prev = fsm->btn3_state_curr = BTN3_STATE();
 8004166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800416a:	48ad      	ldr	r0, [pc, #692]	; (8004420 <FsmDataCreate+0x380>)
 800416c:	f00b f910 	bl	800f390 <HAL_GPIO_ReadPin>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
    fsm->btn4_state_prev = fsm->btn4_state_curr = BTN4_STATE();
 8004186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800418a:	48a5      	ldr	r0, [pc, #660]	; (8004420 <FsmDataCreate+0x380>)
 800418c:	f00b f900 	bl	800f390 <HAL_GPIO_ReadPin>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
    fsm->btn5_state_prev = fsm->btn5_state_curr = BTN5_STATE();
 80041a6:	2140      	movs	r1, #64	; 0x40
 80041a8:	489e      	ldr	r0, [pc, #632]	; (8004424 <FsmDataCreate+0x384>)
 80041aa:	f00b f8f1 	bl	800f390 <HAL_GPIO_ReadPin>
 80041ae:	4603      	mov	r3, r0
 80041b0:	461a      	mov	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
    fsm->btn6_state_prev = fsm->btn6_state_curr = BTN6_STATE();
 80041c4:	2180      	movs	r1, #128	; 0x80
 80041c6:	4897      	ldr	r0, [pc, #604]	; (8004424 <FsmDataCreate+0x384>)
 80041c8:	f00b f8e2 	bl	800f390 <HAL_GPIO_ReadPin>
 80041cc:	4603      	mov	r3, r0
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 21d6 	ldrb.w	r2, [r3, #470]	; 0x1d6
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
    fsm->btn7_state_prev = fsm->btn7_state_curr = BTN7_STATE();
 80041e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041e6:	488f      	ldr	r0, [pc, #572]	; (8004424 <FsmDataCreate+0x384>)
 80041e8:	f00b f8d2 	bl	800f390 <HAL_GPIO_ReadPin>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
    fsm->btn8_state_prev = fsm->btn8_state_curr = BTN8_STATE();
 8004202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004206:	4887      	ldr	r0, [pc, #540]	; (8004424 <FsmDataCreate+0x384>)
 8004208:	f00b f8c2 	bl	800f390 <HAL_GPIO_ReadPin>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db

    fsm->mode_prev =
        fsm->mode_curr =
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	781a      	ldrb	r2, [r3, #0]
    fsm->mode_prev =
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	705a      	strb	r2, [r3, #1]
            FSM_DATA_MODE_A1_1;

    fsm->btn6_pressed_counter = 0;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    fsm->btn7_pressed_counter = 0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    fsm->btn8_pressed_counter = 0;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4

    fsm->btn7_fast_repeat_delay_accelerated = BTN_FAST_REPEAT_DELAY;
 8004248:	f240 3252 	movw	r2, #850	; 0x352
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    fsm->btn8_fast_repeat_delay_accelerated = BTN_FAST_REPEAT_DELAY;
 8004252:	f240 3252 	movw	r2, #850	; 0x352
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

    {
        /* Current timestamp */
        Wire_SetI2C(&hi2c1);
 800425c:	4872      	ldr	r0, [pc, #456]	; (8004428 <FsmDataCreate+0x388>)
 800425e:	f009 fab5 	bl	800d7cc <Wire_SetI2C>
        Rtc_DS3231_init(DS3231_INTCN);
 8004262:	2004      	movs	r0, #4
 8004264:	f002 fa79 	bl	800675a <Rtc_DS3231_init>
        Rtc_DS3231_get(&fsm->ts);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3302      	adds	r3, #2
 800426c:	4618      	mov	r0, r3
 800426e:	f002 fae2 	bl	8006836 <Rtc_DS3231_get>
        FsmDataValidateTs(fsm);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff feda 	bl	800402c <FsmDataValidateTs>

        fsm->aging = Rtc_DS3231_get_aging();
 8004278:	f002 fb9c 	bl	80069b4 <Rtc_DS3231_get_aging>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    {
        /* Observation point */
        uint32_t idx = FlashReadTZ();
 8004286:	f7ff fdd9 	bl	8003e3c <FlashReadTZ>
 800428a:	4603      	mov	r3, r0
 800428c:	61fb      	str	r3, [r7, #28]
        double latitude_deg2 = FlashReadLatitude();
 800428e:	f7ff fde5 	bl	8003e5c <FlashReadLatitude>
 8004292:	ed87 0b04 	vstr	d0, [r7, #16]
        double longitude_deg2 = FlashReadLongitude();
 8004296:	f7ff fdf7 	bl	8003e88 <FlashReadLongitude>
 800429a:	ed87 0b02 	vstr	d0, [r7, #8]

		if (idx >= 0 && idx < N_TIMEZONES) {
 800429e:	2326      	movs	r3, #38	; 0x26
 80042a0:	461a      	mov	r2, r3
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d210      	bcs.n	80042ca <FsmDataCreate+0x22a>
			fsm->tz_idx = (uint8_t)idx;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			fsm->tz = TIMEZONES[fsm->tz_idx];
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042b8:	4a5c      	ldr	r2, [pc, #368]	; (800442c <FsmDataCreate+0x38c>)
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 80042c8:	e00e      	b.n	80042e8 <FsmDataCreate+0x248>
		} else {
			fsm->tz_idx = MSK_ZONE;
 80042ca:	2211      	movs	r2, #17
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			fsm->tz = TIMEZONES[fsm->tz_idx];
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042d8:	4a54      	ldr	r2, [pc, #336]	; (800442c <FsmDataCreate+0x38c>)
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		}

		if ((latitude_deg2 > -90.0 && latitude_deg2 < +90.0) &&
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	4b50      	ldr	r3, [pc, #320]	; (8004430 <FsmDataCreate+0x390>)
 80042ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042f2:	f7fc fc1b 	bl	8000b2c <__aeabi_dcmpgt>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d028      	beq.n	800434e <FsmDataCreate+0x2ae>
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	4b4c      	ldr	r3, [pc, #304]	; (8004434 <FsmDataCreate+0x394>)
 8004302:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004306:	f7fc fbf3 	bl	8000af0 <__aeabi_dcmplt>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01e      	beq.n	800434e <FsmDataCreate+0x2ae>
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	4b48      	ldr	r3, [pc, #288]	; (8004438 <FsmDataCreate+0x398>)
 8004316:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800431a:	f7fc fc07 	bl	8000b2c <__aeabi_dcmpgt>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d014      	beq.n	800434e <FsmDataCreate+0x2ae>
				(latitude_deg2 > -180.0 && latitude_deg2 < +180.0))
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	4b44      	ldr	r3, [pc, #272]	; (800443c <FsmDataCreate+0x39c>)
 800432a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800432e:	f7fc fbdf 	bl	8000af0 <__aeabi_dcmplt>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <FsmDataCreate+0x2ae>
		{
			fsm->latitude_deg = latitude_deg2;
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800433e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			fsm->longitude_deg = longitude_deg2;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004348:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 800434c:	e00b      	b.n	8004366 <FsmDataCreate+0x2c6>
		} else {
			fsm->latitude_deg = DEFAULT_LATITUDE;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	a42b      	add	r4, pc, #172	; (adr r4, 8004400 <FsmDataCreate+0x360>)
 8004352:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004356:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			fsm->longitude_deg = DEFAULT_LONGITUDE;
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	a42a      	add	r4, pc, #168	; (adr r4, 8004408 <FsmDataCreate+0x368>)
 800435e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004362:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		}

        fsm->latitude_rad = fsm->latitude_deg * snm_DEG_TO_RAD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800436c:	a328      	add	r3, pc, #160	; (adr r3, 8004410 <FsmDataCreate+0x370>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f7fc f94b 	bl	800060c <__aeabi_dmul>
 8004376:	4603      	mov	r3, r0
 8004378:	460c      	mov	r4, r1
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
        fsm->longitude_rad = fsm->longitude_deg * snm_DEG_TO_RAD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004386:	a322      	add	r3, pc, #136	; (adr r3, 8004410 <FsmDataCreate+0x370>)
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f7fc f93e 	bl	800060c <__aeabi_dmul>
 8004390:	4603      	mov	r3, r0
 8004392:	460c      	mov	r4, r1
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
//    						   fsm->longitude_deg,
//    						   fsm->p_correction);

    {
        /* Sun & moon calculator */
        snm_CalculatorCreate(&fsm->calc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3368      	adds	r3, #104	; 0x68
 800439e:	4618      	mov	r0, r3
 80043a0:	f008 f87a 	bl	800c498 <snm_CalculatorCreate>
        snm_CalculatorSetPoint(&fsm->calc,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 80043b6:	eeb0 1a46 	vmov.f32	s2, s12
 80043ba:	eef0 1a66 	vmov.f32	s3, s13
 80043be:	eeb0 0a47 	vmov.f32	s0, s14
 80043c2:	eef0 0a67 	vmov.f32	s1, s15
 80043c6:	4610      	mov	r0, r2
 80043c8:	f008 f89f 	bl	800c50a <snm_CalculatorSetPoint>
                               fsm->longitude_rad);
    }

    {
    	/* Pressure calculation */
    	fsm->p_correction = FlashReadPCorrection();
 80043cc:	f7ff fd72 	bl	8003eb4 <FlashReadPCorrection>
 80043d0:	eeb0 7a40 	vmov.f32	s14, s0
 80043d4:	eef0 7a60 	vmov.f32	s15, s1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
    	fsm->p_base = SEALEVEL_PRESSURE;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	a40d      	add	r4, pc, #52	; (adr r4, 8004418 <FsmDataCreate+0x378>)
 80043e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80043e6:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
		Bmp280Create(&fsm->bmp280, &hspi3);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80043f0:	4913      	ldr	r1, [pc, #76]	; (8004440 <FsmDataCreate+0x3a0>)
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd f9d8 	bl	80017a8 <Bmp280Create>
    }

}
 80043f8:	bf00      	nop
 80043fa:	3724      	adds	r7, #36	; 0x24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	00000000 	.word	0x00000000
 8004404:	404be000 	.word	0x404be000
 8004408:	00000000 	.word	0x00000000
 800440c:	4042c000 	.word	0x4042c000
 8004410:	a2529d39 	.word	0xa2529d39
 8004414:	3f91df46 	.word	0x3f91df46
 8004418:	00000000 	.word	0x00000000
 800441c:	408faa00 	.word	0x408faa00
 8004420:	40020400 	.word	0x40020400
 8004424:	40020800 	.word	0x40020800
 8004428:	20004b68 	.word	0x20004b68
 800442c:	20000008 	.word	0x20000008
 8004430:	c0568000 	.word	0xc0568000
 8004434:	40568000 	.word	0x40568000
 8004438:	c0668000 	.word	0xc0668000
 800443c:	40668000 	.word	0x40668000
 8004440:	20004bc4 	.word	0x20004bc4

08004444 <FsmDataCalcCelestial>:

void FsmDataCalcCelestial(FsmData *fsm)
{
 8004444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004446:	b0a9      	sub	sp, #164	; 0xa4
 8004448:	af06      	add	r7, sp, #24
 800444a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (fsm->sun_rise1.mday != fsm->ts.mday || fsm->update_celestial) {
 800444c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444e:	7c5a      	ldrb	r2, [r3, #17]
 8004450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004452:	795b      	ldrb	r3, [r3, #5]
 8004454:	429a      	cmp	r2, r3
 8004456:	d105      	bne.n	8004464 <FsmDataCalcCelestial+0x20>
 8004458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8111 	beq.w	8004686 <FsmDataCalcCelestial+0x242>
        struct tm rise, set;

        snm_CalculatorSetTime(&fsm->calc,
 8004464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004466:	f103 0068 	add.w	r0, r3, #104	; 0x68
                fsm->ts.mday, fsm->ts.mon, fsm->ts.year);
 800446a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446c:	795b      	ldrb	r3, [r3, #5]
        snm_CalculatorSetTime(&fsm->calc,
 800446e:	4619      	mov	r1, r3
                fsm->ts.mday, fsm->ts.mon, fsm->ts.year);
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	799b      	ldrb	r3, [r3, #6]
        snm_CalculatorSetTime(&fsm->calc,
 8004474:	461a      	mov	r2, r3
                fsm->ts.mday, fsm->ts.mon, fsm->ts.year);
 8004476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004478:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        snm_CalculatorSetTime(&fsm->calc,
 800447c:	f008 f819 	bl	800c4b2 <snm_CalculatorSetTime>
        snm_CalculatorSetDate(&fsm->calc,
 8004480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004482:	f103 0068 	add.w	r0, r3, #104	; 0x68
                fsm->ts.hour, fsm->ts.min, fsm->ts.sec);
 8004486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004488:	791b      	ldrb	r3, [r3, #4]
        snm_CalculatorSetDate(&fsm->calc,
 800448a:	4619      	mov	r1, r3
                fsm->ts.hour, fsm->ts.min, fsm->ts.sec);
 800448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448e:	78db      	ldrb	r3, [r3, #3]
        snm_CalculatorSetDate(&fsm->calc,
 8004490:	461a      	mov	r2, r3
                fsm->ts.hour, fsm->ts.min, fsm->ts.sec);
 8004492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004494:	789b      	ldrb	r3, [r3, #2]
        snm_CalculatorSetDate(&fsm->calc,
 8004496:	f008 f822 	bl	800c4de <snm_CalculatorSetDate>
        snm_CalculatorSetPoint(&fsm->calc,
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80044a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80044a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a8:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 80044ac:	eeb0 1a46 	vmov.f32	s2, s12
 80044b0:	eef0 1a66 	vmov.f32	s3, s13
 80044b4:	eeb0 0a47 	vmov.f32	s0, s14
 80044b8:	eef0 0a67 	vmov.f32	s1, s15
 80044bc:	4610      	mov	r0, r2
 80044be:	f008 f824 	bl	800c50a <snm_CalculatorSetPoint>
                fsm->latitude_rad, fsm->longitude_rad);

        snm_CalculatorSetTwilight(&fsm->calc, HORIZON_34arcmin);
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	3368      	adds	r3, #104	; 0x68
 80044c6:	2103      	movs	r1, #3
 80044c8:	4618      	mov	r0, r3
 80044ca:	f008 f835 	bl	800c538 <snm_CalculatorSetTwilight>
        snm_CalculatorCalc(&fsm->calc);
 80044ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d0:	3368      	adds	r3, #104	; 0x68
 80044d2:	4618      	mov	r0, r3
 80044d4:	f008 f840 	bl	800c558 <snm_CalculatorCalc>
        rise = snm_CalculatorGetDateAsTm(fsm->calc.sun_rise, fsm->tz);
 80044d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044da:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80044e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044e8:	eeb0 1a46 	vmov.f32	s2, s12
 80044ec:	eef0 1a66 	vmov.f32	s3, s13
 80044f0:	eeb0 0a47 	vmov.f32	s0, s14
 80044f4:	eef0 0a67 	vmov.f32	s1, s15
 80044f8:	4618      	mov	r0, r3
 80044fa:	f008 fc2d 	bl	800cd58 <snm_CalculatorGetDateAsTm>
        set = snm_CalculatorGetDateAsTm(fsm->calc.sun_set, fsm->tz);
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800450a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800450e:	eeb0 1a46 	vmov.f32	s2, s12
 8004512:	eef0 1a66 	vmov.f32	s3, s13
 8004516:	eeb0 0a47 	vmov.f32	s0, s14
 800451a:	eef0 0a67 	vmov.f32	s1, s15
 800451e:	4618      	mov	r0, r3
 8004520:	f008 fc1a 	bl	800cd58 <snm_CalculatorGetDateAsTm>

        fsm->sun_rise1 = GetTimestampFromTm(rise);
 8004524:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8004526:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800452a:	466d      	mov	r5, sp
 800452c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8004530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004534:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004538:	e885 0003 	stmia.w	r5, {r0, r1}
 800453c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004542:	4660      	mov	r0, ip
 8004544:	f002 fa4d 	bl	80069e2 <GetTimestampFromTm>
 8004548:	f106 030e 	add.w	r3, r6, #14
 800454c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004550:	6810      	ldr	r0, [r2, #0]
 8004552:	6851      	ldr	r1, [r2, #4]
 8004554:	6892      	ldr	r2, [r2, #8]
 8004556:	6018      	str	r0, [r3, #0]
 8004558:	6059      	str	r1, [r3, #4]
 800455a:	609a      	str	r2, [r3, #8]
        fsm->sun_set1 = GetTimestampFromTm(set);
 800455c:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800455e:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8004562:	466d      	mov	r5, sp
 8004564:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800456a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800456c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004570:	e885 0003 	stmia.w	r5, {r0, r1}
 8004574:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800457a:	4660      	mov	r0, ip
 800457c:	f002 fa31 	bl	80069e2 <GetTimestampFromTm>
 8004580:	f106 031a 	add.w	r3, r6, #26
 8004584:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004588:	6810      	ldr	r0, [r2, #0]
 800458a:	6851      	ldr	r1, [r2, #4]
 800458c:	6892      	ldr	r2, [r2, #8]
 800458e:	6018      	str	r0, [r3, #0]
 8004590:	6059      	str	r1, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]

        snm_CalculatorSetTwilight(&fsm->calc, TWILIGHT_CIVIL);
 8004594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004596:	3368      	adds	r3, #104	; 0x68
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f007 ffcc 	bl	800c538 <snm_CalculatorSetTwilight>
        snm_CalculatorCalc(&fsm->calc);
 80045a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a2:	3368      	adds	r3, #104	; 0x68
 80045a4:	4618      	mov	r0, r3
 80045a6:	f007 ffd7 	bl	800c558 <snm_CalculatorCalc>
        rise = snm_CalculatorGetDateAsTm(fsm->calc.sun_rise, fsm->tz);
 80045aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ac:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 80045b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b2:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80045b6:	463b      	mov	r3, r7
 80045b8:	eeb0 1a46 	vmov.f32	s2, s12
 80045bc:	eef0 1a66 	vmov.f32	s3, s13
 80045c0:	eeb0 0a47 	vmov.f32	s0, s14
 80045c4:	eef0 0a67 	vmov.f32	s1, s15
 80045c8:	4618      	mov	r0, r3
 80045ca:	f008 fbc5 	bl	800cd58 <snm_CalculatorGetDateAsTm>
 80045ce:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80045d2:	463d      	mov	r5, r7
 80045d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	6023      	str	r3, [r4, #0]
        set = snm_CalculatorGetDateAsTm(fsm->calc.sun_set, fsm->tz);
 80045e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e2:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 80045e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e8:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80045ec:	463b      	mov	r3, r7
 80045ee:	eeb0 1a46 	vmov.f32	s2, s12
 80045f2:	eef0 1a66 	vmov.f32	s3, s13
 80045f6:	eeb0 0a47 	vmov.f32	s0, s14
 80045fa:	eef0 0a67 	vmov.f32	s1, s15
 80045fe:	4618      	mov	r0, r3
 8004600:	f008 fbaa 	bl	800cd58 <snm_CalculatorGetDateAsTm>
 8004604:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8004608:	463d      	mov	r5, r7
 800460a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800460c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800460e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004612:	682b      	ldr	r3, [r5, #0]
 8004614:	6023      	str	r3, [r4, #0]

        fsm->sun_rise2 = GetTimestampFromTm(rise);
 8004616:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8004618:	46bc      	mov	ip, r7
 800461a:	466d      	mov	r5, sp
 800461c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8004620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004624:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004628:	e885 0003 	stmia.w	r5, {r0, r1}
 800462c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004632:	4660      	mov	r0, ip
 8004634:	f002 f9d5 	bl	80069e2 <GetTimestampFromTm>
 8004638:	f106 0326 	add.w	r3, r6, #38	; 0x26
 800463c:	463a      	mov	r2, r7
 800463e:	6810      	ldr	r0, [r2, #0]
 8004640:	6851      	ldr	r1, [r2, #4]
 8004642:	6892      	ldr	r2, [r2, #8]
 8004644:	6018      	str	r0, [r3, #0]
 8004646:	6059      	str	r1, [r3, #4]
 8004648:	609a      	str	r2, [r3, #8]
        fsm->sun_set2 = GetTimestampFromTm(set);
 800464a:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800464c:	46bc      	mov	ip, r7
 800464e:	466d      	mov	r5, sp
 8004650:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004658:	e894 0003 	ldmia.w	r4, {r0, r1}
 800465c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004660:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004666:	4660      	mov	r0, ip
 8004668:	f002 f9bb 	bl	80069e2 <GetTimestampFromTm>
 800466c:	f106 0332 	add.w	r3, r6, #50	; 0x32
 8004670:	463a      	mov	r2, r7
 8004672:	6810      	ldr	r0, [r2, #0]
 8004674:	6851      	ldr	r1, [r2, #4]
 8004676:	6892      	ldr	r2, [r2, #8]
 8004678:	6018      	str	r0, [r3, #0]
 800467a:	6059      	str	r1, [r3, #4]
 800467c:	609a      	str	r2, [r3, #8]
        fsm->update_celestial = 0;
 800467e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004680:	2200      	movs	r2, #0
 8004682:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    }
}
 8004686:	bf00      	nop
 8004688:	378c      	adds	r7, #140	; 0x8c
 800468a:	46bd      	mov	sp, r7
 800468c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800468e <FsmDataSetBacklight>:

void FsmDataSetBacklight(FsmData *fsm)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
    if ((fsm->ts.hour == 0 && fsm->ts.min == 0 && fsm->ts.sec == 0)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d107      	bne.n	80046ae <FsmDataSetBacklight+0x20>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	78db      	ldrb	r3, [r3, #3]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <FsmDataSetBacklight+0x20>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	789b      	ldrb	r3, [r3, #2]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <FsmDataSetBacklight+0x3c>
            || (fsm->ts.hour == fsm->sun_rise2.hour &&
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	791a      	ldrb	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d10c      	bne.n	80046d6 <FsmDataSetBacklight+0x48>
                fsm->ts.min < fsm->sun_rise2.min))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	78da      	ldrb	r2, [r3, #3]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
            || (fsm->ts.hour == fsm->sun_rise2.hour &&
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d205      	bcs.n	80046d6 <FsmDataSetBacklight+0x48>
    {
		SetBacklight(NIGHT_BG_COLOR_R,
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	20ff      	movs	r0, #255	; 0xff
 80046d0:	f7fc fd4e 	bl	8001170 <SetBacklight>
 80046d4:	e04f      	b.n	8004776 <FsmDataSetBacklight+0xe8>
					 NIGHT_BG_COLOR_G,
					 NIGHT_BG_COLOR_B); // ночь
    } else if ((fsm->ts.hour > fsm->sun_set2.hour)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	791a      	ldrb	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d80d      	bhi.n	8004700 <FsmDataSetBacklight+0x72>
            || (fsm->ts.hour == fsm->sun_set2.hour &&
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	791a      	ldrb	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d10c      	bne.n	800470c <FsmDataSetBacklight+0x7e>
                fsm->ts.min > fsm->sun_set2.min))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	78da      	ldrb	r2, [r3, #3]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
            || (fsm->ts.hour == fsm->sun_set2.hour &&
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d905      	bls.n	800470c <FsmDataSetBacklight+0x7e>
    {
    	SetBacklight(NIGHT_BG_COLOR_R,
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	20ff      	movs	r0, #255	; 0xff
 8004706:	f7fc fd33 	bl	8001170 <SetBacklight>
 800470a:	e034      	b.n	8004776 <FsmDataSetBacklight+0xe8>
    				 NIGHT_BG_COLOR_G,
					 NIGHT_BG_COLOR_B); // ночь
    } else {
        if ((fsm->ts.hour < fsm->sun_rise1.hour)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	791a      	ldrb	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	7c1b      	ldrb	r3, [r3, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d30b      	bcc.n	8004730 <FsmDataSetBacklight+0xa2>
                || (fsm->ts.hour == fsm->sun_rise1.hour &&
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	791a      	ldrb	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	7c1b      	ldrb	r3, [r3, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	d10b      	bne.n	800473c <FsmDataSetBacklight+0xae>
                    fsm->ts.min < fsm->sun_rise1.min))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	78da      	ldrb	r2, [r3, #3]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7bdb      	ldrb	r3, [r3, #15]
                || (fsm->ts.hour == fsm->sun_rise1.hour &&
 800472c:	429a      	cmp	r2, r3
 800472e:	d205      	bcs.n	800473c <FsmDataSetBacklight+0xae>
        {
            SetBacklight(TWILIGHT_BG_COLOR_R,
 8004730:	2200      	movs	r2, #0
 8004732:	217f      	movs	r1, #127	; 0x7f
 8004734:	20ff      	movs	r0, #255	; 0xff
 8004736:	f7fc fd1b 	bl	8001170 <SetBacklight>
 800473a:	e01c      	b.n	8004776 <FsmDataSetBacklight+0xe8>
            			 TWILIGHT_BG_COLOR_G,
						 TWILIGHT_BG_COLOR_B); // сумерки
        } else if ((fsm->ts.hour > fsm->sun_set1.hour)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	791a      	ldrb	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	7f1b      	ldrb	r3, [r3, #28]
 8004744:	429a      	cmp	r2, r3
 8004746:	d80b      	bhi.n	8004760 <FsmDataSetBacklight+0xd2>
                || (fsm->ts.hour == fsm->sun_set1.hour &&
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	791a      	ldrb	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7f1b      	ldrb	r3, [r3, #28]
 8004750:	429a      	cmp	r2, r3
 8004752:	d10b      	bne.n	800476c <FsmDataSetBacklight+0xde>
                    fsm->ts.min > fsm->sun_set1.min))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	78da      	ldrb	r2, [r3, #3]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	7edb      	ldrb	r3, [r3, #27]
                || (fsm->ts.hour == fsm->sun_set1.hour &&
 800475c:	429a      	cmp	r2, r3
 800475e:	d905      	bls.n	800476c <FsmDataSetBacklight+0xde>
        {
        	SetBacklight(TWILIGHT_BG_COLOR_R,
 8004760:	2200      	movs	r2, #0
 8004762:	217f      	movs	r1, #127	; 0x7f
 8004764:	20ff      	movs	r0, #255	; 0xff
 8004766:	f7fc fd03 	bl	8001170 <SetBacklight>
 800476a:	e004      	b.n	8004776 <FsmDataSetBacklight+0xe8>
						 TWILIGHT_BG_COLOR_G,
						 TWILIGHT_BG_COLOR_B); // сумерки
        } else {
			SetBacklight(DAYLIGHT_BG_COLOR_R,
 800476c:	22ff      	movs	r2, #255	; 0xff
 800476e:	21ff      	movs	r1, #255	; 0xff
 8004770:	20ff      	movs	r0, #255	; 0xff
 8004772:	f7fc fcfd 	bl	8001170 <SetBacklight>
						 DAYLIGHT_BG_COLOR_G,
						 DAYLIGHT_BG_COLOR_B); // день
        }
    }
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <FsmDataButtonsUpdateState>:

void FsmDataButtonsUpdateState(FsmData *fsm)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    fsm->btn1_state_curr = BTN1_STATE();
 8004788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800478c:	4827      	ldr	r0, [pc, #156]	; (800482c <FsmDataButtonsUpdateState+0xac>)
 800478e:	f00a fdff 	bl	800f390 <HAL_GPIO_ReadPin>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
    fsm->btn2_state_curr = BTN2_STATE();
 800479c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047a0:	4822      	ldr	r0, [pc, #136]	; (800482c <FsmDataButtonsUpdateState+0xac>)
 80047a2:	f00a fdf5 	bl	800f390 <HAL_GPIO_ReadPin>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
    fsm->btn3_state_curr = BTN3_STATE();
 80047b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047b4:	481d      	ldr	r0, [pc, #116]	; (800482c <FsmDataButtonsUpdateState+0xac>)
 80047b6:	f00a fdeb 	bl	800f390 <HAL_GPIO_ReadPin>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
    fsm->btn4_state_curr = BTN4_STATE();
 80047c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047c8:	4818      	ldr	r0, [pc, #96]	; (800482c <FsmDataButtonsUpdateState+0xac>)
 80047ca:	f00a fde1 	bl	800f390 <HAL_GPIO_ReadPin>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
    fsm->btn5_state_curr = BTN5_STATE();
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	4815      	ldr	r0, [pc, #84]	; (8004830 <FsmDataButtonsUpdateState+0xb0>)
 80047dc:	f00a fdd8 	bl	800f390 <HAL_GPIO_ReadPin>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
    fsm->btn6_state_curr = BTN6_STATE();
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	4810      	ldr	r0, [pc, #64]	; (8004830 <FsmDataButtonsUpdateState+0xb0>)
 80047ee:	f00a fdcf 	bl	800f390 <HAL_GPIO_ReadPin>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
    fsm->btn7_state_curr = BTN7_STATE();
 80047fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004800:	480b      	ldr	r0, [pc, #44]	; (8004830 <FsmDataButtonsUpdateState+0xb0>)
 8004802:	f00a fdc5 	bl	800f390 <HAL_GPIO_ReadPin>
 8004806:	4603      	mov	r3, r0
 8004808:	461a      	mov	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
    fsm->btn8_state_curr = BTN8_STATE();
 8004810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004814:	4806      	ldr	r0, [pc, #24]	; (8004830 <FsmDataButtonsUpdateState+0xb0>)
 8004816:	f00a fdbb 	bl	800f390 <HAL_GPIO_ReadPin>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40020400 	.word	0x40020400
 8004830:	40020800 	.word	0x40020800

08004834 <FsmData_Do_MODE_A1_1>:

FSM_DATA_MODES FsmData_Do_MODE_A1_1(FsmData *fsm)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
    Rtc_DS3231_get(&fsm->ts);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3302      	adds	r3, #2
 8004840:	4618      	mov	r0, r3
 8004842:	f001 fff8 	bl	8006836 <Rtc_DS3231_get>
    Display_A1_1(&display, &fsm->ts);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3302      	adds	r3, #2
 800484a:	4619      	mov	r1, r3
 800484c:	4856      	ldr	r0, [pc, #344]	; (80049a8 <FsmData_Do_MODE_A1_1+0x174>)
 800484e:	f7fe f861 	bl	8002914 <Display_A1_1>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800485e:	429a      	cmp	r2, r3
 8004860:	d00f      	beq.n	8004882 <FsmData_Do_MODE_A1_1+0x4e>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
        fsm->mode_prev = fsm->mode_curr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	781a      	ldrb	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	705a      	strb	r2, [r3, #1]
        fsm->mode_curr = FSM_DATA_MODE_EDIT_TIME_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2208      	movs	r2, #8
 800487a:	701a      	strb	r2, [r3, #0]
        Beep();
 800487c:	f7fc fcba 	bl	80011f4 <Beep>
 8004880:	e08b      	b.n	800499a <FsmData_Do_MODE_A1_1+0x166>
    } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 800488e:	429a      	cmp	r2, r3
 8004890:	d014      	beq.n	80048bc <FsmData_Do_MODE_A1_1+0x88>
        fsm->btn2_state_prev = fsm->btn2_state_curr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf

        if (fsm->btn2_state_curr == BTN_DOWN) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d178      	bne.n	800499a <FsmData_Do_MODE_A1_1+0x166>
            fsm->mode_prev = fsm->mode_curr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	705a      	strb	r2, [r3, #1]
            fsm->mode_curr = FSM_DATA_MODE_A1_2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
            Beep();
 80048b6:	f7fc fc9d 	bl	80011f4 <Beep>
 80048ba:	e06e      	b.n	800499a <FsmData_Do_MODE_A1_1+0x166>
        }
    } else if (fsm->btn8_state_prev != fsm->btn8_state_curr || fsm->btn8_pressed_counter > BTN_REPEAT_DELAY) {
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d106      	bne.n	80048da <FsmData_Do_MODE_A1_1+0xa6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80048d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d90b      	bls.n	80048f2 <FsmData_Do_MODE_A1_1+0xbe>
        fsm->btn8_pressed_counter = BTN_FAST_REPEAT_DELAY;
 80048da:	f240 3252 	movw	r2, #850	; 0x352
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        fsm->btn8_state_prev = fsm->btn8_state_curr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db

        if (fsm->btn8_state_curr == BTN_DOWN) {
 80048f0:	e053      	b.n	800499a <FsmData_Do_MODE_A1_1+0x166>
        }
    } else if (fsm->btn7_state_prev != fsm->btn7_state_curr || fsm->btn7_pressed_counter > BTN_REPEAT_DELAY) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 80048fe:	429a      	cmp	r2, r3
 8004900:	d106      	bne.n	8004910 <FsmData_Do_MODE_A1_1+0xdc>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8004908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800490c:	4293      	cmp	r3, r2
 800490e:	d90b      	bls.n	8004928 <FsmData_Do_MODE_A1_1+0xf4>
        fsm->btn7_pressed_counter = BTN_FAST_REPEAT_DELAY;
 8004910:	f240 3252 	movw	r2, #850	; 0x352
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        fsm->btn7_state_prev = fsm->btn7_state_curr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9

        if (fsm->btn7_state_curr == BTN_DOWN) {
 8004926:	e038      	b.n	800499a <FsmData_Do_MODE_A1_1+0x166>
        }
    } else if (fsm->btn3_state_prev != fsm->btn3_state_curr) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 21d1 	ldrb.w	r2, [r3, #465]	; 0x1d1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8004934:	429a      	cmp	r2, r3
 8004936:	d014      	beq.n	8004962 <FsmData_Do_MODE_A1_1+0x12e>
        fsm->btn3_state_prev = fsm->btn3_state_curr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1

        if (fsm->btn3_state_curr == BTN_DOWN) {
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d125      	bne.n	800499a <FsmData_Do_MODE_A1_1+0x166>
            fsm->mode_prev = fsm->mode_curr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	705a      	strb	r2, [r3, #1]
            fsm->mode_curr = FSM_DATA_MODE_S1_1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2203      	movs	r2, #3
 800495a:	701a      	strb	r2, [r3, #0]
            Beep();
 800495c:	f7fc fc4a 	bl	80011f4 <Beep>
 8004960:	e01b      	b.n	800499a <FsmData_Do_MODE_A1_1+0x166>
        }
    } else if (fsm->btn4_state_prev != fsm->btn4_state_curr) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 21d3 	ldrb.w	r2, [r3, #467]	; 0x1d3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 800496e:	429a      	cmp	r2, r3
 8004970:	d013      	beq.n	800499a <FsmData_Do_MODE_A1_1+0x166>
    	fsm->btn4_state_prev = fsm->btn4_state_curr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3

        if (fsm->btn4_state_curr == BTN_DOWN) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d108      	bne.n	800499a <FsmData_Do_MODE_A1_1+0x166>
            fsm->mode_prev = fsm->mode_curr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	781a      	ldrb	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	705a      	strb	r2, [r3, #1]
            fsm->mode_curr = FSM_DATA_MODE_P1_1;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2205      	movs	r2, #5
 8004994:	701a      	strb	r2, [r3, #0]
            Beep();
 8004996:	f7fc fc2d 	bl	80011f4 <Beep>
        }
    }

    return fsm->mode_curr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	781b      	ldrb	r3, [r3, #0]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20004b20 	.word	0x20004b20

080049ac <FsmData_Do_MODE_A1_2>:

FSM_DATA_MODES FsmData_Do_MODE_A1_2(FsmData *fsm)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
    Rtc_DS3231_get(&fsm->ts);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3302      	adds	r3, #2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 ff3c 	bl	8006836 <Rtc_DS3231_get>
    Display_A1_2(&display, &fsm->ts);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3302      	adds	r3, #2
 80049c2:	4619      	mov	r1, r3
 80049c4:	481e      	ldr	r0, [pc, #120]	; (8004a40 <FsmData_Do_MODE_A1_2+0x94>)
 80049c6:	f7fe f89f 	bl	8002b08 <Display_A1_2>

    {
        if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d00f      	beq.n	80049fa <FsmData_Do_MODE_A1_2+0x4e>
            fsm->btn1_state_prev = fsm->btn1_state_curr;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
            fsm->mode_prev = fsm->mode_curr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	705a      	strb	r2, [r3, #1]
            fsm->mode_curr = FSM_DATA_MODE_EDIT_TIME_2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2209      	movs	r2, #9
 80049f2:	701a      	strb	r2, [r3, #0]
            Beep();
 80049f4:	f7fc fbfe 	bl	80011f4 <Beep>
 80049f8:	e01b      	b.n	8004a32 <FsmData_Do_MODE_A1_2+0x86>
        } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d013      	beq.n	8004a32 <FsmData_Do_MODE_A1_2+0x86>
            fsm->btn2_state_prev = fsm->btn2_state_curr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf

            if (fsm->btn2_state_curr == BTN_DOWN) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d108      	bne.n	8004a32 <FsmData_Do_MODE_A1_2+0x86>
                fsm->mode_prev = fsm->mode_curr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	705a      	strb	r2, [r3, #1]
                fsm->mode_curr = FSM_DATA_MODE_A1_3;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	701a      	strb	r2, [r3, #0]
                Beep();
 8004a2e:	f7fc fbe1 	bl	80011f4 <Beep>
            }
        }
    }

    return fsm->mode_curr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	781b      	ldrb	r3, [r3, #0]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20004b20 	.word	0x20004b20

08004a44 <FsmData_Do_MODE_A1_3>:

FSM_DATA_MODES FsmData_Do_MODE_A1_3(FsmData *fsm)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    Rtc_DS3231_get(&fsm->ts);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 fef0 	bl	8006836 <Rtc_DS3231_get>
    Display_A1_3(&display, &fsm->ts);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3302      	adds	r3, #2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	481e      	ldr	r0, [pc, #120]	; (8004ad8 <FsmData_Do_MODE_A1_3+0x94>)
 8004a5e:	f7fe f93b 	bl	8002cd8 <Display_A1_3>

    {
        if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d00f      	beq.n	8004a92 <FsmData_Do_MODE_A1_3+0x4e>
            fsm->btn1_state_prev = fsm->btn1_state_curr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
            fsm->mode_prev = fsm->mode_curr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	705a      	strb	r2, [r3, #1]
            fsm->mode_curr = FSM_DATA_MODE_EDIT_DATE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	220f      	movs	r2, #15
 8004a8a:	701a      	strb	r2, [r3, #0]
            Beep();
 8004a8c:	f7fc fbb2 	bl	80011f4 <Beep>
 8004a90:	e01b      	b.n	8004aca <FsmData_Do_MODE_A1_3+0x86>
        } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d013      	beq.n	8004aca <FsmData_Do_MODE_A1_3+0x86>
            fsm->btn2_state_prev = fsm->btn2_state_curr;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf

            if (fsm->btn2_state_curr == BTN_DOWN) {
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d108      	bne.n	8004aca <FsmData_Do_MODE_A1_3+0x86>
                fsm->mode_prev = fsm->mode_curr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	705a      	strb	r2, [r3, #1]
                fsm->mode_curr = FSM_DATA_MODE_A1_1;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
                Beep();
 8004ac6:	f7fc fb95 	bl	80011f4 <Beep>
            }
        }
    }
    return fsm->mode_curr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	781b      	ldrb	r3, [r3, #0]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20004b20 	.word	0x20004b20

08004adc <FsmData_Do_MODE_S1_1>:

FSM_DATA_MODES FsmData_Do_MODE_S1_1(FsmData *fsm)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    static uint32_t counter;
    static uint8_t flip_flop;
    uint32_t counter_curr;

    if (counter == 0) {
 8004ae4:	4b48      	ldr	r3, [pc, #288]	; (8004c08 <FsmData_Do_MODE_S1_1+0x12c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <FsmData_Do_MODE_S1_1+0x1a>
        counter = HAL_GetTick();
 8004aec:	f009 f826 	bl	800db3c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b45      	ldr	r3, [pc, #276]	; (8004c08 <FsmData_Do_MODE_S1_1+0x12c>)
 8004af4:	601a      	str	r2, [r3, #0]
    }

    counter_curr = HAL_GetTick();
 8004af6:	f009 f821 	bl	800db3c <HAL_GetTick>
 8004afa:	60f8      	str	r0, [r7, #12]

    if (counter_curr - counter > 1000u) {
 8004afc:	4b42      	ldr	r3, [pc, #264]	; (8004c08 <FsmData_Do_MODE_S1_1+0x12c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b08:	d905      	bls.n	8004b16 <FsmData_Do_MODE_S1_1+0x3a>
        flip_flop = 1;
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <FsmData_Do_MODE_S1_1+0x130>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
        counter = 0;
 8004b10:	4b3d      	ldr	r3, [pc, #244]	; (8004c08 <FsmData_Do_MODE_S1_1+0x12c>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
    }

    if (flip_flop == 0) {
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <FsmData_Do_MODE_S1_1+0x130>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <FsmData_Do_MODE_S1_1+0x4a>
        Display_S1_1_Msg(&display);
 8004b1e:	483c      	ldr	r0, [pc, #240]	; (8004c10 <FsmData_Do_MODE_S1_1+0x134>)
 8004b20:	f7fd fb18 	bl	8002154 <Display_S1_1_Msg>
 8004b24:	e005      	b.n	8004b32 <FsmData_Do_MODE_S1_1+0x56>
    } else {
        Display_S1_1(&display, &fsm->sun_rise1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	330e      	adds	r3, #14
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4838      	ldr	r0, [pc, #224]	; (8004c10 <FsmData_Do_MODE_S1_1+0x134>)
 8004b2e:	f7fd fa37 	bl	8001fa0 <Display_S1_1>
    }

    if (fsm->btn3_state_prev != fsm->btn3_state_curr) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 21d1 	ldrb.w	r2, [r3, #465]	; 0x1d1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d013      	beq.n	8004b6a <FsmData_Do_MODE_S1_1+0x8e>
        if (fsm->btn3_state_curr == BTN_DOWN) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d108      	bne.n	8004b5e <FsmData_Do_MODE_S1_1+0x82>
            counter = 0;
 8004b4c:	4b2e      	ldr	r3, [pc, #184]	; (8004c08 <FsmData_Do_MODE_S1_1+0x12c>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
            flip_flop = 0;
 8004b52:	4b2e      	ldr	r3, [pc, #184]	; (8004c0c <FsmData_Do_MODE_S1_1+0x130>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
            fsm->mode_curr = FSM_DATA_MODE_S1_2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	701a      	strb	r2, [r3, #0]
        }

        fsm->btn3_state_prev = fsm->btn3_state_curr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
    }

    if (fsm->btn1_state_prev != fsm->btn1_state_curr
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d12f      	bne.n	8004bda <FsmData_Do_MODE_S1_1+0xfe>
        || fsm->btn2_state_prev != fsm->btn2_state_curr
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d127      	bne.n	8004bda <FsmData_Do_MODE_S1_1+0xfe>
        || fsm->btn4_state_prev != fsm->btn4_state_curr
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 21d3 	ldrb.w	r2, [r3, #467]	; 0x1d3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d11f      	bne.n	8004bda <FsmData_Do_MODE_S1_1+0xfe>
        || fsm->btn5_state_prev != fsm->btn5_state_curr
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d117      	bne.n	8004bda <FsmData_Do_MODE_S1_1+0xfe>
        || fsm->btn6_state_prev != fsm->btn6_state_curr
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 21d7 	ldrb.w	r2, [r3, #471]	; 0x1d7
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d10f      	bne.n	8004bda <FsmData_Do_MODE_S1_1+0xfe>
        || fsm->btn7_state_prev != fsm->btn7_state_curr
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d107      	bne.n	8004bda <FsmData_Do_MODE_S1_1+0xfe>
        || fsm->btn8_state_prev != fsm->btn8_state_curr)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d00f      	beq.n	8004bfa <FsmData_Do_MODE_S1_1+0x11e>
    {
        counter = 0;
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <FsmData_Do_MODE_S1_1+0x12c>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
        flip_flop = 0;
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <FsmData_Do_MODE_S1_1+0x130>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
        fsm->mode_curr = fsm->mode_prev;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	785a      	ldrb	r2, [r3, #1]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	701a      	strb	r2, [r3, #0]
        fsm->btn2_state_prev = fsm->btn2_state_curr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
    }

    return fsm->mode_curr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200005fc 	.word	0x200005fc
 8004c0c:	20000600 	.word	0x20000600
 8004c10:	20004b20 	.word	0x20004b20

08004c14 <FsmData_Do_MODE_S1_2>:

FSM_DATA_MODES FsmData_Do_MODE_S1_2(FsmData *fsm)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
    static uint32_t counter;
    static uint8_t flip_flop;
    uint32_t counter_curr;

    if (counter == 0) {
 8004c1c:	4b48      	ldr	r3, [pc, #288]	; (8004d40 <FsmData_Do_MODE_S1_2+0x12c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <FsmData_Do_MODE_S1_2+0x1a>
        counter = HAL_GetTick();
 8004c24:	f008 ff8a 	bl	800db3c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b45      	ldr	r3, [pc, #276]	; (8004d40 <FsmData_Do_MODE_S1_2+0x12c>)
 8004c2c:	601a      	str	r2, [r3, #0]
    }

    counter_curr = HAL_GetTick();
 8004c2e:	f008 ff85 	bl	800db3c <HAL_GetTick>
 8004c32:	60f8      	str	r0, [r7, #12]

    if (counter_curr - counter > 1000u) {
 8004c34:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <FsmData_Do_MODE_S1_2+0x12c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c40:	d905      	bls.n	8004c4e <FsmData_Do_MODE_S1_2+0x3a>
        flip_flop = 1;
 8004c42:	4b40      	ldr	r3, [pc, #256]	; (8004d44 <FsmData_Do_MODE_S1_2+0x130>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
        counter = 0;
 8004c48:	4b3d      	ldr	r3, [pc, #244]	; (8004d40 <FsmData_Do_MODE_S1_2+0x12c>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
    }

    if (flip_flop == 0) {
 8004c4e:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <FsmData_Do_MODE_S1_2+0x130>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <FsmData_Do_MODE_S1_2+0x4a>
        Display_S2_1_Msg(&display);
 8004c56:	483c      	ldr	r0, [pc, #240]	; (8004d48 <FsmData_Do_MODE_S1_2+0x134>)
 8004c58:	f7fd facf 	bl	80021fa <Display_S2_1_Msg>
 8004c5c:	e005      	b.n	8004c6a <FsmData_Do_MODE_S1_2+0x56>
    } else {
        Display_S1_1(&display, &fsm->sun_set1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	331a      	adds	r3, #26
 8004c62:	4619      	mov	r1, r3
 8004c64:	4838      	ldr	r0, [pc, #224]	; (8004d48 <FsmData_Do_MODE_S1_2+0x134>)
 8004c66:	f7fd f99b 	bl	8001fa0 <Display_S1_1>
    }

    if (fsm->btn3_state_prev != fsm->btn3_state_curr) {
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 21d1 	ldrb.w	r2, [r3, #465]	; 0x1d1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d013      	beq.n	8004ca2 <FsmData_Do_MODE_S1_2+0x8e>
        if (fsm->btn3_state_curr == BTN_DOWN) {
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d108      	bne.n	8004c96 <FsmData_Do_MODE_S1_2+0x82>
            counter = 0;
 8004c84:	4b2e      	ldr	r3, [pc, #184]	; (8004d40 <FsmData_Do_MODE_S1_2+0x12c>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
            flip_flop = 0;
 8004c8a:	4b2e      	ldr	r3, [pc, #184]	; (8004d44 <FsmData_Do_MODE_S1_2+0x130>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
            fsm->mode_curr = FSM_DATA_MODE_S1_1;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2203      	movs	r2, #3
 8004c94:	701a      	strb	r2, [r3, #0]
        }

        fsm->btn3_state_prev = fsm->btn3_state_curr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
    }

    if (fsm->btn1_state_prev != fsm->btn1_state_curr
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d12f      	bne.n	8004d12 <FsmData_Do_MODE_S1_2+0xfe>
        || fsm->btn2_state_prev != fsm->btn2_state_curr
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d127      	bne.n	8004d12 <FsmData_Do_MODE_S1_2+0xfe>
        || fsm->btn4_state_prev != fsm->btn4_state_curr
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 21d3 	ldrb.w	r2, [r3, #467]	; 0x1d3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d11f      	bne.n	8004d12 <FsmData_Do_MODE_S1_2+0xfe>
        || fsm->btn5_state_prev != fsm->btn5_state_curr
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d117      	bne.n	8004d12 <FsmData_Do_MODE_S1_2+0xfe>
        || fsm->btn6_state_prev != fsm->btn6_state_curr
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 21d7 	ldrb.w	r2, [r3, #471]	; 0x1d7
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d10f      	bne.n	8004d12 <FsmData_Do_MODE_S1_2+0xfe>
        || fsm->btn7_state_prev != fsm->btn7_state_curr
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d107      	bne.n	8004d12 <FsmData_Do_MODE_S1_2+0xfe>
        || fsm->btn8_state_prev != fsm->btn8_state_curr)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d00f      	beq.n	8004d32 <FsmData_Do_MODE_S1_2+0x11e>
    {
        counter = 0;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <FsmData_Do_MODE_S1_2+0x12c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
        flip_flop = 0;
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <FsmData_Do_MODE_S1_2+0x130>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
        fsm->mode_curr = fsm->mode_prev;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	785a      	ldrb	r2, [r3, #1]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	701a      	strb	r2, [r3, #0]
        fsm->btn2_state_prev = fsm->btn2_state_curr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
    }

    return fsm->mode_curr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	781b      	ldrb	r3, [r3, #0]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000604 	.word	0x20000604
 8004d44:	20000608 	.word	0x20000608
 8004d48:	20004b20 	.word	0x20004b20

08004d4c <FsmData_Do_MODE_P1_1>:

FSM_DATA_MODES FsmData_Do_MODE_P1_1(FsmData *fsm)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	{
		double t, p;
		Bmp280GetValues(&fsm->bmp280, &t, &p);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d5a:	f107 0208 	add.w	r2, r7, #8
 8004d5e:	f107 0110 	add.w	r1, r7, #16
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fc fdd8 	bl	8001918 <Bmp280GetValues>
		p += fsm->p_correction;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8004d6e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004d72:	461a      	mov	r2, r3
 8004d74:	4623      	mov	r3, r4
 8004d76:	f7fb fa93 	bl	80002a0 <__adddf3>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	e9c7 3402 	strd	r3, r4, [r7, #8]

        Display_P1(&display, p);
 8004d82:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d86:	eeb0 0a47 	vmov.f32	s0, s14
 8004d8a:	eef0 0a67 	vmov.f32	s1, s15
 8004d8e:	4831      	ldr	r0, [pc, #196]	; (8004e54 <FsmData_Do_MODE_P1_1+0x108>)
 8004d90:	f7fd fa86 	bl	80022a0 <Display_P1>

//		double a = Bmp280GetAltitude(&fsm->bmp280, fsm->p_base);
//		Display_P1(&display, a);
    }

    if (fsm->btn1_state_prev != fsm->btn1_state_curr
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d12f      	bne.n	8004e04 <FsmData_Do_MODE_P1_1+0xb8>
        || fsm->btn2_state_prev != fsm->btn2_state_curr
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d127      	bne.n	8004e04 <FsmData_Do_MODE_P1_1+0xb8>
        || fsm->btn3_state_prev != fsm->btn3_state_curr
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 21d1 	ldrb.w	r2, [r3, #465]	; 0x1d1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d11f      	bne.n	8004e04 <FsmData_Do_MODE_P1_1+0xb8>
        || fsm->btn5_state_prev != fsm->btn5_state_curr
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d117      	bne.n	8004e04 <FsmData_Do_MODE_P1_1+0xb8>
        || fsm->btn6_state_prev != fsm->btn6_state_curr
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 21d7 	ldrb.w	r2, [r3, #471]	; 0x1d7
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d10f      	bne.n	8004e04 <FsmData_Do_MODE_P1_1+0xb8>
        || fsm->btn7_state_prev != fsm->btn7_state_curr
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d107      	bne.n	8004e04 <FsmData_Do_MODE_P1_1+0xb8>
        || fsm->btn8_state_prev != fsm->btn8_state_curr)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d00a      	beq.n	8004e1a <FsmData_Do_MODE_P1_1+0xce>
    {
        fsm->mode_curr = fsm->mode_prev;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	785a      	ldrb	r2, [r3, #1]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	701a      	strb	r2, [r3, #0]
        fsm->btn2_state_prev = fsm->btn2_state_curr;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 8004e18:	e015      	b.n	8004e46 <FsmData_Do_MODE_P1_1+0xfa>
    } else if (fsm->btn4_state_prev != fsm->btn4_state_curr) {
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 21d3 	ldrb.w	r2, [r3, #467]	; 0x1d3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d00d      	beq.n	8004e46 <FsmData_Do_MODE_P1_1+0xfa>
    	fsm->btn4_state_prev = fsm->btn4_state_curr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3

    	if (fsm->btn4_state_curr == BTN_DOWN) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <FsmData_Do_MODE_P1_1+0xfa>
    		fsm->mode_curr = FSM_DATA_MODE_P1_2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2206      	movs	r2, #6
 8004e44:	701a      	strb	r2, [r3, #0]
    	}
    }

    return fsm->mode_curr;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	781b      	ldrb	r3, [r3, #0]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd90      	pop	{r4, r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20004b20 	.word	0x20004b20

08004e58 <FsmData_Do_MODE_P1_2>:

FSM_DATA_MODES FsmData_Do_MODE_P1_2(FsmData *fsm)
{
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	{
		double t, p;
		Bmp280GetValues(&fsm->bmp280, &t, &p);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e66:	f107 0208 	add.w	r2, r7, #8
 8004e6a:	f107 0110 	add.w	r1, r7, #16
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fc fd52 	bl	8001918 <Bmp280GetValues>
		p += fsm->p_correction;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8004e7a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4623      	mov	r3, r4
 8004e82:	f7fb fa0d 	bl	80002a0 <__adddf3>
 8004e86:	4603      	mov	r3, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	e9c7 3402 	strd	r3, r4, [r7, #8]

        Display_P2(&display, t);
 8004e8e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004e92:	eeb0 0a47 	vmov.f32	s0, s14
 8004e96:	eef0 0a67 	vmov.f32	s1, s15
 8004e9a:	4831      	ldr	r0, [pc, #196]	; (8004f60 <FsmData_Do_MODE_P1_2+0x108>)
 8004e9c:	f7fd fb18 	bl	80024d0 <Display_P2>
    }

    if (fsm->btn1_state_prev != fsm->btn1_state_curr
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d12f      	bne.n	8004f10 <FsmData_Do_MODE_P1_2+0xb8>
        || fsm->btn2_state_prev != fsm->btn2_state_curr
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d127      	bne.n	8004f10 <FsmData_Do_MODE_P1_2+0xb8>
        || fsm->btn3_state_prev != fsm->btn3_state_curr
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 21d1 	ldrb.w	r2, [r3, #465]	; 0x1d1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d11f      	bne.n	8004f10 <FsmData_Do_MODE_P1_2+0xb8>
        || fsm->btn5_state_prev != fsm->btn5_state_curr
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d117      	bne.n	8004f10 <FsmData_Do_MODE_P1_2+0xb8>
        || fsm->btn6_state_prev != fsm->btn6_state_curr
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 21d7 	ldrb.w	r2, [r3, #471]	; 0x1d7
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d10f      	bne.n	8004f10 <FsmData_Do_MODE_P1_2+0xb8>
        || fsm->btn7_state_prev != fsm->btn7_state_curr
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d107      	bne.n	8004f10 <FsmData_Do_MODE_P1_2+0xb8>
        || fsm->btn8_state_prev != fsm->btn8_state_curr)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d00a      	beq.n	8004f26 <FsmData_Do_MODE_P1_2+0xce>
    {
        fsm->mode_curr = fsm->mode_prev;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	785a      	ldrb	r2, [r3, #1]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	701a      	strb	r2, [r3, #0]
        fsm->btn2_state_prev = fsm->btn2_state_curr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 8004f24:	e015      	b.n	8004f52 <FsmData_Do_MODE_P1_2+0xfa>
    } else if (fsm->btn4_state_prev != fsm->btn4_state_curr) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 21d3 	ldrb.w	r2, [r3, #467]	; 0x1d3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d00d      	beq.n	8004f52 <FsmData_Do_MODE_P1_2+0xfa>
    	fsm->btn4_state_prev = fsm->btn4_state_curr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3

    	if (fsm->btn4_state_curr == BTN_DOWN) {
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <FsmData_Do_MODE_P1_2+0xfa>
    		fsm->mode_curr = FSM_DATA_MODE_P1_3;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2207      	movs	r2, #7
 8004f50:	701a      	strb	r2, [r3, #0]
    	}
    }

    return fsm->mode_curr;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	781b      	ldrb	r3, [r3, #0]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd90      	pop	{r4, r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20004b20 	.word	0x20004b20

08004f64 <FsmData_Do_MODE_P1_3>:

FSM_DATA_MODES FsmData_Do_MODE_P1_3(FsmData *fsm)
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b089      	sub	sp, #36	; 0x24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	{
		double a;

		a = Bmp280GetAltitude(&fsm->bmp280, fsm->p_base);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8004f78:	eeb0 0a47 	vmov.f32	s0, s14
 8004f7c:	eef0 0a67 	vmov.f32	s1, s15
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7fc fce9 	bl	8001958 <Bmp280GetAltitude>
 8004f86:	ed87 0b06 	vstr	d0, [r7, #24]
		Display_P3(&display, a);
 8004f8a:	ed97 0b06 	vldr	d0, [r7, #24]
 8004f8e:	484b      	ldr	r0, [pc, #300]	; (80050bc <FsmData_Do_MODE_P1_3+0x158>)
 8004f90:	f7fd fb88 	bl	80026a4 <Display_P3>
    }

    if (fsm->btn1_state_prev != fsm->btn1_state_curr
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d127      	bne.n	8004ff4 <FsmData_Do_MODE_P1_3+0x90>
        || fsm->btn2_state_prev != fsm->btn2_state_curr
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d11f      	bne.n	8004ff4 <FsmData_Do_MODE_P1_3+0x90>
        || fsm->btn3_state_prev != fsm->btn3_state_curr
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 21d1 	ldrb.w	r2, [r3, #465]	; 0x1d1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d117      	bne.n	8004ff4 <FsmData_Do_MODE_P1_3+0x90>
        || fsm->btn5_state_prev != fsm->btn5_state_curr
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d10f      	bne.n	8004ff4 <FsmData_Do_MODE_P1_3+0x90>
        || fsm->btn6_state_prev != fsm->btn6_state_curr
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 21d7 	ldrb.w	r2, [r3, #471]	; 0x1d7
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d107      	bne.n	8004ff4 <FsmData_Do_MODE_P1_3+0x90>
        || fsm->btn7_state_prev != fsm->btn7_state_curr
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d00a      	beq.n	800500a <FsmData_Do_MODE_P1_3+0xa6>
        /*|| fsm->btn8_state_prev != fsm->btn8_state_curr*/)
    {
        fsm->mode_curr = fsm->mode_prev;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	785a      	ldrb	r2, [r3, #1]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	701a      	strb	r2, [r3, #0]
        fsm->btn2_state_prev = fsm->btn2_state_curr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 8005008:	e052      	b.n	80050b0 <FsmData_Do_MODE_P1_3+0x14c>
    } else if (fsm->btn4_state_prev != fsm->btn4_state_curr) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 21d3 	ldrb.w	r2, [r3, #467]	; 0x1d3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 8005016:	429a      	cmp	r2, r3
 8005018:	d00e      	beq.n	8005038 <FsmData_Do_MODE_P1_3+0xd4>
    	fsm->btn4_state_prev = fsm->btn4_state_curr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3

    	if (fsm->btn4_state_curr == BTN_DOWN) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d13f      	bne.n	80050b0 <FsmData_Do_MODE_P1_3+0x14c>
    		fsm->mode_curr = FSM_DATA_MODE_P1_1;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2205      	movs	r2, #5
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e03b      	b.n	80050b0 <FsmData_Do_MODE_P1_3+0x14c>
    	}
    } else if (fsm->btn8_state_prev != fsm->btn8_state_curr) {
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005044:	429a      	cmp	r2, r3
 8005046:	d033      	beq.n	80050b0 <FsmData_Do_MODE_P1_3+0x14c>
    	fsm->btn8_state_prev = fsm->btn8_state_curr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db

    	if (fsm->btn8_state_curr == BTN_DOWN) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 800505a:	2b00      	cmp	r3, #0
 800505c:	d128      	bne.n	80050b0 <FsmData_Do_MODE_P1_3+0x14c>
    		double t, p;
    		Bmp280GetValuesInSi(&fsm->bmp280, &t, &p);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005064:	f107 0208 	add.w	r2, r7, #8
 8005068:	f107 0110 	add.w	r1, r7, #16
 800506c:	4618      	mov	r0, r3
 800506e:	f7fc fbc3 	bl	80017f8 <Bmp280GetValuesInSi>
    		p += fsm->p_correction;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8005078:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800507c:	461a      	mov	r2, r3
 800507e:	4623      	mov	r3, r4
 8005080:	f7fb f90e 	bl	80002a0 <__adddf3>
 8005084:	4603      	mov	r3, r0
 8005086:	460c      	mov	r4, r1
 8005088:	e9c7 3402 	strd	r3, r4, [r7, #8]
    		p /= 100.0;
 800508c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <FsmData_Do_MODE_P1_3+0x15c>)
 8005096:	f7fb fbe3 	bl	8000860 <__aeabi_ddiv>
 800509a:	4603      	mov	r3, r0
 800509c:	460c      	mov	r4, r1
 800509e:	e9c7 3402 	strd	r3, r4, [r7, #8]
			fsm->p_base = p;
 80050a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
//			fsm->p_base = 1006;
			Beep();
 80050ac:	f7fc f8a2 	bl	80011f4 <Beep>
		}
    }

    return fsm->mode_curr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	781b      	ldrb	r3, [r3, #0]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3724      	adds	r7, #36	; 0x24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}
 80050bc:	20004b20 	.word	0x20004b20
 80050c0:	40590000 	.word	0x40590000

080050c4 <FsmData_Do_MODE_EDIT_TIME_1>:

FSM_DATA_MODES FsmData_Do_MODE_EDIT_TIME_1(FsmData *fsm)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
    Display_EditTime1(&display, &fsm->ts);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3302      	adds	r3, #2
 80050d0:	4619      	mov	r1, r3
 80050d2:	487e      	ldr	r0, [pc, #504]	; (80052cc <FsmData_Do_MODE_EDIT_TIME_1+0x208>)
 80050d4:	f7fd ff1c 	bl	8002f10 <Display_EditTime1>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d02c      	beq.n	8005142 <FsmData_Do_MODE_EDIT_TIME_1+0x7e>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

        if (fsm->btn1_state_curr == BTN_UP) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	f040 80df 	bne.w	80052be <FsmData_Do_MODE_EDIT_TIME_1+0x1fa>
            if (fsm->update_time) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d016      	beq.n	8005138 <FsmData_Do_MODE_EDIT_TIME_1+0x74>
                Rtc_DS3231_set(fsm->ts);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8005110:	2000      	movs	r0, #0
 8005112:	4610      	mov	r0, r2
 8005114:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8005118:	2100      	movs	r1, #0
 800511a:	4611      	mov	r1, r2
 800511c:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8005120:	2200      	movs	r2, #0
 8005122:	461a      	mov	r2, r3
 8005124:	f001 fb26 	bl	8006774 <Rtc_DS3231_set>
                fsm->update_time = 0;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
                fsm->update_celestial = 1;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            }

            fsm->mode_curr = fsm->mode_prev;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	785a      	ldrb	r2, [r3, #1]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e0bd      	b.n	80052be <FsmData_Do_MODE_EDIT_TIME_1+0x1fa>
        }
    } else if (fsm->btn8_state_prev != fsm->btn8_state_curr || fsm->btn8_pressed_counter > BTN_REPEAT_DELAY) {
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 800514e:	429a      	cmp	r2, r3
 8005150:	d106      	bne.n	8005160 <FsmData_Do_MODE_EDIT_TIME_1+0x9c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8005158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800515c:	4293      	cmp	r3, r2
 800515e:	d928      	bls.n	80051b2 <FsmData_Do_MODE_EDIT_TIME_1+0xee>
        if (fsm->btn8_state_curr == BTN_DOWN) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005166:	2b00      	cmp	r3, #0
 8005168:	d117      	bne.n	800519a <FsmData_Do_MODE_EDIT_TIME_1+0xd6>
            fsm->ts.sec += 1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	789b      	ldrb	r3, [r3, #2]
 800516e:	3301      	adds	r3, #1
 8005170:	b2da      	uxtb	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	709a      	strb	r2, [r3, #2]
            fsm->ts.sec %= 60;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	789a      	ldrb	r2, [r3, #2]
 800517a:	4b55      	ldr	r3, [pc, #340]	; (80052d0 <FsmData_Do_MODE_EDIT_TIME_1+0x20c>)
 800517c:	fba3 1302 	umull	r1, r3, r3, r2
 8005180:	0959      	lsrs	r1, r3, #5
 8005182:	460b      	mov	r3, r1
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a5b      	subs	r3, r3, r1
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	b2da      	uxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	709a      	strb	r2, [r3, #2]
            fsm->update_time = 1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        }

        fsm->btn8_pressed_counter = BTN_FAST_REPEAT_DELAY;
 800519a:	f240 3252 	movw	r2, #850	; 0x352
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        fsm->btn8_state_prev = fsm->btn8_state_curr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 80051b0:	e085      	b.n	80052be <FsmData_Do_MODE_EDIT_TIME_1+0x1fa>
    } else if (fsm->btn7_state_prev != fsm->btn7_state_curr || fsm->btn7_pressed_counter > BTN_REPEAT_DELAY) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 80051be:	429a      	cmp	r2, r3
 80051c0:	d106      	bne.n	80051d0 <FsmData_Do_MODE_EDIT_TIME_1+0x10c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80051c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d928      	bls.n	8005222 <FsmData_Do_MODE_EDIT_TIME_1+0x15e>
        if (fsm->btn7_state_curr == BTN_DOWN) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d117      	bne.n	800520a <FsmData_Do_MODE_EDIT_TIME_1+0x146>
            fsm->ts.min += 1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	3301      	adds	r3, #1
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	70da      	strb	r2, [r3, #3]
            fsm->ts.min %= 60;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	78da      	ldrb	r2, [r3, #3]
 80051ea:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <FsmData_Do_MODE_EDIT_TIME_1+0x20c>)
 80051ec:	fba3 1302 	umull	r1, r3, r3, r2
 80051f0:	0959      	lsrs	r1, r3, #5
 80051f2:	460b      	mov	r3, r1
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a5b      	subs	r3, r3, r1
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	70da      	strb	r2, [r3, #3]
            fsm->update_time = 1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        }

        fsm->btn7_pressed_counter = BTN_FAST_REPEAT_DELAY;
 800520a:	f240 3252 	movw	r2, #850	; 0x352
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        fsm->btn7_state_prev = fsm->btn7_state_curr;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8005220:	e04d      	b.n	80052be <FsmData_Do_MODE_EDIT_TIME_1+0x1fa>
    } else if (fsm->btn6_state_prev != fsm->btn6_state_curr || fsm->btn6_pressed_counter > BTN_REPEAT_DELAY) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 21d7 	ldrb.w	r2, [r3, #471]	; 0x1d7
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 800522e:	429a      	cmp	r2, r3
 8005230:	d106      	bne.n	8005240 <FsmData_Do_MODE_EDIT_TIME_1+0x17c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8005238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800523c:	4293      	cmp	r3, r2
 800523e:	d928      	bls.n	8005292 <FsmData_Do_MODE_EDIT_TIME_1+0x1ce>
        if (fsm->btn6_state_curr == BTN_DOWN) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8005246:	2b00      	cmp	r3, #0
 8005248:	d117      	bne.n	800527a <FsmData_Do_MODE_EDIT_TIME_1+0x1b6>
            fsm->ts.hour += 1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	791b      	ldrb	r3, [r3, #4]
 800524e:	3301      	adds	r3, #1
 8005250:	b2da      	uxtb	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	711a      	strb	r2, [r3, #4]
            fsm->ts.hour %= 24;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	791a      	ldrb	r2, [r3, #4]
 800525a:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <FsmData_Do_MODE_EDIT_TIME_1+0x210>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	0919      	lsrs	r1, r3, #4
 8005262:	460b      	mov	r3, r1
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	440b      	add	r3, r1
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	b2da      	uxtb	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	711a      	strb	r2, [r3, #4]
            fsm->update_time = 1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        }

        fsm->btn6_pressed_counter = BTN_FAST_REPEAT_DELAY;
 800527a:	f240 3252 	movw	r2, #850	; 0x352
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        fsm->btn6_state_prev = fsm->btn6_state_curr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 21d6 	ldrb.w	r2, [r3, #470]	; 0x1d6
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 8005290:	e015      	b.n	80052be <FsmData_Do_MODE_EDIT_TIME_1+0x1fa>
    } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 800529e:	429a      	cmp	r2, r3
 80052a0:	d00d      	beq.n	80052be <FsmData_Do_MODE_EDIT_TIME_1+0x1fa>
        if (fsm->btn2_state_curr == BTN_DOWN) {
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <FsmData_Do_MODE_EDIT_TIME_1+0x1ee>
            fsm->mode_curr = FSM_DATA_MODE_EDIT_AGING;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	220a      	movs	r2, #10
 80052b0:	701a      	strb	r2, [r3, #0]
        }

        fsm->btn2_state_prev = fsm->btn2_state_curr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
    }

    return fsm->mode_curr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	781b      	ldrb	r3, [r3, #0]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20004b20 	.word	0x20004b20
 80052d0:	88888889 	.word	0x88888889
 80052d4:	aaaaaaab 	.word	0xaaaaaaab

080052d8 <FsmData_Do_MODE_EDIT_TIME_2>:

FSM_DATA_MODES FsmData_Do_MODE_EDIT_TIME_2(FsmData *fsm)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
    Display_EditTime2(&display, &fsm->ts);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3302      	adds	r3, #2
 80052e4:	4619      	mov	r1, r3
 80052e6:	485a      	ldr	r0, [pc, #360]	; (8005450 <FsmData_Do_MODE_EDIT_TIME_2+0x178>)
 80052e8:	f7fd fe1f 	bl	8002f2a <Display_EditTime2>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d02c      	beq.n	8005356 <FsmData_Do_MODE_EDIT_TIME_2+0x7e>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

        if (fsm->btn1_state_curr == BTN_UP) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800530e:	2b01      	cmp	r3, #1
 8005310:	f040 8097 	bne.w	8005442 <FsmData_Do_MODE_EDIT_TIME_2+0x16a>
            if (fsm->update_time) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d016      	beq.n	800534c <FsmData_Do_MODE_EDIT_TIME_2+0x74>
                Rtc_DS3231_set(fsm->ts);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8005324:	2000      	movs	r0, #0
 8005326:	4610      	mov	r0, r2
 8005328:	f8d3 2006 	ldr.w	r2, [r3, #6]
 800532c:	2100      	movs	r1, #0
 800532e:	4611      	mov	r1, r2
 8005330:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8005334:	2200      	movs	r2, #0
 8005336:	461a      	mov	r2, r3
 8005338:	f001 fa1c 	bl	8006774 <Rtc_DS3231_set>
                fsm->update_time = 0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
                fsm->update_celestial = 1;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            }

            fsm->mode_curr = fsm->mode_prev;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	785a      	ldrb	r2, [r3, #1]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e075      	b.n	8005442 <FsmData_Do_MODE_EDIT_TIME_2+0x16a>
        }
    } else if (fsm->btn7_state_prev != fsm->btn7_state_curr || fsm->btn7_pressed_counter > BTN_REPEAT_DELAY) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005362:	429a      	cmp	r2, r3
 8005364:	d106      	bne.n	8005374 <FsmData_Do_MODE_EDIT_TIME_2+0x9c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800536c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005370:	4293      	cmp	r3, r2
 8005372:	d92b      	bls.n	80053cc <FsmData_Do_MODE_EDIT_TIME_2+0xf4>
        if (fsm->btn7_state_curr == BTN_DOWN) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11a      	bne.n	80053b4 <FsmData_Do_MODE_EDIT_TIME_2+0xdc>
            fsm->ts.sec = 0;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	709a      	strb	r2, [r3, #2]
            fsm->ts.min += 1;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	78db      	ldrb	r3, [r3, #3]
 8005388:	3301      	adds	r3, #1
 800538a:	b2da      	uxtb	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	70da      	strb	r2, [r3, #3]
            fsm->ts.min %= 60;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	78da      	ldrb	r2, [r3, #3]
 8005394:	4b2f      	ldr	r3, [pc, #188]	; (8005454 <FsmData_Do_MODE_EDIT_TIME_2+0x17c>)
 8005396:	fba3 1302 	umull	r1, r3, r3, r2
 800539a:	0959      	lsrs	r1, r3, #5
 800539c:	460b      	mov	r3, r1
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	1a5b      	subs	r3, r3, r1
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	70da      	strb	r2, [r3, #3]
            fsm->update_time = 1;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        }

        fsm->btn7_pressed_counter = BTN_FAST_REPEAT_DELAY;
 80053b4:	f240 3252 	movw	r2, #850	; 0x352
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        fsm->btn7_state_prev = fsm->btn7_state_curr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 80053ca:	e03a      	b.n	8005442 <FsmData_Do_MODE_EDIT_TIME_2+0x16a>
    } else if (fsm->btn6_state_prev != fsm->btn6_state_curr || fsm->btn6_pressed_counter > BTN_REPEAT_DELAY) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 21d7 	ldrb.w	r2, [r3, #471]	; 0x1d7
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 80053d8:	429a      	cmp	r2, r3
 80053da:	d106      	bne.n	80053ea <FsmData_Do_MODE_EDIT_TIME_2+0x112>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80053e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d92b      	bls.n	8005442 <FsmData_Do_MODE_EDIT_TIME_2+0x16a>
        if (fsm->btn6_state_curr == BTN_DOWN) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11b      	bne.n	800542c <FsmData_Do_MODE_EDIT_TIME_2+0x154>
            fsm->ts.sec = 0;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	709a      	strb	r2, [r3, #2]
            fsm->ts.hour += 1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	791b      	ldrb	r3, [r3, #4]
 80053fe:	3301      	adds	r3, #1
 8005400:	b2da      	uxtb	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	711a      	strb	r2, [r3, #4]
            fsm->ts.hour %= 23;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	7919      	ldrb	r1, [r3, #4]
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <FsmData_Do_MODE_EDIT_TIME_2+0x180>)
 800540c:	fba3 2301 	umull	r2, r3, r3, r1
 8005410:	091a      	lsrs	r2, r3, #4
 8005412:	4613      	mov	r3, r2
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4413      	add	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	1acb      	subs	r3, r1, r3
 800541e:	b2da      	uxtb	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	711a      	strb	r2, [r3, #4]
            fsm->update_time = 1;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        }

        fsm->btn6_pressed_counter = BTN_FAST_REPEAT_DELAY;
 800542c:	f240 3252 	movw	r2, #850	; 0x352
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        fsm->btn6_state_prev = fsm->btn6_state_curr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 21d6 	ldrb.w	r2, [r3, #470]	; 0x1d6
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
    }

    return fsm->mode_curr;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	781b      	ldrb	r3, [r3, #0]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20004b20 	.word	0x20004b20
 8005454:	88888889 	.word	0x88888889
 8005458:	b21642c9 	.word	0xb21642c9

0800545c <FsmData_Do_MODE_EDIT_AGING>:

FSM_DATA_MODES FsmData_Do_MODE_EDIT_AGING(FsmData *fsm)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
    Display_EditAging(&display, fsm->aging);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 800546a:	4619      	mov	r1, r3
 800546c:	4844      	ldr	r0, [pc, #272]	; (8005580 <FsmData_Do_MODE_EDIT_AGING+0x124>)
 800546e:	f7fd fd69 	bl	8002f44 <Display_EditAging>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800547e:	429a      	cmp	r2, r3
 8005480:	d01e      	beq.n	80054c0 <FsmData_Do_MODE_EDIT_AGING+0x64>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

        if (fsm->btn1_state_curr == BTN_UP) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005494:	2b01      	cmp	r3, #1
 8005496:	d10e      	bne.n	80054b6 <FsmData_Do_MODE_EDIT_AGING+0x5a>
            if (fsm->update_aging) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <FsmData_Do_MODE_EDIT_AGING+0x5a>
                Rtc_DS3231_set_aging(fsm->aging);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fa6c 	bl	8006986 <Rtc_DS3231_set_aging>
                fsm->update_aging = 0;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
            }
        }

        fsm->mode_curr = fsm->mode_prev;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	785a      	ldrb	r2, [r3, #1]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e059      	b.n	8005574 <FsmData_Do_MODE_EDIT_AGING+0x118>
    } else {
        if (fsm->btn8_state_prev != fsm->btn8_state_curr) {
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d019      	beq.n	8005504 <FsmData_Do_MODE_EDIT_AGING+0xa8>
            if (fsm->btn8_state_curr == BTN_DOWN) {
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10d      	bne.n	80054f6 <FsmData_Do_MODE_EDIT_AGING+0x9a>
                --fsm->aging;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	b25a      	sxtb	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                fsm->update_aging = 1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
            }

            fsm->btn8_state_prev = fsm->btn8_state_curr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8005502:	e037      	b.n	8005574 <FsmData_Do_MODE_EDIT_AGING+0x118>
        } else if (fsm->btn7_state_prev != fsm->btn7_state_curr) {
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005510:	429a      	cmp	r2, r3
 8005512:	d019      	beq.n	8005548 <FsmData_Do_MODE_EDIT_AGING+0xec>
            if (fsm->btn7_state_curr == BTN_DOWN) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10d      	bne.n	800553a <FsmData_Do_MODE_EDIT_AGING+0xde>
                ++fsm->aging;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8005524:	b2db      	uxtb	r3, r3
 8005526:	3301      	adds	r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	b25a      	sxtb	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                fsm->update_aging = 1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
            }

            fsm->btn7_state_prev = fsm->btn7_state_curr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8005546:	e015      	b.n	8005574 <FsmData_Do_MODE_EDIT_AGING+0x118>
        } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8005554:	429a      	cmp	r2, r3
 8005556:	d00d      	beq.n	8005574 <FsmData_Do_MODE_EDIT_AGING+0x118>
            if (fsm->btn2_state_curr == BTN_DOWN) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <FsmData_Do_MODE_EDIT_AGING+0x10c>
                fsm->mode_curr = FSM_DATA_MODE_EDIT_LATITUDE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	220b      	movs	r2, #11
 8005566:	701a      	strb	r2, [r3, #0]
            }

            fsm->btn2_state_prev = fsm->btn2_state_curr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
        }
    }

    return fsm->mode_curr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	781b      	ldrb	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20004b20 	.word	0x20004b20
 8005584:	00000000 	.word	0x00000000

08005588 <FsmData_Do_MODE_EDIT_LATITUDE>:

FSM_DATA_MODES FsmData_Do_MODE_EDIT_LATITUDE(FsmData *fsm)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
    Display_EditLatitude(&display, fsm->latitude_deg);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005596:	eeb0 0a47 	vmov.f32	s0, s14
 800559a:	eef0 0a67 	vmov.f32	s1, s15
 800559e:	488c      	ldr	r0, [pc, #560]	; (80057d0 <FsmData_Do_MODE_EDIT_LATITUDE+0x248>)
 80055a0:	f7fd fdba 	bl	8003118 <Display_EditLatitude>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d038      	beq.n	8005626 <FsmData_Do_MODE_EDIT_LATITUDE+0x9e>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

        if (fsm->btn1_state_curr == BTN_UP) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d128      	bne.n	800561c <FsmData_Do_MODE_EDIT_LATITUDE+0x94>
            if (fsm->update_latitude) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d023      	beq.n	800561c <FsmData_Do_MODE_EDIT_LATITUDE+0x94>
                /* save latitude to flash */
            	FlashWrite(fsm->tz_idx,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055da:	461a      	mov	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	ed93 5b68 	vldr	d5, [r3, #416]	; 0x1a0
 80055ee:	eeb0 2a45 	vmov.f32	s4, s10
 80055f2:	eef0 2a65 	vmov.f32	s5, s11
 80055f6:	eeb0 1a46 	vmov.f32	s2, s12
 80055fa:	eef0 1a66 	vmov.f32	s3, s13
 80055fe:	eeb0 0a47 	vmov.f32	s0, s14
 8005602:	eef0 0a67 	vmov.f32	s1, s15
 8005606:	4610      	mov	r0, r2
 8005608:	f7fe fb48 	bl	8003c9c <FlashWrite>
            			   fsm->latitude_deg,
						   fsm->longitude_deg,
						   fsm->p_correction);

                fsm->update_latitude = 0;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
                fsm->update_celestial = 1;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            }
        }

        fsm->mode_curr = fsm->mode_prev;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	785a      	ldrb	r2, [r3, #1]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e0c5      	b.n	80057b2 <FsmData_Do_MODE_EDIT_LATITUDE+0x22a>
    } else {
        if (fsm->btn8_state_prev != fsm->btn8_state_curr || fsm->btn8_pressed_counter > BTN_REPEAT_DELAY) {
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005632:	429a      	cmp	r2, r3
 8005634:	d106      	bne.n	8005644 <FsmData_Do_MODE_EDIT_LATITUDE+0xbc>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800563c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005640:	4293      	cmp	r3, r2
 8005642:	d948      	bls.n	80056d6 <FsmData_Do_MODE_EDIT_LATITUDE+0x14e>
            if (fsm->btn8_state_curr == BTN_DOWN) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 800564a:	2b00      	cmp	r3, #0
 800564c:	d129      	bne.n	80056a2 <FsmData_Do_MODE_EDIT_LATITUDE+0x11a>
                if (fsm->latitude_deg > -90.00)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	4b5e      	ldr	r3, [pc, #376]	; (80057d4 <FsmData_Do_MODE_EDIT_LATITUDE+0x24c>)
 800565a:	f7fb fa67 	bl	8000b2c <__aeabi_dcmpgt>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00c      	beq.n	800567e <FsmData_Do_MODE_EDIT_LATITUDE+0xf6>
                    fsm->latitude_deg -= 0.01;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800566a:	a355      	add	r3, pc, #340	; (adr r3, 80057c0 <FsmData_Do_MODE_EDIT_LATITUDE+0x238>)
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f7fa fe14 	bl	800029c <__aeabi_dsub>
 8005674:	4603      	mov	r3, r0
 8005676:	460c      	mov	r4, r1
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

                fsm->latitude_rad = fsm->latitude_deg * snm_DEG_TO_RAD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005684:	a350      	add	r3, pc, #320	; (adr r3, 80057c8 <FsmData_Do_MODE_EDIT_LATITUDE+0x240>)
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f7fa ffbf 	bl	800060c <__aeabi_dmul>
 800568e:	4603      	mov	r3, r0
 8005690:	460c      	mov	r4, r1
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
                fsm->update_latitude = 1;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
 80056a0:	e004      	b.n	80056ac <FsmData_Do_MODE_EDIT_LATITUDE+0x124>
            } else {
                fsm->btn8_fast_repeat_delay_accelerated = BTN_FAST_REPEAT_DELAY;
 80056a2:	f240 3252 	movw	r2, #850	; 0x352
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            }

            fsm->btn8_pressed_counter = fsm->btn8_fast_repeat_delay_accelerated;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
            fsm->btn8_fast_repeat_delay_accelerated += 10;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80056be:	f103 020a 	add.w	r2, r3, #10
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            fsm->btn8_state_prev = fsm->btn8_state_curr;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 80056d4:	e06d      	b.n	80057b2 <FsmData_Do_MODE_EDIT_LATITUDE+0x22a>
        } else if (fsm->btn7_state_prev != fsm->btn7_state_curr || fsm->btn7_pressed_counter > BTN_REPEAT_DELAY) {
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d106      	bne.n	80056f4 <FsmData_Do_MODE_EDIT_LATITUDE+0x16c>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80056ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d948      	bls.n	8005786 <FsmData_Do_MODE_EDIT_LATITUDE+0x1fe>
            if (fsm->btn7_state_curr == BTN_DOWN) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d129      	bne.n	8005752 <FsmData_Do_MODE_EDIT_LATITUDE+0x1ca>
                if (fsm->latitude_deg < +90.00)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	4b33      	ldr	r3, [pc, #204]	; (80057d8 <FsmData_Do_MODE_EDIT_LATITUDE+0x250>)
 800570a:	f7fb f9f1 	bl	8000af0 <__aeabi_dcmplt>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <FsmData_Do_MODE_EDIT_LATITUDE+0x1a6>
                    fsm->latitude_deg += 0.01;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800571a:	a329      	add	r3, pc, #164	; (adr r3, 80057c0 <FsmData_Do_MODE_EDIT_LATITUDE+0x238>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fa fdbe 	bl	80002a0 <__adddf3>
 8005724:	4603      	mov	r3, r0
 8005726:	460c      	mov	r4, r1
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

                fsm->latitude_rad = fsm->latitude_deg * snm_DEG_TO_RAD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005734:	a324      	add	r3, pc, #144	; (adr r3, 80057c8 <FsmData_Do_MODE_EDIT_LATITUDE+0x240>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f7fa ff67 	bl	800060c <__aeabi_dmul>
 800573e:	4603      	mov	r3, r0
 8005740:	460c      	mov	r4, r1
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
                fsm->update_latitude = 1;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
 8005750:	e004      	b.n	800575c <FsmData_Do_MODE_EDIT_LATITUDE+0x1d4>
            } else {
                fsm->btn7_fast_repeat_delay_accelerated = BTN_FAST_REPEAT_DELAY;
 8005752:	f240 3252 	movw	r2, #850	; 0x352
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
            }

            fsm->btn7_pressed_counter = fsm->btn7_fast_repeat_delay_accelerated;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
            fsm->btn7_fast_repeat_delay_accelerated += 10;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800576e:	f103 020a 	add.w	r2, r3, #10
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
            fsm->btn7_state_prev = fsm->btn7_state_curr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8005784:	e015      	b.n	80057b2 <FsmData_Do_MODE_EDIT_LATITUDE+0x22a>
        } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8005792:	429a      	cmp	r2, r3
 8005794:	d00d      	beq.n	80057b2 <FsmData_Do_MODE_EDIT_LATITUDE+0x22a>
            if (fsm->btn2_state_curr == BTN_DOWN) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <FsmData_Do_MODE_EDIT_LATITUDE+0x21e>
                fsm->mode_curr = FSM_DATA_MODE_EDIT_LONGITUDE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	220c      	movs	r2, #12
 80057a4:	701a      	strb	r2, [r3, #0]
            }

            fsm->btn2_state_prev = fsm->btn2_state_curr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
        }
    }

    return fsm->mode_curr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	781b      	ldrb	r3, [r3, #0]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd90      	pop	{r4, r7, pc}
 80057be:	bf00      	nop
 80057c0:	47ae147b 	.word	0x47ae147b
 80057c4:	3f847ae1 	.word	0x3f847ae1
 80057c8:	a2529d39 	.word	0xa2529d39
 80057cc:	3f91df46 	.word	0x3f91df46
 80057d0:	20004b20 	.word	0x20004b20
 80057d4:	c0568000 	.word	0xc0568000
 80057d8:	40568000 	.word	0x40568000
 80057dc:	00000000 	.word	0x00000000

080057e0 <FsmData_Do_MODE_EDIT_LONGITUDE>:

FSM_DATA_MODES FsmData_Do_MODE_EDIT_LONGITUDE(FsmData *fsm)
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
    Display_EditLongitude(&display, fsm->longitude_deg);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80057ee:	eeb0 0a47 	vmov.f32	s0, s14
 80057f2:	eef0 0a67 	vmov.f32	s1, s15
 80057f6:	488c      	ldr	r0, [pc, #560]	; (8005a28 <FsmData_Do_MODE_EDIT_LONGITUDE+0x248>)
 80057f8:	f7fd fdbe 	bl	8003378 <Display_EditLongitude>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005808:	429a      	cmp	r2, r3
 800580a:	d038      	beq.n	800587e <FsmData_Do_MODE_EDIT_LONGITUDE+0x9e>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

        if (fsm->btn1_state_curr == BTN_UP) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800581e:	2b01      	cmp	r3, #1
 8005820:	d128      	bne.n	8005874 <FsmData_Do_MODE_EDIT_LONGITUDE+0x94>
            if (fsm->update_longitude) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8005828:	2b00      	cmp	r3, #0
 800582a:	d023      	beq.n	8005874 <FsmData_Do_MODE_EDIT_LONGITUDE+0x94>
                /* save longitude to flash */
            	FlashWrite(fsm->tz_idx,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	ed93 5b68 	vldr	d5, [r3, #416]	; 0x1a0
 8005846:	eeb0 2a45 	vmov.f32	s4, s10
 800584a:	eef0 2a65 	vmov.f32	s5, s11
 800584e:	eeb0 1a46 	vmov.f32	s2, s12
 8005852:	eef0 1a66 	vmov.f32	s3, s13
 8005856:	eeb0 0a47 	vmov.f32	s0, s14
 800585a:	eef0 0a67 	vmov.f32	s1, s15
 800585e:	4610      	mov	r0, r2
 8005860:	f7fe fa1c 	bl	8003c9c <FlashWrite>
						   fsm->latitude_deg,
						   fsm->longitude_deg,
						   fsm->p_correction);

                fsm->update_longitude = 0;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
                fsm->update_celestial = 1;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            }
        }

        fsm->mode_curr = fsm->mode_prev;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	785a      	ldrb	r2, [r3, #1]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e0c5      	b.n	8005a0a <FsmData_Do_MODE_EDIT_LONGITUDE+0x22a>
    } else {
        if (fsm->btn8_state_prev != fsm->btn8_state_curr || fsm->btn8_pressed_counter > BTN_REPEAT_DELAY) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 800588a:	429a      	cmp	r2, r3
 800588c:	d106      	bne.n	800589c <FsmData_Do_MODE_EDIT_LONGITUDE+0xbc>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8005894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005898:	4293      	cmp	r3, r2
 800589a:	d948      	bls.n	800592e <FsmData_Do_MODE_EDIT_LONGITUDE+0x14e>
            if (fsm->btn8_state_curr == BTN_DOWN) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d129      	bne.n	80058fa <FsmData_Do_MODE_EDIT_LONGITUDE+0x11a>
                if (fsm->longitude_deg > -180.00)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	4b5e      	ldr	r3, [pc, #376]	; (8005a2c <FsmData_Do_MODE_EDIT_LONGITUDE+0x24c>)
 80058b2:	f7fb f93b 	bl	8000b2c <__aeabi_dcmpgt>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00c      	beq.n	80058d6 <FsmData_Do_MODE_EDIT_LONGITUDE+0xf6>
                    fsm->longitude_deg -= 0.01;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80058c2:	a355      	add	r3, pc, #340	; (adr r3, 8005a18 <FsmData_Do_MODE_EDIT_LONGITUDE+0x238>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f7fa fce8 	bl	800029c <__aeabi_dsub>
 80058cc:	4603      	mov	r3, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

                fsm->longitude_rad = fsm->longitude_deg * snm_DEG_TO_RAD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80058dc:	a350      	add	r3, pc, #320	; (adr r3, 8005a20 <FsmData_Do_MODE_EDIT_LONGITUDE+0x240>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f7fa fe93 	bl	800060c <__aeabi_dmul>
 80058e6:	4603      	mov	r3, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
                fsm->update_longitude = 1;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80058f8:	e004      	b.n	8005904 <FsmData_Do_MODE_EDIT_LONGITUDE+0x124>
            } else {
                fsm->btn8_fast_repeat_delay_accelerated = BTN_FAST_REPEAT_DELAY;
 80058fa:	f240 3252 	movw	r2, #850	; 0x352
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            }

            fsm->btn8_pressed_counter = fsm->btn8_fast_repeat_delay_accelerated;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
            fsm->btn8_fast_repeat_delay_accelerated += 10;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005916:	f103 020a 	add.w	r2, r3, #10
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            fsm->btn8_state_prev = fsm->btn8_state_curr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 800592c:	e06d      	b.n	8005a0a <FsmData_Do_MODE_EDIT_LONGITUDE+0x22a>
        } else if (fsm->btn7_state_prev != fsm->btn7_state_curr || fsm->btn7_pressed_counter > BTN_REPEAT_DELAY) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 800593a:	429a      	cmp	r2, r3
 800593c:	d106      	bne.n	800594c <FsmData_Do_MODE_EDIT_LONGITUDE+0x16c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8005944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005948:	4293      	cmp	r3, r2
 800594a:	d948      	bls.n	80059de <FsmData_Do_MODE_EDIT_LONGITUDE+0x1fe>
            if (fsm->btn7_state_curr == BTN_DOWN) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d129      	bne.n	80059aa <FsmData_Do_MODE_EDIT_LONGITUDE+0x1ca>
                if (fsm->longitude_deg < +180.00)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	4b33      	ldr	r3, [pc, #204]	; (8005a30 <FsmData_Do_MODE_EDIT_LONGITUDE+0x250>)
 8005962:	f7fb f8c5 	bl	8000af0 <__aeabi_dcmplt>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00c      	beq.n	8005986 <FsmData_Do_MODE_EDIT_LONGITUDE+0x1a6>
                    fsm->longitude_deg += 0.01;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005972:	a329      	add	r3, pc, #164	; (adr r3, 8005a18 <FsmData_Do_MODE_EDIT_LONGITUDE+0x238>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f7fa fc92 	bl	80002a0 <__adddf3>
 800597c:	4603      	mov	r3, r0
 800597e:	460c      	mov	r4, r1
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

                fsm->longitude_rad = fsm->longitude_deg * snm_DEG_TO_RAD;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800598c:	a324      	add	r3, pc, #144	; (adr r3, 8005a20 <FsmData_Do_MODE_EDIT_LONGITUDE+0x240>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f7fa fe3b 	bl	800060c <__aeabi_dmul>
 8005996:	4603      	mov	r3, r0
 8005998:	460c      	mov	r4, r1
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
                fsm->update_longitude = 1;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80059a8:	e004      	b.n	80059b4 <FsmData_Do_MODE_EDIT_LONGITUDE+0x1d4>
            } else {
                fsm->btn7_fast_repeat_delay_accelerated = BTN_FAST_REPEAT_DELAY;
 80059aa:	f240 3252 	movw	r2, #850	; 0x352
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
            }

            fsm->btn7_pressed_counter = fsm->btn7_fast_repeat_delay_accelerated;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
            fsm->btn7_fast_repeat_delay_accelerated += 10;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80059c6:	f103 020a 	add.w	r2, r3, #10
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
            fsm->btn7_state_prev = fsm->btn7_state_curr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 80059dc:	e015      	b.n	8005a0a <FsmData_Do_MODE_EDIT_LONGITUDE+0x22a>
        } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d00d      	beq.n	8005a0a <FsmData_Do_MODE_EDIT_LONGITUDE+0x22a>
            if (fsm->btn2_state_curr == BTN_DOWN) {
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <FsmData_Do_MODE_EDIT_LONGITUDE+0x21e>
                fsm->mode_curr = FSM_DATA_MODE_EDIT_TIMEZONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	220d      	movs	r2, #13
 80059fc:	701a      	strb	r2, [r3, #0]
            }

            fsm->btn2_state_prev = fsm->btn2_state_curr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
        }
    }

    return fsm->mode_curr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd90      	pop	{r4, r7, pc}
 8005a16:	bf00      	nop
 8005a18:	47ae147b 	.word	0x47ae147b
 8005a1c:	3f847ae1 	.word	0x3f847ae1
 8005a20:	a2529d39 	.word	0xa2529d39
 8005a24:	3f91df46 	.word	0x3f91df46
 8005a28:	20004b20 	.word	0x20004b20
 8005a2c:	c0668000 	.word	0xc0668000
 8005a30:	40668000 	.word	0x40668000

08005a34 <FsmData_Do_MODE_EDIT_TIMEZONE>:

FSM_DATA_MODES FsmData_Do_MODE_EDIT_TIMEZONE(FsmData *fsm)
{
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
    Display_EditTimezone(&display, fsm->tz);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8005a42:	eeb0 0a47 	vmov.f32	s0, s14
 8005a46:	eef0 0a67 	vmov.f32	s1, s15
 8005a4a:	4861      	ldr	r0, [pc, #388]	; (8005bd0 <FsmData_Do_MODE_EDIT_TIMEZONE+0x19c>)
 8005a4c:	f7fd fdc4 	bl	80035d8 <Display_EditTimezone>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d038      	beq.n	8005ad2 <FsmData_Do_MODE_EDIT_TIMEZONE+0x9e>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

        if (fsm->btn1_state_curr == BTN_UP) {
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d128      	bne.n	8005ac8 <FsmData_Do_MODE_EDIT_TIMEZONE+0x94>
            if (fsm->update_timezone) {
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d023      	beq.n	8005ac8 <FsmData_Do_MODE_EDIT_TIMEZONE+0x94>
                /* save fsm->tz_idx to flash */
            	FlashWrite(fsm->tz_idx,
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a86:	461a      	mov	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	ed93 5b68 	vldr	d5, [r3, #416]	; 0x1a0
 8005a9a:	eeb0 2a45 	vmov.f32	s4, s10
 8005a9e:	eef0 2a65 	vmov.f32	s5, s11
 8005aa2:	eeb0 1a46 	vmov.f32	s2, s12
 8005aa6:	eef0 1a66 	vmov.f32	s3, s13
 8005aaa:	eeb0 0a47 	vmov.f32	s0, s14
 8005aae:	eef0 0a67 	vmov.f32	s1, s15
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7fe f8f2 	bl	8003c9c <FlashWrite>
						   fsm->latitude_deg,
						   fsm->longitude_deg,
						   fsm->p_correction);

                fsm->update_timezone = 0;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
                fsm->update_celestial = 1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            }
        }

        fsm->mode_curr = fsm->mode_prev;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	785a      	ldrb	r2, [r3, #1]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e077      	b.n	8005bc2 <FsmData_Do_MODE_EDIT_TIMEZONE+0x18e>
    } else {
        if (fsm->btn8_state_prev != fsm->btn8_state_curr) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d028      	beq.n	8005b34 <FsmData_Do_MODE_EDIT_TIMEZONE+0x100>
            if (fsm->btn8_state_curr == BTN_DOWN) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11c      	bne.n	8005b26 <FsmData_Do_MODE_EDIT_TIMEZONE+0xf2>
                fsm->tz_idx = (fsm->tz_idx-1) % N_TIMEZONES;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005af2:	3b01      	subs	r3, #1
 8005af4:	2226      	movs	r2, #38	; 0x26
 8005af6:	fb93 f1f2 	sdiv	r1, r3, r2
 8005afa:	fb02 f201 	mul.w	r2, r2, r1
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
                fsm->tz = TIMEZONES[fsm->tz_idx];
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b0e:	4a31      	ldr	r2, [pc, #196]	; (8005bd4 <FsmData_Do_MODE_EDIT_TIMEZONE+0x1a0>)
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
                fsm->update_timezone = 1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            }

            fsm->btn8_state_prev = fsm->btn8_state_curr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8005b32:	e046      	b.n	8005bc2 <FsmData_Do_MODE_EDIT_TIMEZONE+0x18e>
        } else if (fsm->btn7_state_prev != fsm->btn7_state_curr) {
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d028      	beq.n	8005b96 <FsmData_Do_MODE_EDIT_TIMEZONE+0x162>
            if (fsm->btn7_state_curr == BTN_DOWN) {
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d11c      	bne.n	8005b88 <FsmData_Do_MODE_EDIT_TIMEZONE+0x154>
                fsm->tz_idx = (fsm->tz_idx+1) % N_TIMEZONES;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b54:	3301      	adds	r3, #1
 8005b56:	2226      	movs	r2, #38	; 0x26
 8005b58:	fb93 f1f2 	sdiv	r1, r3, r2
 8005b5c:	fb02 f201 	mul.w	r2, r2, r1
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
                fsm->tz = TIMEZONES[fsm->tz_idx];
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <FsmData_Do_MODE_EDIT_TIMEZONE+0x1a0>)
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
                fsm->update_timezone = 1;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            }

            fsm->btn7_state_prev = fsm->btn7_state_curr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8005b94:	e015      	b.n	8005bc2 <FsmData_Do_MODE_EDIT_TIMEZONE+0x18e>
        } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d00d      	beq.n	8005bc2 <FsmData_Do_MODE_EDIT_TIMEZONE+0x18e>
            if (fsm->btn2_state_curr == BTN_DOWN) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <FsmData_Do_MODE_EDIT_TIMEZONE+0x182>
            	fsm->mode_curr = FSM_DATA_MODE_EDIT_P_CORRECTION;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	220e      	movs	r2, #14
 8005bb4:	701a      	strb	r2, [r3, #0]
            }

            fsm->btn2_state_prev = fsm->btn2_state_curr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
        }
    }

    return fsm->mode_curr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd90      	pop	{r4, r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20004b20 	.word	0x20004b20
 8005bd4:	20000008 	.word	0x20000008

08005bd8 <FsmData_Do_MODE_EDIT_P_CORRECTION>:

FSM_DATA_MODES FsmData_Do_MODE_EDIT_P_CORRECTION(FsmData *fsm)
{
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
    Display_EditPCorrection(&display, fsm->p_correction);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8005be6:	eeb0 0a47 	vmov.f32	s0, s14
 8005bea:	eef0 0a67 	vmov.f32	s1, s15
 8005bee:	4882      	ldr	r0, [pc, #520]	; (8005df8 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x220>)
 8005bf0:	f7fd fe22 	bl	8003838 <Display_EditPCorrection>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d038      	beq.n	8005c76 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x9e>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

        if (fsm->btn1_state_curr == BTN_UP) {
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d128      	bne.n	8005c6c <FsmData_Do_MODE_EDIT_P_CORRECTION+0x94>
            if (fsm->update_p_correction) {
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d023      	beq.n	8005c6c <FsmData_Do_MODE_EDIT_P_CORRECTION+0x94>
                /* save latitude to flash */
            	FlashWrite(fsm->tz_idx,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	ed93 5b68 	vldr	d5, [r3, #416]	; 0x1a0
 8005c3e:	eeb0 2a45 	vmov.f32	s4, s10
 8005c42:	eef0 2a65 	vmov.f32	s5, s11
 8005c46:	eeb0 1a46 	vmov.f32	s2, s12
 8005c4a:	eef0 1a66 	vmov.f32	s3, s13
 8005c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8005c52:	eef0 0a67 	vmov.f32	s1, s15
 8005c56:	4610      	mov	r0, r2
 8005c58:	f7fe f820 	bl	8003c9c <FlashWrite>
            			   fsm->latitude_deg,
						   fsm->longitude_deg,
						   fsm->p_correction);

                fsm->update_p_correction = 0;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                fsm->update_celestial = 1;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            }
        }

        fsm->mode_curr = fsm->mode_prev;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	785a      	ldrb	r2, [r3, #1]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	e0ab      	b.n	8005dce <FsmData_Do_MODE_EDIT_P_CORRECTION+0x1f6>
    } else {
        if (fsm->btn8_state_prev != fsm->btn8_state_curr || fsm->btn8_pressed_counter > BTN_REPEAT_DELAY) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d106      	bne.n	8005c94 <FsmData_Do_MODE_EDIT_P_CORRECTION+0xbc>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8005c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d93b      	bls.n	8005d0c <FsmData_Do_MODE_EDIT_P_CORRECTION+0x134>
            if (fsm->btn8_state_curr == BTN_DOWN) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d11c      	bne.n	8005cd8 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x100>
                if (fsm->p_correction > -99.99)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8005ca4:	a34e      	add	r3, pc, #312	; (adr r3, 8005de0 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x208>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f7fa ff3f 	bl	8000b2c <__aeabi_dcmpgt>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <FsmData_Do_MODE_EDIT_P_CORRECTION+0xf6>
                    fsm->p_correction -= 0.1;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8005cba:	a34b      	add	r3, pc, #300	; (adr r3, 8005de8 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x210>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa faec 	bl	800029c <__aeabi_dsub>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

                fsm->update_p_correction = 1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8005cd6:	e004      	b.n	8005ce2 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x10a>
            } else {
                fsm->btn8_fast_repeat_delay_accelerated = BTN_FAST_REPEAT_DELAY;
 8005cd8:	f240 3252 	movw	r2, #850	; 0x352
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            }

            fsm->btn8_pressed_counter = fsm->btn8_fast_repeat_delay_accelerated;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
            fsm->btn8_fast_repeat_delay_accelerated += 10;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005cf4:	f103 020a 	add.w	r2, r3, #10
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            fsm->btn8_state_prev = fsm->btn8_state_curr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8005d0a:	e060      	b.n	8005dce <FsmData_Do_MODE_EDIT_P_CORRECTION+0x1f6>
        } else if (fsm->btn7_state_prev != fsm->btn7_state_curr || fsm->btn7_pressed_counter > BTN_REPEAT_DELAY) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d106      	bne.n	8005d2a <FsmData_Do_MODE_EDIT_P_CORRECTION+0x152>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8005d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d93b      	bls.n	8005da2 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x1ca>
            if (fsm->btn7_state_curr == BTN_DOWN) {
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11c      	bne.n	8005d6e <FsmData_Do_MODE_EDIT_P_CORRECTION+0x196>
                if (fsm->p_correction < +99.99)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8005d3a:	a32d      	add	r3, pc, #180	; (adr r3, 8005df0 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x218>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fed6 	bl	8000af0 <__aeabi_dcmplt>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00c      	beq.n	8005d64 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x18c>
                    fsm->p_correction += 0.1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8005d50:	a325      	add	r3, pc, #148	; (adr r3, 8005de8 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x210>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f7fa faa3 	bl	80002a0 <__adddf3>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

                fsm->update_p_correction = 1;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8005d6c:	e004      	b.n	8005d78 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x1a0>
            } else {
                fsm->btn7_fast_repeat_delay_accelerated = BTN_FAST_REPEAT_DELAY;
 8005d6e:	f240 3252 	movw	r2, #850	; 0x352
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
            }

            fsm->btn7_pressed_counter = fsm->btn7_fast_repeat_delay_accelerated;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
            fsm->btn7_fast_repeat_delay_accelerated += 10;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005d8a:	f103 020a 	add.w	r2, r3, #10
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
            fsm->btn7_state_prev = fsm->btn7_state_curr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8005da0:	e015      	b.n	8005dce <FsmData_Do_MODE_EDIT_P_CORRECTION+0x1f6>
        } else if (fsm->btn2_state_prev != fsm->btn2_state_curr) {
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 21cf 	ldrb.w	r2, [r3, #463]	; 0x1cf
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d00d      	beq.n	8005dce <FsmData_Do_MODE_EDIT_P_CORRECTION+0x1f6>
            if (fsm->btn2_state_curr == BTN_DOWN) {
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <FsmData_Do_MODE_EDIT_P_CORRECTION+0x1ea>
                fsm->mode_curr = FSM_DATA_MODE_EDIT_AGING;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	701a      	strb	r2, [r3, #0]
            }

            fsm->btn2_state_prev = fsm->btn2_state_curr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 21ce 	ldrb.w	r2, [r3, #462]	; 0x1ce
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
        }
    }

    return fsm->mode_curr;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd90      	pop	{r4, r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	28f5c28f 	.word	0x28f5c28f
 8005de4:	c058ff5c 	.word	0xc058ff5c
 8005de8:	9999999a 	.word	0x9999999a
 8005dec:	3fb99999 	.word	0x3fb99999
 8005df0:	28f5c28f 	.word	0x28f5c28f
 8005df4:	4058ff5c 	.word	0x4058ff5c
 8005df8:	20004b20 	.word	0x20004b20

08005dfc <FsmData_Do_MODE_EDIT_DATE>:

FSM_DATA_MODES FsmData_Do_MODE_EDIT_DATE(FsmData *fsm)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
    Display_EditDate(&display, &fsm->ts);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3302      	adds	r3, #2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	487f      	ldr	r0, [pc, #508]	; (8006008 <FsmData_Do_MODE_EDIT_DATE+0x20c>)
 8005e0c:	f7fd fe2a 	bl	8003a64 <Display_EditDate>

    if (fsm->btn1_state_prev != fsm->btn1_state_curr) {
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 21cd 	ldrb.w	r2, [r3, #461]	; 0x1cd
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d028      	beq.n	8005e72 <FsmData_Do_MODE_EDIT_DATE+0x76>
        fsm->btn1_state_prev = fsm->btn1_state_curr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

        if (fsm->btn1_state_curr == BTN_UP) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f040 80e2 	bne.w	8005ffc <FsmData_Do_MODE_EDIT_DATE+0x200>
            if (fsm->update_time) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d012      	beq.n	8005e68 <FsmData_Do_MODE_EDIT_DATE+0x6c>
                Rtc_DS3231_set(fsm->ts);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8005e48:	2000      	movs	r0, #0
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8005e50:	2100      	movs	r1, #0
 8005e52:	4611      	mov	r1, r2
 8005e54:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 fc8a 	bl	8006774 <Rtc_DS3231_set>
                fsm->update_time = 0;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
            }

            fsm->mode_curr = fsm->mode_prev;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	785a      	ldrb	r2, [r3, #1]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	e0c4      	b.n	8005ffc <FsmData_Do_MODE_EDIT_DATE+0x200>
        }
    } else if (fsm->btn8_state_prev != fsm->btn8_state_curr || fsm->btn8_pressed_counter > BTN_REPEAT_DELAY) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 21db 	ldrb.w	r2, [r3, #475]	; 0x1db
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d106      	bne.n	8005e90 <FsmData_Do_MODE_EDIT_DATE+0x94>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8005e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d94c      	bls.n	8005f2a <FsmData_Do_MODE_EDIT_DATE+0x12e>
        if (fsm->btn8_state_curr == BTN_DOWN) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d13b      	bne.n	8005f12 <FsmData_Do_MODE_EDIT_DATE+0x116>
            if (fsm->ts.year < 2015)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ea0:	f240 72de 	movw	r2, #2014	; 0x7de
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	dc03      	bgt.n	8005eb0 <FsmData_Do_MODE_EDIT_DATE+0xb4>
                fsm->ts.year = 2015;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f240 72df 	movw	r2, #2015	; 0x7df
 8005eae:	811a      	strh	r2, [r3, #8]

            fsm->ts.year -= 2000;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	b21a      	sxth	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	811a      	strh	r2, [r3, #8]
            fsm->ts.year += 1;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3301      	adds	r3, #1
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	b21a      	sxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	811a      	strh	r2, [r3, #8]
            fsm->ts.year %= 100;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005edc:	4a4b      	ldr	r2, [pc, #300]	; (800600c <FsmData_Do_MODE_EDIT_DATE+0x210>)
 8005ede:	fb82 1203 	smull	r1, r2, r2, r3
 8005ee2:	1151      	asrs	r1, r2, #5
 8005ee4:	17da      	asrs	r2, r3, #31
 8005ee6:	1a8a      	subs	r2, r1, r2
 8005ee8:	2164      	movs	r1, #100	; 0x64
 8005eea:	fb01 f202 	mul.w	r2, r1, r2
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	b21a      	sxth	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	811a      	strh	r2, [r3, #8]
            fsm->ts.year += 2000;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	b21a      	sxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	811a      	strh	r2, [r3, #8]
            fsm->update_time = 1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        }

        fsm->btn8_pressed_counter = BTN_FAST_REPEAT_DELAY;
 8005f12:	f240 3252 	movw	r2, #850	; 0x352
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        fsm->btn8_state_prev = fsm->btn8_state_curr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 21da 	ldrb.w	r2, [r3, #474]	; 0x1da
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8005f28:	e068      	b.n	8005ffc <FsmData_Do_MODE_EDIT_DATE+0x200>
    } else if (fsm->btn7_state_prev != fsm->btn7_state_curr || fsm->btn7_pressed_counter > BTN_REPEAT_DELAY) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 21d9 	ldrb.w	r2, [r3, #473]	; 0x1d9
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d106      	bne.n	8005f48 <FsmData_Do_MODE_EDIT_DATE+0x14c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8005f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d924      	bls.n	8005f92 <FsmData_Do_MODE_EDIT_DATE+0x196>
        if (fsm->btn7_state_curr == BTN_DOWN) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d113      	bne.n	8005f7a <FsmData_Do_MODE_EDIT_DATE+0x17e>
            fsm->ts.mon = (fsm->ts.mon % 12) + 1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	799a      	ldrb	r2, [r3, #6]
 8005f56:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <FsmData_Do_MODE_EDIT_DATE+0x214>)
 8005f58:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5c:	08d9      	lsrs	r1, r3, #3
 8005f5e:	460b      	mov	r3, r1
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	440b      	add	r3, r1
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	719a      	strb	r2, [r3, #6]
            fsm->update_time = 1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        }

        fsm->btn7_pressed_counter = BTN_FAST_REPEAT_DELAY;
 8005f7a:	f240 3252 	movw	r2, #850	; 0x352
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        fsm->btn7_state_prev = fsm->btn7_state_curr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 21d8 	ldrb.w	r2, [r3, #472]	; 0x1d8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8005f90:	e034      	b.n	8005ffc <FsmData_Do_MODE_EDIT_DATE+0x200>
    } else if (fsm->btn6_state_prev != fsm->btn6_state_curr || fsm->btn6_pressed_counter > BTN_REPEAT_DELAY) {
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 21d7 	ldrb.w	r2, [r3, #471]	; 0x1d7
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d106      	bne.n	8005fb0 <FsmData_Do_MODE_EDIT_DATE+0x1b4>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8005fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d925      	bls.n	8005ffc <FsmData_Do_MODE_EDIT_DATE+0x200>
        if (fsm->btn6_state_curr == BTN_DOWN) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d115      	bne.n	8005fe6 <FsmData_Do_MODE_EDIT_DATE+0x1ea>
            fsm->ts.mday = (fsm->ts.mday % 31) + 1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	795a      	ldrb	r2, [r3, #5]
 8005fbe:	4b15      	ldr	r3, [pc, #84]	; (8006014 <FsmData_Do_MODE_EDIT_DATE+0x218>)
 8005fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc4:	1ad1      	subs	r1, r2, r3
 8005fc6:	0849      	lsrs	r1, r1, #1
 8005fc8:	440b      	add	r3, r1
 8005fca:	0919      	lsrs	r1, r3, #4
 8005fcc:	460b      	mov	r3, r1
 8005fce:	015b      	lsls	r3, r3, #5
 8005fd0:	1a5b      	subs	r3, r3, r1
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	715a      	strb	r2, [r3, #5]
            fsm->update_time = 1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        }

        fsm->btn6_pressed_counter = BTN_FAST_REPEAT_DELAY;
 8005fe6:	f240 3252 	movw	r2, #850	; 0x352
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        fsm->btn6_state_prev = fsm->btn6_state_curr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 21d6 	ldrb.w	r2, [r3, #470]	; 0x1d6
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
    }

    return fsm->mode_curr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20004b20 	.word	0x20004b20
 800600c:	51eb851f 	.word	0x51eb851f
 8006010:	aaaaaaab 	.word	0xaaaaaaab
 8006014:	08421085 	.word	0x08421085

08006018 <FsmDataProcess>:

void FsmDataProcess(FsmData *fsm)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
    FsmDataButtonsUpdateState(fsm);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fe fbad 	bl	8004780 <FsmDataButtonsUpdateState>

    fsm->mode_curr = process_state(fsm->mode_curr, fsm);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fd ffe9 	bl	8004004 <process_state>
 8006032:	4603      	mov	r3, r0
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	701a      	strb	r2, [r3, #0]

    if (fsm->btn6_state_curr == BTN_DOWN)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8006040:	2b00      	cmp	r3, #0
 8006042:	d107      	bne.n	8006054 <FsmDataProcess+0x3c>
            fsm->btn6_pressed_counter += CYCLE_DELAY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800604a:	220a      	movs	r2, #10
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

    if (fsm->btn7_state_curr == BTN_DOWN)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d107      	bne.n	800606e <FsmDataProcess+0x56>
        fsm->btn7_pressed_counter += CYCLE_DELAY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8006064:	220a      	movs	r2, #10
 8006066:	441a      	add	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

    if (fsm->btn8_state_curr == BTN_DOWN)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <FsmDataProcess+0x70>
        fsm->btn8_pressed_counter += CYCLE_DELAY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800607e:	220a      	movs	r2, #10
 8006080:	441a      	add	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <FsmLuminosityCreate>:

static const uint8_t 	BR_MIN = 1u;        /* Abs brightness minimum */
static const uint8_t 	BR_MAX = 254u;      /* Abs brightness maximum */

void FsmLuminosityCreate(FsmLuminosity *fsm)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	/* Yep, these params are magic! */
	KalmanFilterInit(&fsm->luminosity_filter,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 800609e:	eddf 0a08 	vldr	s1, [pc, #32]	; 80060c0 <FsmLuminosityCreate+0x30>
 80060a2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80060c0 <FsmLuminosityCreate+0x30>
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f9b0 	bl	800640c <KalmanFilterInit>
					 4000.0f,
					 4000.0f,
					 0.125f);
	LuminositySensorCreate(&luminosity_sensor);
 80060ac:	4805      	ldr	r0, [pc, #20]	; (80060c4 <FsmLuminosityCreate+0x34>)
 80060ae:	f000 fa4d 	bl	800654c <LuminositySensorCreate>
	LuminositySensorBegin(&luminosity_sensor);
 80060b2:	4804      	ldr	r0, [pc, #16]	; (80060c4 <FsmLuminosityCreate+0x34>)
 80060b4:	f000 fa90 	bl	80065d8 <LuminositySensorBegin>
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	457a0000 	.word	0x457a0000
 80060c4:	20004bbc 	.word	0x20004bbc

080060c8 <FsmLuminosityDoCalc>:

void FsmLuminosityDoCalc(FsmLuminosity *fsm)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	if (LuminositySensorIsReady(&luminosity_sensor)) {
 80060d0:	4823      	ldr	r0, [pc, #140]	; (8006160 <FsmLuminosityDoCalc+0x98>)
 80060d2:	f000 fa6a 	bl	80065aa <LuminositySensorIsReady>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d03c      	beq.n	8006156 <FsmLuminosityDoCalc+0x8e>
		fsm->lum = luminosity_sensor.value[0];
 80060dc:	4b20      	ldr	r3, [pc, #128]	; (8006160 <FsmLuminosityDoCalc+0x98>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	edc3 7a06 	vstr	s15, [r3, #24]
		fsm->lum = KalmanFilterUpdate(&fsm->luminosity_filter, fsm->lum);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80060f6:	eeb0 0a67 	vmov.f32	s0, s15
 80060fa:	4610      	mov	r0, r2
 80060fc:	f000 f9a0 	bl	8006440 <KalmanFilterUpdate>
 8006100:	eef0 7a40 	vmov.f32	s15, s0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	edc3 7a06 	vstr	s15, [r3, #24]
		fsm->br = calc_brightness_linear(fsm->lum, BR_MIN, BR_MAX);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006110:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006164 <FsmLuminosityDoCalc+0x9c>
 8006114:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006118:	eddf 6a13 	vldr	s13, [pc, #76]	; 8006168 <FsmLuminosityDoCalc+0xa0>
 800611c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006120:	eeb0 1a66 	vmov.f32	s2, s13
 8006124:	eef0 0a47 	vmov.f32	s1, s14
 8006128:	eeb0 0a67 	vmov.f32	s0, s15
 800612c:	f7fb f874 	bl	8001218 <calc_brightness_linear>
 8006130:	eef0 7a40 	vmov.f32	s15, s0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	edc3 7a07 	vstr	s15, [r3, #28]
		SetBrightness(fsm->br);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	edd3 7a07 	vldr	s15, [r3, #28]
 8006140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006144:	ee17 3a90 	vmov	r3, s15
 8006148:	b29b      	uxth	r3, r3
 800614a:	4618      	mov	r0, r3
 800614c:	f7fa ffee 	bl	800112c <SetBrightness>

		LuminositySensorBegin(&luminosity_sensor);
 8006150:	4803      	ldr	r0, [pc, #12]	; (8006160 <FsmLuminosityDoCalc+0x98>)
 8006152:	f000 fa41 	bl	80065d8 <LuminositySensorBegin>
	}
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20004bbc 	.word	0x20004bbc
 8006164:	00000001 	.word	0x00000001
 8006168:	000000fe 	.word	0x000000fe

0800616c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006172:	f107 0314 	add.w	r3, r7, #20
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	609a      	str	r2, [r3, #8]
 800617e:	60da      	str	r2, [r3, #12]
 8006180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	4b61      	ldr	r3, [pc, #388]	; (800630c <MX_GPIO_Init+0x1a0>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	4a60      	ldr	r2, [pc, #384]	; (800630c <MX_GPIO_Init+0x1a0>)
 800618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006190:	6313      	str	r3, [r2, #48]	; 0x30
 8006192:	4b5e      	ldr	r3, [pc, #376]	; (800630c <MX_GPIO_Init+0x1a0>)
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	4b5a      	ldr	r3, [pc, #360]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	4a59      	ldr	r2, [pc, #356]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061a8:	f043 0304 	orr.w	r3, r3, #4
 80061ac:	6313      	str	r3, [r2, #48]	; 0x30
 80061ae:	4b57      	ldr	r3, [pc, #348]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	4b53      	ldr	r3, [pc, #332]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	4a52      	ldr	r2, [pc, #328]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ca:	4b50      	ldr	r3, [pc, #320]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061d6:	2300      	movs	r3, #0
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	4b4c      	ldr	r3, [pc, #304]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	4a4b      	ldr	r2, [pc, #300]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	6313      	str	r3, [r2, #48]	; 0x30
 80061e6:	4b49      	ldr	r3, [pc, #292]	; (800630c <MX_GPIO_Init+0x1a0>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	607b      	str	r3, [r7, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DATA_LATCH_GPIO_Port, LED_DATA_LATCH_Pin, GPIO_PIN_RESET);
 80061f2:	2200      	movs	r2, #0
 80061f4:	2110      	movs	r1, #16
 80061f6:	4846      	ldr	r0, [pc, #280]	; (8006310 <MX_GPIO_Init+0x1a4>)
 80061f8:	f009 f8e2 	bl	800f3c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USART3_DE_Pin|DS3231_N_RES_Pin, GPIO_PIN_RESET);
 80061fc:	2200      	movs	r2, #0
 80061fe:	2124      	movs	r1, #36	; 0x24
 8006200:	4844      	ldr	r0, [pc, #272]	; (8006314 <MX_GPIO_Init+0x1a8>)
 8006202:	f009 f8dd 	bl	800f3c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_NSS_GPIO_Port, BMP280_NSS_Pin, GPIO_PIN_SET);
 8006206:	2201      	movs	r2, #1
 8006208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800620c:	4840      	ldr	r0, [pc, #256]	; (8006310 <MX_GPIO_Init+0x1a4>)
 800620e:	f009 f8d7 	bl	800f3c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006212:	2308      	movs	r3, #8
 8006214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006216:	2303      	movs	r3, #3
 8006218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800621e:	f107 0314 	add.w	r3, r7, #20
 8006222:	4619      	mov	r1, r3
 8006224:	483c      	ldr	r0, [pc, #240]	; (8006318 <MX_GPIO_Init+0x1ac>)
 8006226:	f008 ff19 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_DATA_LATCH_Pin;
 800622a:	2310      	movs	r3, #16
 800622c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800622e:	2301      	movs	r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006232:	2302      	movs	r3, #2
 8006234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006236:	2302      	movs	r3, #2
 8006238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_DATA_LATCH_GPIO_Port, &GPIO_InitStruct);
 800623a:	f107 0314 	add.w	r3, r7, #20
 800623e:	4619      	mov	r1, r3
 8006240:	4833      	ldr	r0, [pc, #204]	; (8006310 <MX_GPIO_Init+0x1a4>)
 8006242:	f008 ff0b 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART3_DE_Pin;
 8006246:	2304      	movs	r3, #4
 8006248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800624a:	2301      	movs	r3, #1
 800624c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800624e:	2302      	movs	r3, #2
 8006250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006252:	2302      	movs	r3, #2
 8006254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART3_DE_GPIO_Port, &GPIO_InitStruct);
 8006256:	f107 0314 	add.w	r3, r7, #20
 800625a:	4619      	mov	r1, r3
 800625c:	482d      	ldr	r0, [pc, #180]	; (8006314 <MX_GPIO_Init+0x1a8>)
 800625e:	f008 fefd 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8006262:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800626c:	2301      	movs	r3, #1
 800626e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	4619      	mov	r1, r3
 8006276:	4827      	ldr	r0, [pc, #156]	; (8006314 <MX_GPIO_Init+0x1a8>)
 8006278:	f008 fef0 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN5_Pin|BTN6_Pin|BTN7_Pin;
 800627c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006286:	2301      	movs	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800628a:	f107 0314 	add.w	r3, r7, #20
 800628e:	4619      	mov	r1, r3
 8006290:	4821      	ldr	r0, [pc, #132]	; (8006318 <MX_GPIO_Init+0x1ac>)
 8006292:	f008 fee3 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_NSS_Pin;
 8006296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800629a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800629c:	2301      	movs	r3, #1
 800629e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062a0:	2301      	movs	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a4:	2303      	movs	r3, #3
 80062a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_NSS_GPIO_Port, &GPIO_InitStruct);
 80062a8:	f107 0314 	add.w	r3, r7, #20
 80062ac:	4619      	mov	r1, r3
 80062ae:	4818      	ldr	r0, [pc, #96]	; (8006310 <MX_GPIO_Init+0x1a4>)
 80062b0:	f008 fed4 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS3231_N_INT_Pin;
 80062b4:	2310      	movs	r3, #16
 80062b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <MX_GPIO_Init+0x1b0>)
 80062ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062bc:	2301      	movs	r3, #1
 80062be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS3231_N_INT_GPIO_Port, &GPIO_InitStruct);
 80062c0:	f107 0314 	add.w	r3, r7, #20
 80062c4:	4619      	mov	r1, r3
 80062c6:	4813      	ldr	r0, [pc, #76]	; (8006314 <MX_GPIO_Init+0x1a8>)
 80062c8:	f008 fec8 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS3231_N_RES_Pin;
 80062cc:	2320      	movs	r3, #32
 80062ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062d0:	2301      	movs	r3, #1
 80062d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062d4:	2301      	movs	r3, #1
 80062d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062d8:	2300      	movs	r3, #0
 80062da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS3231_N_RES_GPIO_Port, &GPIO_InitStruct);
 80062dc:	f107 0314 	add.w	r3, r7, #20
 80062e0:	4619      	mov	r1, r3
 80062e2:	480c      	ldr	r0, [pc, #48]	; (8006314 <MX_GPIO_Init+0x1a8>)
 80062e4:	f008 feba 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SRV_BTN_Pin;
 80062e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SRV_BTN_GPIO_Port, &GPIO_InitStruct);
 80062f6:	f107 0314 	add.w	r3, r7, #20
 80062fa:	4619      	mov	r1, r3
 80062fc:	4805      	ldr	r0, [pc, #20]	; (8006314 <MX_GPIO_Init+0x1a8>)
 80062fe:	f008 fead 	bl	800f05c <HAL_GPIO_Init>

}
 8006302:	bf00      	nop
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800
 8006310:	40020000 	.word	0x40020000
 8006314:	40020400 	.word	0x40020400
 8006318:	40020800 	.word	0x40020800
 800631c:	10110000 	.word	0x10110000

08006320 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006324:	4b12      	ldr	r3, [pc, #72]	; (8006370 <MX_I2C1_Init+0x50>)
 8006326:	4a13      	ldr	r2, [pc, #76]	; (8006374 <MX_I2C1_Init+0x54>)
 8006328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <MX_I2C1_Init+0x50>)
 800632c:	4a12      	ldr	r2, [pc, #72]	; (8006378 <MX_I2C1_Init+0x58>)
 800632e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <MX_I2C1_Init+0x50>)
 8006332:	2200      	movs	r2, #0
 8006334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006336:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <MX_I2C1_Init+0x50>)
 8006338:	2200      	movs	r2, #0
 800633a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <MX_I2C1_Init+0x50>)
 800633e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006344:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <MX_I2C1_Init+0x50>)
 8006346:	2200      	movs	r2, #0
 8006348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <MX_I2C1_Init+0x50>)
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <MX_I2C1_Init+0x50>)
 8006352:	2200      	movs	r2, #0
 8006354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <MX_I2C1_Init+0x50>)
 8006358:	2200      	movs	r2, #0
 800635a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800635c:	4804      	ldr	r0, [pc, #16]	; (8006370 <MX_I2C1_Init+0x50>)
 800635e:	f009 f849 	bl	800f3f4 <HAL_I2C_Init>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006368:	f000 f9f0 	bl	800674c <Error_Handler>
  }

}
 800636c:	bf00      	nop
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20004b68 	.word	0x20004b68
 8006374:	40005400 	.word	0x40005400
 8006378:	00061a80 	.word	0x00061a80

0800637c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006384:	f107 0314 	add.w	r3, r7, #20
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	609a      	str	r2, [r3, #8]
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a19      	ldr	r2, [pc, #100]	; (8006400 <HAL_I2C_MspInit+0x84>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d12b      	bne.n	80063f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	4b18      	ldr	r3, [pc, #96]	; (8006404 <HAL_I2C_MspInit+0x88>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	4a17      	ldr	r2, [pc, #92]	; (8006404 <HAL_I2C_MspInit+0x88>)
 80063a8:	f043 0302 	orr.w	r3, r3, #2
 80063ac:	6313      	str	r3, [r2, #48]	; 0x30
 80063ae:	4b15      	ldr	r3, [pc, #84]	; (8006404 <HAL_I2C_MspInit+0x88>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80063ba:	23c0      	movs	r3, #192	; 0xc0
 80063bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063be:	2312      	movs	r3, #18
 80063c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c6:	2303      	movs	r3, #3
 80063c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063ca:	2304      	movs	r3, #4
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	4619      	mov	r1, r3
 80063d4:	480c      	ldr	r0, [pc, #48]	; (8006408 <HAL_I2C_MspInit+0x8c>)
 80063d6:	f008 fe41 	bl	800f05c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <HAL_I2C_MspInit+0x88>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	4a08      	ldr	r2, [pc, #32]	; (8006404 <HAL_I2C_MspInit+0x88>)
 80063e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063e8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ea:	4b06      	ldr	r3, [pc, #24]	; (8006404 <HAL_I2C_MspInit+0x88>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80063f6:	bf00      	nop
 80063f8:	3728      	adds	r7, #40	; 0x28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	40005400 	.word	0x40005400
 8006404:	40023800 	.word	0x40023800
 8006408:	40020400 	.word	0x40020400

0800640c <KalmanFilterInit>:

void KalmanFilterInit(KalmanFilter *filter,
                      float measure_e,
                      float estimate_e,
                      float q)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	ed87 0a02 	vstr	s0, [r7, #8]
 8006418:	edc7 0a01 	vstr	s1, [r7, #4]
 800641c:	ed87 1a00 	vstr	s2, [r7]
    filter->error_measure = measure_e;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	601a      	str	r2, [r3, #0]
    filter->error_estimate = estimate_e;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	605a      	str	r2, [r3, #4]
    filter->q = q;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	609a      	str	r2, [r3, #8]
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <KalmanFilterUpdate>:

float KalmanFilterUpdate(KalmanFilter *filter,
                         float measure)
{
 8006440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	ed87 0a00 	vstr	s0, [r7]
    filter->kalman_gain = filter->error_estimate
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	edd3 6a01 	vldr	s13, [r3, #4]
            / (filter->error_estimate + filter->error_measure);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	ed93 7a01 	vldr	s14, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	edd3 7a00 	vldr	s15, [r3]
 8006460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006464:	eec6 7a87 	vdiv.f32	s15, s13, s14
    filter->kalman_gain = filter->error_estimate
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->current_estimate = filter->last_estimate
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	ed93 7a04 	vldr	s14, [r3, #16]
            + filter->kalman_gain * (measure - filter->last_estimate);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	edd3 6a05 	vldr	s13, [r3, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006480:	ed97 6a00 	vldr	s12, [r7]
 8006484:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800648c:	ee77 7a27 	vadd.f32	s15, s14, s15
    filter->current_estimate = filter->last_estimate
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	edc3 7a03 	vstr	s15, [r3, #12]

    filter->error_estimate = (1.0 - filter->kalman_gain)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	4618      	mov	r0, r3
 800649c:	f7fa f85e 	bl	800055c <__aeabi_f2d>
 80064a0:	4603      	mov	r3, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	461a      	mov	r2, r3
 80064a6:	4623      	mov	r3, r4
 80064a8:	f04f 0000 	mov.w	r0, #0
 80064ac:	4926      	ldr	r1, [pc, #152]	; (8006548 <KalmanFilterUpdate+0x108>)
 80064ae:	f7f9 fef5 	bl	800029c <__aeabi_dsub>
 80064b2:	4603      	mov	r3, r0
 80064b4:	460c      	mov	r4, r1
 80064b6:	4625      	mov	r5, r4
 80064b8:	461c      	mov	r4, r3
            * filter->error_estimate
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fa f84c 	bl	800055c <__aeabi_f2d>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	f7fa f89e 	bl	800060c <__aeabi_dmul>
 80064d0:	4603      	mov	r3, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	4625      	mov	r5, r4
 80064d6:	461c      	mov	r4, r3
            + fabs(filter->last_estimate - filter->current_estimate)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	ed93 7a04 	vldr	s14, [r3, #16]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80064e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064e8:	eef0 7ae7 	vabs.f32	s15, s15
 80064ec:	ee17 0a90 	vmov	r0, s15
 80064f0:	f7fa f834 	bl	800055c <__aeabi_f2d>
 80064f4:	4680      	mov	r8, r0
 80064f6:	4689      	mov	r9, r1
                    * filter->q;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fa f82d 	bl	800055c <__aeabi_f2d>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7fa f87f 	bl	800060c <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
            + fabs(filter->last_estimate - filter->current_estimate)
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f7f9 fec3 	bl	80002a0 <__adddf3>
 800651a:	4603      	mov	r3, r0
 800651c:	460c      	mov	r4, r1
 800651e:	4618      	mov	r0, r3
 8006520:	4621      	mov	r1, r4
 8006522:	f7fa fb6b 	bl	8000bfc <__aeabi_d2f>
 8006526:	4602      	mov	r2, r0
    filter->error_estimate = (1.0 - filter->kalman_gain)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	605a      	str	r2, [r3, #4]

    filter->last_estimate = filter->current_estimate;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	611a      	str	r2, [r3, #16]

    return filter->current_estimate;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	ee07 3a90 	vmov	s15, r3
}
 800653c:	eeb0 0a67 	vmov.f32	s0, s15
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006548:	3ff00000 	.word	0x3ff00000

0800654c <LuminositySensorCreate>:
#include "adc.h"

LuminositySensor luminosity_sensor;

void LuminositySensorCreate(LuminositySensor *sensor)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
	sensor->value[0] = 0;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
	sensor->value_ready = ATOMIC_VAR_INIT(0);
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	f3bf 8f5b 	dmb	ish
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	f3bf 8f5b 	dmb	ish
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <LuminositySensorCommit>:

void LuminositySensorCommit(LuminositySensor *sensor)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
    atomic_fetch_add(&sensor->value_ready, 1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3304      	adds	r3, #4
 8006586:	f3bf 8f5b 	dmb	ish
 800658a:	e853 2f00 	ldrex	r2, [r3]
 800658e:	f102 0201 	add.w	r2, r2, #1
 8006592:	e843 2100 	strex	r1, r2, [r3]
 8006596:	2900      	cmp	r1, #0
 8006598:	d1f7      	bne.n	800658a <LuminositySensorCommit+0x10>
 800659a:	f3bf 8f5b 	dmb	ish
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <LuminositySensorIsReady>:

int LuminositySensorIsReady(LuminositySensor *sensor)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b087      	sub	sp, #28
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
    int tmp = atomic_load(&sensor->value_ready);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3304      	adds	r3, #4
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f3bf 8f5b 	dmb	ish
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f3bf 8f5b 	dmb	ish
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	613b      	str	r3, [r7, #16]
    return tmp;
 80065ca:	693b      	ldr	r3, [r7, #16]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <LuminositySensorBegin>:

void LuminositySensorBegin(LuminositySensor *sensor)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	sensor->value_ready = ATOMIC_VAR_INIT(0);
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	f3bf 8f5b 	dmb	ish
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f3bf 8f5b 	dmb	ish
	HAL_ADC_Start_DMA(&hadc1, sensor->value, 1);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	4619      	mov	r1, r3
 80065fa:	4803      	ldr	r0, [pc, #12]	; (8006608 <LuminositySensorBegin+0x30>)
 80065fc:	f007 fb10 	bl	800dc20 <HAL_ADC_Start_DMA>
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20004880 	.word	0x20004880

0800660c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006610:	f007 fa5e 	bl	800dad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006614:	f000 f81e 	bl	8006654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006618:	f7ff fda8 	bl	800616c <MX_GPIO_Init>
  MX_DMA_Init();
 800661c:	f7fd fae8 	bl	8003bf0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8006620:	f007 f85a 	bl	800d6d8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8006624:	f7ff fe7c 	bl	8006320 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006628:	f000 fa42 	bl	8006ab0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800662c:	f006 fd90 	bl	800d150 <MX_TIM2_Init>
  MX_ADC1_Init();
 8006630:	f7fa fcb4 	bl	8000f9c <MX_ADC1_Init>
  MX_TIM1_Init();
 8006634:	f006 fd08 	bl	800d048 <MX_TIM1_Init>
  MX_SPI3_Init();
 8006638:	f000 fa72 	bl	8006b20 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800663c:	f006 ffd2 	bl	800d5e4 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8006640:	f006 fdfa 	bl	800d238 <MX_TIM5_Init>
  MX_TIM7_Init();
 8006644:	f006 fe6e 	bl	800d324 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8006648:	f7fd fc64 	bl	8003f14 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800664c:	f00d fbaa 	bl	8013da4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006650:	e7fe      	b.n	8006650 <main+0x44>
	...

08006654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b094      	sub	sp, #80	; 0x50
 8006658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800665a:	f107 0320 	add.w	r3, r7, #32
 800665e:	2230      	movs	r2, #48	; 0x30
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f00e fdeb 	bl	801523e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006668:	f107 030c 	add.w	r3, r7, #12
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	609a      	str	r2, [r3, #8]
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006678:	2300      	movs	r3, #0
 800667a:	60bb      	str	r3, [r7, #8]
 800667c:	4b28      	ldr	r3, [pc, #160]	; (8006720 <SystemClock_Config+0xcc>)
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	4a27      	ldr	r2, [pc, #156]	; (8006720 <SystemClock_Config+0xcc>)
 8006682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006686:	6413      	str	r3, [r2, #64]	; 0x40
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <SystemClock_Config+0xcc>)
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006694:	2300      	movs	r3, #0
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	4b22      	ldr	r3, [pc, #136]	; (8006724 <SystemClock_Config+0xd0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a21      	ldr	r2, [pc, #132]	; (8006724 <SystemClock_Config+0xd0>)
 800669e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	4b1f      	ldr	r3, [pc, #124]	; (8006724 <SystemClock_Config+0xd0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80066b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066ba:	2302      	movs	r3, #2
 80066bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80066c4:	2304      	movs	r3, #4
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80066c8:	23a8      	movs	r3, #168	; 0xa8
 80066ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80066cc:	2302      	movs	r3, #2
 80066ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80066d0:	2307      	movs	r3, #7
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066d4:	f107 0320 	add.w	r3, r7, #32
 80066d8:	4618      	mov	r0, r3
 80066da:	f009 ff2f 	bl	801053c <HAL_RCC_OscConfig>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80066e4:	f000 f832 	bl	800674c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066e8:	230f      	movs	r3, #15
 80066ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066ec:	2302      	movs	r3, #2
 80066ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80066f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80066f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80066fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006700:	f107 030c 	add.w	r3, r7, #12
 8006704:	2105      	movs	r1, #5
 8006706:	4618      	mov	r0, r3
 8006708:	f00a f988 	bl	8010a1c <HAL_RCC_ClockConfig>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006712:	f000 f81b 	bl	800674c <Error_Handler>
  }
}
 8006716:	bf00      	nop
 8006718:	3750      	adds	r7, #80	; 0x50
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40023800 	.word	0x40023800
 8006724:	40007000 	.word	0x40007000

08006728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a04      	ldr	r2, [pc, #16]	; (8006748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d101      	bne.n	800673e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800673a:	f007 f9eb 	bl	800db14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	40001000 	.word	0x40001000

0800674c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006750:	bf00      	nop
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <Rtc_DS3231_init>:
uint8_t inp2toi(char *cmd,
                const uint16_t seek);


void Rtc_DS3231_init(const uint8_t ctrl_reg)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	4603      	mov	r3, r0
 8006762:	71fb      	strb	r3, [r7, #7]
    Rtc_DS3231_set_creg(ctrl_reg);
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f8ff 	bl	800696a <Rtc_DS3231_set_creg>
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <Rtc_DS3231_set>:

void Rtc_DS3231_set(struct ts t)
{
 8006774:	b590      	push	{r4, r7, lr}
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	af00      	add	r7, sp, #0
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t i, century;

    if (t.year > 1999) {
 8006780:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006784:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006788:	db08      	blt.n	800679c <Rtc_DS3231_set+0x28>
        century = 0x80;
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	77bb      	strb	r3, [r7, #30]
        t.year_s = t.year - 2000;
 800678e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	3330      	adds	r3, #48	; 0x30
 8006796:	b2db      	uxtb	r3, r3
 8006798:	73fb      	strb	r3, [r7, #15]
 800679a:	e007      	b.n	80067ac <Rtc_DS3231_set+0x38>
    } else {
        century = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	77bb      	strb	r3, [r7, #30]
        t.year_s = t.year - 1900;
 80067a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	3b6c      	subs	r3, #108	; 0x6c
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	73fb      	strb	r3, [r7, #15]
    }

    uint8_t TimeDate[7] = { t.sec, t.min, t.hour, t.wday, t.mday, t.mon,
 80067ac:	793b      	ldrb	r3, [r7, #4]
 80067ae:	753b      	strb	r3, [r7, #20]
 80067b0:	797b      	ldrb	r3, [r7, #5]
 80067b2:	757b      	strb	r3, [r7, #21]
 80067b4:	79bb      	ldrb	r3, [r7, #6]
 80067b6:	75bb      	strb	r3, [r7, #22]
 80067b8:	7b3b      	ldrb	r3, [r7, #12]
 80067ba:	75fb      	strb	r3, [r7, #23]
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	763b      	strb	r3, [r7, #24]
 80067c0:	7a3b      	ldrb	r3, [r7, #8]
 80067c2:	767b      	strb	r3, [r7, #25]
            t.year_s };
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
    uint8_t TimeDate[7] = { t.sec, t.min, t.hour, t.wday, t.mday, t.mon,
 80067c6:	76bb      	strb	r3, [r7, #26]

    Wire_beginTransmission(DS3231_I2C_ADDR);
 80067c8:	20d0      	movs	r0, #208	; 0xd0
 80067ca:	f007 f80f 	bl	800d7ec <Wire_beginTransmission>
    Wire_write(DS3231_TIME_CAL_ADDR);
 80067ce:	2000      	movs	r0, #0
 80067d0:	f007 f870 	bl	800d8b4 <Wire_write>
    for (i = 0; i < 7; i++) {
 80067d4:	2300      	movs	r3, #0
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e024      	b.n	8006824 <Rtc_DS3231_set+0xb0>
        TimeDate[i] = dectobcd(TimeDate[i]);
 80067da:	7ffb      	ldrb	r3, [r7, #31]
 80067dc:	f107 0220 	add.w	r2, r7, #32
 80067e0:	4413      	add	r3, r2
 80067e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80067e6:	7ffc      	ldrb	r4, [r7, #31]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 f925 	bl	8006a38 <dectobcd>
 80067ee:	4603      	mov	r3, r0
 80067f0:	461a      	mov	r2, r3
 80067f2:	f107 0320 	add.w	r3, r7, #32
 80067f6:	4423      	add	r3, r4
 80067f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        if (i == 5)
 80067fc:	7ffb      	ldrb	r3, [r7, #31]
 80067fe:	2b05      	cmp	r3, #5
 8006800:	d104      	bne.n	800680c <Rtc_DS3231_set+0x98>
            TimeDate[5] += century;
 8006802:	7e7a      	ldrb	r2, [r7, #25]
 8006804:	7fbb      	ldrb	r3, [r7, #30]
 8006806:	4413      	add	r3, r2
 8006808:	b2db      	uxtb	r3, r3
 800680a:	767b      	strb	r3, [r7, #25]
        Wire_write(TimeDate[i]);
 800680c:	7ffb      	ldrb	r3, [r7, #31]
 800680e:	f107 0220 	add.w	r2, r7, #32
 8006812:	4413      	add	r3, r2
 8006814:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006818:	4618      	mov	r0, r3
 800681a:	f007 f84b 	bl	800d8b4 <Wire_write>
    for (i = 0; i < 7; i++) {
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	3301      	adds	r3, #1
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	7ffb      	ldrb	r3, [r7, #31]
 8006826:	2b06      	cmp	r3, #6
 8006828:	d9d7      	bls.n	80067da <Rtc_DS3231_set+0x66>
    }
    Wire_endTransmission();
 800682a:	f006 fffb 	bl	800d824 <Wire_endTransmission>
}
 800682e:	bf00      	nop
 8006830:	3724      	adds	r7, #36	; 0x24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd90      	pop	{r4, r7, pc}

08006836 <Rtc_DS3231_get>:

void Rtc_DS3231_get(struct ts *t)
{
 8006836:	b590      	push	{r4, r7, lr}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
    uint8_t TimeDate[7];        //second,minute,hour,dow,day,month,year
    uint8_t century = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]
    uint8_t i, n;
    uint16_t year_full;

    Wire_beginTransmission(DS3231_I2C_ADDR);
 8006842:	20d0      	movs	r0, #208	; 0xd0
 8006844:	f006 ffd2 	bl	800d7ec <Wire_beginTransmission>
    Wire_write(DS3231_TIME_CAL_ADDR);
 8006848:	2000      	movs	r0, #0
 800684a:	f007 f833 	bl	800d8b4 <Wire_write>
    Wire_endTransmission();
 800684e:	f006 ffe9 	bl	800d824 <Wire_endTransmission>

    Wire_requestFrom(DS3231_I2C_ADDR, 7);
 8006852:	2107      	movs	r1, #7
 8006854:	20d0      	movs	r0, #208	; 0xd0
 8006856:	f007 f803 	bl	800d860 <Wire_requestFrom>

    for (i = 0; i < 7; i++) {
 800685a:	2300      	movs	r3, #0
 800685c:	75bb      	strb	r3, [r7, #22]
 800685e:	e022      	b.n	80068a6 <Rtc_DS3231_get+0x70>
        n = Wire_read();
 8006860:	f007 f842 	bl	800d8e8 <Wire_read>
 8006864:	4603      	mov	r3, r0
 8006866:	74fb      	strb	r3, [r7, #19]
        if (i == 5) {
 8006868:	7dbb      	ldrb	r3, [r7, #22]
 800686a:	2b05      	cmp	r3, #5
 800686c:	d10c      	bne.n	8006888 <Rtc_DS3231_get+0x52>
            TimeDate[5] = bcdtodec(n & 0x1F);
 800686e:	7cfb      	ldrb	r3, [r7, #19]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	b2db      	uxtb	r3, r3
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f900 	bl	8006a7c <bcdtodec>
 800687c:	4603      	mov	r3, r0
 800687e:	747b      	strb	r3, [r7, #17]
            century = (n & 0x80) >> 7;
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	09db      	lsrs	r3, r3, #7
 8006884:	75fb      	strb	r3, [r7, #23]
 8006886:	e00b      	b.n	80068a0 <Rtc_DS3231_get+0x6a>
        } else
            TimeDate[i] = bcdtodec(n);
 8006888:	7dbc      	ldrb	r4, [r7, #22]
 800688a:	7cfb      	ldrb	r3, [r7, #19]
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f8f5 	bl	8006a7c <bcdtodec>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	f107 0318 	add.w	r3, r7, #24
 800689a:	4423      	add	r3, r4
 800689c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (i = 0; i < 7; i++) {
 80068a0:	7dbb      	ldrb	r3, [r7, #22]
 80068a2:	3301      	adds	r3, #1
 80068a4:	75bb      	strb	r3, [r7, #22]
 80068a6:	7dbb      	ldrb	r3, [r7, #22]
 80068a8:	2b06      	cmp	r3, #6
 80068aa:	d9d9      	bls.n	8006860 <Rtc_DS3231_get+0x2a>
    }

    if (century == 1) {
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d105      	bne.n	80068be <Rtc_DS3231_get+0x88>
        year_full = 2000 + TimeDate[6];
 80068b2:	7cbb      	ldrb	r3, [r7, #18]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80068ba:	82bb      	strh	r3, [r7, #20]
 80068bc:	e004      	b.n	80068c8 <Rtc_DS3231_get+0x92>
    } else {
        year_full = 1900 + TimeDate[6];
 80068be:	7cbb      	ldrb	r3, [r7, #18]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80068c6:	82bb      	strh	r3, [r7, #20]
    }

    t->sec = TimeDate[0];
 80068c8:	7b3a      	ldrb	r2, [r7, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	701a      	strb	r2, [r3, #0]
    t->min = TimeDate[1];
 80068ce:	7b7a      	ldrb	r2, [r7, #13]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	705a      	strb	r2, [r3, #1]
    t->hour = TimeDate[2];
 80068d4:	7bba      	ldrb	r2, [r7, #14]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	709a      	strb	r2, [r3, #2]
    t->mday = TimeDate[4];
 80068da:	7c3a      	ldrb	r2, [r7, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	70da      	strb	r2, [r3, #3]
    t->mon = TimeDate[5];
 80068e0:	7c7a      	ldrb	r2, [r7, #17]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	711a      	strb	r2, [r3, #4]
    t->year = year_full;
 80068e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	80da      	strh	r2, [r3, #6]
    t->wday = TimeDate[3];
 80068ee:	7bfa      	ldrb	r2, [r7, #15]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	721a      	strb	r2, [r3, #8]
    t->year_s = TimeDate[6];
 80068f4:	7cba      	ldrb	r2, [r7, #18]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	72da      	strb	r2, [r3, #11]
#ifdef CONFIG_UNIXTIME
    t->unixtime = get_unixtime(*t);
#endif
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}

08006902 <Rtc_DS3231_set_addr>:

void Rtc_DS3231_set_addr(const uint8_t addr, const uint8_t val)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	4603      	mov	r3, r0
 800690a:	460a      	mov	r2, r1
 800690c:	71fb      	strb	r3, [r7, #7]
 800690e:	4613      	mov	r3, r2
 8006910:	71bb      	strb	r3, [r7, #6]
    Wire_beginTransmission(DS3231_I2C_ADDR);
 8006912:	20d0      	movs	r0, #208	; 0xd0
 8006914:	f006 ff6a 	bl	800d7ec <Wire_beginTransmission>
    Wire_write(addr);
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	4618      	mov	r0, r3
 800691c:	f006 ffca 	bl	800d8b4 <Wire_write>
    Wire_write(val);
 8006920:	79bb      	ldrb	r3, [r7, #6]
 8006922:	4618      	mov	r0, r3
 8006924:	f006 ffc6 	bl	800d8b4 <Wire_write>
    Wire_endTransmission();
 8006928:	f006 ff7c 	bl	800d824 <Wire_endTransmission>
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <Rtc_DS3231_get_addr>:

uint8_t Rtc_DS3231_get_addr(const uint8_t addr)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	71fb      	strb	r3, [r7, #7]
    uint8_t rv;

    Wire_beginTransmission(DS3231_I2C_ADDR);
 800693e:	20d0      	movs	r0, #208	; 0xd0
 8006940:	f006 ff54 	bl	800d7ec <Wire_beginTransmission>
    Wire_write(addr);
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	4618      	mov	r0, r3
 8006948:	f006 ffb4 	bl	800d8b4 <Wire_write>
    Wire_endTransmission();
 800694c:	f006 ff6a 	bl	800d824 <Wire_endTransmission>

    Wire_requestFrom(DS3231_I2C_ADDR, 1);
 8006950:	2101      	movs	r1, #1
 8006952:	20d0      	movs	r0, #208	; 0xd0
 8006954:	f006 ff84 	bl	800d860 <Wire_requestFrom>
    rv = Wire_read();
 8006958:	f006 ffc6 	bl	800d8e8 <Wire_read>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]

    return rv;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <Rtc_DS3231_set_creg>:

// control register

void Rtc_DS3231_set_creg(const uint8_t val)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	4603      	mov	r3, r0
 8006972:	71fb      	strb	r3, [r7, #7]
    Rtc_DS3231_set_addr(DS3231_CONTROL_ADDR, val);
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	4619      	mov	r1, r3
 8006978:	200e      	movs	r0, #14
 800697a:	f7ff ffc2 	bl	8006902 <Rtc_DS3231_set_addr>
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <Rtc_DS3231_set_aging>:
}

// aging register

void Rtc_DS3231_set_aging(const int8_t val)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	4603      	mov	r3, r0
 800698e:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    if (val >= 0)
 8006990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006994:	2b00      	cmp	r3, #0
 8006996:	db02      	blt.n	800699e <Rtc_DS3231_set_aging+0x18>
        reg = val;
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	73fb      	strb	r3, [r7, #15]
 800699c:	e001      	b.n	80069a2 <Rtc_DS3231_set_aging+0x1c>
    else
        reg = ~(-val) + 1;      // 2C
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	73fb      	strb	r3, [r7, #15]

    Rtc_DS3231_set_addr(DS3231_AGING_OFFSET_ADDR, reg);
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	4619      	mov	r1, r3
 80069a6:	2010      	movs	r0, #16
 80069a8:	f7ff ffab 	bl	8006902 <Rtc_DS3231_set_addr>
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <Rtc_DS3231_get_aging>:

int8_t Rtc_DS3231_get_aging(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
    uint8_t reg;
    int8_t rv;

    reg = Rtc_DS3231_get_addr(DS3231_AGING_OFFSET_ADDR);
 80069ba:	2010      	movs	r0, #16
 80069bc:	f7ff ffba 	bl	8006934 <Rtc_DS3231_get_addr>
 80069c0:	4603      	mov	r3, r0
 80069c2:	71bb      	strb	r3, [r7, #6]

    if ((reg & 0x80) != 0)
 80069c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da02      	bge.n	80069d2 <Rtc_DS3231_get_aging+0x1e>
        rv = reg | ~((1 << 8) - 1);     // if negative get two's complement
 80069cc:	79bb      	ldrb	r3, [r7, #6]
 80069ce:	71fb      	strb	r3, [r7, #7]
 80069d0:	e001      	b.n	80069d6 <Rtc_DS3231_get_aging+0x22>
    else
        rv = reg;
 80069d2:	79bb      	ldrb	r3, [r7, #6]
 80069d4:	71fb      	strb	r3, [r7, #7]

    return rv;
 80069d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <GetTimestampFromTm>:
{
    return Rtc_DS3231_get_sreg() & DS3231_A2F;
}

Rtc_Timestamp GetTimestampFromTm(struct tm tm)
{
 80069e2:	b084      	sub	sp, #16
 80069e4:	b490      	push	{r4, r7}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Rtc_Timestamp ret;

	ret.hour = tm.tm_hour;
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	73bb      	strb	r3, [r7, #14]
	ret.min = tm.tm_min;
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	737b      	strb	r3, [r7, #13]
	ret.sec = tm.tm_sec;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	733b      	strb	r3, [r7, #12]

	ret.mday = tm.tm_mday;
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	73fb      	strb	r3, [r7, #15]
	ret.mon = tm.tm_mon + 1;
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	3301      	adds	r3, #1
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	743b      	strb	r3, [r7, #16]
	ret.year = tm.tm_year;
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	827b      	strh	r3, [r7, #18]

	return ret;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	461c      	mov	r4, r3
 8006a20:	f107 030c 	add.w	r3, r7, #12
 8006a24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a26:	6020      	str	r0, [r4, #0]
 8006a28:	6061      	str	r1, [r4, #4]
 8006a2a:	60a2      	str	r2, [r4, #8]
}
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc90      	pop	{r4, r7}
 8006a34:	b004      	add	sp, #16
 8006a36:	4770      	bx	lr

08006a38 <dectobcd>:
    return (t.year - 1970) * 31536000 + (t.yday - 1 + (y / 4) - (y / 100) + (y / 400) - 89) * 86400 + t.hour * 3600 + t.min * 60 + t.sec;
}
#endif

uint8_t dectobcd(const uint8_t val)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	4a0c      	ldr	r2, [pc, #48]	; (8006a78 <dectobcd+0x40>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	08db      	lsrs	r3, r3, #3
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	b2d8      	uxtb	r0, r3
 8006a52:	79fa      	ldrb	r2, [r7, #7]
 8006a54:	4b08      	ldr	r3, [pc, #32]	; (8006a78 <dectobcd+0x40>)
 8006a56:	fba3 1302 	umull	r1, r3, r3, r2
 8006a5a:	08d9      	lsrs	r1, r3, #3
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	4403      	add	r3, r0
 8006a6a:	b2db      	uxtb	r3, r3
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	cccccccd 	.word	0xcccccccd

08006a7c <bcdtodec>:

uint8_t bcdtodec(const uint8_t val)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	0092      	lsls	r2, r2, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	b2db      	uxtb	r3, r3
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8006ab4:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006ab6:	4a19      	ldr	r2, [pc, #100]	; (8006b1c <MX_SPI1_Init+0x6c>)
 8006ab8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006aba:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006ac0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006ac2:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ace:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ad0:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006adc:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006ae6:	2228      	movs	r2, #40	; 0x28
 8006ae8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006aea:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006af0:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006afe:	220a      	movs	r2, #10
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006b02:	4805      	ldr	r0, [pc, #20]	; (8006b18 <MX_SPI1_Init+0x68>)
 8006b04:	f00a f9ae 	bl	8010e64 <HAL_SPI_Init>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8006b0e:	f7ff fe1d 	bl	800674c <Error_Handler>
  }

}
 8006b12:	bf00      	nop
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20004c1c 	.word	0x20004c1c
 8006b1c:	40013000 	.word	0x40013000

08006b20 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8006b24:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b26:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <MX_SPI3_Init+0x68>)
 8006b28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006b2a:	4b16      	ldr	r3, [pc, #88]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006b30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006b32:	4b14      	ldr	r3, [pc, #80]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b38:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b3e:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b44:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006b4a:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b50:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006b52:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b54:	2210      	movs	r2, #16
 8006b56:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b5e:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b64:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b6c:	220a      	movs	r2, #10
 8006b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006b70:	4804      	ldr	r0, [pc, #16]	; (8006b84 <MX_SPI3_Init+0x64>)
 8006b72:	f00a f977 	bl	8010e64 <HAL_SPI_Init>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8006b7c:	f7ff fde6 	bl	800674c <Error_Handler>
  }

}
 8006b80:	bf00      	nop
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20004bc4 	.word	0x20004bc4
 8006b88:	40003c00 	.word	0x40003c00

08006b8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08c      	sub	sp, #48	; 0x30
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b94:	f107 031c 	add.w	r3, r7, #28
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	609a      	str	r2, [r3, #8]
 8006ba0:	60da      	str	r2, [r3, #12]
 8006ba2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a32      	ldr	r2, [pc, #200]	; (8006c74 <HAL_SPI_MspInit+0xe8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d12c      	bne.n	8006c08 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	4b31      	ldr	r3, [pc, #196]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb6:	4a30      	ldr	r2, [pc, #192]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006bb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	4b2a      	ldr	r3, [pc, #168]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bda:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006be6:	23a0      	movs	r3, #160	; 0xa0
 8006be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bea:	2302      	movs	r3, #2
 8006bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006bf6:	2305      	movs	r3, #5
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bfa:	f107 031c 	add.w	r3, r7, #28
 8006bfe:	4619      	mov	r1, r3
 8006c00:	481e      	ldr	r0, [pc, #120]	; (8006c7c <HAL_SPI_MspInit+0xf0>)
 8006c02:	f008 fa2b 	bl	800f05c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006c06:	e031      	b.n	8006c6c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1c      	ldr	r2, [pc, #112]	; (8006c80 <HAL_SPI_MspInit+0xf4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d12c      	bne.n	8006c6c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	4b18      	ldr	r3, [pc, #96]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c20:	6413      	str	r3, [r2, #64]	; 0x40
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	4b11      	ldr	r3, [pc, #68]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	4a10      	ldr	r2, [pc, #64]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006c38:	f043 0304 	orr.w	r3, r3, #4
 8006c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c3e:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <HAL_SPI_MspInit+0xec>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8006c4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c50:	2302      	movs	r3, #2
 8006c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006c5c:	2306      	movs	r3, #6
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c60:	f107 031c 	add.w	r3, r7, #28
 8006c64:	4619      	mov	r1, r3
 8006c66:	4807      	ldr	r0, [pc, #28]	; (8006c84 <HAL_SPI_MspInit+0xf8>)
 8006c68:	f008 f9f8 	bl	800f05c <HAL_GPIO_Init>
}
 8006c6c:	bf00      	nop
 8006c6e:	3730      	adds	r7, #48	; 0x30
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40013000 	.word	0x40013000
 8006c78:	40023800 	.word	0x40023800
 8006c7c:	40020000 	.word	0x40020000
 8006c80:	40003c00 	.word	0x40003c00
 8006c84:	40020800 	.word	0x40020800

08006c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	607b      	str	r3, [r7, #4]
 8006c92:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <HAL_MspInit+0x54>)
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	4a11      	ldr	r2, [pc, #68]	; (8006cdc <HAL_MspInit+0x54>)
 8006c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006c9e:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <HAL_MspInit+0x54>)
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ca6:	607b      	str	r3, [r7, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006caa:	2300      	movs	r3, #0
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_MspInit+0x54>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <HAL_MspInit+0x54>)
 8006cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cba:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <HAL_MspInit+0x54>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	210f      	movs	r1, #15
 8006cca:	f06f 0001 	mvn.w	r0, #1
 8006cce:	f007 fc0f 	bl	800e4f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40023800 	.word	0x40023800

08006ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08c      	sub	sp, #48	; 0x30
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	2036      	movs	r0, #54	; 0x36
 8006cf6:	f007 fbfb 	bl	800e4f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8006cfa:	2036      	movs	r0, #54	; 0x36
 8006cfc:	f007 fc14 	bl	800e528 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <HAL_InitTick+0xa4>)
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <HAL_InitTick+0xa4>)
 8006d0a:	f043 0310 	orr.w	r3, r3, #16
 8006d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d10:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <HAL_InitTick+0xa4>)
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006d1c:	f107 0210 	add.w	r2, r7, #16
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	4611      	mov	r1, r2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f00a f86a 	bl	8010e00 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006d2c:	f00a f840 	bl	8010db0 <HAL_RCC_GetPCLK1Freq>
 8006d30:	4603      	mov	r3, r0
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <HAL_InitTick+0xa8>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	0c9b      	lsrs	r3, r3, #18
 8006d40:	3b01      	subs	r3, #1
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006d44:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <HAL_InitTick+0xac>)
 8006d46:	4a12      	ldr	r2, [pc, #72]	; (8006d90 <HAL_InitTick+0xb0>)
 8006d48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8006d4a:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <HAL_InitTick+0xac>)
 8006d4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006d50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006d52:	4a0e      	ldr	r2, [pc, #56]	; (8006d8c <HAL_InitTick+0xac>)
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <HAL_InitTick+0xac>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <HAL_InitTick+0xac>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006d64:	4809      	ldr	r0, [pc, #36]	; (8006d8c <HAL_InitTick+0xac>)
 8006d66:	f00a fdd1 	bl	801190c <HAL_TIM_Base_Init>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006d70:	4806      	ldr	r0, [pc, #24]	; (8006d8c <HAL_InitTick+0xac>)
 8006d72:	f00a fe1a 	bl	80119aa <HAL_TIM_Base_Start_IT>
 8006d76:	4603      	mov	r3, r0
 8006d78:	e000      	b.n	8006d7c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3730      	adds	r7, #48	; 0x30
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40023800 	.word	0x40023800
 8006d88:	431bde83 	.word	0x431bde83
 8006d8c:	20004c74 	.word	0x20004c74
 8006d90:	40001000 	.word	0x40001000

08006d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006da2:	b480      	push	{r7}
 8006da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006da6:	e7fe      	b.n	8006da6 <HardFault_Handler+0x4>

08006da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006dac:	e7fe      	b.n	8006dac <MemManage_Handler+0x4>

08006dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dae:	b480      	push	{r7}
 8006db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006db2:	e7fe      	b.n	8006db2 <BusFault_Handler+0x4>

08006db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006db8:	e7fe      	b.n	8006db8 <UsageFault_Handler+0x4>

08006dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006dbe:	bf00      	nop
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8006dcc:	4802      	ldr	r0, [pc, #8]	; (8006dd8 <DMA1_Stream5_IRQHandler+0x10>)
 8006dce:	f007 fce1 	bl	800e794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006dd2:	bf00      	nop
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20004cb4 	.word	0x20004cb4

08006ddc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006de0:	4802      	ldr	r0, [pc, #8]	; (8006dec <USART3_IRQHandler+0x10>)
 8006de2:	f00b ff5d 	bl	8012ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20004e14 	.word	0x20004e14

08006df0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006df4:	4802      	ldr	r0, [pc, #8]	; (8006e00 <TIM6_DAC_IRQHandler+0x10>)
 8006df6:	f00a ffcf 	bl	8011d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006dfa:	bf00      	nop
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20004c74 	.word	0x20004c74

08006e04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006e08:	4802      	ldr	r0, [pc, #8]	; (8006e14 <TIM7_IRQHandler+0x10>)
 8006e0a:	f00a ffc5 	bl	8011d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006e0e:	bf00      	nop
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20004dd4 	.word	0x20004dd4

08006e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  LuminositySensorCommit(&luminosity_sensor);
 8006e1c:	4803      	ldr	r0, [pc, #12]	; (8006e2c <DMA2_Stream0_IRQHandler+0x14>)
 8006e1e:	f7ff fbac 	bl	800657a <LuminositySensorCommit>

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006e22:	4803      	ldr	r0, [pc, #12]	; (8006e30 <DMA2_Stream0_IRQHandler+0x18>)
 8006e24:	f007 fcb6 	bl	800e794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006e28:	bf00      	nop
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20004bbc 	.word	0x20004bbc
 8006e30:	200048c8 	.word	0x200048c8
 8006e34:	00000000 	.word	0x00000000

08006e38 <JulianDay>:

//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
double JulianDay(int year, int month, int day, int h, int m, int s)
{
 8006e38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e3c:	b08e      	sub	sp, #56	; 0x38
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
 8006e46:	603b      	str	r3, [r7, #0]
    // The conversion formulas are from Meeus, chapter 7.
    int julian = FALSE;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34

    if (year < 1582 ||
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f240 622d 	movw	r2, #1581	; 0x62d
 8006e52:	4293      	cmp	r3, r2
 8006e54:	dd12      	ble.n	8006e7c <JulianDay+0x44>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f240 622e 	movw	r2, #1582	; 0x62e
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d102      	bne.n	8006e66 <JulianDay+0x2e>
            (year == 1582 && month <= 10) ||
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b0a      	cmp	r3, #10
 8006e64:	dd0a      	ble.n	8006e7c <JulianDay+0x44>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f240 622e 	movw	r2, #1582	; 0x62e
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d107      	bne.n	8006e80 <JulianDay+0x48>
            (year == 1582 && month == 10 && day < 15))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b0a      	cmp	r3, #10
 8006e74:	d104      	bne.n	8006e80 <JulianDay+0x48>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b0e      	cmp	r3, #14
 8006e7a:	dc01      	bgt.n	8006e80 <JulianDay+0x48>
        julian = TRUE;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34

    int D = day;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
    int M = month;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30
    int Y = year;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (M < 3) {
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	dc05      	bgt.n	8006e9e <JulianDay+0x66>
        Y--;
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	3b01      	subs	r3, #1
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        M += 12;
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    int A = Y / 100;
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	4a61      	ldr	r2, [pc, #388]	; (8007028 <JulianDay+0x1f0>)
 8006ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8006ea6:	1152      	asrs	r2, r2, #5
 8006ea8:	17db      	asrs	r3, r3, #31
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
    int B = (julian ? 0 : 2 - A + A / 4);
 8006eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d109      	bne.n	8006ec8 <JulianDay+0x90>
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	f1c3 0202 	rsb	r2, r3, #2
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da00      	bge.n	8006ec2 <JulianDay+0x8a>
 8006ec0:	3303      	adds	r3, #3
 8006ec2:	109b      	asrs	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	e000      	b.n	8006eca <JulianDay+0x92>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	623b      	str	r3, [r7, #32]

    double dayFraction = (h + (m + (s / 60.0)) / 60.0) / 24.0;
 8006ecc:	6838      	ldr	r0, [r7, #0]
 8006ece:	f7f9 fb33 	bl	8000538 <__aeabi_i2d>
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ed8:	f7f9 fb2e 	bl	8000538 <__aeabi_i2d>
 8006edc:	4680      	mov	r8, r0
 8006ede:	4689      	mov	r9, r1
 8006ee0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006ee2:	f7f9 fb29 	bl	8000538 <__aeabi_i2d>
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	4b50      	ldr	r3, [pc, #320]	; (800702c <JulianDay+0x1f4>)
 8006eec:	f7f9 fcb8 	bl	8000860 <__aeabi_ddiv>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 f9d2 	bl	80002a0 <__adddf3>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4610      	mov	r0, r2
 8006f02:	4619      	mov	r1, r3
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	4b48      	ldr	r3, [pc, #288]	; (800702c <JulianDay+0x1f4>)
 8006f0a:	f7f9 fca9 	bl	8000860 <__aeabi_ddiv>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 f9c3 	bl	80002a0 <__adddf3>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	4618      	mov	r0, r3
 8006f20:	4621      	mov	r1, r4
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	4b42      	ldr	r3, [pc, #264]	; (8007030 <JulianDay+0x1f8>)
 8006f28:	f7f9 fc9a 	bl	8000860 <__aeabi_ddiv>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	e9c7 3406 	strd	r3, r4, [r7, #24]
    double jd = dayFraction +
            (int) (365.25 * (Y + 4716)) +
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 8006f3a:	330c      	adds	r3, #12
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7f9 fafb 	bl	8000538 <__aeabi_i2d>
 8006f42:	a333      	add	r3, pc, #204	; (adr r3, 8007010 <JulianDay+0x1d8>)
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f7f9 fb60 	bl	800060c <__aeabi_dmul>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4618      	mov	r0, r3
 8006f52:	4621      	mov	r1, r4
 8006f54:	f7f9 fe0a 	bl	8000b6c <__aeabi_d2iz>
 8006f58:	4603      	mov	r3, r0
    double jd = dayFraction +
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7f9 faec 	bl	8000538 <__aeabi_i2d>
 8006f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f64:	f7f9 f99c 	bl	80002a0 <__adddf3>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	4625      	mov	r5, r4
 8006f6e:	461c      	mov	r4, r3
            (int) (30.6001 * (M + 1)) + D + B - 1524.5;
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	3301      	adds	r3, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 fadf 	bl	8000538 <__aeabi_i2d>
 8006f7a:	a327      	add	r3, pc, #156	; (adr r3, 8007018 <JulianDay+0x1e0>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 fb44 	bl	800060c <__aeabi_dmul>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f7f9 fdee 	bl	8000b6c <__aeabi_d2iz>
 8006f90:	4603      	mov	r3, r0
            (int) (365.25 * (Y + 4716)) +
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7f9 fad0 	bl	8000538 <__aeabi_i2d>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7f9 f97e 	bl	80002a0 <__adddf3>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	4625      	mov	r5, r4
 8006faa:	461c      	mov	r4, r3
            (int) (30.6001 * (M + 1)) + D + B - 1524.5;
 8006fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fae:	f7f9 fac3 	bl	8000538 <__aeabi_i2d>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 f971 	bl	80002a0 <__adddf3>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	4625      	mov	r5, r4
 8006fc4:	461c      	mov	r4, r3
 8006fc6:	6a38      	ldr	r0, [r7, #32]
 8006fc8:	f7f9 fab6 	bl	8000538 <__aeabi_i2d>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	f7f9 f964 	bl	80002a0 <__adddf3>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	4621      	mov	r1, r4
    double jd = dayFraction +
 8006fe0:	a30f      	add	r3, pc, #60	; (adr r3, 8007020 <JulianDay+0x1e8>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f7f9 f959 	bl	800029c <__aeabi_dsub>
 8006fea:	4603      	mov	r3, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return jd;
 8006ff2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006ff6:	ec44 3b17 	vmov	d7, r3, r4
}
 8006ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8006ffe:	eef0 0a67 	vmov.f32	s1, s15
 8007002:	3738      	adds	r7, #56	; 0x38
 8007004:	46bd      	mov	sp, r7
 8007006:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800700a:	bf00      	nop
 800700c:	f3af 8000 	nop.w
 8007010:	00000000 	.word	0x00000000
 8007014:	4076d400 	.word	0x4076d400
 8007018:	27525461 	.word	0x27525461
 800701c:	403e99a0 	.word	0x403e99a0
 8007020:	00000000 	.word	0x00000000
 8007024:	4097d200 	.word	0x4097d200
 8007028:	51eb851f 	.word	0x51eb851f
 800702c:	404e0000 	.word	0x404e0000
 8007030:	40380000 	.word	0x40380000
 8007034:	00000000 	.word	0x00000000

08007038 <TtMinusUt>:

double TtMinusUt(int year, int month, int day) 
{
 8007038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800703c:	b08e      	sub	sp, #56	; 0x38
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
    double tt_minus_ut = 0.0;
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	f04f 0400 	mov.w	r4, #0
 800704e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if (year > -600 && year < 2200) {
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8007058:	f340 81d5 	ble.w	8007406 <TtMinusUt+0x3ce>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f640 0297 	movw	r2, #2199	; 0x897
 8007062:	4293      	cmp	r3, r2
 8007064:	f300 81cf 	bgt.w	8007406 <TtMinusUt+0x3ce>
        double x = year + (month - 1 + day / 30.0) / 12.0;
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f7f9 fa65 	bl	8000538 <__aeabi_i2d>
 800706e:	4604      	mov	r4, r0
 8007070:	460d      	mov	r5, r1
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	3b01      	subs	r3, #1
 8007076:	4618      	mov	r0, r3
 8007078:	f7f9 fa5e 	bl	8000538 <__aeabi_i2d>
 800707c:	4680      	mov	r8, r0
 800707e:	4689      	mov	r9, r1
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7f9 fa59 	bl	8000538 <__aeabi_i2d>
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	4b87      	ldr	r3, [pc, #540]	; (80072a8 <TtMinusUt+0x270>)
 800708c:	f7f9 fbe8 	bl	8000860 <__aeabi_ddiv>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4640      	mov	r0, r8
 8007096:	4649      	mov	r1, r9
 8007098:	f7f9 f902 	bl	80002a0 <__adddf3>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4610      	mov	r0, r2
 80070a2:	4619      	mov	r1, r3
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	4b80      	ldr	r3, [pc, #512]	; (80072ac <TtMinusUt+0x274>)
 80070aa:	f7f9 fbd9 	bl	8000860 <__aeabi_ddiv>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	f7f9 f8f3 	bl	80002a0 <__adddf3>
 80070ba:	4603      	mov	r3, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        double x2 = x * x, x3 = x2 * x, x4 = x3 * x;
 80070c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80070ca:	f7f9 fa9f 	bl	800060c <__aeabi_dmul>
 80070ce:	4603      	mov	r3, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80070d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80070de:	f7f9 fa95 	bl	800060c <__aeabi_dmul>
 80070e2:	4603      	mov	r3, r0
 80070e4:	460c      	mov	r4, r1
 80070e6:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80070ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070f2:	f7f9 fa8b 	bl	800060c <__aeabi_dmul>
 80070f6:	4603      	mov	r3, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	e9c7 3404 	strd	r3, r4, [r7, #16]
        if (year < 1600) {
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007104:	f280 80d4 	bge.w	80072b0 <TtMinusUt+0x278>
            tt_minus_ut =
                    10535.328003326353 -
                    9.995238627481024 * x +
 8007108:	a355      	add	r3, pc, #340	; (adr r3, 8007260 <TtMinusUt+0x228>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007112:	f7f9 fa7b 	bl	800060c <__aeabi_dmul>
 8007116:	4603      	mov	r3, r0
 8007118:	460c      	mov	r4, r1
                    10535.328003326353 -
 800711a:	461a      	mov	r2, r3
 800711c:	4623      	mov	r3, r4
 800711e:	a152      	add	r1, pc, #328	; (adr r1, 8007268 <TtMinusUt+0x230>)
 8007120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007124:	f7f9 f8ba 	bl	800029c <__aeabi_dsub>
 8007128:	4603      	mov	r3, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4625      	mov	r5, r4
 800712e:	461c      	mov	r4, r3
                    0.003067307630020489 * x2 -
 8007130:	a34f      	add	r3, pc, #316	; (adr r3, 8007270 <TtMinusUt+0x238>)
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800713a:	f7f9 fa67 	bl	800060c <__aeabi_dmul>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
                    9.995238627481024 * x +
 8007142:	4620      	mov	r0, r4
 8007144:	4629      	mov	r1, r5
 8007146:	f7f9 f8ab 	bl	80002a0 <__adddf3>
 800714a:	4603      	mov	r3, r0
 800714c:	460c      	mov	r4, r1
 800714e:	4625      	mov	r5, r4
 8007150:	461c      	mov	r4, r3
                    7.76340698361363E-6 * x3 +
 8007152:	a349      	add	r3, pc, #292	; (adr r3, 8007278 <TtMinusUt+0x240>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800715c:	f7f9 fa56 	bl	800060c <__aeabi_dmul>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
                    0.003067307630020489 * x2 -
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f9 f898 	bl	800029c <__aeabi_dsub>
 800716c:	4603      	mov	r3, r0
 800716e:	460c      	mov	r4, r1
 8007170:	4625      	mov	r5, r4
 8007172:	461c      	mov	r4, r3
                    3.1331045394223196E-9 * x4 +
 8007174:	a342      	add	r3, pc, #264	; (adr r3, 8007280 <TtMinusUt+0x248>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800717e:	f7f9 fa45 	bl	800060c <__aeabi_dmul>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
                    7.76340698361363E-6 * x3 +
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7f9 f889 	bl	80002a0 <__adddf3>
 800718e:	4603      	mov	r3, r0
 8007190:	460c      	mov	r4, r1
 8007192:	4625      	mov	r5, r4
 8007194:	461c      	mov	r4, r3
                    8.225530854405553E-12 * x2 * x3 -
 8007196:	a33c      	add	r3, pc, #240	; (adr r3, 8007288 <TtMinusUt+0x250>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80071a0:	f7f9 fa34 	bl	800060c <__aeabi_dmul>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	4610      	mov	r0, r2
 80071aa:	4619      	mov	r1, r3
 80071ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071b0:	f7f9 fa2c 	bl	800060c <__aeabi_dmul>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
                    3.1331045394223196E-9 * x4 +
 80071b8:	4620      	mov	r0, r4
 80071ba:	4629      	mov	r1, r5
 80071bc:	f7f9 f870 	bl	80002a0 <__adddf3>
 80071c0:	4603      	mov	r3, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	4625      	mov	r5, r4
 80071c6:	461c      	mov	r4, r3
                    7.486164715632051E-15 * x4 * x2 +
 80071c8:	a331      	add	r3, pc, #196	; (adr r3, 8007290 <TtMinusUt+0x258>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071d2:	f7f9 fa1b 	bl	800060c <__aeabi_dmul>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4610      	mov	r0, r2
 80071dc:	4619      	mov	r1, r3
 80071de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071e2:	f7f9 fa13 	bl	800060c <__aeabi_dmul>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
                    8.225530854405553E-12 * x2 * x3 -
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	f7f9 f855 	bl	800029c <__aeabi_dsub>
 80071f2:	4603      	mov	r3, r0
 80071f4:	460c      	mov	r4, r1
 80071f6:	4625      	mov	r5, r4
 80071f8:	461c      	mov	r4, r3
                    1.9362461549678834E-18 * x4 * x3 -
 80071fa:	a327      	add	r3, pc, #156	; (adr r3, 8007298 <TtMinusUt+0x260>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007204:	f7f9 fa02 	bl	800060c <__aeabi_dmul>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4610      	mov	r0, r2
 800720e:	4619      	mov	r1, r3
 8007210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007214:	f7f9 f9fa 	bl	800060c <__aeabi_dmul>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
                    7.486164715632051E-15 * x4 * x2 +
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 f83e 	bl	80002a0 <__adddf3>
 8007224:	4603      	mov	r3, r0
 8007226:	460c      	mov	r4, r1
 8007228:	4625      	mov	r5, r4
 800722a:	461c      	mov	r4, r3
                    8.489224937827653E-23 * x4 * x4;
 800722c:	a31c      	add	r3, pc, #112	; (adr r3, 80072a0 <TtMinusUt+0x268>)
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007236:	f7f9 f9e9 	bl	800060c <__aeabi_dmul>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007246:	f7f9 f9e1 	bl	800060c <__aeabi_dmul>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
            tt_minus_ut =
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	f7f9 f823 	bl	800029c <__aeabi_dsub>
 8007256:	4603      	mov	r3, r0
 8007258:	460c      	mov	r4, r1
 800725a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800725e:	e0d2      	b.n	8007406 <TtMinusUt+0x3ce>
 8007260:	ead97e6d 	.word	0xead97e6d
 8007264:	4023fd8f 	.word	0x4023fd8f
 8007268:	fc0353d5 	.word	0xfc0353d5
 800726c:	40c493a9 	.word	0x40c493a9
 8007270:	3ea58de8 	.word	0x3ea58de8
 8007274:	3f69209c 	.word	0x3f69209c
 8007278:	87fd0e42 	.word	0x87fd0e42
 800727c:	3ee047f2 	.word	0x3ee047f2
 8007280:	0df5cd66 	.word	0x0df5cd66
 8007284:	3e2ae9c5 	.word	0x3e2ae9c5
 8007288:	ed154f4f 	.word	0xed154f4f
 800728c:	3da2168f 	.word	0x3da2168f
 8007290:	eab4ecbd 	.word	0xeab4ecbd
 8007294:	3d00db7a 	.word	0x3d00db7a
 8007298:	fc24b51c 	.word	0xfc24b51c
 800729c:	3c41dbd4 	.word	0x3c41dbd4
 80072a0:	3b8431f2 	.word	0x3b8431f2
 80072a4:	3b59a838 	.word	0x3b59a838
 80072a8:	403e0000 	.word	0x403e0000
 80072ac:	40280000 	.word	0x40280000
        } else {
            tt_minus_ut =
                    -1027175.3477559977 +
                    2523.256625418965 * x -
 80072b0:	a35b      	add	r3, pc, #364	; (adr r3, 8007420 <TtMinusUt+0x3e8>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072ba:	f7f9 f9a7 	bl	800060c <__aeabi_dmul>
 80072be:	4603      	mov	r3, r0
 80072c0:	460c      	mov	r4, r1
 80072c2:	4618      	mov	r0, r3
 80072c4:	4621      	mov	r1, r4
                    -1027175.3477559977 +
 80072c6:	a358      	add	r3, pc, #352	; (adr r3, 8007428 <TtMinusUt+0x3f0>)
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f7f8 ffe6 	bl	800029c <__aeabi_dsub>
 80072d0:	4603      	mov	r3, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	4625      	mov	r5, r4
 80072d6:	461c      	mov	r4, r3
                    1.885686849058459 * x2 +
 80072d8:	a355      	add	r3, pc, #340	; (adr r3, 8007430 <TtMinusUt+0x3f8>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80072e2:	f7f9 f993 	bl	800060c <__aeabi_dmul>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
                    2523.256625418965 * x -
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f8 ffd5 	bl	800029c <__aeabi_dsub>
 80072f2:	4603      	mov	r3, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	4625      	mov	r5, r4
 80072f8:	461c      	mov	r4, r3
                    5.869246227888417E-5 * x3 +
 80072fa:	a34f      	add	r3, pc, #316	; (adr r3, 8007438 <TtMinusUt+0x400>)
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007304:	f7f9 f982 	bl	800060c <__aeabi_dmul>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
                    1.885686849058459 * x2 +
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f8 ffc6 	bl	80002a0 <__adddf3>
 8007314:	4603      	mov	r3, r0
 8007316:	460c      	mov	r4, r1
 8007318:	4625      	mov	r5, r4
 800731a:	461c      	mov	r4, r3
                    3.3379295816475025E-7 * x4 +
 800731c:	a348      	add	r3, pc, #288	; (adr r3, 8007440 <TtMinusUt+0x408>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007326:	f7f9 f971 	bl	800060c <__aeabi_dmul>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
                    5.869246227888417E-5 * x3 +
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f8 ffb5 	bl	80002a0 <__adddf3>
 8007336:	4603      	mov	r3, r0
 8007338:	460c      	mov	r4, r1
 800733a:	4625      	mov	r5, r4
 800733c:	461c      	mov	r4, r3
                    1.7758961671447929E-10 * x2 * x3 -
 800733e:	a342      	add	r3, pc, #264	; (adr r3, 8007448 <TtMinusUt+0x410>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007348:	f7f9 f960 	bl	800060c <__aeabi_dmul>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4610      	mov	r0, r2
 8007352:	4619      	mov	r1, r3
 8007354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007358:	f7f9 f958 	bl	800060c <__aeabi_dmul>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
                    3.3379295816475025E-7 * x4 +
 8007360:	4620      	mov	r0, r4
 8007362:	4629      	mov	r1, r5
 8007364:	f7f8 ff9c 	bl	80002a0 <__adddf3>
 8007368:	4603      	mov	r3, r0
 800736a:	460c      	mov	r4, r1
 800736c:	4625      	mov	r5, r4
 800736e:	461c      	mov	r4, r3
                    2.7889902806153024E-13 * x2 * x4 +
 8007370:	a337      	add	r3, pc, #220	; (adr r3, 8007450 <TtMinusUt+0x418>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800737a:	f7f9 f947 	bl	800060c <__aeabi_dmul>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800738a:	f7f9 f93f 	bl	800060c <__aeabi_dmul>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
                    1.7758961671447929E-10 * x2 * x3 -
 8007392:	4620      	mov	r0, r4
 8007394:	4629      	mov	r1, r5
 8007396:	f7f8 ff81 	bl	800029c <__aeabi_dsub>
 800739a:	4603      	mov	r3, r0
 800739c:	460c      	mov	r4, r1
 800739e:	4625      	mov	r5, r4
 80073a0:	461c      	mov	r4, r3
                    1.0224295822336825E-16 * x3 * x4 -
 80073a2:	a32d      	add	r3, pc, #180	; (adr r3, 8007458 <TtMinusUt+0x420>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073ac:	f7f9 f92e 	bl	800060c <__aeabi_dmul>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4610      	mov	r0, r2
 80073b6:	4619      	mov	r1, r3
 80073b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80073bc:	f7f9 f926 	bl	800060c <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
                    2.7889902806153024E-13 * x2 * x4 +
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f7f8 ff6a 	bl	80002a0 <__adddf3>
 80073cc:	4603      	mov	r3, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	4625      	mov	r5, r4
 80073d2:	461c      	mov	r4, r3
                    1.2528102370680435E-20 * x4 * x4;
 80073d4:	a322      	add	r3, pc, #136	; (adr r3, 8007460 <TtMinusUt+0x428>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073de:	f7f9 f915 	bl	800060c <__aeabi_dmul>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4610      	mov	r0, r2
 80073e8:	4619      	mov	r1, r3
 80073ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80073ee:	f7f9 f90d 	bl	800060c <__aeabi_dmul>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
            tt_minus_ut =
 80073f6:	4620      	mov	r0, r4
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7f8 ff4f 	bl	800029c <__aeabi_dsub>
 80073fe:	4603      	mov	r3, r0
 8007400:	460c      	mov	r4, r1
 8007402:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        }
    }

    return tt_minus_ut;
 8007406:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800740a:	ec44 3b17 	vmov	d7, r3, r4
}
 800740e:	eeb0 0a47 	vmov.f32	s0, s14
 8007412:	eef0 0a67 	vmov.f32	s1, s15
 8007416:	3738      	adds	r7, #56	; 0x38
 8007418:	46bd      	mov	sp, r7
 800741a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800741e:	bf00      	nop
 8007420:	64682b8e 	.word	0x64682b8e
 8007424:	40a3b683 	.word	0x40a3b683
 8007428:	b20d12fa 	.word	0xb20d12fa
 800742c:	412f58ce 	.word	0x412f58ce
 8007430:	f9334101 	.word	0xf9334101
 8007434:	3ffe2bc5 	.word	0x3ffe2bc5
 8007438:	a5e851e0 	.word	0xa5e851e0
 800743c:	3f0ec591 	.word	0x3f0ec591
 8007440:	f4809e59 	.word	0xf4809e59
 8007444:	3e966684 	.word	0x3e966684
 8007448:	1035c3f7 	.word	0x1035c3f7
 800744c:	3de86861 	.word	0x3de86861
 8007450:	bf8e4092 	.word	0xbf8e4092
 8007454:	3d53a032 	.word	0x3d53a032
 8007458:	e047b0a3 	.word	0xe047b0a3
 800745c:	3c9d7832 	.word	0x3c9d7832
 8007460:	f14f4f60 	.word	0xf14f4f60
 8007464:	3bcd94c5 	.word	0x3bcd94c5

08007468 <SetUTDate>:

void SetUTDate(snm_Calculator *calc, double jd) 
{
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	ed87 0b00 	vstr	d0, [r7]
    calc->aux.jd_ut = jd;
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	e9d7 3400 	ldrd	r3, r4, [r7]
 800747a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
    calc->aux.t = (jd + calc->aux.tt_minus_ut / SECONDS_PER_DAY  - J2000) /
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 8007484:	a416      	add	r4, pc, #88	; (adr r4, 80074e0 <SetUTDate+0x78>)
 8007486:	e9d4 3400 	ldrd	r3, r4, [r4]
 800748a:	461a      	mov	r2, r3
 800748c:	4623      	mov	r3, r4
 800748e:	f7f9 f9e7 	bl	8000860 <__aeabi_ddiv>
 8007492:	4603      	mov	r3, r0
 8007494:	460c      	mov	r4, r1
 8007496:	4618      	mov	r0, r3
 8007498:	4621      	mov	r1, r4
 800749a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800749e:	f7f8 feff 	bl	80002a0 <__adddf3>
 80074a2:	4603      	mov	r3, r0
 80074a4:	460c      	mov	r4, r1
 80074a6:	4618      	mov	r0, r3
 80074a8:	4621      	mov	r1, r4
 80074aa:	a40f      	add	r4, pc, #60	; (adr r4, 80074e8 <SetUTDate+0x80>)
 80074ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80074b0:	461a      	mov	r2, r3
 80074b2:	4623      	mov	r3, r4
 80074b4:	f7f8 fef2 	bl	800029c <__aeabi_dsub>
 80074b8:	4603      	mov	r3, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4618      	mov	r0, r3
 80074be:	4621      	mov	r1, r4
 80074c0:	a40b      	add	r4, pc, #44	; (adr r4, 80074f0 <SetUTDate+0x88>)
 80074c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80074c6:	461a      	mov	r2, r3
 80074c8:	4623      	mov	r3, r4
 80074ca:	f7f9 f9c9 	bl	8000860 <__aeabi_ddiv>
 80074ce:	4603      	mov	r3, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
            JULIAN_DAYS_PER_CENTURY;
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd90      	pop	{r4, r7, pc}
 80074e0:	00000000 	.word	0x00000000
 80074e4:	40f51800 	.word	0x40f51800
 80074e8:	80000000 	.word	0x80000000
 80074ec:	4142b42c 	.word	0x4142b42c
 80074f0:	00000000 	.word	0x00000000
 80074f4:	40e1d5a0 	.word	0x40e1d5a0

080074f8 <SetTimes>:

void SetTimes(snm_Calculator *calc)
{
 80074f8:	b5b0      	push	{r4, r5, r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
    double jd = JulianDay(calc->year, 
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6898      	ldr	r0, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6859      	ldr	r1, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681c      	ldr	r4, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68dd      	ldr	r5, [r3, #12]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6952      	ldr	r2, [r2, #20]
 8007518:	9201      	str	r2, [sp, #4]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	462b      	mov	r3, r5
 800751e:	4622      	mov	r2, r4
 8007520:	f7ff fc8a 	bl	8006e38 <JulianDay>
 8007524:	ed87 0b02 	vstr	d0, [r7, #8]
                          calc->day,
                          calc->hour,
                          calc->minute,
                          calc->second);

    if (jd < 2299160.0 && jd >= 2299150.0) {
 8007528:	a31d      	add	r3, pc, #116	; (adr r3, 80075a0 <SetTimes+0xa8>)
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007532:	f7f9 fadd 	bl	8000af0 <__aeabi_dcmplt>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d012      	beq.n	8007562 <SetTimes+0x6a>
 800753c:	a31a      	add	r3, pc, #104	; (adr r3, 80075a8 <SetTimes+0xb0>)
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007546:	f7f9 fae7 	bl	8000b18 <__aeabi_dcmpge>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <SetTimes+0x6a>
        fprintf(stderr, 
 8007550:	4b11      	ldr	r3, [pc, #68]	; (8007598 <SetTimes+0xa0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68d8      	ldr	r0, [r3, #12]
 8007556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800755a:	4910      	ldr	r1, [pc, #64]	; (800759c <SetTimes+0xa4>)
 800755c:	f00d fe2e 	bl	80151bc <fiprintf>
                "Invalid julian day %f. "
                "This date does not exist.\n", 
                jd);
        return;
 8007560:	e014      	b.n	800758c <SetTimes+0x94>
    }

    calc->aux.tt_minus_ut = TtMinusUt(calc->year, 
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6898      	ldr	r0, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	f7ff fd62 	bl	8007038 <TtMinusUt>
 8007574:	eeb0 7a40 	vmov.f32	s14, s0
 8007578:	eef0 7a60 	vmov.f32	s15, s1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
                                      calc->month, 
                                      calc->day);
    SetUTDate(calc, jd);
 8007582:	ed97 0b02 	vldr	d0, [r7, #8]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff ff6e 	bl	8007468 <SetUTDate>
}
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bdb0      	pop	{r4, r5, r7, pc}
 8007592:	bf00      	nop
 8007594:	f3af 8000 	nop.w
 8007598:	20000154 	.word	0x20000154
 800759c:	0801c238 	.word	0x0801c238
 80075a0:	00000000 	.word	0x00000000
 80075a4:	41418a8c 	.word	0x41418a8c
 80075a8:	00000000 	.word	0x00000000
 80075ac:	41418a87 	.word	0x41418a87

080075b0 <NormalizeRadians>:

double NormalizeRadians(double r) {
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	ed87 0b00 	vstr	d0, [r7]
    if (r < 0.0 && r >= -TWO_PI)
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075c6:	f7f9 fa93 	bl	8000af0 <__aeabi_dcmplt>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d013      	beq.n	80075f8 <NormalizeRadians+0x48>
 80075d0:	a347      	add	r3, pc, #284	; (adr r3, 80076f0 <NormalizeRadians+0x140>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075da:	f7f9 fa9d 	bl	8000b18 <__aeabi_dcmpge>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d009      	beq.n	80075f8 <NormalizeRadians+0x48>
        return r + TWO_PI;
 80075e4:	a344      	add	r3, pc, #272	; (adr r3, 80076f8 <NormalizeRadians+0x148>)
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ee:	f7f8 fe57 	bl	80002a0 <__adddf3>
 80075f2:	4603      	mov	r3, r0
 80075f4:	460c      	mov	r4, r1
 80075f6:	e071      	b.n	80076dc <NormalizeRadians+0x12c>

    if (r >= TWO_PI && r < FOUR_PI)
 80075f8:	a33f      	add	r3, pc, #252	; (adr r3, 80076f8 <NormalizeRadians+0x148>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007602:	f7f9 fa89 	bl	8000b18 <__aeabi_dcmpge>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <NormalizeRadians+0x84>
 800760c:	a33c      	add	r3, pc, #240	; (adr r3, 8007700 <NormalizeRadians+0x150>)
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007616:	f7f9 fa6b 	bl	8000af0 <__aeabi_dcmplt>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d009      	beq.n	8007634 <NormalizeRadians+0x84>
        return r - TWO_PI;
 8007620:	a335      	add	r3, pc, #212	; (adr r3, 80076f8 <NormalizeRadians+0x148>)
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	e9d7 0100 	ldrd	r0, r1, [r7]
 800762a:	f7f8 fe37 	bl	800029c <__aeabi_dsub>
 800762e:	4603      	mov	r3, r0
 8007630:	460c      	mov	r4, r1
 8007632:	e053      	b.n	80076dc <NormalizeRadians+0x12c>

    if (r >= 0.0 && r < TWO_PI)
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007640:	f7f9 fa6a 	bl	8000b18 <__aeabi_dcmpge>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00c      	beq.n	8007664 <NormalizeRadians+0xb4>
 800764a:	a32b      	add	r3, pc, #172	; (adr r3, 80076f8 <NormalizeRadians+0x148>)
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007654:	f7f9 fa4c 	bl	8000af0 <__aeabi_dcmplt>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <NormalizeRadians+0xb4>
        return r;
 800765e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007662:	e03b      	b.n	80076dc <NormalizeRadians+0x12c>

    r -= TWO_PI * floor(r * TWO_PI_INVERSE);
 8007664:	a328      	add	r3, pc, #160	; (adr r3, 8007708 <NormalizeRadians+0x158>)
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800766e:	f7f8 ffcd 	bl	800060c <__aeabi_dmul>
 8007672:	4603      	mov	r3, r0
 8007674:	460c      	mov	r4, r1
 8007676:	ec44 3b17 	vmov	d7, r3, r4
 800767a:	eeb0 0a47 	vmov.f32	s0, s14
 800767e:	eef0 0a67 	vmov.f32	s1, s15
 8007682:	f011 fd29 	bl	80190d8 <floor>
 8007686:	ec51 0b10 	vmov	r0, r1, d0
 800768a:	a31b      	add	r3, pc, #108	; (adr r3, 80076f8 <NormalizeRadians+0x148>)
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f7f8 ffbc 	bl	800060c <__aeabi_dmul>
 8007694:	4603      	mov	r3, r0
 8007696:	460c      	mov	r4, r1
 8007698:	461a      	mov	r2, r3
 800769a:	4623      	mov	r3, r4
 800769c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076a0:	f7f8 fdfc 	bl	800029c <__aeabi_dsub>
 80076a4:	4603      	mov	r3, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	e9c7 3400 	strd	r3, r4, [r7]

    if (r < 0.0)
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076b8:	f7f9 fa1a 	bl	8000af0 <__aeabi_dcmplt>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <NormalizeRadians+0x128>
        r += TWO_PI;
 80076c2:	a30d      	add	r3, pc, #52	; (adr r3, 80076f8 <NormalizeRadians+0x148>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076cc:	f7f8 fde8 	bl	80002a0 <__adddf3>
 80076d0:	4603      	mov	r3, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	e9c7 3400 	strd	r3, r4, [r7]

    return r;
 80076d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80076dc:	ec44 3b17 	vmov	d7, r3, r4
}
 80076e0:	eeb0 0a47 	vmov.f32	s0, s14
 80076e4:	eef0 0a67 	vmov.f32	s1, s15
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd90      	pop	{r4, r7, pc}
 80076ee:	bf00      	nop
 80076f0:	54442d18 	.word	0x54442d18
 80076f4:	c01921fb 	.word	0xc01921fb
 80076f8:	54442d18 	.word	0x54442d18
 80076fc:	401921fb 	.word	0x401921fb
 8007700:	54442d18 	.word	0x54442d18
 8007704:	402921fb 	.word	0x402921fb
 8007708:	6dc9c883 	.word	0x6dc9c883
 800770c:	3fc45f30 	.word	0x3fc45f30

08007710 <GetSun>:

void GetSun(snm_Calculator *calc, double *params) 
{
 8007710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
    STATIC_OPT double lon, anom, c, M1, M2, d, slatitude, ecc, v, sdistance;

    // SUN PARAMETERS (Formulae from "Calendrical Calculations")
    lon = (280.46645 +
                  36000.76983 * calc->aux.t +
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007720:	a3e8      	add	r3, pc, #928	; (adr r3, 8007ac4 <GetSun+0x3b4>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f7f8 ff71 	bl	800060c <__aeabi_dmul>
 800772a:	4603      	mov	r3, r0
 800772c:	460c      	mov	r4, r1
 800772e:	4618      	mov	r0, r3
 8007730:	4621      	mov	r1, r4
    lon = (280.46645 +
 8007732:	a3e6      	add	r3, pc, #920	; (adr r3, 8007acc <GetSun+0x3bc>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f7f8 fdb2 	bl	80002a0 <__adddf3>
 800773c:	4603      	mov	r3, r0
 800773e:	460c      	mov	r4, r1
 8007740:	461d      	mov	r5, r3
 8007742:	4626      	mov	r6, r4
                  .0003032 * calc->aux.t * calc->aux.t);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800774a:	a3e2      	add	r3, pc, #904	; (adr r3, 8007ad4 <GetSun+0x3c4>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f7f8 ff5c 	bl	800060c <__aeabi_dmul>
 8007754:	4603      	mov	r3, r0
 8007756:	460c      	mov	r4, r1
 8007758:	4618      	mov	r0, r3
 800775a:	4621      	mov	r1, r4
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007762:	461a      	mov	r2, r3
 8007764:	4623      	mov	r3, r4
 8007766:	f7f8 ff51 	bl	800060c <__aeabi_dmul>
 800776a:	4603      	mov	r3, r0
 800776c:	460c      	mov	r4, r1
                  36000.76983 * calc->aux.t +
 800776e:	461a      	mov	r2, r3
 8007770:	4623      	mov	r3, r4
 8007772:	4628      	mov	r0, r5
 8007774:	4631      	mov	r1, r6
 8007776:	f7f8 fd93 	bl	80002a0 <__adddf3>
 800777a:	4603      	mov	r3, r0
 800777c:	460c      	mov	r4, r1
    lon = (280.46645 +
 800777e:	4acc      	ldr	r2, [pc, #816]	; (8007ab0 <GetSun+0x3a0>)
 8007780:	e9c2 3400 	strd	r3, r4, [r2]
    anom = (357.5291 +
                   35999.0503 * calc->aux.t -
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800778a:	a3ad      	add	r3, pc, #692	; (adr r3, 8007a40 <GetSun+0x330>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f7f8 ff3c 	bl	800060c <__aeabi_dmul>
 8007794:	4603      	mov	r3, r0
 8007796:	460c      	mov	r4, r1
 8007798:	4618      	mov	r0, r3
 800779a:	4621      	mov	r1, r4
    anom = (357.5291 +
 800779c:	a3aa      	add	r3, pc, #680	; (adr r3, 8007a48 <GetSun+0x338>)
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	f7f8 fd7d 	bl	80002a0 <__adddf3>
 80077a6:	4603      	mov	r3, r0
 80077a8:	460c      	mov	r4, r1
 80077aa:	461d      	mov	r5, r3
 80077ac:	4626      	mov	r6, r4
                   .0001559 * calc->aux.t * calc->aux.t -
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80077b4:	a3a6      	add	r3, pc, #664	; (adr r3, 8007a50 <GetSun+0x340>)
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	f7f8 ff27 	bl	800060c <__aeabi_dmul>
 80077be:	4603      	mov	r3, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	4618      	mov	r0, r3
 80077c4:	4621      	mov	r1, r4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80077cc:	461a      	mov	r2, r3
 80077ce:	4623      	mov	r3, r4
 80077d0:	f7f8 ff1c 	bl	800060c <__aeabi_dmul>
 80077d4:	4603      	mov	r3, r0
 80077d6:	460c      	mov	r4, r1
                   35999.0503 * calc->aux.t -
 80077d8:	461a      	mov	r2, r3
 80077da:	4623      	mov	r3, r4
 80077dc:	4628      	mov	r0, r5
 80077de:	4631      	mov	r1, r6
 80077e0:	f7f8 fd5c 	bl	800029c <__aeabi_dsub>
 80077e4:	4603      	mov	r3, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	461d      	mov	r5, r3
 80077ea:	4626      	mov	r6, r4
                   4.8E-07 * calc->aux.t * calc->aux.t * calc->aux.t);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80077f2:	a399      	add	r3, pc, #612	; (adr r3, 8007a58 <GetSun+0x348>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 ff08 	bl	800060c <__aeabi_dmul>
 80077fc:	4603      	mov	r3, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	4618      	mov	r0, r3
 8007802:	4621      	mov	r1, r4
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800780a:	461a      	mov	r2, r3
 800780c:	4623      	mov	r3, r4
 800780e:	f7f8 fefd 	bl	800060c <__aeabi_dmul>
 8007812:	4603      	mov	r3, r0
 8007814:	460c      	mov	r4, r1
 8007816:	4618      	mov	r0, r3
 8007818:	4621      	mov	r1, r4
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007820:	461a      	mov	r2, r3
 8007822:	4623      	mov	r3, r4
 8007824:	f7f8 fef2 	bl	800060c <__aeabi_dmul>
 8007828:	4603      	mov	r3, r0
 800782a:	460c      	mov	r4, r1
                   .0001559 * calc->aux.t * calc->aux.t -
 800782c:	461a      	mov	r2, r3
 800782e:	4623      	mov	r3, r4
 8007830:	4628      	mov	r0, r5
 8007832:	4631      	mov	r1, r6
 8007834:	f7f8 fd32 	bl	800029c <__aeabi_dsub>
 8007838:	4603      	mov	r3, r0
 800783a:	460c      	mov	r4, r1
    anom = (357.5291 +
 800783c:	4a9d      	ldr	r2, [pc, #628]	; (8007ab4 <GetSun+0x3a4>)
 800783e:	e9c2 3400 	strd	r3, r4, [r2]
    calc->aux.sanomaly = anom * snm_DEG_TO_RAD;
 8007842:	4b9c      	ldr	r3, [pc, #624]	; (8007ab4 <GetSun+0x3a4>)
 8007844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007848:	a385      	add	r3, pc, #532	; (adr r3, 8007a60 <GetSun+0x350>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fedd 	bl	800060c <__aeabi_dmul>
 8007852:	4603      	mov	r3, r0
 8007854:	460c      	mov	r4, r1
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
    c = (1.9146 - .004817 * calc->aux.t - .000014 * calc->aux.t * calc->aux.t) * sin(calc->aux.sanomaly);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007862:	a381      	add	r3, pc, #516	; (adr r3, 8007a68 <GetSun+0x358>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fed0 	bl	800060c <__aeabi_dmul>
 800786c:	4603      	mov	r3, r0
 800786e:	460c      	mov	r4, r1
 8007870:	461a      	mov	r2, r3
 8007872:	4623      	mov	r3, r4
 8007874:	a17e      	add	r1, pc, #504	; (adr r1, 8007a70 <GetSun+0x360>)
 8007876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800787a:	f7f8 fd0f 	bl	800029c <__aeabi_dsub>
 800787e:	4603      	mov	r3, r0
 8007880:	460c      	mov	r4, r1
 8007882:	461d      	mov	r5, r3
 8007884:	4626      	mov	r6, r4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800788c:	a37a      	add	r3, pc, #488	; (adr r3, 8007a78 <GetSun+0x368>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f7f8 febb 	bl	800060c <__aeabi_dmul>
 8007896:	4603      	mov	r3, r0
 8007898:	460c      	mov	r4, r1
 800789a:	4618      	mov	r0, r3
 800789c:	4621      	mov	r1, r4
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80078a4:	461a      	mov	r2, r3
 80078a6:	4623      	mov	r3, r4
 80078a8:	f7f8 feb0 	bl	800060c <__aeabi_dmul>
 80078ac:	4603      	mov	r3, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	461a      	mov	r2, r3
 80078b2:	4623      	mov	r3, r4
 80078b4:	4628      	mov	r0, r5
 80078b6:	4631      	mov	r1, r6
 80078b8:	f7f8 fcf0 	bl	800029c <__aeabi_dsub>
 80078bc:	4603      	mov	r3, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	4625      	mov	r5, r4
 80078c2:	461c      	mov	r4, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 80078ca:	eeb0 0a47 	vmov.f32	s0, s14
 80078ce:	eef0 0a67 	vmov.f32	s1, s15
 80078d2:	f011 fcd9 	bl	8019288 <sin>
 80078d6:	ec53 2b10 	vmov	r2, r3, d0
 80078da:	4620      	mov	r0, r4
 80078dc:	4629      	mov	r1, r5
 80078de:	f7f8 fe95 	bl	800060c <__aeabi_dmul>
 80078e2:	4603      	mov	r3, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	4a74      	ldr	r2, [pc, #464]	; (8007ab8 <GetSun+0x3a8>)
 80078e8:	e9c2 3400 	strd	r3, r4, [r2]

    c = c + (.019993 - .000101 * calc->aux.t) * sin(2 * calc->aux.sanomaly);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80078f2:	a363      	add	r3, pc, #396	; (adr r3, 8007a80 <GetSun+0x370>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f7f8 fe88 	bl	800060c <__aeabi_dmul>
 80078fc:	4603      	mov	r3, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	461a      	mov	r2, r3
 8007902:	4623      	mov	r3, r4
 8007904:	a160      	add	r1, pc, #384	; (adr r1, 8007a88 <GetSun+0x378>)
 8007906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800790a:	f7f8 fcc7 	bl	800029c <__aeabi_dsub>
 800790e:	4603      	mov	r3, r0
 8007910:	460c      	mov	r4, r1
 8007912:	4625      	mov	r5, r4
 8007914:	461c      	mov	r4, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	f7f8 fcbe 	bl	80002a0 <__adddf3>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	ec43 2b17 	vmov	d7, r2, r3
 800792c:	eeb0 0a47 	vmov.f32	s0, s14
 8007930:	eef0 0a67 	vmov.f32	s1, s15
 8007934:	f011 fca8 	bl	8019288 <sin>
 8007938:	ec53 2b10 	vmov	r2, r3, d0
 800793c:	4620      	mov	r0, r4
 800793e:	4629      	mov	r1, r5
 8007940:	f7f8 fe64 	bl	800060c <__aeabi_dmul>
 8007944:	4603      	mov	r3, r0
 8007946:	460c      	mov	r4, r1
 8007948:	4618      	mov	r0, r3
 800794a:	4621      	mov	r1, r4
 800794c:	4b5a      	ldr	r3, [pc, #360]	; (8007ab8 <GetSun+0x3a8>)
 800794e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007952:	461a      	mov	r2, r3
 8007954:	4623      	mov	r3, r4
 8007956:	f7f8 fca3 	bl	80002a0 <__adddf3>
 800795a:	4603      	mov	r3, r0
 800795c:	460c      	mov	r4, r1
 800795e:	4a56      	ldr	r2, [pc, #344]	; (8007ab8 <GetSun+0x3a8>)
 8007960:	e9c2 3400 	strd	r3, r4, [r2]
    // Correction to the mean ecliptic longitude
    c = c + .00029 * sin(3.0 * calc->aux.sanomaly);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	4b53      	ldr	r3, [pc, #332]	; (8007abc <GetSun+0x3ac>)
 8007970:	f7f8 fe4c 	bl	800060c <__aeabi_dmul>
 8007974:	4603      	mov	r3, r0
 8007976:	460c      	mov	r4, r1
 8007978:	ec44 3b17 	vmov	d7, r3, r4
 800797c:	eeb0 0a47 	vmov.f32	s0, s14
 8007980:	eef0 0a67 	vmov.f32	s1, s15
 8007984:	f011 fc80 	bl	8019288 <sin>
 8007988:	ec51 0b10 	vmov	r0, r1, d0
 800798c:	a340      	add	r3, pc, #256	; (adr r3, 8007a90 <GetSun+0x380>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f7f8 fe3b 	bl	800060c <__aeabi_dmul>
 8007996:	4603      	mov	r3, r0
 8007998:	460c      	mov	r4, r1
 800799a:	4618      	mov	r0, r3
 800799c:	4621      	mov	r1, r4
 800799e:	4b46      	ldr	r3, [pc, #280]	; (8007ab8 <GetSun+0x3a8>)
 80079a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079a4:	461a      	mov	r2, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	f7f8 fc7a 	bl	80002a0 <__adddf3>
 80079ac:	4603      	mov	r3, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	4a41      	ldr	r2, [pc, #260]	; (8007ab8 <GetSun+0x3a8>)
 80079b2:	e9c2 3400 	strd	r3, r4, [r2]

    // Now, let calculate nutation and aberration
    M1 = (124.90 - 1934.134 * calc->aux.t + 0.002063 * calc->aux.t * calc->aux.t) * snm_DEG_TO_RAD;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80079bc:	a336      	add	r3, pc, #216	; (adr r3, 8007a98 <GetSun+0x388>)
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f7f8 fe23 	bl	800060c <__aeabi_dmul>
 80079c6:	4603      	mov	r3, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	461a      	mov	r2, r3
 80079cc:	4623      	mov	r3, r4
 80079ce:	a134      	add	r1, pc, #208	; (adr r1, 8007aa0 <GetSun+0x390>)
 80079d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d4:	f7f8 fc62 	bl	800029c <__aeabi_dsub>
 80079d8:	4603      	mov	r3, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	461d      	mov	r5, r3
 80079de:	4626      	mov	r6, r4
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80079e6:	a330      	add	r3, pc, #192	; (adr r3, 8007aa8 <GetSun+0x398>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f8 fe0e 	bl	800060c <__aeabi_dmul>
 80079f0:	4603      	mov	r3, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	4618      	mov	r0, r3
 80079f6:	4621      	mov	r1, r4
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80079fe:	461a      	mov	r2, r3
 8007a00:	4623      	mov	r3, r4
 8007a02:	f7f8 fe03 	bl	800060c <__aeabi_dmul>
 8007a06:	4603      	mov	r3, r0
 8007a08:	460c      	mov	r4, r1
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4623      	mov	r3, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	4631      	mov	r1, r6
 8007a12:	f7f8 fc45 	bl	80002a0 <__adddf3>
 8007a16:	4603      	mov	r3, r0
 8007a18:	460c      	mov	r4, r1
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	a310      	add	r3, pc, #64	; (adr r3, 8007a60 <GetSun+0x350>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fdf2 	bl	800060c <__aeabi_dmul>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	4a24      	ldr	r2, [pc, #144]	; (8007ac0 <GetSun+0x3b0>)
 8007a2e:	e9c2 3400 	strd	r3, r4, [r2]
    M2 = (201.11 + 72001.5377 * calc->aux.t + 0.00057 * calc->aux.t * calc->aux.t) * snm_DEG_TO_RAD;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007a38:	e050      	b.n	8007adc <GetSun+0x3cc>
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w
 8007a40:	9c0ebee0 	.word	0x9c0ebee0
 8007a44:	40e193e1 	.word	0x40e193e1
 8007a48:	318fc505 	.word	0x318fc505
 8007a4c:	40765877 	.word	0x40765877
 8007a50:	cd8a61ee 	.word	0xcd8a61ee
 8007a54:	3f246f22 	.word	0x3f246f22
 8007a58:	29a4692b 	.word	0x29a4692b
 8007a5c:	3ea01b2b 	.word	0x3ea01b2b
 8007a60:	a2529d39 	.word	0xa2529d39
 8007a64:	3f91df46 	.word	0x3f91df46
 8007a68:	976ff3ae 	.word	0x976ff3ae
 8007a6c:	3f73bafd 	.word	0x3f73bafd
 8007a70:	9c0ebee0 	.word	0x9c0ebee0
 8007a74:	3ffea233 	.word	0x3ffea233
 8007a78:	593e5fb7 	.word	0x593e5fb7
 8007a7c:	3eed5c31 	.word	0x3eed5c31
 8007a80:	c99f1ae3 	.word	0xc99f1ae3
 8007a84:	3f1a79fe 	.word	0x3f1a79fe
 8007a88:	84988095 	.word	0x84988095
 8007a8c:	3f94790b 	.word	0x3f94790b
 8007a90:	840e171a 	.word	0x840e171a
 8007a94:	3f330164 	.word	0x3f330164
 8007a98:	374bc6a8 	.word	0x374bc6a8
 8007a9c:	409e3889 	.word	0x409e3889
 8007aa0:	9999999a 	.word	0x9999999a
 8007aa4:	405f3999 	.word	0x405f3999
 8007aa8:	b10342ab 	.word	0xb10342ab
 8007aac:	3f60e66c 	.word	0x3f60e66c
 8007ab0:	20000610 	.word	0x20000610
 8007ab4:	20000618 	.word	0x20000618
 8007ab8:	20000620 	.word	0x20000620
 8007abc:	40080000 	.word	0x40080000
 8007ac0:	20000628 	.word	0x20000628
 8007ac4:	a272862f 	.word	0xa272862f
 8007ac8:	40e19418 	.word	0x40e19418
 8007acc:	94467382 	.word	0x94467382
 8007ad0:	40718776 	.word	0x40718776
 8007ad4:	158aabc0 	.word	0x158aabc0
 8007ad8:	3f33deda 	.word	0x3f33deda
 8007adc:	a3d2      	add	r3, pc, #840	; (adr r3, 8007e28 <GetSun+0x718>)
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	f7f8 fd93 	bl	800060c <__aeabi_dmul>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	460c      	mov	r4, r1
 8007aea:	4618      	mov	r0, r3
 8007aec:	4621      	mov	r1, r4
 8007aee:	a3d0      	add	r3, pc, #832	; (adr r3, 8007e30 <GetSun+0x720>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 fbd4 	bl	80002a0 <__adddf3>
 8007af8:	4603      	mov	r3, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	461d      	mov	r5, r3
 8007afe:	4626      	mov	r6, r4
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007b06:	a3cc      	add	r3, pc, #816	; (adr r3, 8007e38 <GetSun+0x728>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fd7e 	bl	800060c <__aeabi_dmul>
 8007b10:	4603      	mov	r3, r0
 8007b12:	460c      	mov	r4, r1
 8007b14:	4618      	mov	r0, r3
 8007b16:	4621      	mov	r1, r4
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007b1e:	461a      	mov	r2, r3
 8007b20:	4623      	mov	r3, r4
 8007b22:	f7f8 fd73 	bl	800060c <__aeabi_dmul>
 8007b26:	4603      	mov	r3, r0
 8007b28:	460c      	mov	r4, r1
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4623      	mov	r3, r4
 8007b2e:	4628      	mov	r0, r5
 8007b30:	4631      	mov	r1, r6
 8007b32:	f7f8 fbb5 	bl	80002a0 <__adddf3>
 8007b36:	4603      	mov	r3, r0
 8007b38:	460c      	mov	r4, r1
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	a3a8      	add	r3, pc, #672	; (adr r3, 8007de0 <GetSun+0x6d0>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f7f8 fd62 	bl	800060c <__aeabi_dmul>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4aac      	ldr	r2, [pc, #688]	; (8007e00 <GetSun+0x6f0>)
 8007b4e:	e9c2 3400 	strd	r3, r4, [r2]
    d = -.00569 - .0047785 * sin(M1) - .0003667 * sin(M2);
 8007b52:	4bac      	ldr	r3, [pc, #688]	; (8007e04 <GetSun+0x6f4>)
 8007b54:	ed93 7b00 	vldr	d7, [r3]
 8007b58:	eeb0 0a47 	vmov.f32	s0, s14
 8007b5c:	eef0 0a67 	vmov.f32	s1, s15
 8007b60:	f011 fb92 	bl	8019288 <sin>
 8007b64:	ec51 0b10 	vmov	r0, r1, d0
 8007b68:	a391      	add	r3, pc, #580	; (adr r3, 8007db0 <GetSun+0x6a0>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fd4d 	bl	800060c <__aeabi_dmul>
 8007b72:	4603      	mov	r3, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	461a      	mov	r2, r3
 8007b78:	4623      	mov	r3, r4
 8007b7a:	a18f      	add	r1, pc, #572	; (adr r1, 8007db8 <GetSun+0x6a8>)
 8007b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b80:	f7f8 fb8c 	bl	800029c <__aeabi_dsub>
 8007b84:	4603      	mov	r3, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	4625      	mov	r5, r4
 8007b8a:	461c      	mov	r4, r3
 8007b8c:	4b9c      	ldr	r3, [pc, #624]	; (8007e00 <GetSun+0x6f0>)
 8007b8e:	ed93 7b00 	vldr	d7, [r3]
 8007b92:	eeb0 0a47 	vmov.f32	s0, s14
 8007b96:	eef0 0a67 	vmov.f32	s1, s15
 8007b9a:	f011 fb75 	bl	8019288 <sin>
 8007b9e:	ec51 0b10 	vmov	r0, r1, d0
 8007ba2:	a387      	add	r3, pc, #540	; (adr r3, 8007dc0 <GetSun+0x6b0>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f7f8 fd30 	bl	800060c <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f7f8 fb72 	bl	800029c <__aeabi_dsub>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	4a92      	ldr	r2, [pc, #584]	; (8007e08 <GetSun+0x6f8>)
 8007bbe:	e9c2 3400 	strd	r3, r4, [r2]

    // apparent longitude (error<0.003 deg)
    calc->aux.slongitude = lon + c + d;
 8007bc2:	4b92      	ldr	r3, [pc, #584]	; (8007e0c <GetSun+0x6fc>)
 8007bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bc8:	4b91      	ldr	r3, [pc, #580]	; (8007e10 <GetSun+0x700>)
 8007bca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	f7f8 fb65 	bl	80002a0 <__adddf3>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	460c      	mov	r4, r1
 8007bda:	4618      	mov	r0, r3
 8007bdc:	4621      	mov	r1, r4
 8007bde:	4b8a      	ldr	r3, [pc, #552]	; (8007e08 <GetSun+0x6f8>)
 8007be0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007be4:	461a      	mov	r2, r3
 8007be6:	4623      	mov	r3, r4
 8007be8:	f7f8 fb5a 	bl	80002a0 <__adddf3>
 8007bec:	4603      	mov	r3, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
    // Sun's ecliptic latitude is always negligible
    slatitude = 0;
 8007bf6:	4a87      	ldr	r2, [pc, #540]	; (8007e14 <GetSun+0x704>)
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	f04f 0400 	mov.w	r4, #0
 8007c00:	e9c2 3400 	strd	r3, r4, [r2]
    // Eccentricity
    ecc = .016708617 - 4.2037E-05 * calc->aux.t - 1.236E-07 * calc->aux.t * calc->aux.t;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007c0a:	a36f      	add	r3, pc, #444	; (adr r3, 8007dc8 <GetSun+0x6b8>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fcfc 	bl	800060c <__aeabi_dmul>
 8007c14:	4603      	mov	r3, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	a16c      	add	r1, pc, #432	; (adr r1, 8007dd0 <GetSun+0x6c0>)
 8007c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c22:	f7f8 fb3b 	bl	800029c <__aeabi_dsub>
 8007c26:	4603      	mov	r3, r0
 8007c28:	460c      	mov	r4, r1
 8007c2a:	461d      	mov	r5, r3
 8007c2c:	4626      	mov	r6, r4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007c34:	a368      	add	r3, pc, #416	; (adr r3, 8007dd8 <GetSun+0x6c8>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 fce7 	bl	800060c <__aeabi_dmul>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	460c      	mov	r4, r1
 8007c42:	4618      	mov	r0, r3
 8007c44:	4621      	mov	r1, r4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4623      	mov	r3, r4
 8007c50:	f7f8 fcdc 	bl	800060c <__aeabi_dmul>
 8007c54:	4603      	mov	r3, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4623      	mov	r3, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	4631      	mov	r1, r6
 8007c60:	f7f8 fb1c 	bl	800029c <__aeabi_dsub>
 8007c64:	4603      	mov	r3, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	4a6b      	ldr	r2, [pc, #428]	; (8007e18 <GetSun+0x708>)
 8007c6a:	e9c2 3400 	strd	r3, r4, [r2]
    // True anomaly
    v = calc->aux.sanomaly + c * snm_DEG_TO_RAD;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 8007c74:	4b66      	ldr	r3, [pc, #408]	; (8007e10 <GetSun+0x700>)
 8007c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c7a:	a359      	add	r3, pc, #356	; (adr r3, 8007de0 <GetSun+0x6d0>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 fcc4 	bl	800060c <__aeabi_dmul>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f7f8 fb08 	bl	80002a0 <__adddf3>
 8007c90:	4603      	mov	r3, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	4a61      	ldr	r2, [pc, #388]	; (8007e1c <GetSun+0x70c>)
 8007c96:	e9c2 3400 	strd	r3, r4, [r2]
    sdistance = 1.000001018 * (1.0 - ecc * ecc) /
 8007c9a:	4b5f      	ldr	r3, [pc, #380]	; (8007e18 <GetSun+0x708>)
 8007c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ca0:	4b5d      	ldr	r3, [pc, #372]	; (8007e18 <GetSun+0x708>)
 8007ca2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	4623      	mov	r3, r4
 8007caa:	f7f8 fcaf 	bl	800060c <__aeabi_dmul>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4623      	mov	r3, r4
 8007cb6:	f04f 0000 	mov.w	r0, #0
 8007cba:	4959      	ldr	r1, [pc, #356]	; (8007e20 <GetSun+0x710>)
 8007cbc:	f7f8 faee 	bl	800029c <__aeabi_dsub>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	a347      	add	r3, pc, #284	; (adr r3, 8007de8 <GetSun+0x6d8>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f7f8 fc9d 	bl	800060c <__aeabi_dmul>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	4626      	mov	r6, r4
            (1.0 + ecc * cos(v)); // In UA
 8007cda:	4b50      	ldr	r3, [pc, #320]	; (8007e1c <GetSun+0x70c>)
 8007cdc:	ed93 7b00 	vldr	d7, [r3]
 8007ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8007ce4:	eef0 0a67 	vmov.f32	s1, s15
 8007ce8:	f011 f9a6 	bl	8019038 <cos>
 8007cec:	ec51 0b10 	vmov	r0, r1, d0
 8007cf0:	4b49      	ldr	r3, [pc, #292]	; (8007e18 <GetSun+0x708>)
 8007cf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	f7f8 fc87 	bl	800060c <__aeabi_dmul>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	460c      	mov	r4, r1
 8007d02:	4618      	mov	r0, r3
 8007d04:	4621      	mov	r1, r4
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	4b45      	ldr	r3, [pc, #276]	; (8007e20 <GetSun+0x710>)
 8007d0c:	f7f8 fac8 	bl	80002a0 <__adddf3>
 8007d10:	4603      	mov	r3, r0
 8007d12:	460c      	mov	r4, r1
    sdistance = 1.000001018 * (1.0 - ecc * ecc) /
 8007d14:	461a      	mov	r2, r3
 8007d16:	4623      	mov	r3, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	f7f8 fda0 	bl	8000860 <__aeabi_ddiv>
 8007d20:	4603      	mov	r3, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	4a3f      	ldr	r2, [pc, #252]	; (8007e24 <GetSun+0x714>)
 8007d26:	e9c2 3400 	strd	r3, r4, [r2]

    params[0] = calc->aux.slongitude;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	e9c2 3400 	strd	r3, r4, [r2]
    params[1] = slatitude;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	f103 0208 	add.w	r2, r3, #8
 8007d3c:	4b35      	ldr	r3, [pc, #212]	; (8007e14 <GetSun+0x704>)
 8007d3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d42:	e9c2 3400 	strd	r3, r4, [r2]
    params[2] = sdistance;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	f103 0210 	add.w	r2, r3, #16
 8007d4c:	4b35      	ldr	r3, [pc, #212]	; (8007e24 <GetSun+0x714>)
 8007d4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d52:	e9c2 3400 	strd	r3, r4, [r2]
    params[3] = atan(696000 / (AU * sdistance));
 8007d56:	a126      	add	r1, pc, #152	; (adr r1, 8007df0 <GetSun+0x6e0>)
 8007d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d5c:	4b31      	ldr	r3, [pc, #196]	; (8007e24 <GetSun+0x714>)
 8007d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d62:	461a      	mov	r2, r3
 8007d64:	4623      	mov	r3, r4
 8007d66:	f7f8 fc51 	bl	800060c <__aeabi_dmul>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	461a      	mov	r2, r3
 8007d70:	4623      	mov	r3, r4
 8007d72:	a121      	add	r1, pc, #132	; (adr r1, 8007df8 <GetSun+0x6e8>)
 8007d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d78:	f7f8 fd72 	bl	8000860 <__aeabi_ddiv>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	ec44 3b17 	vmov	d7, r3, r4
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	f103 0418 	add.w	r4, r3, #24
 8007d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8007d8e:	eef0 0a67 	vmov.f32	s1, s15
 8007d92:	f010 ffb1 	bl	8018cf8 <atan>
 8007d96:	eeb0 7a40 	vmov.f32	s14, s0
 8007d9a:	eef0 7a60 	vmov.f32	s15, s1
 8007d9e:	ed84 7b00 	vstr	d7, [r4]
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007daa:	bf00      	nop
 8007dac:	f3af 8000 	nop.w
 8007db0:	d3953dea 	.word	0xd3953dea
 8007db4:	3f73929e 	.word	0x3f73929e
 8007db8:	bea0ba1f 	.word	0xbea0ba1f
 8007dbc:	bf774e65 	.word	0xbf774e65
 8007dc0:	81e7cc2d 	.word	0x81e7cc2d
 8007dc4:	3f380834 	.word	0x3f380834
 8007dc8:	525fe303 	.word	0x525fe303
 8007dcc:	3f060a1c 	.word	0x3f060a1c
 8007dd0:	4e4e3915 	.word	0x4e4e3915
 8007dd4:	3f911c10 	.word	0x3f911c10
 8007dd8:	18f8b401 	.word	0x18f8b401
 8007ddc:	3e8096dd 	.word	0x3e8096dd
 8007de0:	a2529d39 	.word	0xa2529d39
 8007de4:	3f91df46 	.word	0x3f91df46
 8007de8:	11446d65 	.word	0x11446d65
 8007dec:	3ff00001 	.word	0x3ff00001
 8007df0:	5d61cac1 	.word	0x5d61cac1
 8007df4:	41a1d55d 	.word	0x41a1d55d
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	41253d80 	.word	0x41253d80
 8007e00:	20000630 	.word	0x20000630
 8007e04:	20000628 	.word	0x20000628
 8007e08:	20000638 	.word	0x20000638
 8007e0c:	20000610 	.word	0x20000610
 8007e10:	20000620 	.word	0x20000620
 8007e14:	20000640 	.word	0x20000640
 8007e18:	20000648 	.word	0x20000648
 8007e1c:	20000650 	.word	0x20000650
 8007e20:	3ff00000 	.word	0x3ff00000
 8007e24:	20000658 	.word	0x20000658
 8007e28:	9a6b50b1 	.word	0x9a6b50b1
 8007e2c:	40f19418 	.word	0x40f19418
 8007e30:	1eb851ec 	.word	0x1eb851ec
 8007e34:	40692385 	.word	0x40692385
 8007e38:	adea8976 	.word	0xadea8976
 8007e3c:	3f42ad81 	.word	0x3f42ad81

08007e40 <GetMoon>:

void GetMoon(snm_Calculator *calc, double *params) 
{
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	b087      	sub	sp, #28
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6178      	str	r0, [r7, #20]
 8007e4a:	6139      	str	r1, [r7, #16]
    // MOON PARAMETERS (Formulae from "Calendrical Calculations")
    STATIC_OPT double phase, anomaly, node, E, l, longitude, latitude;
    STATIC_OPT double M1, M2, d, Psin;
    STATIC_OPT double parallax, distance;

    phase = NormalizeRadians((297.8502042 + 445267.1115168 * calc->aux.t - 0.00163 * calc->aux.t * calc->aux.t + calc->aux.t * calc->aux.t * calc->aux.t / 538841 - calc->aux.t * calc->aux.t * calc->aux.t * calc->aux.t / 65194000) * snm_DEG_TO_RAD);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007e52:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f7f8 fbd7 	bl	800060c <__aeabi_dmul>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	460c      	mov	r4, r1
 8007e62:	4618      	mov	r0, r3
 8007e64:	4621      	mov	r1, r4
 8007e66:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	f7f8 fa17 	bl	80002a0 <__adddf3>
 8007e72:	4603      	mov	r3, r0
 8007e74:	460c      	mov	r4, r1
 8007e76:	461d      	mov	r5, r3
 8007e78:	4626      	mov	r6, r4
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007e80:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f7f8 fbc0 	bl	800060c <__aeabi_dmul>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	4618      	mov	r0, r3
 8007e92:	4621      	mov	r1, r4
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	f7f8 fbb5 	bl	800060c <__aeabi_dmul>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	4623      	mov	r3, r4
 8007eaa:	4628      	mov	r0, r5
 8007eac:	4631      	mov	r1, r6
 8007eae:	f7f8 f9f5 	bl	800029c <__aeabi_dsub>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	4626      	mov	r6, r4
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	4623      	mov	r3, r4
 8007eca:	f7f8 fb9f 	bl	800060c <__aeabi_dmul>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007edc:	461a      	mov	r2, r3
 8007ede:	4623      	mov	r3, r4
 8007ee0:	f7f8 fb94 	bl	800060c <__aeabi_dmul>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4618      	mov	r0, r3
 8007eea:	4621      	mov	r1, r4
 8007eec:	f20f 4310 	addw	r3, pc, #1040	; 0x410
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f7f8 fcb4 	bl	8000860 <__aeabi_ddiv>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	461a      	mov	r2, r3
 8007efe:	4623      	mov	r3, r4
 8007f00:	4628      	mov	r0, r5
 8007f02:	4631      	mov	r1, r6
 8007f04:	f7f8 f9cc 	bl	80002a0 <__adddf3>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	461d      	mov	r5, r3
 8007f0e:	4626      	mov	r6, r4
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4623      	mov	r3, r4
 8007f20:	f7f8 fb74 	bl	800060c <__aeabi_dmul>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4618      	mov	r0, r3
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007f32:	461a      	mov	r2, r3
 8007f34:	4623      	mov	r3, r4
 8007f36:	f7f8 fb69 	bl	800060c <__aeabi_dmul>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	4618      	mov	r0, r3
 8007f40:	4621      	mov	r1, r4
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4623      	mov	r3, r4
 8007f4c:	f7f8 fb5e 	bl	800060c <__aeabi_dmul>
 8007f50:	4603      	mov	r3, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	4618      	mov	r0, r3
 8007f56:	4621      	mov	r1, r4
 8007f58:	a3eb      	add	r3, pc, #940	; (adr r3, 8008308 <GetMoon+0x4c8>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 fc7f 	bl	8000860 <__aeabi_ddiv>
 8007f62:	4603      	mov	r3, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	461a      	mov	r2, r3
 8007f68:	4623      	mov	r3, r4
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	f7f8 f995 	bl	800029c <__aeabi_dsub>
 8007f72:	4603      	mov	r3, r0
 8007f74:	460c      	mov	r4, r1
 8007f76:	4618      	mov	r0, r3
 8007f78:	4621      	mov	r1, r4
 8007f7a:	a3c7      	add	r3, pc, #796	; (adr r3, 8008298 <GetMoon+0x458>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 fb44 	bl	800060c <__aeabi_dmul>
 8007f84:	4603      	mov	r3, r0
 8007f86:	460c      	mov	r4, r1
 8007f88:	ec44 3b17 	vmov	d7, r3, r4
 8007f8c:	eeb0 0a47 	vmov.f32	s0, s14
 8007f90:	eef0 0a67 	vmov.f32	s1, s15
 8007f94:	f7ff fb0c 	bl	80075b0 <NormalizeRadians>
 8007f98:	eeb0 7a40 	vmov.f32	s14, s0
 8007f9c:	eef0 7a60 	vmov.f32	s15, s1
 8007fa0:	4bcd      	ldr	r3, [pc, #820]	; (80082d8 <GetMoon+0x498>)
 8007fa2:	ed83 7b00 	vstr	d7, [r3]

    // Anomalistic phase
    anomaly = (134.9634114 + 477198.8676313 * calc->aux.t + .008997 * calc->aux.t * calc->aux.t + calc->aux.t * calc->aux.t * calc->aux.t / 69699 - calc->aux.t * calc->aux.t * calc->aux.t * calc->aux.t / 14712000);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007fac:	a3b0      	add	r3, pc, #704	; (adr r3, 8008270 <GetMoon+0x430>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f7f8 fb2b 	bl	800060c <__aeabi_dmul>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	4618      	mov	r0, r3
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	a3ae      	add	r3, pc, #696	; (adr r3, 8008278 <GetMoon+0x438>)
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	f7f8 f96c 	bl	80002a0 <__adddf3>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	461d      	mov	r5, r3
 8007fce:	4626      	mov	r6, r4
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8007fd6:	a3aa      	add	r3, pc, #680	; (adr r3, 8008280 <GetMoon+0x440>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 fb16 	bl	800060c <__aeabi_dmul>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4623      	mov	r3, r4
 8007ff2:	f7f8 fb0b 	bl	800060c <__aeabi_dmul>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4623      	mov	r3, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	4631      	mov	r1, r6
 8008002:	f7f8 f94d 	bl	80002a0 <__adddf3>
 8008006:	4603      	mov	r3, r0
 8008008:	460c      	mov	r4, r1
 800800a:	461d      	mov	r5, r3
 800800c:	4626      	mov	r6, r4
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800801a:	461a      	mov	r2, r3
 800801c:	4623      	mov	r3, r4
 800801e:	f7f8 faf5 	bl	800060c <__aeabi_dmul>
 8008022:	4603      	mov	r3, r0
 8008024:	460c      	mov	r4, r1
 8008026:	4618      	mov	r0, r3
 8008028:	4621      	mov	r1, r4
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8008030:	461a      	mov	r2, r3
 8008032:	4623      	mov	r3, r4
 8008034:	f7f8 faea 	bl	800060c <__aeabi_dmul>
 8008038:	4603      	mov	r3, r0
 800803a:	460c      	mov	r4, r1
 800803c:	4618      	mov	r0, r3
 800803e:	4621      	mov	r1, r4
 8008040:	a391      	add	r3, pc, #580	; (adr r3, 8008288 <GetMoon+0x448>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 fc0b 	bl	8000860 <__aeabi_ddiv>
 800804a:	4603      	mov	r3, r0
 800804c:	460c      	mov	r4, r1
 800804e:	461a      	mov	r2, r3
 8008050:	4623      	mov	r3, r4
 8008052:	4628      	mov	r0, r5
 8008054:	4631      	mov	r1, r6
 8008056:	f7f8 f923 	bl	80002a0 <__adddf3>
 800805a:	4603      	mov	r3, r0
 800805c:	460c      	mov	r4, r1
 800805e:	461d      	mov	r5, r3
 8008060:	4626      	mov	r6, r4
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800806e:	461a      	mov	r2, r3
 8008070:	4623      	mov	r3, r4
 8008072:	f7f8 facb 	bl	800060c <__aeabi_dmul>
 8008076:	4603      	mov	r3, r0
 8008078:	460c      	mov	r4, r1
 800807a:	4618      	mov	r0, r3
 800807c:	4621      	mov	r1, r4
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8008084:	461a      	mov	r2, r3
 8008086:	4623      	mov	r3, r4
 8008088:	f7f8 fac0 	bl	800060c <__aeabi_dmul>
 800808c:	4603      	mov	r3, r0
 800808e:	460c      	mov	r4, r1
 8008090:	4618      	mov	r0, r3
 8008092:	4621      	mov	r1, r4
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800809a:	461a      	mov	r2, r3
 800809c:	4623      	mov	r3, r4
 800809e:	f7f8 fab5 	bl	800060c <__aeabi_dmul>
 80080a2:	4603      	mov	r3, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	4618      	mov	r0, r3
 80080a8:	4621      	mov	r1, r4
 80080aa:	a379      	add	r3, pc, #484	; (adr r3, 8008290 <GetMoon+0x450>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 fbd6 	bl	8000860 <__aeabi_ddiv>
 80080b4:	4603      	mov	r3, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	461a      	mov	r2, r3
 80080ba:	4623      	mov	r3, r4
 80080bc:	4628      	mov	r0, r5
 80080be:	4631      	mov	r1, r6
 80080c0:	f7f8 f8ec 	bl	800029c <__aeabi_dsub>
 80080c4:	4603      	mov	r3, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	4a84      	ldr	r2, [pc, #528]	; (80082dc <GetMoon+0x49c>)
 80080ca:	e9c2 3400 	strd	r3, r4, [r2]
    anomaly = anomaly * snm_DEG_TO_RAD;
 80080ce:	4b83      	ldr	r3, [pc, #524]	; (80082dc <GetMoon+0x49c>)
 80080d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080d4:	a370      	add	r3, pc, #448	; (adr r3, 8008298 <GetMoon+0x458>)
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	f7f8 fa97 	bl	800060c <__aeabi_dmul>
 80080de:	4603      	mov	r3, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	4a7e      	ldr	r2, [pc, #504]	; (80082dc <GetMoon+0x49c>)
 80080e4:	e9c2 3400 	strd	r3, r4, [r2]

    // Degrees from ascending node
    node = (93.2720993 + 483202.0175273 * calc->aux.t - 0.0034029 * calc->aux.t * calc->aux.t - calc->aux.t * calc->aux.t * calc->aux.t / 3526000 + calc->aux.t * calc->aux.t * calc->aux.t * calc->aux.t / 863310000);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80080ee:	a36c      	add	r3, pc, #432	; (adr r3, 80082a0 <GetMoon+0x460>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f7f8 fa8a 	bl	800060c <__aeabi_dmul>
 80080f8:	4603      	mov	r3, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	4618      	mov	r0, r3
 80080fe:	4621      	mov	r1, r4
 8008100:	a369      	add	r3, pc, #420	; (adr r3, 80082a8 <GetMoon+0x468>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 f8cb 	bl	80002a0 <__adddf3>
 800810a:	4603      	mov	r3, r0
 800810c:	460c      	mov	r4, r1
 800810e:	461d      	mov	r5, r3
 8008110:	4626      	mov	r6, r4
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8008118:	a365      	add	r3, pc, #404	; (adr r3, 80082b0 <GetMoon+0x470>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 fa75 	bl	800060c <__aeabi_dmul>
 8008122:	4603      	mov	r3, r0
 8008124:	460c      	mov	r4, r1
 8008126:	4618      	mov	r0, r3
 8008128:	4621      	mov	r1, r4
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8008130:	461a      	mov	r2, r3
 8008132:	4623      	mov	r3, r4
 8008134:	f7f8 fa6a 	bl	800060c <__aeabi_dmul>
 8008138:	4603      	mov	r3, r0
 800813a:	460c      	mov	r4, r1
 800813c:	461a      	mov	r2, r3
 800813e:	4623      	mov	r3, r4
 8008140:	4628      	mov	r0, r5
 8008142:	4631      	mov	r1, r6
 8008144:	f7f8 f8aa 	bl	800029c <__aeabi_dsub>
 8008148:	4603      	mov	r3, r0
 800814a:	460c      	mov	r4, r1
 800814c:	461d      	mov	r5, r3
 800814e:	4626      	mov	r6, r4
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800815c:	461a      	mov	r2, r3
 800815e:	4623      	mov	r3, r4
 8008160:	f7f8 fa54 	bl	800060c <__aeabi_dmul>
 8008164:	4603      	mov	r3, r0
 8008166:	460c      	mov	r4, r1
 8008168:	4618      	mov	r0, r3
 800816a:	4621      	mov	r1, r4
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8008172:	461a      	mov	r2, r3
 8008174:	4623      	mov	r3, r4
 8008176:	f7f8 fa49 	bl	800060c <__aeabi_dmul>
 800817a:	4603      	mov	r3, r0
 800817c:	460c      	mov	r4, r1
 800817e:	4618      	mov	r0, r3
 8008180:	4621      	mov	r1, r4
 8008182:	a34d      	add	r3, pc, #308	; (adr r3, 80082b8 <GetMoon+0x478>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 fb6a 	bl	8000860 <__aeabi_ddiv>
 800818c:	4603      	mov	r3, r0
 800818e:	460c      	mov	r4, r1
 8008190:	461a      	mov	r2, r3
 8008192:	4623      	mov	r3, r4
 8008194:	4628      	mov	r0, r5
 8008196:	4631      	mov	r1, r6
 8008198:	f7f8 f880 	bl	800029c <__aeabi_dsub>
 800819c:	4603      	mov	r3, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	461d      	mov	r5, r3
 80081a2:	4626      	mov	r6, r4
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80081b0:	461a      	mov	r2, r3
 80081b2:	4623      	mov	r3, r4
 80081b4:	f7f8 fa2a 	bl	800060c <__aeabi_dmul>
 80081b8:	4603      	mov	r3, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	4618      	mov	r0, r3
 80081be:	4621      	mov	r1, r4
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80081c6:	461a      	mov	r2, r3
 80081c8:	4623      	mov	r3, r4
 80081ca:	f7f8 fa1f 	bl	800060c <__aeabi_dmul>
 80081ce:	4603      	mov	r3, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	4618      	mov	r0, r3
 80081d4:	4621      	mov	r1, r4
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80081dc:	461a      	mov	r2, r3
 80081de:	4623      	mov	r3, r4
 80081e0:	f7f8 fa14 	bl	800060c <__aeabi_dmul>
 80081e4:	4603      	mov	r3, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	4618      	mov	r0, r3
 80081ea:	4621      	mov	r1, r4
 80081ec:	a334      	add	r3, pc, #208	; (adr r3, 80082c0 <GetMoon+0x480>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 fb35 	bl	8000860 <__aeabi_ddiv>
 80081f6:	4603      	mov	r3, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	461a      	mov	r2, r3
 80081fc:	4623      	mov	r3, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	4631      	mov	r1, r6
 8008202:	f7f8 f84d 	bl	80002a0 <__adddf3>
 8008206:	4603      	mov	r3, r0
 8008208:	460c      	mov	r4, r1
 800820a:	4a35      	ldr	r2, [pc, #212]	; (80082e0 <GetMoon+0x4a0>)
 800820c:	e9c2 3400 	strd	r3, r4, [r2]
    node = node * snm_DEG_TO_RAD;
 8008210:	4b33      	ldr	r3, [pc, #204]	; (80082e0 <GetMoon+0x4a0>)
 8008212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008216:	a320      	add	r3, pc, #128	; (adr r3, 8008298 <GetMoon+0x458>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f8 f9f6 	bl	800060c <__aeabi_dmul>
 8008220:	4603      	mov	r3, r0
 8008222:	460c      	mov	r4, r1
 8008224:	4a2e      	ldr	r2, [pc, #184]	; (80082e0 <GetMoon+0x4a0>)
 8008226:	e9c2 3400 	strd	r3, r4, [r2]

    E = 1.0 - (.002495 + 7.52E-06 * (calc->aux.t + 1.0)) * (calc->aux.t + 1.0);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	4b2b      	ldr	r3, [pc, #172]	; (80082e4 <GetMoon+0x4a4>)
 8008236:	f7f8 f833 	bl	80002a0 <__adddf3>
 800823a:	4603      	mov	r3, r0
 800823c:	460c      	mov	r4, r1
 800823e:	4618      	mov	r0, r3
 8008240:	4621      	mov	r1, r4
 8008242:	a321      	add	r3, pc, #132	; (adr r3, 80082c8 <GetMoon+0x488>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f9e0 	bl	800060c <__aeabi_dmul>
 800824c:	4603      	mov	r3, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4618      	mov	r0, r3
 8008252:	4621      	mov	r1, r4
 8008254:	a31e      	add	r3, pc, #120	; (adr r3, 80082d0 <GetMoon+0x490>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f7f8 f821 	bl	80002a0 <__adddf3>
 800825e:	4603      	mov	r3, r0
 8008260:	460c      	mov	r4, r1
 8008262:	4625      	mov	r5, r4
 8008264:	461c      	mov	r4, r3
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	e052      	b.n	8008310 <GetMoon+0x4d0>
 800826a:	bf00      	nop
 800826c:	f3af 8000 	nop.w
 8008270:	787456ea 	.word	0x787456ea
 8008274:	411d203b 	.word	0x411d203b
 8008278:	4424f2ff 	.word	0x4424f2ff
 800827c:	4060ded4 	.word	0x4060ded4
 8008280:	e618ce2d 	.word	0xe618ce2d
 8008284:	3f826d04 	.word	0x3f826d04
 8008288:	00000000 	.word	0x00000000
 800828c:	40f10430 	.word	0x40f10430
 8008290:	00000000 	.word	0x00000000
 8008294:	416c0f98 	.word	0x416c0f98
 8008298:	a2529d39 	.word	0xa2529d39
 800829c:	3f91df46 	.word	0x3f91df46
 80082a0:	11f2ad31 	.word	0x11f2ad31
 80082a4:	411d7e08 	.word	0x411d7e08
 80082a8:	132eb0ed 	.word	0x132eb0ed
 80082ac:	4057516a 	.word	0x4057516a
 80082b0:	06c5161f 	.word	0x06c5161f
 80082b4:	3f6be066 	.word	0x3f6be066
 80082b8:	00000000 	.word	0x00000000
 80082bc:	414ae6b8 	.word	0x414ae6b8
 80082c0:	58000000 	.word	0x58000000
 80082c4:	41c9ba88 	.word	0x41c9ba88
 80082c8:	dc374df5 	.word	0xdc374df5
 80082cc:	3edf8a89 	.word	0x3edf8a89
 80082d0:	ece9a2c6 	.word	0xece9a2c6
 80082d4:	3f647064 	.word	0x3f647064
 80082d8:	20000660 	.word	0x20000660
 80082dc:	20000668 	.word	0x20000668
 80082e0:	20000670 	.word	0x20000670
 80082e4:	3ff00000 	.word	0x3ff00000
 80082e8:	723175c4 	.word	0x723175c4
 80082ec:	411b2d4c 	.word	0x411b2d4c
 80082f0:	6fb81ec0 	.word	0x6fb81ec0
 80082f4:	40729d9a 	.word	0x40729d9a
 80082f8:	2c5197a2 	.word	0x2c5197a2
 80082fc:	3f5ab4b7 	.word	0x3f5ab4b7
 8008300:	00000000 	.word	0x00000000
 8008304:	412071b2 	.word	0x412071b2
 8008308:	80000000 	.word	0x80000000
 800830c:	418f1640 	.word	0x418f1640
 8008310:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	4bd7      	ldr	r3, [pc, #860]	; (8008678 <GetMoon+0x838>)
 800831a:	f7f7 ffc1 	bl	80002a0 <__adddf3>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4620      	mov	r0, r4
 8008324:	4629      	mov	r1, r5
 8008326:	f7f8 f971 	bl	800060c <__aeabi_dmul>
 800832a:	4603      	mov	r3, r0
 800832c:	460c      	mov	r4, r1
 800832e:	461a      	mov	r2, r3
 8008330:	4623      	mov	r3, r4
 8008332:	f04f 0000 	mov.w	r0, #0
 8008336:	49d0      	ldr	r1, [pc, #832]	; (8008678 <GetMoon+0x838>)
 8008338:	f7f7 ffb0 	bl	800029c <__aeabi_dsub>
 800833c:	4603      	mov	r3, r0
 800833e:	460c      	mov	r4, r1
 8008340:	4ace      	ldr	r2, [pc, #824]	; (800867c <GetMoon+0x83c>)
 8008342:	e9c2 3400 	strd	r3, r4, [r2]

    // Now longitude, with the three main correcting terms of evection,
    // variation, and equation of year, plus other terms (error<0.01 deg)
    // P. Duffet's MOON program taken as reference
    l = (218.31664563 + 481267.8811958 * calc->aux.t - .00146639 * calc->aux.t * calc->aux.t + calc->aux.t * calc->aux.t * calc->aux.t / 540135.03 - calc->aux.t * calc->aux.t * calc->aux.t * calc->aux.t / 65193770.4);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800834c:	a3b4      	add	r3, pc, #720	; (adr r3, 8008620 <GetMoon+0x7e0>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f7f8 f95b 	bl	800060c <__aeabi_dmul>
 8008356:	4603      	mov	r3, r0
 8008358:	460c      	mov	r4, r1
 800835a:	4618      	mov	r0, r3
 800835c:	4621      	mov	r1, r4
 800835e:	a3b2      	add	r3, pc, #712	; (adr r3, 8008628 <GetMoon+0x7e8>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f7 ff9c 	bl	80002a0 <__adddf3>
 8008368:	4603      	mov	r3, r0
 800836a:	460c      	mov	r4, r1
 800836c:	461d      	mov	r5, r3
 800836e:	4626      	mov	r6, r4
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8008376:	a3ae      	add	r3, pc, #696	; (adr r3, 8008630 <GetMoon+0x7f0>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f8 f946 	bl	800060c <__aeabi_dmul>
 8008380:	4603      	mov	r3, r0
 8008382:	460c      	mov	r4, r1
 8008384:	4618      	mov	r0, r3
 8008386:	4621      	mov	r1, r4
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800838e:	461a      	mov	r2, r3
 8008390:	4623      	mov	r3, r4
 8008392:	f7f8 f93b 	bl	800060c <__aeabi_dmul>
 8008396:	4603      	mov	r3, r0
 8008398:	460c      	mov	r4, r1
 800839a:	461a      	mov	r2, r3
 800839c:	4623      	mov	r3, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	4631      	mov	r1, r6
 80083a2:	f7f7 ff7b 	bl	800029c <__aeabi_dsub>
 80083a6:	4603      	mov	r3, r0
 80083a8:	460c      	mov	r4, r1
 80083aa:	461d      	mov	r5, r3
 80083ac:	4626      	mov	r6, r4
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80083ba:	461a      	mov	r2, r3
 80083bc:	4623      	mov	r3, r4
 80083be:	f7f8 f925 	bl	800060c <__aeabi_dmul>
 80083c2:	4603      	mov	r3, r0
 80083c4:	460c      	mov	r4, r1
 80083c6:	4618      	mov	r0, r3
 80083c8:	4621      	mov	r1, r4
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80083d0:	461a      	mov	r2, r3
 80083d2:	4623      	mov	r3, r4
 80083d4:	f7f8 f91a 	bl	800060c <__aeabi_dmul>
 80083d8:	4603      	mov	r3, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	4618      	mov	r0, r3
 80083de:	4621      	mov	r1, r4
 80083e0:	a395      	add	r3, pc, #596	; (adr r3, 8008638 <GetMoon+0x7f8>)
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	f7f8 fa3b 	bl	8000860 <__aeabi_ddiv>
 80083ea:	4603      	mov	r3, r0
 80083ec:	460c      	mov	r4, r1
 80083ee:	461a      	mov	r2, r3
 80083f0:	4623      	mov	r3, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	4631      	mov	r1, r6
 80083f6:	f7f7 ff53 	bl	80002a0 <__adddf3>
 80083fa:	4603      	mov	r3, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	461d      	mov	r5, r3
 8008400:	4626      	mov	r6, r4
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800840e:	461a      	mov	r2, r3
 8008410:	4623      	mov	r3, r4
 8008412:	f7f8 f8fb 	bl	800060c <__aeabi_dmul>
 8008416:	4603      	mov	r3, r0
 8008418:	460c      	mov	r4, r1
 800841a:	4618      	mov	r0, r3
 800841c:	4621      	mov	r1, r4
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8008424:	461a      	mov	r2, r3
 8008426:	4623      	mov	r3, r4
 8008428:	f7f8 f8f0 	bl	800060c <__aeabi_dmul>
 800842c:	4603      	mov	r3, r0
 800842e:	460c      	mov	r4, r1
 8008430:	4618      	mov	r0, r3
 8008432:	4621      	mov	r1, r4
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800843a:	461a      	mov	r2, r3
 800843c:	4623      	mov	r3, r4
 800843e:	f7f8 f8e5 	bl	800060c <__aeabi_dmul>
 8008442:	4603      	mov	r3, r0
 8008444:	460c      	mov	r4, r1
 8008446:	4618      	mov	r0, r3
 8008448:	4621      	mov	r1, r4
 800844a:	a37d      	add	r3, pc, #500	; (adr r3, 8008640 <GetMoon+0x800>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f7f8 fa06 	bl	8000860 <__aeabi_ddiv>
 8008454:	4603      	mov	r3, r0
 8008456:	460c      	mov	r4, r1
 8008458:	461a      	mov	r2, r3
 800845a:	4623      	mov	r3, r4
 800845c:	4628      	mov	r0, r5
 800845e:	4631      	mov	r1, r6
 8008460:	f7f7 ff1c 	bl	800029c <__aeabi_dsub>
 8008464:	4603      	mov	r3, r0
 8008466:	460c      	mov	r4, r1
 8008468:	4a85      	ldr	r2, [pc, #532]	; (8008680 <GetMoon+0x840>)
 800846a:	e9c2 3400 	strd	r3, r4, [r2]
    l += 6.28875 * sin(anomaly) + 1.274018 * sin(2 * phase - anomaly) + .658309 * sin(2 * phase);
 800846e:	4b85      	ldr	r3, [pc, #532]	; (8008684 <GetMoon+0x844>)
 8008470:	ed93 7b00 	vldr	d7, [r3]
 8008474:	eeb0 0a47 	vmov.f32	s0, s14
 8008478:	eef0 0a67 	vmov.f32	s1, s15
 800847c:	f010 ff04 	bl	8019288 <sin>
 8008480:	ec51 0b10 	vmov	r0, r1, d0
 8008484:	a370      	add	r3, pc, #448	; (adr r3, 8008648 <GetMoon+0x808>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f8 f8bf 	bl	800060c <__aeabi_dmul>
 800848e:	4603      	mov	r3, r0
 8008490:	460c      	mov	r4, r1
 8008492:	461d      	mov	r5, r3
 8008494:	4626      	mov	r6, r4
 8008496:	4b7c      	ldr	r3, [pc, #496]	; (8008688 <GetMoon+0x848>)
 8008498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	f7f7 fefe 	bl	80002a0 <__adddf3>
 80084a4:	4603      	mov	r3, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	4618      	mov	r0, r3
 80084aa:	4621      	mov	r1, r4
 80084ac:	4b75      	ldr	r3, [pc, #468]	; (8008684 <GetMoon+0x844>)
 80084ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084b2:	461a      	mov	r2, r3
 80084b4:	4623      	mov	r3, r4
 80084b6:	f7f7 fef1 	bl	800029c <__aeabi_dsub>
 80084ba:	4603      	mov	r3, r0
 80084bc:	460c      	mov	r4, r1
 80084be:	ec44 3b17 	vmov	d7, r3, r4
 80084c2:	eeb0 0a47 	vmov.f32	s0, s14
 80084c6:	eef0 0a67 	vmov.f32	s1, s15
 80084ca:	f010 fedd 	bl	8019288 <sin>
 80084ce:	ec51 0b10 	vmov	r0, r1, d0
 80084d2:	a35f      	add	r3, pc, #380	; (adr r3, 8008650 <GetMoon+0x810>)
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f7f8 f898 	bl	800060c <__aeabi_dmul>
 80084dc:	4603      	mov	r3, r0
 80084de:	460c      	mov	r4, r1
 80084e0:	461a      	mov	r2, r3
 80084e2:	4623      	mov	r3, r4
 80084e4:	4628      	mov	r0, r5
 80084e6:	4631      	mov	r1, r6
 80084e8:	f7f7 feda 	bl	80002a0 <__adddf3>
 80084ec:	4603      	mov	r3, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	461d      	mov	r5, r3
 80084f2:	4626      	mov	r6, r4
 80084f4:	4b64      	ldr	r3, [pc, #400]	; (8008688 <GetMoon+0x848>)
 80084f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	f7f7 fecf 	bl	80002a0 <__adddf3>
 8008502:	4603      	mov	r3, r0
 8008504:	460c      	mov	r4, r1
 8008506:	ec44 3b17 	vmov	d7, r3, r4
 800850a:	eeb0 0a47 	vmov.f32	s0, s14
 800850e:	eef0 0a67 	vmov.f32	s1, s15
 8008512:	f010 feb9 	bl	8019288 <sin>
 8008516:	ec51 0b10 	vmov	r0, r1, d0
 800851a:	a34f      	add	r3, pc, #316	; (adr r3, 8008658 <GetMoon+0x818>)
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f7f8 f874 	bl	800060c <__aeabi_dmul>
 8008524:	4603      	mov	r3, r0
 8008526:	460c      	mov	r4, r1
 8008528:	461a      	mov	r2, r3
 800852a:	4623      	mov	r3, r4
 800852c:	4628      	mov	r0, r5
 800852e:	4631      	mov	r1, r6
 8008530:	f7f7 feb6 	bl	80002a0 <__adddf3>
 8008534:	4603      	mov	r3, r0
 8008536:	460c      	mov	r4, r1
 8008538:	4618      	mov	r0, r3
 800853a:	4621      	mov	r1, r4
 800853c:	4b50      	ldr	r3, [pc, #320]	; (8008680 <GetMoon+0x840>)
 800853e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008542:	461a      	mov	r2, r3
 8008544:	4623      	mov	r3, r4
 8008546:	f7f7 feab 	bl	80002a0 <__adddf3>
 800854a:	4603      	mov	r3, r0
 800854c:	460c      	mov	r4, r1
 800854e:	4a4c      	ldr	r2, [pc, #304]	; (8008680 <GetMoon+0x840>)
 8008550:	e9c2 3400 	strd	r3, r4, [r2]
    l +=  0.213616 * sin(2 * anomaly) - E * .185596 * sin(calc->aux.sanomaly) - 0.114336 * sin(2 * node);
 8008554:	4b4b      	ldr	r3, [pc, #300]	; (8008684 <GetMoon+0x844>)
 8008556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	f7f7 fe9f 	bl	80002a0 <__adddf3>
 8008562:	4603      	mov	r3, r0
 8008564:	460c      	mov	r4, r1
 8008566:	ec44 3b17 	vmov	d7, r3, r4
 800856a:	eeb0 0a47 	vmov.f32	s0, s14
 800856e:	eef0 0a67 	vmov.f32	s1, s15
 8008572:	f010 fe89 	bl	8019288 <sin>
 8008576:	ec51 0b10 	vmov	r0, r1, d0
 800857a:	a339      	add	r3, pc, #228	; (adr r3, 8008660 <GetMoon+0x820>)
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f7f8 f844 	bl	800060c <__aeabi_dmul>
 8008584:	4603      	mov	r3, r0
 8008586:	460c      	mov	r4, r1
 8008588:	4698      	mov	r8, r3
 800858a:	46a1      	mov	r9, r4
 800858c:	4b3b      	ldr	r3, [pc, #236]	; (800867c <GetMoon+0x83c>)
 800858e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008592:	a335      	add	r3, pc, #212	; (adr r3, 8008668 <GetMoon+0x828>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f7f8 f838 	bl	800060c <__aeabi_dmul>
 800859c:	4603      	mov	r3, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4625      	mov	r5, r4
 80085a2:	461c      	mov	r4, r3
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 80085aa:	eeb0 0a47 	vmov.f32	s0, s14
 80085ae:	eef0 0a67 	vmov.f32	s1, s15
 80085b2:	f010 fe69 	bl	8019288 <sin>
 80085b6:	ec53 2b10 	vmov	r2, r3, d0
 80085ba:	4620      	mov	r0, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f8 f825 	bl	800060c <__aeabi_dmul>
 80085c2:	4603      	mov	r3, r0
 80085c4:	460c      	mov	r4, r1
 80085c6:	461a      	mov	r2, r3
 80085c8:	4623      	mov	r3, r4
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	f7f7 fe65 	bl	800029c <__aeabi_dsub>
 80085d2:	4603      	mov	r3, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	461d      	mov	r5, r3
 80085d8:	4626      	mov	r6, r4
 80085da:	4b2c      	ldr	r3, [pc, #176]	; (800868c <GetMoon+0x84c>)
 80085dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	f7f7 fe5c 	bl	80002a0 <__adddf3>
 80085e8:	4603      	mov	r3, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	ec44 3b17 	vmov	d7, r3, r4
 80085f0:	eeb0 0a47 	vmov.f32	s0, s14
 80085f4:	eef0 0a67 	vmov.f32	s1, s15
 80085f8:	f010 fe46 	bl	8019288 <sin>
 80085fc:	ec51 0b10 	vmov	r0, r1, d0
 8008600:	a31b      	add	r3, pc, #108	; (adr r3, 8008670 <GetMoon+0x830>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f8 f801 	bl	800060c <__aeabi_dmul>
 800860a:	4603      	mov	r3, r0
 800860c:	460c      	mov	r4, r1
 800860e:	461a      	mov	r2, r3
 8008610:	4623      	mov	r3, r4
 8008612:	4628      	mov	r0, r5
 8008614:	4631      	mov	r1, r6
 8008616:	f7f7 fe41 	bl	800029c <__aeabi_dsub>
 800861a:	4603      	mov	r3, r0
 800861c:	460c      	mov	r4, r1
 800861e:	e037      	b.n	8008690 <GetMoon+0x850>
 8008620:	86583119 	.word	0x86583119
 8008624:	411d5fcf 	.word	0x411d5fcf
 8008628:	f60428af 	.word	0xf60428af
 800862c:	406b4a21 	.word	0x406b4a21
 8008630:	45f6af49 	.word	0x45f6af49
 8008634:	3f58067c 	.word	0x3f58067c
 8008638:	0f5c28f6 	.word	0x0f5c28f6
 800863c:	41207bce 	.word	0x41207bce
 8008640:	53333333 	.word	0x53333333
 8008644:	418f1639 	.word	0x418f1639
 8008648:	147ae148 	.word	0x147ae148
 800864c:	401927ae 	.word	0x401927ae
 8008650:	b2c83ec9 	.word	0xb2c83ec9
 8008654:	3ff46260 	.word	0x3ff46260
 8008658:	093532e8 	.word	0x093532e8
 800865c:	3fe510de 	.word	0x3fe510de
 8008660:	e2f37fbf 	.word	0xe2f37fbf
 8008664:	3fcb57c4 	.word	0x3fcb57c4
 8008668:	17225b75 	.word	0x17225b75
 800866c:	3fc7c19c 	.word	0x3fc7c19c
 8008670:	c4c16590 	.word	0xc4c16590
 8008674:	3fbd451f 	.word	0x3fbd451f
 8008678:	3ff00000 	.word	0x3ff00000
 800867c:	20000678 	.word	0x20000678
 8008680:	20000680 	.word	0x20000680
 8008684:	20000668 	.word	0x20000668
 8008688:	20000660 	.word	0x20000660
 800868c:	20000670 	.word	0x20000670
 8008690:	4618      	mov	r0, r3
 8008692:	4621      	mov	r1, r4
 8008694:	4bd4      	ldr	r3, [pc, #848]	; (80089e8 <GetMoon+0xba8>)
 8008696:	e9d3 3400 	ldrd	r3, r4, [r3]
 800869a:	461a      	mov	r2, r3
 800869c:	4623      	mov	r3, r4
 800869e:	f7f7 fdff 	bl	80002a0 <__adddf3>
 80086a2:	4603      	mov	r3, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	4ad0      	ldr	r2, [pc, #832]	; (80089e8 <GetMoon+0xba8>)
 80086a8:	e9c2 3400 	strd	r3, r4, [r2]
    l += .058793 * sin(2 * phase - 2 * anomaly) + .057212 * E * sin(2 * phase - anomaly - calc->aux.sanomaly) + .05332 * sin(2 * phase + anomaly);
 80086ac:	4bcf      	ldr	r3, [pc, #828]	; (80089ec <GetMoon+0xbac>)
 80086ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	f7f7 fdf3 	bl	80002a0 <__adddf3>
 80086ba:	4603      	mov	r3, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	4625      	mov	r5, r4
 80086c0:	461c      	mov	r4, r3
 80086c2:	4bcb      	ldr	r3, [pc, #812]	; (80089f0 <GetMoon+0xbb0>)
 80086c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	f7f7 fde8 	bl	80002a0 <__adddf3>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4620      	mov	r0, r4
 80086d6:	4629      	mov	r1, r5
 80086d8:	f7f7 fde0 	bl	800029c <__aeabi_dsub>
 80086dc:	4603      	mov	r3, r0
 80086de:	460c      	mov	r4, r1
 80086e0:	ec44 3b17 	vmov	d7, r3, r4
 80086e4:	eeb0 0a47 	vmov.f32	s0, s14
 80086e8:	eef0 0a67 	vmov.f32	s1, s15
 80086ec:	f010 fdcc 	bl	8019288 <sin>
 80086f0:	ec51 0b10 	vmov	r0, r1, d0
 80086f4:	a3ae      	add	r3, pc, #696	; (adr r3, 80089b0 <GetMoon+0xb70>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f7 ff87 	bl	800060c <__aeabi_dmul>
 80086fe:	4603      	mov	r3, r0
 8008700:	460c      	mov	r4, r1
 8008702:	4698      	mov	r8, r3
 8008704:	46a1      	mov	r9, r4
 8008706:	4bbb      	ldr	r3, [pc, #748]	; (80089f4 <GetMoon+0xbb4>)
 8008708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800870c:	a3aa      	add	r3, pc, #680	; (adr r3, 80089b8 <GetMoon+0xb78>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 ff7b 	bl	800060c <__aeabi_dmul>
 8008716:	4603      	mov	r3, r0
 8008718:	460c      	mov	r4, r1
 800871a:	461d      	mov	r5, r3
 800871c:	4626      	mov	r6, r4
 800871e:	4bb3      	ldr	r3, [pc, #716]	; (80089ec <GetMoon+0xbac>)
 8008720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	f7f7 fdba 	bl	80002a0 <__adddf3>
 800872c:	4603      	mov	r3, r0
 800872e:	460c      	mov	r4, r1
 8008730:	4618      	mov	r0, r3
 8008732:	4621      	mov	r1, r4
 8008734:	4bae      	ldr	r3, [pc, #696]	; (80089f0 <GetMoon+0xbb0>)
 8008736:	e9d3 3400 	ldrd	r3, r4, [r3]
 800873a:	461a      	mov	r2, r3
 800873c:	4623      	mov	r3, r4
 800873e:	f7f7 fdad 	bl	800029c <__aeabi_dsub>
 8008742:	4603      	mov	r3, r0
 8008744:	460c      	mov	r4, r1
 8008746:	4618      	mov	r0, r3
 8008748:	4621      	mov	r1, r4
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8008750:	461a      	mov	r2, r3
 8008752:	4623      	mov	r3, r4
 8008754:	f7f7 fda2 	bl	800029c <__aeabi_dsub>
 8008758:	4603      	mov	r3, r0
 800875a:	460c      	mov	r4, r1
 800875c:	ec44 3b17 	vmov	d7, r3, r4
 8008760:	eeb0 0a47 	vmov.f32	s0, s14
 8008764:	eef0 0a67 	vmov.f32	s1, s15
 8008768:	f010 fd8e 	bl	8019288 <sin>
 800876c:	ec54 3b10 	vmov	r3, r4, d0
 8008770:	461a      	mov	r2, r3
 8008772:	4623      	mov	r3, r4
 8008774:	4628      	mov	r0, r5
 8008776:	4631      	mov	r1, r6
 8008778:	f7f7 ff48 	bl	800060c <__aeabi_dmul>
 800877c:	4603      	mov	r3, r0
 800877e:	460c      	mov	r4, r1
 8008780:	461a      	mov	r2, r3
 8008782:	4623      	mov	r3, r4
 8008784:	4640      	mov	r0, r8
 8008786:	4649      	mov	r1, r9
 8008788:	f7f7 fd8a 	bl	80002a0 <__adddf3>
 800878c:	4603      	mov	r3, r0
 800878e:	460c      	mov	r4, r1
 8008790:	461d      	mov	r5, r3
 8008792:	4626      	mov	r6, r4
 8008794:	4b95      	ldr	r3, [pc, #596]	; (80089ec <GetMoon+0xbac>)
 8008796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	f7f7 fd7f 	bl	80002a0 <__adddf3>
 80087a2:	4603      	mov	r3, r0
 80087a4:	460c      	mov	r4, r1
 80087a6:	4618      	mov	r0, r3
 80087a8:	4621      	mov	r1, r4
 80087aa:	4b91      	ldr	r3, [pc, #580]	; (80089f0 <GetMoon+0xbb0>)
 80087ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087b0:	461a      	mov	r2, r3
 80087b2:	4623      	mov	r3, r4
 80087b4:	f7f7 fd74 	bl	80002a0 <__adddf3>
 80087b8:	4603      	mov	r3, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	ec44 3b17 	vmov	d7, r3, r4
 80087c0:	eeb0 0a47 	vmov.f32	s0, s14
 80087c4:	eef0 0a67 	vmov.f32	s1, s15
 80087c8:	f010 fd5e 	bl	8019288 <sin>
 80087cc:	ec51 0b10 	vmov	r0, r1, d0
 80087d0:	a37b      	add	r3, pc, #492	; (adr r3, 80089c0 <GetMoon+0xb80>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 ff19 	bl	800060c <__aeabi_dmul>
 80087da:	4603      	mov	r3, r0
 80087dc:	460c      	mov	r4, r1
 80087de:	461a      	mov	r2, r3
 80087e0:	4623      	mov	r3, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	4631      	mov	r1, r6
 80087e6:	f7f7 fd5b 	bl	80002a0 <__adddf3>
 80087ea:	4603      	mov	r3, r0
 80087ec:	460c      	mov	r4, r1
 80087ee:	4618      	mov	r0, r3
 80087f0:	4621      	mov	r1, r4
 80087f2:	4b7d      	ldr	r3, [pc, #500]	; (80089e8 <GetMoon+0xba8>)
 80087f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087f8:	461a      	mov	r2, r3
 80087fa:	4623      	mov	r3, r4
 80087fc:	f7f7 fd50 	bl	80002a0 <__adddf3>
 8008800:	4603      	mov	r3, r0
 8008802:	460c      	mov	r4, r1
 8008804:	4a78      	ldr	r2, [pc, #480]	; (80089e8 <GetMoon+0xba8>)
 8008806:	e9c2 3400 	strd	r3, r4, [r2]
    l += .045874 * E * sin(2 * phase - calc->aux.sanomaly) + .041024 * E * sin(anomaly - calc->aux.sanomaly) - .034718 * sin(phase) - E * .030465 * sin(calc->aux.sanomaly + anomaly);
 800880a:	4b7a      	ldr	r3, [pc, #488]	; (80089f4 <GetMoon+0xbb4>)
 800880c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008810:	a36d      	add	r3, pc, #436	; (adr r3, 80089c8 <GetMoon+0xb88>)
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	f7f7 fef9 	bl	800060c <__aeabi_dmul>
 800881a:	4603      	mov	r3, r0
 800881c:	460c      	mov	r4, r1
 800881e:	461d      	mov	r5, r3
 8008820:	4626      	mov	r6, r4
 8008822:	4b72      	ldr	r3, [pc, #456]	; (80089ec <GetMoon+0xbac>)
 8008824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	f7f7 fd38 	bl	80002a0 <__adddf3>
 8008830:	4603      	mov	r3, r0
 8008832:	460c      	mov	r4, r1
 8008834:	4618      	mov	r0, r3
 8008836:	4621      	mov	r1, r4
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800883e:	461a      	mov	r2, r3
 8008840:	4623      	mov	r3, r4
 8008842:	f7f7 fd2b 	bl	800029c <__aeabi_dsub>
 8008846:	4603      	mov	r3, r0
 8008848:	460c      	mov	r4, r1
 800884a:	ec44 3b17 	vmov	d7, r3, r4
 800884e:	eeb0 0a47 	vmov.f32	s0, s14
 8008852:	eef0 0a67 	vmov.f32	s1, s15
 8008856:	f010 fd17 	bl	8019288 <sin>
 800885a:	ec54 3b10 	vmov	r3, r4, d0
 800885e:	461a      	mov	r2, r3
 8008860:	4623      	mov	r3, r4
 8008862:	4628      	mov	r0, r5
 8008864:	4631      	mov	r1, r6
 8008866:	f7f7 fed1 	bl	800060c <__aeabi_dmul>
 800886a:	4603      	mov	r3, r0
 800886c:	460c      	mov	r4, r1
 800886e:	4698      	mov	r8, r3
 8008870:	46a1      	mov	r9, r4
 8008872:	4b60      	ldr	r3, [pc, #384]	; (80089f4 <GetMoon+0xbb4>)
 8008874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008878:	a355      	add	r3, pc, #340	; (adr r3, 80089d0 <GetMoon+0xb90>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f7 fec5 	bl	800060c <__aeabi_dmul>
 8008882:	4603      	mov	r3, r0
 8008884:	460c      	mov	r4, r1
 8008886:	461d      	mov	r5, r3
 8008888:	4626      	mov	r6, r4
 800888a:	4b59      	ldr	r3, [pc, #356]	; (80089f0 <GetMoon+0xbb0>)
 800888c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8008896:	461a      	mov	r2, r3
 8008898:	4623      	mov	r3, r4
 800889a:	f7f7 fcff 	bl	800029c <__aeabi_dsub>
 800889e:	4603      	mov	r3, r0
 80088a0:	460c      	mov	r4, r1
 80088a2:	ec44 3b17 	vmov	d7, r3, r4
 80088a6:	eeb0 0a47 	vmov.f32	s0, s14
 80088aa:	eef0 0a67 	vmov.f32	s1, s15
 80088ae:	f010 fceb 	bl	8019288 <sin>
 80088b2:	ec54 3b10 	vmov	r3, r4, d0
 80088b6:	461a      	mov	r2, r3
 80088b8:	4623      	mov	r3, r4
 80088ba:	4628      	mov	r0, r5
 80088bc:	4631      	mov	r1, r6
 80088be:	f7f7 fea5 	bl	800060c <__aeabi_dmul>
 80088c2:	4603      	mov	r3, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	461a      	mov	r2, r3
 80088c8:	4623      	mov	r3, r4
 80088ca:	4640      	mov	r0, r8
 80088cc:	4649      	mov	r1, r9
 80088ce:	f7f7 fce7 	bl	80002a0 <__adddf3>
 80088d2:	4603      	mov	r3, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	4625      	mov	r5, r4
 80088d8:	461c      	mov	r4, r3
 80088da:	4b44      	ldr	r3, [pc, #272]	; (80089ec <GetMoon+0xbac>)
 80088dc:	ed93 7b00 	vldr	d7, [r3]
 80088e0:	eeb0 0a47 	vmov.f32	s0, s14
 80088e4:	eef0 0a67 	vmov.f32	s1, s15
 80088e8:	f010 fcce 	bl	8019288 <sin>
 80088ec:	ec51 0b10 	vmov	r0, r1, d0
 80088f0:	a339      	add	r3, pc, #228	; (adr r3, 80089d8 <GetMoon+0xb98>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f7f7 fe89 	bl	800060c <__aeabi_dmul>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4620      	mov	r0, r4
 8008900:	4629      	mov	r1, r5
 8008902:	f7f7 fccb 	bl	800029c <__aeabi_dsub>
 8008906:	4603      	mov	r3, r0
 8008908:	460c      	mov	r4, r1
 800890a:	4698      	mov	r8, r3
 800890c:	46a1      	mov	r9, r4
 800890e:	4b39      	ldr	r3, [pc, #228]	; (80089f4 <GetMoon+0xbb4>)
 8008910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008914:	a332      	add	r3, pc, #200	; (adr r3, 80089e0 <GetMoon+0xba0>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f7f7 fe77 	bl	800060c <__aeabi_dmul>
 800891e:	4603      	mov	r3, r0
 8008920:	460c      	mov	r4, r1
 8008922:	461d      	mov	r5, r3
 8008924:	4626      	mov	r6, r4
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 800892c:	4b30      	ldr	r3, [pc, #192]	; (80089f0 <GetMoon+0xbb0>)
 800892e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008932:	461a      	mov	r2, r3
 8008934:	4623      	mov	r3, r4
 8008936:	f7f7 fcb3 	bl	80002a0 <__adddf3>
 800893a:	4603      	mov	r3, r0
 800893c:	460c      	mov	r4, r1
 800893e:	ec44 3b17 	vmov	d7, r3, r4
 8008942:	eeb0 0a47 	vmov.f32	s0, s14
 8008946:	eef0 0a67 	vmov.f32	s1, s15
 800894a:	f010 fc9d 	bl	8019288 <sin>
 800894e:	ec54 3b10 	vmov	r3, r4, d0
 8008952:	461a      	mov	r2, r3
 8008954:	4623      	mov	r3, r4
 8008956:	4628      	mov	r0, r5
 8008958:	4631      	mov	r1, r6
 800895a:	f7f7 fe57 	bl	800060c <__aeabi_dmul>
 800895e:	4603      	mov	r3, r0
 8008960:	460c      	mov	r4, r1
 8008962:	461a      	mov	r2, r3
 8008964:	4623      	mov	r3, r4
 8008966:	4640      	mov	r0, r8
 8008968:	4649      	mov	r1, r9
 800896a:	f7f7 fc97 	bl	800029c <__aeabi_dsub>
 800896e:	4603      	mov	r3, r0
 8008970:	460c      	mov	r4, r1
 8008972:	4618      	mov	r0, r3
 8008974:	4621      	mov	r1, r4
 8008976:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <GetMoon+0xba8>)
 8008978:	e9d3 3400 	ldrd	r3, r4, [r3]
 800897c:	461a      	mov	r2, r3
 800897e:	4623      	mov	r3, r4
 8008980:	f7f7 fc8e 	bl	80002a0 <__adddf3>
 8008984:	4603      	mov	r3, r0
 8008986:	460c      	mov	r4, r1
 8008988:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <GetMoon+0xba8>)
 800898a:	e9c2 3400 	strd	r3, r4, [r2]
    l += .015326 * sin(2 * (phase - node)) - .012528 * sin(2 * node + anomaly) - .01098 * sin(2 * node - anomaly) + .010674 * sin(4 * phase - anomaly);
 800898e:	4b17      	ldr	r3, [pc, #92]	; (80089ec <GetMoon+0xbac>)
 8008990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008994:	4b18      	ldr	r3, [pc, #96]	; (80089f8 <GetMoon+0xbb8>)
 8008996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800899a:	461a      	mov	r2, r3
 800899c:	4623      	mov	r3, r4
 800899e:	f7f7 fc7d 	bl	800029c <__aeabi_dsub>
 80089a2:	4603      	mov	r3, r0
 80089a4:	460c      	mov	r4, r1
 80089a6:	4618      	mov	r0, r3
 80089a8:	4621      	mov	r1, r4
 80089aa:	e027      	b.n	80089fc <GetMoon+0xbbc>
 80089ac:	f3af 8000 	nop.w
 80089b0:	b877ab32 	.word	0xb877ab32
 80089b4:	3fae1a1d 	.word	0x3fae1a1d
 80089b8:	29e0a41a 	.word	0x29e0a41a
 80089bc:	3fad4ae4 	.word	0x3fad4ae4
 80089c0:	5072085b 	.word	0x5072085b
 80089c4:	3fab4cc2 	.word	0x3fab4cc2
 80089c8:	03793144 	.word	0x03793144
 80089cc:	3fa77ccc 	.word	0x3fa77ccc
 80089d0:	04b3c3e7 	.word	0x04b3c3e7
 80089d4:	3fa50119 	.word	0x3fa50119
 80089d8:	c52a411c 	.word	0xc52a411c
 80089dc:	3fa1c68e 	.word	0x3fa1c68e
 80089e0:	8ab0c88a 	.word	0x8ab0c88a
 80089e4:	3f9f3237 	.word	0x3f9f3237
 80089e8:	20000680 	.word	0x20000680
 80089ec:	20000660 	.word	0x20000660
 80089f0:	20000668 	.word	0x20000668
 80089f4:	20000678 	.word	0x20000678
 80089f8:	20000670 	.word	0x20000670
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	f7f7 fc4e 	bl	80002a0 <__adddf3>
 8008a04:	4603      	mov	r3, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	ec44 3b17 	vmov	d7, r3, r4
 8008a0c:	eeb0 0a47 	vmov.f32	s0, s14
 8008a10:	eef0 0a67 	vmov.f32	s1, s15
 8008a14:	f010 fc38 	bl	8019288 <sin>
 8008a18:	ec51 0b10 	vmov	r0, r1, d0
 8008a1c:	a3e3      	add	r3, pc, #908	; (adr r3, 8008dac <GetMoon+0xf6c>)
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f7f7 fdf3 	bl	800060c <__aeabi_dmul>
 8008a26:	4603      	mov	r3, r0
 8008a28:	460c      	mov	r4, r1
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	4626      	mov	r6, r4
 8008a2e:	4bd8      	ldr	r3, [pc, #864]	; (8008d90 <GetMoon+0xf50>)
 8008a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	f7f7 fc32 	bl	80002a0 <__adddf3>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	4618      	mov	r0, r3
 8008a42:	4621      	mov	r1, r4
 8008a44:	4bd3      	ldr	r3, [pc, #844]	; (8008d94 <GetMoon+0xf54>)
 8008a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	f7f7 fc27 	bl	80002a0 <__adddf3>
 8008a52:	4603      	mov	r3, r0
 8008a54:	460c      	mov	r4, r1
 8008a56:	ec44 3b17 	vmov	d7, r3, r4
 8008a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8008a5e:	eef0 0a67 	vmov.f32	s1, s15
 8008a62:	f010 fc11 	bl	8019288 <sin>
 8008a66:	ec51 0b10 	vmov	r0, r1, d0
 8008a6a:	a3bb      	add	r3, pc, #748	; (adr r3, 8008d58 <GetMoon+0xf18>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fdcc 	bl	800060c <__aeabi_dmul>
 8008a74:	4603      	mov	r3, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	4631      	mov	r1, r6
 8008a80:	f7f7 fc0c 	bl	800029c <__aeabi_dsub>
 8008a84:	4603      	mov	r3, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	461d      	mov	r5, r3
 8008a8a:	4626      	mov	r6, r4
 8008a8c:	4bc0      	ldr	r3, [pc, #768]	; (8008d90 <GetMoon+0xf50>)
 8008a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	f7f7 fc03 	bl	80002a0 <__adddf3>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4bbc      	ldr	r3, [pc, #752]	; (8008d94 <GetMoon+0xf54>)
 8008aa4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4623      	mov	r3, r4
 8008aac:	f7f7 fbf6 	bl	800029c <__aeabi_dsub>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	ec44 3b17 	vmov	d7, r3, r4
 8008ab8:	eeb0 0a47 	vmov.f32	s0, s14
 8008abc:	eef0 0a67 	vmov.f32	s1, s15
 8008ac0:	f010 fbe2 	bl	8019288 <sin>
 8008ac4:	ec51 0b10 	vmov	r0, r1, d0
 8008ac8:	a3a5      	add	r3, pc, #660	; (adr r3, 8008d60 <GetMoon+0xf20>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	f7f7 fd9d 	bl	800060c <__aeabi_dmul>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4623      	mov	r3, r4
 8008ada:	4628      	mov	r0, r5
 8008adc:	4631      	mov	r1, r6
 8008ade:	f7f7 fbdd 	bl	800029c <__aeabi_dsub>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	461d      	mov	r5, r3
 8008ae8:	4626      	mov	r6, r4
 8008aea:	4bab      	ldr	r3, [pc, #684]	; (8008d98 <GetMoon+0xf58>)
 8008aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	4ba9      	ldr	r3, [pc, #676]	; (8008d9c <GetMoon+0xf5c>)
 8008af6:	f7f7 fd89 	bl	800060c <__aeabi_dmul>
 8008afa:	4603      	mov	r3, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	4618      	mov	r0, r3
 8008b00:	4621      	mov	r1, r4
 8008b02:	4ba4      	ldr	r3, [pc, #656]	; (8008d94 <GetMoon+0xf54>)
 8008b04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4623      	mov	r3, r4
 8008b0c:	f7f7 fbc6 	bl	800029c <__aeabi_dsub>
 8008b10:	4603      	mov	r3, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	ec44 3b17 	vmov	d7, r3, r4
 8008b18:	eeb0 0a47 	vmov.f32	s0, s14
 8008b1c:	eef0 0a67 	vmov.f32	s1, s15
 8008b20:	f010 fbb2 	bl	8019288 <sin>
 8008b24:	ec51 0b10 	vmov	r0, r1, d0
 8008b28:	a38f      	add	r3, pc, #572	; (adr r3, 8008d68 <GetMoon+0xf28>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fd6d 	bl	800060c <__aeabi_dmul>
 8008b32:	4603      	mov	r3, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	461a      	mov	r2, r3
 8008b38:	4623      	mov	r3, r4
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	f7f7 fbaf 	bl	80002a0 <__adddf3>
 8008b42:	4603      	mov	r3, r0
 8008b44:	460c      	mov	r4, r1
 8008b46:	4618      	mov	r0, r3
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4b95      	ldr	r3, [pc, #596]	; (8008da0 <GetMoon+0xf60>)
 8008b4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b50:	461a      	mov	r2, r3
 8008b52:	4623      	mov	r3, r4
 8008b54:	f7f7 fba4 	bl	80002a0 <__adddf3>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	4a90      	ldr	r2, [pc, #576]	; (8008da0 <GetMoon+0xf60>)
 8008b5e:	e9c2 3400 	strd	r3, r4, [r2]
    l += .010034 * sin(3 * anomaly) + .008548 * sin(4 * phase - 2 * anomaly);
 8008b62:	4b8c      	ldr	r3, [pc, #560]	; (8008d94 <GetMoon+0xf54>)
 8008b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b68:	f04f 0200 	mov.w	r2, #0
 8008b6c:	4b8d      	ldr	r3, [pc, #564]	; (8008da4 <GetMoon+0xf64>)
 8008b6e:	f7f7 fd4d 	bl	800060c <__aeabi_dmul>
 8008b72:	4603      	mov	r3, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	ec44 3b17 	vmov	d7, r3, r4
 8008b7a:	eeb0 0a47 	vmov.f32	s0, s14
 8008b7e:	eef0 0a67 	vmov.f32	s1, s15
 8008b82:	f010 fb81 	bl	8019288 <sin>
 8008b86:	ec51 0b10 	vmov	r0, r1, d0
 8008b8a:	a379      	add	r3, pc, #484	; (adr r3, 8008d70 <GetMoon+0xf30>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	f7f7 fd3c 	bl	800060c <__aeabi_dmul>
 8008b94:	4603      	mov	r3, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	4698      	mov	r8, r3
 8008b9a:	46a1      	mov	r9, r4
 8008b9c:	4b7e      	ldr	r3, [pc, #504]	; (8008d98 <GetMoon+0xf58>)
 8008b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	4b7d      	ldr	r3, [pc, #500]	; (8008d9c <GetMoon+0xf5c>)
 8008ba8:	f7f7 fd30 	bl	800060c <__aeabi_dmul>
 8008bac:	4603      	mov	r3, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	461d      	mov	r5, r3
 8008bb2:	4626      	mov	r6, r4
 8008bb4:	4b77      	ldr	r3, [pc, #476]	; (8008d94 <GetMoon+0xf54>)
 8008bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	f7f7 fb6f 	bl	80002a0 <__adddf3>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4623      	mov	r3, r4
 8008bca:	4628      	mov	r0, r5
 8008bcc:	4631      	mov	r1, r6
 8008bce:	f7f7 fb65 	bl	800029c <__aeabi_dsub>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	ec44 3b17 	vmov	d7, r3, r4
 8008bda:	eeb0 0a47 	vmov.f32	s0, s14
 8008bde:	eef0 0a67 	vmov.f32	s1, s15
 8008be2:	f010 fb51 	bl	8019288 <sin>
 8008be6:	ec51 0b10 	vmov	r0, r1, d0
 8008bea:	a363      	add	r3, pc, #396	; (adr r3, 8008d78 <GetMoon+0xf38>)
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	f7f7 fd0c 	bl	800060c <__aeabi_dmul>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	4649      	mov	r1, r9
 8008c00:	f7f7 fb4e 	bl	80002a0 <__adddf3>
 8008c04:	4603      	mov	r3, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	4618      	mov	r0, r3
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4b64      	ldr	r3, [pc, #400]	; (8008da0 <GetMoon+0xf60>)
 8008c0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c12:	461a      	mov	r2, r3
 8008c14:	4623      	mov	r3, r4
 8008c16:	f7f7 fb43 	bl	80002a0 <__adddf3>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	4a60      	ldr	r2, [pc, #384]	; (8008da0 <GetMoon+0xf60>)
 8008c20:	e9c2 3400 	strd	r3, r4, [r2]
    l += -E * .00791 * sin(calc->aux.sanomaly - anomaly + 2 * phase) - E * .006783 * sin(2 * phase + calc->aux.sanomaly) + .005162 * sin(anomaly - phase) + E * .005 * sin(calc->aux.sanomaly + phase);
 8008c24:	4b60      	ldr	r3, [pc, #384]	; (8008da8 <GetMoon+0xf68>)
 8008c26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c2a:	469a      	mov	sl, r3
 8008c2c:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8008c30:	a353      	add	r3, pc, #332	; (adr r3, 8008d80 <GetMoon+0xf40>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	4650      	mov	r0, sl
 8008c38:	4659      	mov	r1, fp
 8008c3a:	f7f7 fce7 	bl	800060c <__aeabi_dmul>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	460c      	mov	r4, r1
 8008c42:	461d      	mov	r5, r3
 8008c44:	4626      	mov	r6, r4
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8008c4c:	4b51      	ldr	r3, [pc, #324]	; (8008d94 <GetMoon+0xf54>)
 8008c4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c52:	461a      	mov	r2, r3
 8008c54:	4623      	mov	r3, r4
 8008c56:	f7f7 fb21 	bl	800029c <__aeabi_dsub>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	4698      	mov	r8, r3
 8008c60:	46a1      	mov	r9, r4
 8008c62:	4b4d      	ldr	r3, [pc, #308]	; (8008d98 <GetMoon+0xf58>)
 8008c64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	f7f7 fb18 	bl	80002a0 <__adddf3>
 8008c70:	4603      	mov	r3, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	461a      	mov	r2, r3
 8008c76:	4623      	mov	r3, r4
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	f7f7 fb10 	bl	80002a0 <__adddf3>
 8008c80:	4603      	mov	r3, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	ec44 3b17 	vmov	d7, r3, r4
 8008c88:	eeb0 0a47 	vmov.f32	s0, s14
 8008c8c:	eef0 0a67 	vmov.f32	s1, s15
 8008c90:	f010 fafa 	bl	8019288 <sin>
 8008c94:	ec54 3b10 	vmov	r3, r4, d0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4623      	mov	r3, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	f7f7 fcb4 	bl	800060c <__aeabi_dmul>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	461d      	mov	r5, r3
 8008caa:	4626      	mov	r6, r4
 8008cac:	4b3e      	ldr	r3, [pc, #248]	; (8008da8 <GetMoon+0xf68>)
 8008cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cb2:	a335      	add	r3, pc, #212	; (adr r3, 8008d88 <GetMoon+0xf48>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 fca8 	bl	800060c <__aeabi_dmul>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	4698      	mov	r8, r3
 8008cc2:	46a1      	mov	r9, r4
 8008cc4:	4b34      	ldr	r3, [pc, #208]	; (8008d98 <GetMoon+0xf58>)
 8008cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	f7f7 fae7 	bl	80002a0 <__adddf3>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	4621      	mov	r1, r4
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	f7f7 fadc 	bl	80002a0 <__adddf3>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	ec44 3b17 	vmov	d7, r3, r4
 8008cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8008cf4:	eef0 0a67 	vmov.f32	s1, s15
 8008cf8:	f010 fac6 	bl	8019288 <sin>
 8008cfc:	ec54 3b10 	vmov	r3, r4, d0
 8008d00:	461a      	mov	r2, r3
 8008d02:	4623      	mov	r3, r4
 8008d04:	4640      	mov	r0, r8
 8008d06:	4649      	mov	r1, r9
 8008d08:	f7f7 fc80 	bl	800060c <__aeabi_dmul>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	461a      	mov	r2, r3
 8008d12:	4623      	mov	r3, r4
 8008d14:	4628      	mov	r0, r5
 8008d16:	4631      	mov	r1, r6
 8008d18:	f7f7 fac0 	bl	800029c <__aeabi_dsub>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	461d      	mov	r5, r3
 8008d22:	4626      	mov	r6, r4
 8008d24:	4b1b      	ldr	r3, [pc, #108]	; (8008d94 <GetMoon+0xf54>)
 8008d26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d2a:	4b1b      	ldr	r3, [pc, #108]	; (8008d98 <GetMoon+0xf58>)
 8008d2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d30:	461a      	mov	r2, r3
 8008d32:	4623      	mov	r3, r4
 8008d34:	f7f7 fab2 	bl	800029c <__aeabi_dsub>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	ec44 3b17 	vmov	d7, r3, r4
 8008d40:	eeb0 0a47 	vmov.f32	s0, s14
 8008d44:	eef0 0a67 	vmov.f32	s1, s15
 8008d48:	f010 fa9e 	bl	8019288 <sin>
 8008d4c:	ec51 0b10 	vmov	r0, r1, d0
 8008d50:	e030      	b.n	8008db4 <GetMoon+0xf74>
 8008d52:	bf00      	nop
 8008d54:	f3af 8000 	nop.w
 8008d58:	b24638c9 	.word	0xb24638c9
 8008d5c:	3f89a847 	.word	0x3f89a847
 8008d60:	a747d806 	.word	0xa747d806
 8008d64:	3f867cae 	.word	0x3f867cae
 8008d68:	07570c56 	.word	0x07570c56
 8008d6c:	3f85dc40 	.word	0x3f85dc40
 8008d70:	aec8d5c7 	.word	0xaec8d5c7
 8008d74:	3f848cb4 	.word	0x3f848cb4
 8008d78:	2391d580 	.word	0x2391d580
 8008d7c:	3f81819d 	.word	0x3f81819d
 8008d80:	3a7daa50 	.word	0x3a7daa50
 8008d84:	3f80331e 	.word	0x3f80331e
 8008d88:	b2b34613 	.word	0xb2b34613
 8008d8c:	3f7bc87d 	.word	0x3f7bc87d
 8008d90:	20000670 	.word	0x20000670
 8008d94:	20000668 	.word	0x20000668
 8008d98:	20000660 	.word	0x20000660
 8008d9c:	40100000 	.word	0x40100000
 8008da0:	20000680 	.word	0x20000680
 8008da4:	40080000 	.word	0x40080000
 8008da8:	20000678 	.word	0x20000678
 8008dac:	e63a5c1c 	.word	0xe63a5c1c
 8008db0:	3f8f633c 	.word	0x3f8f633c
 8008db4:	a3e5      	add	r3, pc, #916	; (adr r3, 800914c <GetMoon+0x130c>)
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f7f7 fc27 	bl	800060c <__aeabi_dmul>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	4623      	mov	r3, r4
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	4631      	mov	r1, r6
 8008dca:	f7f7 fa69 	bl	80002a0 <__adddf3>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	461d      	mov	r5, r3
 8008dd4:	4626      	mov	r6, r4
 8008dd6:	4bd6      	ldr	r3, [pc, #856]	; (8009130 <GetMoon+0x12f0>)
 8008dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ddc:	a3c6      	add	r3, pc, #792	; (adr r3, 80090f8 <GetMoon+0x12b8>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 fc13 	bl	800060c <__aeabi_dmul>
 8008de6:	4603      	mov	r3, r0
 8008de8:	460c      	mov	r4, r1
 8008dea:	4698      	mov	r8, r3
 8008dec:	46a1      	mov	r9, r4
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8008df4:	4bcf      	ldr	r3, [pc, #828]	; (8009134 <GetMoon+0x12f4>)
 8008df6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	f7f7 fa4f 	bl	80002a0 <__adddf3>
 8008e02:	4603      	mov	r3, r0
 8008e04:	460c      	mov	r4, r1
 8008e06:	ec44 3b17 	vmov	d7, r3, r4
 8008e0a:	eeb0 0a47 	vmov.f32	s0, s14
 8008e0e:	eef0 0a67 	vmov.f32	s1, s15
 8008e12:	f010 fa39 	bl	8019288 <sin>
 8008e16:	ec54 3b10 	vmov	r3, r4, d0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4623      	mov	r3, r4
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fbf3 	bl	800060c <__aeabi_dmul>
 8008e26:	4603      	mov	r3, r0
 8008e28:	460c      	mov	r4, r1
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4623      	mov	r3, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	4631      	mov	r1, r6
 8008e32:	f7f7 fa35 	bl	80002a0 <__adddf3>
 8008e36:	4603      	mov	r3, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4bbe      	ldr	r3, [pc, #760]	; (8009138 <GetMoon+0x12f8>)
 8008e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e44:	461a      	mov	r2, r3
 8008e46:	4623      	mov	r3, r4
 8008e48:	f7f7 fa2a 	bl	80002a0 <__adddf3>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	4ab9      	ldr	r2, [pc, #740]	; (8009138 <GetMoon+0x12f8>)
 8008e52:	e9c2 3400 	strd	r3, r4, [r2]
    l += .003862 * sin(4 * phase) + E * .004049 * sin(anomaly - calc->aux.sanomaly + 2 * phase) + .003996 * sin(2 * (anomaly + phase)) + .003665 * sin(2 * phase - 3 * anomaly);
 8008e56:	4bb7      	ldr	r3, [pc, #732]	; (8009134 <GetMoon+0x12f4>)
 8008e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e5c:	f04f 0200 	mov.w	r2, #0
 8008e60:	4bb6      	ldr	r3, [pc, #728]	; (800913c <GetMoon+0x12fc>)
 8008e62:	f7f7 fbd3 	bl	800060c <__aeabi_dmul>
 8008e66:	4603      	mov	r3, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	ec44 3b17 	vmov	d7, r3, r4
 8008e6e:	eeb0 0a47 	vmov.f32	s0, s14
 8008e72:	eef0 0a67 	vmov.f32	s1, s15
 8008e76:	f010 fa07 	bl	8019288 <sin>
 8008e7a:	ec51 0b10 	vmov	r0, r1, d0
 8008e7e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009100 <GetMoon+0x12c0>)
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f7f7 fbc2 	bl	800060c <__aeabi_dmul>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4698      	mov	r8, r3
 8008e8e:	46a1      	mov	r9, r4
 8008e90:	4ba7      	ldr	r3, [pc, #668]	; (8009130 <GetMoon+0x12f0>)
 8008e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e96:	a39c      	add	r3, pc, #624	; (adr r3, 8009108 <GetMoon+0x12c8>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f7f7 fbb6 	bl	800060c <__aeabi_dmul>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	469a      	mov	sl, r3
 8008ea6:	46a3      	mov	fp, r4
 8008ea8:	4ba5      	ldr	r3, [pc, #660]	; (8009140 <GetMoon+0x1300>)
 8008eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	f7f7 f9f0 	bl	800029c <__aeabi_dsub>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	461d      	mov	r5, r3
 8008ec2:	4626      	mov	r6, r4
 8008ec4:	4b9b      	ldr	r3, [pc, #620]	; (8009134 <GetMoon+0x12f4>)
 8008ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	f7f7 f9e7 	bl	80002a0 <__adddf3>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	4623      	mov	r3, r4
 8008eda:	4628      	mov	r0, r5
 8008edc:	4631      	mov	r1, r6
 8008ede:	f7f7 f9df 	bl	80002a0 <__adddf3>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	ec44 3b17 	vmov	d7, r3, r4
 8008eea:	eeb0 0a47 	vmov.f32	s0, s14
 8008eee:	eef0 0a67 	vmov.f32	s1, s15
 8008ef2:	f010 f9c9 	bl	8019288 <sin>
 8008ef6:	ec54 3b10 	vmov	r3, r4, d0
 8008efa:	461a      	mov	r2, r3
 8008efc:	4623      	mov	r3, r4
 8008efe:	4650      	mov	r0, sl
 8008f00:	4659      	mov	r1, fp
 8008f02:	f7f7 fb83 	bl	800060c <__aeabi_dmul>
 8008f06:	4603      	mov	r3, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4623      	mov	r3, r4
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4649      	mov	r1, r9
 8008f12:	f7f7 f9c5 	bl	80002a0 <__adddf3>
 8008f16:	4603      	mov	r3, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	461d      	mov	r5, r3
 8008f1c:	4626      	mov	r6, r4
 8008f1e:	4b88      	ldr	r3, [pc, #544]	; (8009140 <GetMoon+0x1300>)
 8008f20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f24:	4b83      	ldr	r3, [pc, #524]	; (8009134 <GetMoon+0x12f4>)
 8008f26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	4623      	mov	r3, r4
 8008f2e:	f7f7 f9b7 	bl	80002a0 <__adddf3>
 8008f32:	4603      	mov	r3, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	4618      	mov	r0, r3
 8008f38:	4621      	mov	r1, r4
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	f7f7 f9af 	bl	80002a0 <__adddf3>
 8008f42:	4603      	mov	r3, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	ec44 3b17 	vmov	d7, r3, r4
 8008f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8008f4e:	eef0 0a67 	vmov.f32	s1, s15
 8008f52:	f010 f999 	bl	8019288 <sin>
 8008f56:	ec51 0b10 	vmov	r0, r1, d0
 8008f5a:	a36d      	add	r3, pc, #436	; (adr r3, 8009110 <GetMoon+0x12d0>)
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f7f7 fb54 	bl	800060c <__aeabi_dmul>
 8008f64:	4603      	mov	r3, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4623      	mov	r3, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	4631      	mov	r1, r6
 8008f70:	f7f7 f996 	bl	80002a0 <__adddf3>
 8008f74:	4603      	mov	r3, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	4625      	mov	r5, r4
 8008f7a:	461c      	mov	r4, r3
 8008f7c:	4b6d      	ldr	r3, [pc, #436]	; (8009134 <GetMoon+0x12f4>)
 8008f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	f7f7 f98b 	bl	80002a0 <__adddf3>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4690      	mov	r8, r2
 8008f90:	4699      	mov	r9, r3
 8008f92:	4b6b      	ldr	r3, [pc, #428]	; (8009140 <GetMoon+0x1300>)
 8008f94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f98:	f04f 0200 	mov.w	r2, #0
 8008f9c:	4b69      	ldr	r3, [pc, #420]	; (8009144 <GetMoon+0x1304>)
 8008f9e:	f7f7 fb35 	bl	800060c <__aeabi_dmul>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f7f7 f977 	bl	800029c <__aeabi_dsub>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	ec43 2b17 	vmov	d7, r2, r3
 8008fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8008fba:	eef0 0a67 	vmov.f32	s1, s15
 8008fbe:	f010 f963 	bl	8019288 <sin>
 8008fc2:	ec51 0b10 	vmov	r0, r1, d0
 8008fc6:	a354      	add	r3, pc, #336	; (adr r3, 8009118 <GetMoon+0x12d8>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f7f7 fb1e 	bl	800060c <__aeabi_dmul>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 f962 	bl	80002a0 <__adddf3>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4b54      	ldr	r3, [pc, #336]	; (8009138 <GetMoon+0x12f8>)
 8008fe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fea:	461a      	mov	r2, r3
 8008fec:	4623      	mov	r3, r4
 8008fee:	f7f7 f957 	bl	80002a0 <__adddf3>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	4a50      	ldr	r2, [pc, #320]	; (8009138 <GetMoon+0x12f8>)
 8008ff8:	e9c2 3400 	strd	r3, r4, [r2]
    l += E * 2.695E-3 * sin(2 * anomaly - calc->aux.sanomaly) + 2.602E-3 * sin(anomaly - 2*(node+phase));
 8008ffc:	4b4c      	ldr	r3, [pc, #304]	; (8009130 <GetMoon+0x12f0>)
 8008ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009002:	a347      	add	r3, pc, #284	; (adr r3, 8009120 <GetMoon+0x12e0>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 fb00 	bl	800060c <__aeabi_dmul>
 800900c:	4603      	mov	r3, r0
 800900e:	460c      	mov	r4, r1
 8009010:	461d      	mov	r5, r3
 8009012:	4626      	mov	r6, r4
 8009014:	4b4a      	ldr	r3, [pc, #296]	; (8009140 <GetMoon+0x1300>)
 8009016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	f7f7 f93f 	bl	80002a0 <__adddf3>
 8009022:	4603      	mov	r3, r0
 8009024:	460c      	mov	r4, r1
 8009026:	4618      	mov	r0, r3
 8009028:	4621      	mov	r1, r4
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8009030:	461a      	mov	r2, r3
 8009032:	4623      	mov	r3, r4
 8009034:	f7f7 f932 	bl	800029c <__aeabi_dsub>
 8009038:	4603      	mov	r3, r0
 800903a:	460c      	mov	r4, r1
 800903c:	ec44 3b17 	vmov	d7, r3, r4
 8009040:	eeb0 0a47 	vmov.f32	s0, s14
 8009044:	eef0 0a67 	vmov.f32	s1, s15
 8009048:	f010 f91e 	bl	8019288 <sin>
 800904c:	ec54 3b10 	vmov	r3, r4, d0
 8009050:	461a      	mov	r2, r3
 8009052:	4623      	mov	r3, r4
 8009054:	4628      	mov	r0, r5
 8009056:	4631      	mov	r1, r6
 8009058:	f7f7 fad8 	bl	800060c <__aeabi_dmul>
 800905c:	4603      	mov	r3, r0
 800905e:	460c      	mov	r4, r1
 8009060:	4698      	mov	r8, r3
 8009062:	46a1      	mov	r9, r4
 8009064:	4b36      	ldr	r3, [pc, #216]	; (8009140 <GetMoon+0x1300>)
 8009066:	e9d3 5600 	ldrd	r5, r6, [r3]
 800906a:	4b37      	ldr	r3, [pc, #220]	; (8009148 <GetMoon+0x1308>)
 800906c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009070:	4b30      	ldr	r3, [pc, #192]	; (8009134 <GetMoon+0x12f4>)
 8009072:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009076:	461a      	mov	r2, r3
 8009078:	4623      	mov	r3, r4
 800907a:	f7f7 f911 	bl	80002a0 <__adddf3>
 800907e:	4603      	mov	r3, r0
 8009080:	460c      	mov	r4, r1
 8009082:	4618      	mov	r0, r3
 8009084:	4621      	mov	r1, r4
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	f7f7 f909 	bl	80002a0 <__adddf3>
 800908e:	4603      	mov	r3, r0
 8009090:	460c      	mov	r4, r1
 8009092:	461a      	mov	r2, r3
 8009094:	4623      	mov	r3, r4
 8009096:	4628      	mov	r0, r5
 8009098:	4631      	mov	r1, r6
 800909a:	f7f7 f8ff 	bl	800029c <__aeabi_dsub>
 800909e:	4603      	mov	r3, r0
 80090a0:	460c      	mov	r4, r1
 80090a2:	ec44 3b17 	vmov	d7, r3, r4
 80090a6:	eeb0 0a47 	vmov.f32	s0, s14
 80090aa:	eef0 0a67 	vmov.f32	s1, s15
 80090ae:	f010 f8eb 	bl	8019288 <sin>
 80090b2:	ec51 0b10 	vmov	r0, r1, d0
 80090b6:	a31c      	add	r3, pc, #112	; (adr r3, 8009128 <GetMoon+0x12e8>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f7f7 faa6 	bl	800060c <__aeabi_dmul>
 80090c0:	4603      	mov	r3, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	461a      	mov	r2, r3
 80090c6:	4623      	mov	r3, r4
 80090c8:	4640      	mov	r0, r8
 80090ca:	4649      	mov	r1, r9
 80090cc:	f7f7 f8e8 	bl	80002a0 <__adddf3>
 80090d0:	4603      	mov	r3, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	4618      	mov	r0, r3
 80090d6:	4621      	mov	r1, r4
 80090d8:	4b17      	ldr	r3, [pc, #92]	; (8009138 <GetMoon+0x12f8>)
 80090da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090de:	461a      	mov	r2, r3
 80090e0:	4623      	mov	r3, r4
 80090e2:	f7f7 f8dd 	bl	80002a0 <__adddf3>
 80090e6:	4603      	mov	r3, r0
 80090e8:	460c      	mov	r4, r1
 80090ea:	4a13      	ldr	r2, [pc, #76]	; (8009138 <GetMoon+0x12f8>)
 80090ec:	e9c2 3400 	strd	r3, r4, [r2]
 80090f0:	e030      	b.n	8009154 <GetMoon+0x1314>
 80090f2:	bf00      	nop
 80090f4:	f3af 8000 	nop.w
 80090f8:	47ae147b 	.word	0x47ae147b
 80090fc:	3f747ae1 	.word	0x3f747ae1
 8009100:	764f11b6 	.word	0x764f11b6
 8009104:	3f6fa333 	.word	0x3f6fa333
 8009108:	294dd723 	.word	0x294dd723
 800910c:	3f7095af 	.word	0x3f7095af
 8009110:	15097c81 	.word	0x15097c81
 8009114:	3f705e1c 	.word	0x3f705e1c
 8009118:	e47991bc 	.word	0xe47991bc
 800911c:	3f6e060f 	.word	0x3f6e060f
 8009120:	1b9b66f9 	.word	0x1b9b66f9
 8009124:	3f6613d3 	.word	0x3f6613d3
 8009128:	1cef2410 	.word	0x1cef2410
 800912c:	3f6550ca 	.word	0x3f6550ca
 8009130:	20000678 	.word	0x20000678
 8009134:	20000660 	.word	0x20000660
 8009138:	20000680 	.word	0x20000680
 800913c:	40100000 	.word	0x40100000
 8009140:	20000668 	.word	0x20000668
 8009144:	40080000 	.word	0x40080000
 8009148:	20000670 	.word	0x20000670
 800914c:	d2e94680 	.word	0xd2e94680
 8009150:	3f7524bf 	.word	0x3f7524bf
    l += E * 2.396E-3 * sin(2*(phase - anomaly) - calc->aux.sanomaly) - 2.349E-3 * sin(anomaly+phase);
 8009154:	4bd2      	ldr	r3, [pc, #840]	; (80094a0 <GetMoon+0x1660>)
 8009156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800915a:	a3c5      	add	r3, pc, #788	; (adr r3, 8009470 <GetMoon+0x1630>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	f7f7 fa54 	bl	800060c <__aeabi_dmul>
 8009164:	4603      	mov	r3, r0
 8009166:	460c      	mov	r4, r1
 8009168:	461d      	mov	r5, r3
 800916a:	4626      	mov	r6, r4
 800916c:	4bcd      	ldr	r3, [pc, #820]	; (80094a4 <GetMoon+0x1664>)
 800916e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009172:	4bcd      	ldr	r3, [pc, #820]	; (80094a8 <GetMoon+0x1668>)
 8009174:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009178:	461a      	mov	r2, r3
 800917a:	4623      	mov	r3, r4
 800917c:	f7f7 f88e 	bl	800029c <__aeabi_dsub>
 8009180:	4603      	mov	r3, r0
 8009182:	460c      	mov	r4, r1
 8009184:	4618      	mov	r0, r3
 8009186:	4621      	mov	r1, r4
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	f7f7 f888 	bl	80002a0 <__adddf3>
 8009190:	4603      	mov	r3, r0
 8009192:	460c      	mov	r4, r1
 8009194:	4618      	mov	r0, r3
 8009196:	4621      	mov	r1, r4
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800919e:	461a      	mov	r2, r3
 80091a0:	4623      	mov	r3, r4
 80091a2:	f7f7 f87b 	bl	800029c <__aeabi_dsub>
 80091a6:	4603      	mov	r3, r0
 80091a8:	460c      	mov	r4, r1
 80091aa:	ec44 3b17 	vmov	d7, r3, r4
 80091ae:	eeb0 0a47 	vmov.f32	s0, s14
 80091b2:	eef0 0a67 	vmov.f32	s1, s15
 80091b6:	f010 f867 	bl	8019288 <sin>
 80091ba:	ec54 3b10 	vmov	r3, r4, d0
 80091be:	461a      	mov	r2, r3
 80091c0:	4623      	mov	r3, r4
 80091c2:	4628      	mov	r0, r5
 80091c4:	4631      	mov	r1, r6
 80091c6:	f7f7 fa21 	bl	800060c <__aeabi_dmul>
 80091ca:	4603      	mov	r3, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	461d      	mov	r5, r3
 80091d0:	4626      	mov	r6, r4
 80091d2:	4bb5      	ldr	r3, [pc, #724]	; (80094a8 <GetMoon+0x1668>)
 80091d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091d8:	4bb2      	ldr	r3, [pc, #712]	; (80094a4 <GetMoon+0x1664>)
 80091da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091de:	461a      	mov	r2, r3
 80091e0:	4623      	mov	r3, r4
 80091e2:	f7f7 f85d 	bl	80002a0 <__adddf3>
 80091e6:	4603      	mov	r3, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	ec44 3b17 	vmov	d7, r3, r4
 80091ee:	eeb0 0a47 	vmov.f32	s0, s14
 80091f2:	eef0 0a67 	vmov.f32	s1, s15
 80091f6:	f010 f847 	bl	8019288 <sin>
 80091fa:	ec51 0b10 	vmov	r0, r1, d0
 80091fe:	a39e      	add	r3, pc, #632	; (adr r3, 8009478 <GetMoon+0x1638>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 fa02 	bl	800060c <__aeabi_dmul>
 8009208:	4603      	mov	r3, r0
 800920a:	460c      	mov	r4, r1
 800920c:	461a      	mov	r2, r3
 800920e:	4623      	mov	r3, r4
 8009210:	4628      	mov	r0, r5
 8009212:	4631      	mov	r1, r6
 8009214:	f7f7 f842 	bl	800029c <__aeabi_dsub>
 8009218:	4603      	mov	r3, r0
 800921a:	460c      	mov	r4, r1
 800921c:	4618      	mov	r0, r3
 800921e:	4621      	mov	r1, r4
 8009220:	4ba2      	ldr	r3, [pc, #648]	; (80094ac <GetMoon+0x166c>)
 8009222:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009226:	461a      	mov	r2, r3
 8009228:	4623      	mov	r3, r4
 800922a:	f7f7 f839 	bl	80002a0 <__adddf3>
 800922e:	4603      	mov	r3, r0
 8009230:	460c      	mov	r4, r1
 8009232:	4a9e      	ldr	r2, [pc, #632]	; (80094ac <GetMoon+0x166c>)
 8009234:	e9c2 3400 	strd	r3, r4, [r2]
    l += E * E * 2.249E-3 * sin(2*(phase-calc->aux.sanomaly)) - E * 2.125E-3 * sin(2*anomaly+calc->aux.sanomaly);
 8009238:	4b99      	ldr	r3, [pc, #612]	; (80094a0 <GetMoon+0x1660>)
 800923a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800923e:	4b98      	ldr	r3, [pc, #608]	; (80094a0 <GetMoon+0x1660>)
 8009240:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009244:	461a      	mov	r2, r3
 8009246:	4623      	mov	r3, r4
 8009248:	f7f7 f9e0 	bl	800060c <__aeabi_dmul>
 800924c:	4603      	mov	r3, r0
 800924e:	460c      	mov	r4, r1
 8009250:	4618      	mov	r0, r3
 8009252:	4621      	mov	r1, r4
 8009254:	a38a      	add	r3, pc, #552	; (adr r3, 8009480 <GetMoon+0x1640>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f9d7 	bl	800060c <__aeabi_dmul>
 800925e:	4603      	mov	r3, r0
 8009260:	460c      	mov	r4, r1
 8009262:	461d      	mov	r5, r3
 8009264:	4626      	mov	r6, r4
 8009266:	4b8f      	ldr	r3, [pc, #572]	; (80094a4 <GetMoon+0x1664>)
 8009268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8009272:	461a      	mov	r2, r3
 8009274:	4623      	mov	r3, r4
 8009276:	f7f7 f811 	bl	800029c <__aeabi_dsub>
 800927a:	4603      	mov	r3, r0
 800927c:	460c      	mov	r4, r1
 800927e:	4618      	mov	r0, r3
 8009280:	4621      	mov	r1, r4
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	f7f7 f80b 	bl	80002a0 <__adddf3>
 800928a:	4603      	mov	r3, r0
 800928c:	460c      	mov	r4, r1
 800928e:	ec44 3b17 	vmov	d7, r3, r4
 8009292:	eeb0 0a47 	vmov.f32	s0, s14
 8009296:	eef0 0a67 	vmov.f32	s1, s15
 800929a:	f00f fff5 	bl	8019288 <sin>
 800929e:	ec54 3b10 	vmov	r3, r4, d0
 80092a2:	461a      	mov	r2, r3
 80092a4:	4623      	mov	r3, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	4631      	mov	r1, r6
 80092aa:	f7f7 f9af 	bl	800060c <__aeabi_dmul>
 80092ae:	4603      	mov	r3, r0
 80092b0:	460c      	mov	r4, r1
 80092b2:	461d      	mov	r5, r3
 80092b4:	4626      	mov	r6, r4
 80092b6:	4b7a      	ldr	r3, [pc, #488]	; (80094a0 <GetMoon+0x1660>)
 80092b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092bc:	a372      	add	r3, pc, #456	; (adr r3, 8009488 <GetMoon+0x1648>)
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f7 f9a3 	bl	800060c <__aeabi_dmul>
 80092c6:	4603      	mov	r3, r0
 80092c8:	460c      	mov	r4, r1
 80092ca:	4698      	mov	r8, r3
 80092cc:	46a1      	mov	r9, r4
 80092ce:	4b76      	ldr	r3, [pc, #472]	; (80094a8 <GetMoon+0x1668>)
 80092d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	f7f6 ffe2 	bl	80002a0 <__adddf3>
 80092dc:	4603      	mov	r3, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	4618      	mov	r0, r3
 80092e2:	4621      	mov	r1, r4
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 80092ea:	461a      	mov	r2, r3
 80092ec:	4623      	mov	r3, r4
 80092ee:	f7f6 ffd7 	bl	80002a0 <__adddf3>
 80092f2:	4603      	mov	r3, r0
 80092f4:	460c      	mov	r4, r1
 80092f6:	ec44 3b17 	vmov	d7, r3, r4
 80092fa:	eeb0 0a47 	vmov.f32	s0, s14
 80092fe:	eef0 0a67 	vmov.f32	s1, s15
 8009302:	f00f ffc1 	bl	8019288 <sin>
 8009306:	ec54 3b10 	vmov	r3, r4, d0
 800930a:	461a      	mov	r2, r3
 800930c:	4623      	mov	r3, r4
 800930e:	4640      	mov	r0, r8
 8009310:	4649      	mov	r1, r9
 8009312:	f7f7 f97b 	bl	800060c <__aeabi_dmul>
 8009316:	4603      	mov	r3, r0
 8009318:	460c      	mov	r4, r1
 800931a:	461a      	mov	r2, r3
 800931c:	4623      	mov	r3, r4
 800931e:	4628      	mov	r0, r5
 8009320:	4631      	mov	r1, r6
 8009322:	f7f6 ffbb 	bl	800029c <__aeabi_dsub>
 8009326:	4603      	mov	r3, r0
 8009328:	460c      	mov	r4, r1
 800932a:	4618      	mov	r0, r3
 800932c:	4621      	mov	r1, r4
 800932e:	4b5f      	ldr	r3, [pc, #380]	; (80094ac <GetMoon+0x166c>)
 8009330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009334:	461a      	mov	r2, r3
 8009336:	4623      	mov	r3, r4
 8009338:	f7f6 ffb2 	bl	80002a0 <__adddf3>
 800933c:	4603      	mov	r3, r0
 800933e:	460c      	mov	r4, r1
 8009340:	4a5a      	ldr	r2, [pc, #360]	; (80094ac <GetMoon+0x166c>)
 8009342:	e9c2 3400 	strd	r3, r4, [r2]
    l += -E * E * 2.079E-3 * sin(2*calc->aux.sanomaly) + E * E * 2.059E-3 * sin(2*(phase-calc->aux.sanomaly)-anomaly);
 8009346:	4b56      	ldr	r3, [pc, #344]	; (80094a0 <GetMoon+0x1660>)
 8009348:	e9d3 3400 	ldrd	r3, r4, [r3]
 800934c:	60bb      	str	r3, [r7, #8]
 800934e:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	4b52      	ldr	r3, [pc, #328]	; (80094a0 <GetMoon+0x1660>)
 8009356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800935a:	461a      	mov	r2, r3
 800935c:	4623      	mov	r3, r4
 800935e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009362:	f7f7 f953 	bl	800060c <__aeabi_dmul>
 8009366:	4603      	mov	r3, r0
 8009368:	460c      	mov	r4, r1
 800936a:	4618      	mov	r0, r3
 800936c:	4621      	mov	r1, r4
 800936e:	a348      	add	r3, pc, #288	; (adr r3, 8009490 <GetMoon+0x1650>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f7f7 f94a 	bl	800060c <__aeabi_dmul>
 8009378:	4603      	mov	r3, r0
 800937a:	460c      	mov	r4, r1
 800937c:	4625      	mov	r5, r4
 800937e:	461c      	mov	r4, r3
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	f7f6 ff89 	bl	80002a0 <__adddf3>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	ec43 2b17 	vmov	d7, r2, r3
 8009396:	eeb0 0a47 	vmov.f32	s0, s14
 800939a:	eef0 0a67 	vmov.f32	s1, s15
 800939e:	f00f ff73 	bl	8019288 <sin>
 80093a2:	ec53 2b10 	vmov	r2, r3, d0
 80093a6:	4620      	mov	r0, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	f7f7 f92f 	bl	800060c <__aeabi_dmul>
 80093ae:	4603      	mov	r3, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	461d      	mov	r5, r3
 80093b4:	4626      	mov	r6, r4
 80093b6:	4b3a      	ldr	r3, [pc, #232]	; (80094a0 <GetMoon+0x1660>)
 80093b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093bc:	4b38      	ldr	r3, [pc, #224]	; (80094a0 <GetMoon+0x1660>)
 80093be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80093c2:	461a      	mov	r2, r3
 80093c4:	4623      	mov	r3, r4
 80093c6:	f7f7 f921 	bl	800060c <__aeabi_dmul>
 80093ca:	4603      	mov	r3, r0
 80093cc:	460c      	mov	r4, r1
 80093ce:	4618      	mov	r0, r3
 80093d0:	4621      	mov	r1, r4
 80093d2:	a331      	add	r3, pc, #196	; (adr r3, 8009498 <GetMoon+0x1658>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f7f7 f918 	bl	800060c <__aeabi_dmul>
 80093dc:	4603      	mov	r3, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	4698      	mov	r8, r3
 80093e2:	46a1      	mov	r9, r4
 80093e4:	4b2f      	ldr	r3, [pc, #188]	; (80094a4 <GetMoon+0x1664>)
 80093e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 80093f0:	461a      	mov	r2, r3
 80093f2:	4623      	mov	r3, r4
 80093f4:	f7f6 ff52 	bl	800029c <__aeabi_dsub>
 80093f8:	4603      	mov	r3, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	4618      	mov	r0, r3
 80093fe:	4621      	mov	r1, r4
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	f7f6 ff4c 	bl	80002a0 <__adddf3>
 8009408:	4603      	mov	r3, r0
 800940a:	460c      	mov	r4, r1
 800940c:	4618      	mov	r0, r3
 800940e:	4621      	mov	r1, r4
 8009410:	4b25      	ldr	r3, [pc, #148]	; (80094a8 <GetMoon+0x1668>)
 8009412:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009416:	461a      	mov	r2, r3
 8009418:	4623      	mov	r3, r4
 800941a:	f7f6 ff3f 	bl	800029c <__aeabi_dsub>
 800941e:	4603      	mov	r3, r0
 8009420:	460c      	mov	r4, r1
 8009422:	ec44 3b17 	vmov	d7, r3, r4
 8009426:	eeb0 0a47 	vmov.f32	s0, s14
 800942a:	eef0 0a67 	vmov.f32	s1, s15
 800942e:	f00f ff2b 	bl	8019288 <sin>
 8009432:	ec54 3b10 	vmov	r3, r4, d0
 8009436:	461a      	mov	r2, r3
 8009438:	4623      	mov	r3, r4
 800943a:	4640      	mov	r0, r8
 800943c:	4649      	mov	r1, r9
 800943e:	f7f7 f8e5 	bl	800060c <__aeabi_dmul>
 8009442:	4603      	mov	r3, r0
 8009444:	460c      	mov	r4, r1
 8009446:	461a      	mov	r2, r3
 8009448:	4623      	mov	r3, r4
 800944a:	4628      	mov	r0, r5
 800944c:	4631      	mov	r1, r6
 800944e:	f7f6 ff27 	bl	80002a0 <__adddf3>
 8009452:	4603      	mov	r3, r0
 8009454:	460c      	mov	r4, r1
 8009456:	4618      	mov	r0, r3
 8009458:	4621      	mov	r1, r4
 800945a:	4b14      	ldr	r3, [pc, #80]	; (80094ac <GetMoon+0x166c>)
 800945c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009460:	461a      	mov	r2, r3
 8009462:	4623      	mov	r3, r4
 8009464:	f7f6 ff1c 	bl	80002a0 <__adddf3>
 8009468:	e022      	b.n	80094b0 <GetMoon+0x1670>
 800946a:	bf00      	nop
 800946c:	f3af 8000 	nop.w
 8009470:	b484d76b 	.word	0xb484d76b
 8009474:	3f63a0c6 	.word	0x3f63a0c6
 8009478:	c5b4aa97 	.word	0xc5b4aa97
 800947c:	3f633e35 	.word	0x3f633e35
 8009480:	ae5bc87e 	.word	0xae5bc87e
 8009484:	3f626c7e 	.word	0x3f626c7e
 8009488:	b020c49c 	.word	0xb020c49c
 800948c:	3f616872 	.word	0x3f616872
 8009490:	a044ae86 	.word	0xa044ae86
 8009494:	3f6107fa 	.word	0x3f6107fa
 8009498:	3532e7b4 	.word	0x3532e7b4
 800949c:	3f60de09 	.word	0x3f60de09
 80094a0:	20000678 	.word	0x20000678
 80094a4:	20000660 	.word	0x20000660
 80094a8:	20000668 	.word	0x20000668
 80094ac:	20000680 	.word	0x20000680
 80094b0:	4603      	mov	r3, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	4ace      	ldr	r2, [pc, #824]	; (80097f0 <GetMoon+0x19b0>)
 80094b6:	e9c2 3400 	strd	r3, r4, [r2]
    l += -1.773E-3 * sin(anomaly+2*(phase-node)) - 1.595E-3 * sin(2*(node+phase));
 80094ba:	4bce      	ldr	r3, [pc, #824]	; (80097f4 <GetMoon+0x19b4>)
 80094bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094c0:	4bcd      	ldr	r3, [pc, #820]	; (80097f8 <GetMoon+0x19b8>)
 80094c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094c6:	461a      	mov	r2, r3
 80094c8:	4623      	mov	r3, r4
 80094ca:	f7f6 fee7 	bl	800029c <__aeabi_dsub>
 80094ce:	4603      	mov	r3, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	4618      	mov	r0, r3
 80094d4:	4621      	mov	r1, r4
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	f7f6 fee1 	bl	80002a0 <__adddf3>
 80094de:	4603      	mov	r3, r0
 80094e0:	460c      	mov	r4, r1
 80094e2:	4618      	mov	r0, r3
 80094e4:	4621      	mov	r1, r4
 80094e6:	4bc5      	ldr	r3, [pc, #788]	; (80097fc <GetMoon+0x19bc>)
 80094e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094ec:	461a      	mov	r2, r3
 80094ee:	4623      	mov	r3, r4
 80094f0:	f7f6 fed6 	bl	80002a0 <__adddf3>
 80094f4:	4603      	mov	r3, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	ec44 3b17 	vmov	d7, r3, r4
 80094fc:	eeb0 0a47 	vmov.f32	s0, s14
 8009500:	eef0 0a67 	vmov.f32	s1, s15
 8009504:	f00f fec0 	bl	8019288 <sin>
 8009508:	ec51 0b10 	vmov	r0, r1, d0
 800950c:	a3a2      	add	r3, pc, #648	; (adr r3, 8009798 <GetMoon+0x1958>)
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f7 f87b 	bl	800060c <__aeabi_dmul>
 8009516:	4603      	mov	r3, r0
 8009518:	460c      	mov	r4, r1
 800951a:	461d      	mov	r5, r3
 800951c:	4626      	mov	r6, r4
 800951e:	4bb6      	ldr	r3, [pc, #728]	; (80097f8 <GetMoon+0x19b8>)
 8009520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009524:	4bb3      	ldr	r3, [pc, #716]	; (80097f4 <GetMoon+0x19b4>)
 8009526:	e9d3 3400 	ldrd	r3, r4, [r3]
 800952a:	461a      	mov	r2, r3
 800952c:	4623      	mov	r3, r4
 800952e:	f7f6 feb7 	bl	80002a0 <__adddf3>
 8009532:	4603      	mov	r3, r0
 8009534:	460c      	mov	r4, r1
 8009536:	4618      	mov	r0, r3
 8009538:	4621      	mov	r1, r4
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	f7f6 feaf 	bl	80002a0 <__adddf3>
 8009542:	4603      	mov	r3, r0
 8009544:	460c      	mov	r4, r1
 8009546:	ec44 3b17 	vmov	d7, r3, r4
 800954a:	eeb0 0a47 	vmov.f32	s0, s14
 800954e:	eef0 0a67 	vmov.f32	s1, s15
 8009552:	f00f fe99 	bl	8019288 <sin>
 8009556:	ec51 0b10 	vmov	r0, r1, d0
 800955a:	a391      	add	r3, pc, #580	; (adr r3, 80097a0 <GetMoon+0x1960>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f7 f854 	bl	800060c <__aeabi_dmul>
 8009564:	4603      	mov	r3, r0
 8009566:	460c      	mov	r4, r1
 8009568:	461a      	mov	r2, r3
 800956a:	4623      	mov	r3, r4
 800956c:	4628      	mov	r0, r5
 800956e:	4631      	mov	r1, r6
 8009570:	f7f6 fe94 	bl	800029c <__aeabi_dsub>
 8009574:	4603      	mov	r3, r0
 8009576:	460c      	mov	r4, r1
 8009578:	4618      	mov	r0, r3
 800957a:	4621      	mov	r1, r4
 800957c:	4b9c      	ldr	r3, [pc, #624]	; (80097f0 <GetMoon+0x19b0>)
 800957e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009582:	461a      	mov	r2, r3
 8009584:	4623      	mov	r3, r4
 8009586:	f7f6 fe8b 	bl	80002a0 <__adddf3>
 800958a:	4603      	mov	r3, r0
 800958c:	460c      	mov	r4, r1
 800958e:	4a98      	ldr	r2, [pc, #608]	; (80097f0 <GetMoon+0x19b0>)
 8009590:	e9c2 3400 	strd	r3, r4, [r2]
    l += E * 1.22E-3 * sin(4*phase-calc->aux.sanomaly-anomaly) - 1.11E-3 * sin(2*(anomaly+node));
 8009594:	4b9a      	ldr	r3, [pc, #616]	; (8009800 <GetMoon+0x19c0>)
 8009596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800959a:	a383      	add	r3, pc, #524	; (adr r3, 80097a8 <GetMoon+0x1968>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f7f7 f834 	bl	800060c <__aeabi_dmul>
 80095a4:	4603      	mov	r3, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	461d      	mov	r5, r3
 80095aa:	4626      	mov	r6, r4
 80095ac:	4b91      	ldr	r3, [pc, #580]	; (80097f4 <GetMoon+0x19b4>)
 80095ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095b2:	f04f 0200 	mov.w	r2, #0
 80095b6:	4b93      	ldr	r3, [pc, #588]	; (8009804 <GetMoon+0x19c4>)
 80095b8:	f7f7 f828 	bl	800060c <__aeabi_dmul>
 80095bc:	4603      	mov	r3, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	4618      	mov	r0, r3
 80095c2:	4621      	mov	r1, r4
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 80095ca:	461a      	mov	r2, r3
 80095cc:	4623      	mov	r3, r4
 80095ce:	f7f6 fe65 	bl	800029c <__aeabi_dsub>
 80095d2:	4603      	mov	r3, r0
 80095d4:	460c      	mov	r4, r1
 80095d6:	4618      	mov	r0, r3
 80095d8:	4621      	mov	r1, r4
 80095da:	4b88      	ldr	r3, [pc, #544]	; (80097fc <GetMoon+0x19bc>)
 80095dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095e0:	461a      	mov	r2, r3
 80095e2:	4623      	mov	r3, r4
 80095e4:	f7f6 fe5a 	bl	800029c <__aeabi_dsub>
 80095e8:	4603      	mov	r3, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	ec44 3b17 	vmov	d7, r3, r4
 80095f0:	eeb0 0a47 	vmov.f32	s0, s14
 80095f4:	eef0 0a67 	vmov.f32	s1, s15
 80095f8:	f00f fe46 	bl	8019288 <sin>
 80095fc:	ec54 3b10 	vmov	r3, r4, d0
 8009600:	461a      	mov	r2, r3
 8009602:	4623      	mov	r3, r4
 8009604:	4628      	mov	r0, r5
 8009606:	4631      	mov	r1, r6
 8009608:	f7f7 f800 	bl	800060c <__aeabi_dmul>
 800960c:	4603      	mov	r3, r0
 800960e:	460c      	mov	r4, r1
 8009610:	461d      	mov	r5, r3
 8009612:	4626      	mov	r6, r4
 8009614:	4b79      	ldr	r3, [pc, #484]	; (80097fc <GetMoon+0x19bc>)
 8009616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800961a:	4b77      	ldr	r3, [pc, #476]	; (80097f8 <GetMoon+0x19b8>)
 800961c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009620:	461a      	mov	r2, r3
 8009622:	4623      	mov	r3, r4
 8009624:	f7f6 fe3c 	bl	80002a0 <__adddf3>
 8009628:	4603      	mov	r3, r0
 800962a:	460c      	mov	r4, r1
 800962c:	4618      	mov	r0, r3
 800962e:	4621      	mov	r1, r4
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	f7f6 fe34 	bl	80002a0 <__adddf3>
 8009638:	4603      	mov	r3, r0
 800963a:	460c      	mov	r4, r1
 800963c:	ec44 3b17 	vmov	d7, r3, r4
 8009640:	eeb0 0a47 	vmov.f32	s0, s14
 8009644:	eef0 0a67 	vmov.f32	s1, s15
 8009648:	f00f fe1e 	bl	8019288 <sin>
 800964c:	ec51 0b10 	vmov	r0, r1, d0
 8009650:	a357      	add	r3, pc, #348	; (adr r3, 80097b0 <GetMoon+0x1970>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f7f6 ffd9 	bl	800060c <__aeabi_dmul>
 800965a:	4603      	mov	r3, r0
 800965c:	460c      	mov	r4, r1
 800965e:	461a      	mov	r2, r3
 8009660:	4623      	mov	r3, r4
 8009662:	4628      	mov	r0, r5
 8009664:	4631      	mov	r1, r6
 8009666:	f7f6 fe19 	bl	800029c <__aeabi_dsub>
 800966a:	4603      	mov	r3, r0
 800966c:	460c      	mov	r4, r1
 800966e:	4618      	mov	r0, r3
 8009670:	4621      	mov	r1, r4
 8009672:	4b5f      	ldr	r3, [pc, #380]	; (80097f0 <GetMoon+0x19b0>)
 8009674:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009678:	461a      	mov	r2, r3
 800967a:	4623      	mov	r3, r4
 800967c:	f7f6 fe10 	bl	80002a0 <__adddf3>
 8009680:	4603      	mov	r3, r0
 8009682:	460c      	mov	r4, r1
 8009684:	4a5a      	ldr	r2, [pc, #360]	; (80097f0 <GetMoon+0x19b0>)
 8009686:	e9c2 3400 	strd	r3, r4, [r2]
    longitude = l;
 800968a:	4b59      	ldr	r3, [pc, #356]	; (80097f0 <GetMoon+0x19b0>)
 800968c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009690:	4a5d      	ldr	r2, [pc, #372]	; (8009808 <GetMoon+0x19c8>)
 8009692:	e9c2 3400 	strd	r3, r4, [r2]

    // Let's add nutation here also
    M1 = (124.90 - 1934.134 * calc->aux.t + 0.002063 * calc->aux.t * calc->aux.t) * snm_DEG_TO_RAD;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800969c:	a346      	add	r3, pc, #280	; (adr r3, 80097b8 <GetMoon+0x1978>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f7f6 ffb3 	bl	800060c <__aeabi_dmul>
 80096a6:	4603      	mov	r3, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	461a      	mov	r2, r3
 80096ac:	4623      	mov	r3, r4
 80096ae:	a144      	add	r1, pc, #272	; (adr r1, 80097c0 <GetMoon+0x1980>)
 80096b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b4:	f7f6 fdf2 	bl	800029c <__aeabi_dsub>
 80096b8:	4603      	mov	r3, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	461d      	mov	r5, r3
 80096be:	4626      	mov	r6, r4
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80096c6:	a340      	add	r3, pc, #256	; (adr r3, 80097c8 <GetMoon+0x1988>)
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	f7f6 ff9e 	bl	800060c <__aeabi_dmul>
 80096d0:	4603      	mov	r3, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	4618      	mov	r0, r3
 80096d6:	4621      	mov	r1, r4
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 80096de:	461a      	mov	r2, r3
 80096e0:	4623      	mov	r3, r4
 80096e2:	f7f6 ff93 	bl	800060c <__aeabi_dmul>
 80096e6:	4603      	mov	r3, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	461a      	mov	r2, r3
 80096ec:	4623      	mov	r3, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	4631      	mov	r1, r6
 80096f2:	f7f6 fdd5 	bl	80002a0 <__adddf3>
 80096f6:	4603      	mov	r3, r0
 80096f8:	460c      	mov	r4, r1
 80096fa:	4618      	mov	r0, r3
 80096fc:	4621      	mov	r1, r4
 80096fe:	a334      	add	r3, pc, #208	; (adr r3, 80097d0 <GetMoon+0x1990>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f6 ff82 	bl	800060c <__aeabi_dmul>
 8009708:	4603      	mov	r3, r0
 800970a:	460c      	mov	r4, r1
 800970c:	4a3f      	ldr	r2, [pc, #252]	; (800980c <GetMoon+0x19cc>)
 800970e:	e9c2 3400 	strd	r3, r4, [r2]
    M2 = (201.11 + 72001.5377 * calc->aux.t + 0.00057 * calc->aux.t * calc->aux.t) * snm_DEG_TO_RAD;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8009718:	a32f      	add	r3, pc, #188	; (adr r3, 80097d8 <GetMoon+0x1998>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	f7f6 ff75 	bl	800060c <__aeabi_dmul>
 8009722:	4603      	mov	r3, r0
 8009724:	460c      	mov	r4, r1
 8009726:	4618      	mov	r0, r3
 8009728:	4621      	mov	r1, r4
 800972a:	a32d      	add	r3, pc, #180	; (adr r3, 80097e0 <GetMoon+0x19a0>)
 800972c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009730:	f7f6 fdb6 	bl	80002a0 <__adddf3>
 8009734:	4603      	mov	r3, r0
 8009736:	460c      	mov	r4, r1
 8009738:	461d      	mov	r5, r3
 800973a:	4626      	mov	r6, r4
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8009742:	a329      	add	r3, pc, #164	; (adr r3, 80097e8 <GetMoon+0x19a8>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f7f6 ff60 	bl	800060c <__aeabi_dmul>
 800974c:	4603      	mov	r3, r0
 800974e:	460c      	mov	r4, r1
 8009750:	4618      	mov	r0, r3
 8009752:	4621      	mov	r1, r4
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800975a:	461a      	mov	r2, r3
 800975c:	4623      	mov	r3, r4
 800975e:	f7f6 ff55 	bl	800060c <__aeabi_dmul>
 8009762:	4603      	mov	r3, r0
 8009764:	460c      	mov	r4, r1
 8009766:	461a      	mov	r2, r3
 8009768:	4623      	mov	r3, r4
 800976a:	4628      	mov	r0, r5
 800976c:	4631      	mov	r1, r6
 800976e:	f7f6 fd97 	bl	80002a0 <__adddf3>
 8009772:	4603      	mov	r3, r0
 8009774:	460c      	mov	r4, r1
 8009776:	4618      	mov	r0, r3
 8009778:	4621      	mov	r1, r4
 800977a:	a315      	add	r3, pc, #84	; (adr r3, 80097d0 <GetMoon+0x1990>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 ff44 	bl	800060c <__aeabi_dmul>
 8009784:	4603      	mov	r3, r0
 8009786:	460c      	mov	r4, r1
 8009788:	4a21      	ldr	r2, [pc, #132]	; (8009810 <GetMoon+0x19d0>)
 800978a:	e9c2 3400 	strd	r3, r4, [r2]
    d = - .0047785 * sin(M1) - .0003667 * sin(M2);
 800978e:	4b1f      	ldr	r3, [pc, #124]	; (800980c <GetMoon+0x19cc>)
 8009790:	ed93 7b00 	vldr	d7, [r3]
 8009794:	e03e      	b.n	8009814 <GetMoon+0x19d4>
 8009796:	bf00      	nop
 8009798:	4102ff8f 	.word	0x4102ff8f
 800979c:	bf5d0c80 	.word	0xbf5d0c80
 80097a0:	35935fc4 	.word	0x35935fc4
 80097a4:	3f5a21ea 	.word	0x3f5a21ea
 80097a8:	0678c005 	.word	0x0678c005
 80097ac:	3f53fd0d 	.word	0x3f53fd0d
 80097b0:	6cb53501 	.word	0x6cb53501
 80097b4:	3f522fad 	.word	0x3f522fad
 80097b8:	374bc6a8 	.word	0x374bc6a8
 80097bc:	409e3889 	.word	0x409e3889
 80097c0:	9999999a 	.word	0x9999999a
 80097c4:	405f3999 	.word	0x405f3999
 80097c8:	b10342ab 	.word	0xb10342ab
 80097cc:	3f60e66c 	.word	0x3f60e66c
 80097d0:	a2529d39 	.word	0xa2529d39
 80097d4:	3f91df46 	.word	0x3f91df46
 80097d8:	9a6b50b1 	.word	0x9a6b50b1
 80097dc:	40f19418 	.word	0x40f19418
 80097e0:	1eb851ec 	.word	0x1eb851ec
 80097e4:	40692385 	.word	0x40692385
 80097e8:	adea8976 	.word	0xadea8976
 80097ec:	3f42ad81 	.word	0x3f42ad81
 80097f0:	20000680 	.word	0x20000680
 80097f4:	20000660 	.word	0x20000660
 80097f8:	20000670 	.word	0x20000670
 80097fc:	20000668 	.word	0x20000668
 8009800:	20000678 	.word	0x20000678
 8009804:	40100000 	.word	0x40100000
 8009808:	20000688 	.word	0x20000688
 800980c:	20000690 	.word	0x20000690
 8009810:	20000698 	.word	0x20000698
 8009814:	eeb0 0a47 	vmov.f32	s0, s14
 8009818:	eef0 0a67 	vmov.f32	s1, s15
 800981c:	f00f fd34 	bl	8019288 <sin>
 8009820:	ec51 0b10 	vmov	r0, r1, d0
 8009824:	a3de      	add	r3, pc, #888	; (adr r3, 8009ba0 <GetMoon+0x1d60>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f7f6 feef 	bl	800060c <__aeabi_dmul>
 800982e:	4603      	mov	r3, r0
 8009830:	460c      	mov	r4, r1
 8009832:	4625      	mov	r5, r4
 8009834:	461c      	mov	r4, r3
 8009836:	4bd2      	ldr	r3, [pc, #840]	; (8009b80 <GetMoon+0x1d40>)
 8009838:	ed93 7b00 	vldr	d7, [r3]
 800983c:	eeb0 0a47 	vmov.f32	s0, s14
 8009840:	eef0 0a67 	vmov.f32	s1, s15
 8009844:	f00f fd20 	bl	8019288 <sin>
 8009848:	ec51 0b10 	vmov	r0, r1, d0
 800984c:	a3b4      	add	r3, pc, #720	; (adr r3, 8009b20 <GetMoon+0x1ce0>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fedb 	bl	800060c <__aeabi_dmul>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f6 fd1d 	bl	800029c <__aeabi_dsub>
 8009862:	4603      	mov	r3, r0
 8009864:	460c      	mov	r4, r1
 8009866:	4ac7      	ldr	r2, [pc, #796]	; (8009b84 <GetMoon+0x1d44>)
 8009868:	e9c2 3400 	strd	r3, r4, [r2]
    longitude += d;
 800986c:	4bc6      	ldr	r3, [pc, #792]	; (8009b88 <GetMoon+0x1d48>)
 800986e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009872:	4bc4      	ldr	r3, [pc, #784]	; (8009b84 <GetMoon+0x1d44>)
 8009874:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009878:	461a      	mov	r2, r3
 800987a:	4623      	mov	r3, r4
 800987c:	f7f6 fd10 	bl	80002a0 <__adddf3>
 8009880:	4603      	mov	r3, r0
 8009882:	460c      	mov	r4, r1
 8009884:	4ac0      	ldr	r2, [pc, #768]	; (8009b88 <GetMoon+0x1d48>)
 8009886:	e9c2 3400 	strd	r3, r4, [r2]

    // Get accurate Moon age
    Psin = 29.530588853;
 800988a:	4ac0      	ldr	r2, [pc, #768]	; (8009b8c <GetMoon+0x1d4c>)
 800988c:	a4a6      	add	r4, pc, #664	; (adr r4, 8009b28 <GetMoon+0x1ce8>)
 800988e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009892:	e9c2 3400 	strd	r3, r4, [r2]
    calc->moon_age = NormalizeRadians((longitude - calc->aux.slongitude) * snm_DEG_TO_RAD) * Psin / TWO_PI;
 8009896:	4bbc      	ldr	r3, [pc, #752]	; (8009b88 <GetMoon+0x1d48>)
 8009898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 80098a2:	461a      	mov	r2, r3
 80098a4:	4623      	mov	r3, r4
 80098a6:	f7f6 fcf9 	bl	800029c <__aeabi_dsub>
 80098aa:	4603      	mov	r3, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	4618      	mov	r0, r3
 80098b0:	4621      	mov	r1, r4
 80098b2:	a39f      	add	r3, pc, #636	; (adr r3, 8009b30 <GetMoon+0x1cf0>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fea8 	bl	800060c <__aeabi_dmul>
 80098bc:	4603      	mov	r3, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	ec44 3b17 	vmov	d7, r3, r4
 80098c4:	eeb0 0a47 	vmov.f32	s0, s14
 80098c8:	eef0 0a67 	vmov.f32	s1, s15
 80098cc:	f7fd fe70 	bl	80075b0 <NormalizeRadians>
 80098d0:	ec51 0b10 	vmov	r0, r1, d0
 80098d4:	4bad      	ldr	r3, [pc, #692]	; (8009b8c <GetMoon+0x1d4c>)
 80098d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098da:	461a      	mov	r2, r3
 80098dc:	4623      	mov	r3, r4
 80098de:	f7f6 fe95 	bl	800060c <__aeabi_dmul>
 80098e2:	4603      	mov	r3, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	4618      	mov	r0, r3
 80098e8:	4621      	mov	r1, r4
 80098ea:	a393      	add	r3, pc, #588	; (adr r3, 8009b38 <GetMoon+0x1cf8>)
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	f7f6 ffb6 	bl	8000860 <__aeabi_ddiv>
 80098f4:	4603      	mov	r3, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8

    // Now Moon parallax
    parallax = .950724 + .051818 * cos(anomaly) + .009531 * cos(2 * phase - anomaly);
 80098fe:	4ba4      	ldr	r3, [pc, #656]	; (8009b90 <GetMoon+0x1d50>)
 8009900:	ed93 7b00 	vldr	d7, [r3]
 8009904:	eeb0 0a47 	vmov.f32	s0, s14
 8009908:	eef0 0a67 	vmov.f32	s1, s15
 800990c:	f00f fb94 	bl	8019038 <cos>
 8009910:	ec51 0b10 	vmov	r0, r1, d0
 8009914:	a38a      	add	r3, pc, #552	; (adr r3, 8009b40 <GetMoon+0x1d00>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fe77 	bl	800060c <__aeabi_dmul>
 800991e:	4603      	mov	r3, r0
 8009920:	460c      	mov	r4, r1
 8009922:	4618      	mov	r0, r3
 8009924:	4621      	mov	r1, r4
 8009926:	a388      	add	r3, pc, #544	; (adr r3, 8009b48 <GetMoon+0x1d08>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f7f6 fcb8 	bl	80002a0 <__adddf3>
 8009930:	4603      	mov	r3, r0
 8009932:	460c      	mov	r4, r1
 8009934:	461d      	mov	r5, r3
 8009936:	4626      	mov	r6, r4
 8009938:	4b96      	ldr	r3, [pc, #600]	; (8009b94 <GetMoon+0x1d54>)
 800993a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	f7f6 fcad 	bl	80002a0 <__adddf3>
 8009946:	4603      	mov	r3, r0
 8009948:	460c      	mov	r4, r1
 800994a:	4618      	mov	r0, r3
 800994c:	4621      	mov	r1, r4
 800994e:	4b90      	ldr	r3, [pc, #576]	; (8009b90 <GetMoon+0x1d50>)
 8009950:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009954:	461a      	mov	r2, r3
 8009956:	4623      	mov	r3, r4
 8009958:	f7f6 fca0 	bl	800029c <__aeabi_dsub>
 800995c:	4603      	mov	r3, r0
 800995e:	460c      	mov	r4, r1
 8009960:	ec44 3b17 	vmov	d7, r3, r4
 8009964:	eeb0 0a47 	vmov.f32	s0, s14
 8009968:	eef0 0a67 	vmov.f32	s1, s15
 800996c:	f00f fb64 	bl	8019038 <cos>
 8009970:	ec51 0b10 	vmov	r0, r1, d0
 8009974:	a376      	add	r3, pc, #472	; (adr r3, 8009b50 <GetMoon+0x1d10>)
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	f7f6 fe47 	bl	800060c <__aeabi_dmul>
 800997e:	4603      	mov	r3, r0
 8009980:	460c      	mov	r4, r1
 8009982:	461a      	mov	r2, r3
 8009984:	4623      	mov	r3, r4
 8009986:	4628      	mov	r0, r5
 8009988:	4631      	mov	r1, r6
 800998a:	f7f6 fc89 	bl	80002a0 <__adddf3>
 800998e:	4603      	mov	r3, r0
 8009990:	460c      	mov	r4, r1
 8009992:	4a81      	ldr	r2, [pc, #516]	; (8009b98 <GetMoon+0x1d58>)
 8009994:	e9c2 3400 	strd	r3, r4, [r2]
    parallax += .007843 * cos(2 * phase) + .002824 * cos(2 * anomaly);
 8009998:	4b7e      	ldr	r3, [pc, #504]	; (8009b94 <GetMoon+0x1d54>)
 800999a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	f7f6 fc7d 	bl	80002a0 <__adddf3>
 80099a6:	4603      	mov	r3, r0
 80099a8:	460c      	mov	r4, r1
 80099aa:	ec44 3b17 	vmov	d7, r3, r4
 80099ae:	eeb0 0a47 	vmov.f32	s0, s14
 80099b2:	eef0 0a67 	vmov.f32	s1, s15
 80099b6:	f00f fb3f 	bl	8019038 <cos>
 80099ba:	ec51 0b10 	vmov	r0, r1, d0
 80099be:	a366      	add	r3, pc, #408	; (adr r3, 8009b58 <GetMoon+0x1d18>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fe22 	bl	800060c <__aeabi_dmul>
 80099c8:	4603      	mov	r3, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	4625      	mov	r5, r4
 80099ce:	461c      	mov	r4, r3
 80099d0:	4b6f      	ldr	r3, [pc, #444]	; (8009b90 <GetMoon+0x1d50>)
 80099d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	f7f6 fc61 	bl	80002a0 <__adddf3>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	ec43 2b17 	vmov	d7, r2, r3
 80099e6:	eeb0 0a47 	vmov.f32	s0, s14
 80099ea:	eef0 0a67 	vmov.f32	s1, s15
 80099ee:	f00f fb23 	bl	8019038 <cos>
 80099f2:	ec51 0b10 	vmov	r0, r1, d0
 80099f6:	a35a      	add	r3, pc, #360	; (adr r3, 8009b60 <GetMoon+0x1d20>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f7f6 fe06 	bl	800060c <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fc4a 	bl	80002a0 <__adddf3>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	4618      	mov	r0, r3
 8009a12:	4621      	mov	r1, r4
 8009a14:	4b60      	ldr	r3, [pc, #384]	; (8009b98 <GetMoon+0x1d58>)
 8009a16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	f7f6 fc3f 	bl	80002a0 <__adddf3>
 8009a22:	4603      	mov	r3, r0
 8009a24:	460c      	mov	r4, r1
 8009a26:	4a5c      	ldr	r2, [pc, #368]	; (8009b98 <GetMoon+0x1d58>)
 8009a28:	e9c2 3400 	strd	r3, r4, [r2]
    parallax += 0.000857 * cos(2 * phase + anomaly) + E * .000533 * cos(2 * phase - calc->aux.sanomaly);
 8009a2c:	4b59      	ldr	r3, [pc, #356]	; (8009b94 <GetMoon+0x1d54>)
 8009a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	f7f6 fc33 	bl	80002a0 <__adddf3>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	4618      	mov	r0, r3
 8009a40:	4621      	mov	r1, r4
 8009a42:	4b53      	ldr	r3, [pc, #332]	; (8009b90 <GetMoon+0x1d50>)
 8009a44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4623      	mov	r3, r4
 8009a4c:	f7f6 fc28 	bl	80002a0 <__adddf3>
 8009a50:	4603      	mov	r3, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	ec44 3b17 	vmov	d7, r3, r4
 8009a58:	eeb0 0a47 	vmov.f32	s0, s14
 8009a5c:	eef0 0a67 	vmov.f32	s1, s15
 8009a60:	f00f faea 	bl	8019038 <cos>
 8009a64:	ec51 0b10 	vmov	r0, r1, d0
 8009a68:	a33f      	add	r3, pc, #252	; (adr r3, 8009b68 <GetMoon+0x1d28>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7f6 fdcd 	bl	800060c <__aeabi_dmul>
 8009a72:	4603      	mov	r3, r0
 8009a74:	460c      	mov	r4, r1
 8009a76:	461d      	mov	r5, r3
 8009a78:	4626      	mov	r6, r4
 8009a7a:	4b48      	ldr	r3, [pc, #288]	; (8009b9c <GetMoon+0x1d5c>)
 8009a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a80:	a33b      	add	r3, pc, #236	; (adr r3, 8009b70 <GetMoon+0x1d30>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 fdc1 	bl	800060c <__aeabi_dmul>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	4698      	mov	r8, r3
 8009a90:	46a1      	mov	r9, r4
 8009a92:	4b40      	ldr	r3, [pc, #256]	; (8009b94 <GetMoon+0x1d54>)
 8009a94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	f7f6 fc00 	bl	80002a0 <__adddf3>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	f7f6 fbf3 	bl	800029c <__aeabi_dsub>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	460c      	mov	r4, r1
 8009aba:	ec44 3b17 	vmov	d7, r3, r4
 8009abe:	eeb0 0a47 	vmov.f32	s0, s14
 8009ac2:	eef0 0a67 	vmov.f32	s1, s15
 8009ac6:	f00f fab7 	bl	8019038 <cos>
 8009aca:	ec54 3b10 	vmov	r3, r4, d0
 8009ace:	461a      	mov	r2, r3
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	f7f6 fd99 	bl	800060c <__aeabi_dmul>
 8009ada:	4603      	mov	r3, r0
 8009adc:	460c      	mov	r4, r1
 8009ade:	461a      	mov	r2, r3
 8009ae0:	4623      	mov	r3, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	f7f6 fbdb 	bl	80002a0 <__adddf3>
 8009aea:	4603      	mov	r3, r0
 8009aec:	460c      	mov	r4, r1
 8009aee:	4618      	mov	r0, r3
 8009af0:	4621      	mov	r1, r4
 8009af2:	4b29      	ldr	r3, [pc, #164]	; (8009b98 <GetMoon+0x1d58>)
 8009af4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009af8:	461a      	mov	r2, r3
 8009afa:	4623      	mov	r3, r4
 8009afc:	f7f6 fbd0 	bl	80002a0 <__adddf3>
 8009b00:	4603      	mov	r3, r0
 8009b02:	460c      	mov	r4, r1
 8009b04:	4a24      	ldr	r2, [pc, #144]	; (8009b98 <GetMoon+0x1d58>)
 8009b06:	e9c2 3400 	strd	r3, r4, [r2]
    parallax += E * .000401 * cos(2 * phase - anomaly - calc->aux.sanomaly) + E * .00032 * cos(anomaly - calc->aux.sanomaly) - .000271 * cos(phase);
 8009b0a:	4b24      	ldr	r3, [pc, #144]	; (8009b9c <GetMoon+0x1d5c>)
 8009b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b10:	a319      	add	r3, pc, #100	; (adr r3, 8009b78 <GetMoon+0x1d38>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fd79 	bl	800060c <__aeabi_dmul>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	e043      	b.n	8009ba8 <GetMoon+0x1d68>
 8009b20:	81e7cc2d 	.word	0x81e7cc2d
 8009b24:	3f380834 	.word	0x3f380834
 8009b28:	abcb41d5 	.word	0xabcb41d5
 8009b2c:	403d87d4 	.word	0x403d87d4
 8009b30:	a2529d39 	.word	0xa2529d39
 8009b34:	3f91df46 	.word	0x3f91df46
 8009b38:	54442d18 	.word	0x54442d18
 8009b3c:	401921fb 	.word	0x401921fb
 8009b40:	8eb0318c 	.word	0x8eb0318c
 8009b44:	3faa87e3 	.word	0x3faa87e3
 8009b48:	bcf0b6b7 	.word	0xbcf0b6b7
 8009b4c:	3fee6c54 	.word	0x3fee6c54
 8009b50:	2a62aa19 	.word	0x2a62aa19
 8009b54:	3f8384fd 	.word	0x3f8384fd
 8009b58:	a4052d66 	.word	0xa4052d66
 8009b5c:	3f800ffd 	.word	0x3f800ffd
 8009b60:	749adc90 	.word	0x749adc90
 8009b64:	3f67225b 	.word	0x3f67225b
 8009b68:	7c80841f 	.word	0x7c80841f
 8009b6c:	3f4c1509 	.word	0x3f4c1509
 8009b70:	c8cd63cc 	.word	0xc8cd63cc
 8009b74:	3f417720 	.word	0x3f417720
 8009b78:	e2bcf91a 	.word	0xe2bcf91a
 8009b7c:	3f3a47a9 	.word	0x3f3a47a9
 8009b80:	20000698 	.word	0x20000698
 8009b84:	200006a0 	.word	0x200006a0
 8009b88:	20000688 	.word	0x20000688
 8009b8c:	200006a8 	.word	0x200006a8
 8009b90:	20000668 	.word	0x20000668
 8009b94:	20000660 	.word	0x20000660
 8009b98:	200006b0 	.word	0x200006b0
 8009b9c:	20000678 	.word	0x20000678
 8009ba0:	d3953dea 	.word	0xd3953dea
 8009ba4:	bf73929e 	.word	0xbf73929e
 8009ba8:	461d      	mov	r5, r3
 8009baa:	4626      	mov	r6, r4
 8009bac:	4bd4      	ldr	r3, [pc, #848]	; (8009f00 <GetMoon+0x20c0>)
 8009bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	f7f6 fb73 	bl	80002a0 <__adddf3>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4bd0      	ldr	r3, [pc, #832]	; (8009f04 <GetMoon+0x20c4>)
 8009bc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4623      	mov	r3, r4
 8009bcc:	f7f6 fb66 	bl	800029c <__aeabi_dsub>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8009bde:	461a      	mov	r2, r3
 8009be0:	4623      	mov	r3, r4
 8009be2:	f7f6 fb5b 	bl	800029c <__aeabi_dsub>
 8009be6:	4603      	mov	r3, r0
 8009be8:	460c      	mov	r4, r1
 8009bea:	ec44 3b17 	vmov	d7, r3, r4
 8009bee:	eeb0 0a47 	vmov.f32	s0, s14
 8009bf2:	eef0 0a67 	vmov.f32	s1, s15
 8009bf6:	f00f fa1f 	bl	8019038 <cos>
 8009bfa:	ec54 3b10 	vmov	r3, r4, d0
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4623      	mov	r3, r4
 8009c02:	4628      	mov	r0, r5
 8009c04:	4631      	mov	r1, r6
 8009c06:	f7f6 fd01 	bl	800060c <__aeabi_dmul>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	461d      	mov	r5, r3
 8009c10:	4626      	mov	r6, r4
 8009c12:	4bbd      	ldr	r3, [pc, #756]	; (8009f08 <GetMoon+0x20c8>)
 8009c14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c18:	a3a9      	add	r3, pc, #676	; (adr r3, 8009ec0 <GetMoon+0x2080>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fcf5 	bl	800060c <__aeabi_dmul>
 8009c22:	4603      	mov	r3, r0
 8009c24:	460c      	mov	r4, r1
 8009c26:	4698      	mov	r8, r3
 8009c28:	46a1      	mov	r9, r4
 8009c2a:	4bb6      	ldr	r3, [pc, #728]	; (8009f04 <GetMoon+0x20c4>)
 8009c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8009c36:	461a      	mov	r2, r3
 8009c38:	4623      	mov	r3, r4
 8009c3a:	f7f6 fb2f 	bl	800029c <__aeabi_dsub>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	460c      	mov	r4, r1
 8009c42:	ec44 3b17 	vmov	d7, r3, r4
 8009c46:	eeb0 0a47 	vmov.f32	s0, s14
 8009c4a:	eef0 0a67 	vmov.f32	s1, s15
 8009c4e:	f00f f9f3 	bl	8019038 <cos>
 8009c52:	ec54 3b10 	vmov	r3, r4, d0
 8009c56:	461a      	mov	r2, r3
 8009c58:	4623      	mov	r3, r4
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	f7f6 fcd5 	bl	800060c <__aeabi_dmul>
 8009c62:	4603      	mov	r3, r0
 8009c64:	460c      	mov	r4, r1
 8009c66:	461a      	mov	r2, r3
 8009c68:	4623      	mov	r3, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	f7f6 fb17 	bl	80002a0 <__adddf3>
 8009c72:	4603      	mov	r3, r0
 8009c74:	460c      	mov	r4, r1
 8009c76:	4625      	mov	r5, r4
 8009c78:	461c      	mov	r4, r3
 8009c7a:	4ba1      	ldr	r3, [pc, #644]	; (8009f00 <GetMoon+0x20c0>)
 8009c7c:	ed93 7b00 	vldr	d7, [r3]
 8009c80:	eeb0 0a47 	vmov.f32	s0, s14
 8009c84:	eef0 0a67 	vmov.f32	s1, s15
 8009c88:	f00f f9d6 	bl	8019038 <cos>
 8009c8c:	ec51 0b10 	vmov	r0, r1, d0
 8009c90:	a38d      	add	r3, pc, #564	; (adr r3, 8009ec8 <GetMoon+0x2088>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f7f6 fcb9 	bl	800060c <__aeabi_dmul>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	f7f6 fafb 	bl	800029c <__aeabi_dsub>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	460c      	mov	r4, r1
 8009caa:	4618      	mov	r0, r3
 8009cac:	4621      	mov	r1, r4
 8009cae:	4b97      	ldr	r3, [pc, #604]	; (8009f0c <GetMoon+0x20cc>)
 8009cb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4623      	mov	r3, r4
 8009cb8:	f7f6 faf2 	bl	80002a0 <__adddf3>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	4a92      	ldr	r2, [pc, #584]	; (8009f0c <GetMoon+0x20cc>)
 8009cc2:	e9c2 3400 	strd	r3, r4, [r2]
    parallax += -E * .000264 * cos(calc->aux.sanomaly + anomaly) - .000198 * cos(2 * node - anomaly);
 8009cc6:	4b90      	ldr	r3, [pc, #576]	; (8009f08 <GetMoon+0x20c8>)
 8009cc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ccc:	603b      	str	r3, [r7, #0]
 8009cce:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8009cd2:	607b      	str	r3, [r7, #4]
 8009cd4:	a37e      	add	r3, pc, #504	; (adr r3, 8009ed0 <GetMoon+0x2090>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cde:	f7f6 fc95 	bl	800060c <__aeabi_dmul>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	461d      	mov	r5, r3
 8009ce8:	4626      	mov	r6, r4
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8009cf0:	4b84      	ldr	r3, [pc, #528]	; (8009f04 <GetMoon+0x20c4>)
 8009cf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4623      	mov	r3, r4
 8009cfa:	f7f6 fad1 	bl	80002a0 <__adddf3>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	460c      	mov	r4, r1
 8009d02:	ec44 3b17 	vmov	d7, r3, r4
 8009d06:	eeb0 0a47 	vmov.f32	s0, s14
 8009d0a:	eef0 0a67 	vmov.f32	s1, s15
 8009d0e:	f00f f993 	bl	8019038 <cos>
 8009d12:	ec54 3b10 	vmov	r3, r4, d0
 8009d16:	461a      	mov	r2, r3
 8009d18:	4623      	mov	r3, r4
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	f7f6 fc75 	bl	800060c <__aeabi_dmul>
 8009d22:	4603      	mov	r3, r0
 8009d24:	460c      	mov	r4, r1
 8009d26:	461d      	mov	r5, r3
 8009d28:	4626      	mov	r6, r4
 8009d2a:	4b79      	ldr	r3, [pc, #484]	; (8009f10 <GetMoon+0x20d0>)
 8009d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	f7f6 fab4 	bl	80002a0 <__adddf3>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4b70      	ldr	r3, [pc, #448]	; (8009f04 <GetMoon+0x20c4>)
 8009d42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d46:	461a      	mov	r2, r3
 8009d48:	4623      	mov	r3, r4
 8009d4a:	f7f6 faa7 	bl	800029c <__aeabi_dsub>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	460c      	mov	r4, r1
 8009d52:	ec44 3b17 	vmov	d7, r3, r4
 8009d56:	eeb0 0a47 	vmov.f32	s0, s14
 8009d5a:	eef0 0a67 	vmov.f32	s1, s15
 8009d5e:	f00f f96b 	bl	8019038 <cos>
 8009d62:	ec51 0b10 	vmov	r0, r1, d0
 8009d66:	a35c      	add	r3, pc, #368	; (adr r3, 8009ed8 <GetMoon+0x2098>)
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f7f6 fc4e 	bl	800060c <__aeabi_dmul>
 8009d70:	4603      	mov	r3, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	461a      	mov	r2, r3
 8009d76:	4623      	mov	r3, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	f7f6 fa8e 	bl	800029c <__aeabi_dsub>
 8009d80:	4603      	mov	r3, r0
 8009d82:	460c      	mov	r4, r1
 8009d84:	4618      	mov	r0, r3
 8009d86:	4621      	mov	r1, r4
 8009d88:	4b60      	ldr	r3, [pc, #384]	; (8009f0c <GetMoon+0x20cc>)
 8009d8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	4623      	mov	r3, r4
 8009d92:	f7f6 fa85 	bl	80002a0 <__adddf3>
 8009d96:	4603      	mov	r3, r0
 8009d98:	460c      	mov	r4, r1
 8009d9a:	4a5c      	ldr	r2, [pc, #368]	; (8009f0c <GetMoon+0x20cc>)
 8009d9c:	e9c2 3400 	strd	r3, r4, [r2]
    parallax += 1.73E-4 * cos(3 * anomaly) + 1.67E-4 * cos(4*phase-anomaly);
 8009da0:	4b58      	ldr	r3, [pc, #352]	; (8009f04 <GetMoon+0x20c4>)
 8009da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	4b5a      	ldr	r3, [pc, #360]	; (8009f14 <GetMoon+0x20d4>)
 8009dac:	f7f6 fc2e 	bl	800060c <__aeabi_dmul>
 8009db0:	4603      	mov	r3, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	ec44 3b17 	vmov	d7, r3, r4
 8009db8:	eeb0 0a47 	vmov.f32	s0, s14
 8009dbc:	eef0 0a67 	vmov.f32	s1, s15
 8009dc0:	f00f f93a 	bl	8019038 <cos>
 8009dc4:	ec51 0b10 	vmov	r0, r1, d0
 8009dc8:	a345      	add	r3, pc, #276	; (adr r3, 8009ee0 <GetMoon+0x20a0>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fc1d 	bl	800060c <__aeabi_dmul>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	461d      	mov	r5, r3
 8009dd8:	4626      	mov	r6, r4
 8009dda:	4b49      	ldr	r3, [pc, #292]	; (8009f00 <GetMoon+0x20c0>)
 8009ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009de0:	f04f 0200 	mov.w	r2, #0
 8009de4:	4b4c      	ldr	r3, [pc, #304]	; (8009f18 <GetMoon+0x20d8>)
 8009de6:	f7f6 fc11 	bl	800060c <__aeabi_dmul>
 8009dea:	4603      	mov	r3, r0
 8009dec:	460c      	mov	r4, r1
 8009dee:	4618      	mov	r0, r3
 8009df0:	4621      	mov	r1, r4
 8009df2:	4b44      	ldr	r3, [pc, #272]	; (8009f04 <GetMoon+0x20c4>)
 8009df4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4623      	mov	r3, r4
 8009dfc:	f7f6 fa4e 	bl	800029c <__aeabi_dsub>
 8009e00:	4603      	mov	r3, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	ec44 3b17 	vmov	d7, r3, r4
 8009e08:	eeb0 0a47 	vmov.f32	s0, s14
 8009e0c:	eef0 0a67 	vmov.f32	s1, s15
 8009e10:	f00f f912 	bl	8019038 <cos>
 8009e14:	ec51 0b10 	vmov	r0, r1, d0
 8009e18:	a333      	add	r3, pc, #204	; (adr r3, 8009ee8 <GetMoon+0x20a8>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fbf5 	bl	800060c <__aeabi_dmul>
 8009e22:	4603      	mov	r3, r0
 8009e24:	460c      	mov	r4, r1
 8009e26:	461a      	mov	r2, r3
 8009e28:	4623      	mov	r3, r4
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	f7f6 fa37 	bl	80002a0 <__adddf3>
 8009e32:	4603      	mov	r3, r0
 8009e34:	460c      	mov	r4, r1
 8009e36:	4618      	mov	r0, r3
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4b34      	ldr	r3, [pc, #208]	; (8009f0c <GetMoon+0x20cc>)
 8009e3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e40:	461a      	mov	r2, r3
 8009e42:	4623      	mov	r3, r4
 8009e44:	f7f6 fa2c 	bl	80002a0 <__adddf3>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	4a2f      	ldr	r2, [pc, #188]	; (8009f0c <GetMoon+0x20cc>)
 8009e4e:	e9c2 3400 	strd	r3, r4, [r2]

    // So Moon distance in Earth radii is, more or less,
    distance = 1.0 / sin(parallax * snm_DEG_TO_RAD);
 8009e52:	4b2e      	ldr	r3, [pc, #184]	; (8009f0c <GetMoon+0x20cc>)
 8009e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e58:	a325      	add	r3, pc, #148	; (adr r3, 8009ef0 <GetMoon+0x20b0>)
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	f7f6 fbd5 	bl	800060c <__aeabi_dmul>
 8009e62:	4603      	mov	r3, r0
 8009e64:	460c      	mov	r4, r1
 8009e66:	ec44 3b17 	vmov	d7, r3, r4
 8009e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8009e6e:	eef0 0a67 	vmov.f32	s1, s15
 8009e72:	f00f fa09 	bl	8019288 <sin>
 8009e76:	ec54 3b10 	vmov	r3, r4, d0
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	4623      	mov	r3, r4
 8009e7e:	f04f 0000 	mov.w	r0, #0
 8009e82:	4926      	ldr	r1, [pc, #152]	; (8009f1c <GetMoon+0x20dc>)
 8009e84:	f7f6 fcec 	bl	8000860 <__aeabi_ddiv>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	4a24      	ldr	r2, [pc, #144]	; (8009f20 <GetMoon+0x20e0>)
 8009e8e:	e9c2 3400 	strd	r3, r4, [r2]

    // Ecliptic latitude with nodal phase (error<0.01 deg)
    l = 5.128189 * sin(node) + 0.280606 * sin(node + anomaly) + 0.277693 * sin(anomaly - node);
 8009e92:	4b1f      	ldr	r3, [pc, #124]	; (8009f10 <GetMoon+0x20d0>)
 8009e94:	ed93 7b00 	vldr	d7, [r3]
 8009e98:	eeb0 0a47 	vmov.f32	s0, s14
 8009e9c:	eef0 0a67 	vmov.f32	s1, s15
 8009ea0:	f00f f9f2 	bl	8019288 <sin>
 8009ea4:	ec51 0b10 	vmov	r0, r1, d0
 8009ea8:	a313      	add	r3, pc, #76	; (adr r3, 8009ef8 <GetMoon+0x20b8>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f7f6 fbad 	bl	800060c <__aeabi_dmul>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	461d      	mov	r5, r3
 8009eb8:	4626      	mov	r6, r4
 8009eba:	e033      	b.n	8009f24 <GetMoon+0x20e4>
 8009ebc:	f3af 8000 	nop.w
 8009ec0:	88e368f1 	.word	0x88e368f1
 8009ec4:	3f34f8b5 	.word	0x3f34f8b5
 8009ec8:	23209678 	.word	0x23209678
 8009ecc:	3f31c2a0 	.word	0x3f31c2a0
 8009ed0:	5dbb9cfa 	.word	0x5dbb9cfa
 8009ed4:	3f314d2f 	.word	0x3f314d2f
 8009ed8:	0c996b76 	.word	0x0c996b76
 8009edc:	3f29f3c7 	.word	0x3f29f3c7
 8009ee0:	af35e311 	.word	0xaf35e311
 8009ee4:	3f26acea 	.word	0x3f26acea
 8009ee8:	13ad5bee 	.word	0x13ad5bee
 8009eec:	3f25e397 	.word	0x3f25e397
 8009ef0:	a2529d39 	.word	0xa2529d39
 8009ef4:	3f91df46 	.word	0x3f91df46
 8009ef8:	fa2ad3e9 	.word	0xfa2ad3e9
 8009efc:	40148343 	.word	0x40148343
 8009f00:	20000660 	.word	0x20000660
 8009f04:	20000668 	.word	0x20000668
 8009f08:	20000678 	.word	0x20000678
 8009f0c:	200006b0 	.word	0x200006b0
 8009f10:	20000670 	.word	0x20000670
 8009f14:	40080000 	.word	0x40080000
 8009f18:	40100000 	.word	0x40100000
 8009f1c:	3ff00000 	.word	0x3ff00000
 8009f20:	200006b8 	.word	0x200006b8
 8009f24:	4bd6      	ldr	r3, [pc, #856]	; (800a280 <GetMoon+0x2440>)
 8009f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f2a:	4bd6      	ldr	r3, [pc, #856]	; (800a284 <GetMoon+0x2444>)
 8009f2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f30:	461a      	mov	r2, r3
 8009f32:	4623      	mov	r3, r4
 8009f34:	f7f6 f9b4 	bl	80002a0 <__adddf3>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	ec44 3b17 	vmov	d7, r3, r4
 8009f40:	eeb0 0a47 	vmov.f32	s0, s14
 8009f44:	eef0 0a67 	vmov.f32	s1, s15
 8009f48:	f00f f99e 	bl	8019288 <sin>
 8009f4c:	ec51 0b10 	vmov	r0, r1, d0
 8009f50:	a3bb      	add	r3, pc, #748	; (adr r3, 800a240 <GetMoon+0x2400>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 fb59 	bl	800060c <__aeabi_dmul>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4623      	mov	r3, r4
 8009f62:	4628      	mov	r0, r5
 8009f64:	4631      	mov	r1, r6
 8009f66:	f7f6 f99b 	bl	80002a0 <__adddf3>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	461d      	mov	r5, r3
 8009f70:	4626      	mov	r6, r4
 8009f72:	4bc4      	ldr	r3, [pc, #784]	; (800a284 <GetMoon+0x2444>)
 8009f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f78:	4bc1      	ldr	r3, [pc, #772]	; (800a280 <GetMoon+0x2440>)
 8009f7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4623      	mov	r3, r4
 8009f82:	f7f6 f98b 	bl	800029c <__aeabi_dsub>
 8009f86:	4603      	mov	r3, r0
 8009f88:	460c      	mov	r4, r1
 8009f8a:	ec44 3b17 	vmov	d7, r3, r4
 8009f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8009f92:	eef0 0a67 	vmov.f32	s1, s15
 8009f96:	f00f f977 	bl	8019288 <sin>
 8009f9a:	ec51 0b10 	vmov	r0, r1, d0
 8009f9e:	a3aa      	add	r3, pc, #680	; (adr r3, 800a248 <GetMoon+0x2408>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 fb32 	bl	800060c <__aeabi_dmul>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	461a      	mov	r2, r3
 8009fae:	4623      	mov	r3, r4
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	f7f6 f974 	bl	80002a0 <__adddf3>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	460c      	mov	r4, r1
 8009fbc:	4ab2      	ldr	r2, [pc, #712]	; (800a288 <GetMoon+0x2448>)
 8009fbe:	e9c2 3400 	strd	r3, r4, [r2]
    l += .173238 * sin(2 * phase - node) + .055413 * sin(2 * phase + node - anomaly);
 8009fc2:	4bb2      	ldr	r3, [pc, #712]	; (800a28c <GetMoon+0x244c>)
 8009fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	f7f6 f968 	bl	80002a0 <__adddf3>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4ba9      	ldr	r3, [pc, #676]	; (800a280 <GetMoon+0x2440>)
 8009fda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	4623      	mov	r3, r4
 8009fe2:	f7f6 f95b 	bl	800029c <__aeabi_dsub>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	460c      	mov	r4, r1
 8009fea:	ec44 3b17 	vmov	d7, r3, r4
 8009fee:	eeb0 0a47 	vmov.f32	s0, s14
 8009ff2:	eef0 0a67 	vmov.f32	s1, s15
 8009ff6:	f00f f947 	bl	8019288 <sin>
 8009ffa:	ec51 0b10 	vmov	r0, r1, d0
 8009ffe:	a394      	add	r3, pc, #592	; (adr r3, 800a250 <GetMoon+0x2410>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 fb02 	bl	800060c <__aeabi_dmul>
 800a008:	4603      	mov	r3, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	461d      	mov	r5, r3
 800a00e:	4626      	mov	r6, r4
 800a010:	4b9e      	ldr	r3, [pc, #632]	; (800a28c <GetMoon+0x244c>)
 800a012:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	f7f6 f941 	bl	80002a0 <__adddf3>
 800a01e:	4603      	mov	r3, r0
 800a020:	460c      	mov	r4, r1
 800a022:	4618      	mov	r0, r3
 800a024:	4621      	mov	r1, r4
 800a026:	4b96      	ldr	r3, [pc, #600]	; (800a280 <GetMoon+0x2440>)
 800a028:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a02c:	461a      	mov	r2, r3
 800a02e:	4623      	mov	r3, r4
 800a030:	f7f6 f936 	bl	80002a0 <__adddf3>
 800a034:	4603      	mov	r3, r0
 800a036:	460c      	mov	r4, r1
 800a038:	4618      	mov	r0, r3
 800a03a:	4621      	mov	r1, r4
 800a03c:	4b91      	ldr	r3, [pc, #580]	; (800a284 <GetMoon+0x2444>)
 800a03e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a042:	461a      	mov	r2, r3
 800a044:	4623      	mov	r3, r4
 800a046:	f7f6 f929 	bl	800029c <__aeabi_dsub>
 800a04a:	4603      	mov	r3, r0
 800a04c:	460c      	mov	r4, r1
 800a04e:	ec44 3b17 	vmov	d7, r3, r4
 800a052:	eeb0 0a47 	vmov.f32	s0, s14
 800a056:	eef0 0a67 	vmov.f32	s1, s15
 800a05a:	f00f f915 	bl	8019288 <sin>
 800a05e:	ec51 0b10 	vmov	r0, r1, d0
 800a062:	a37d      	add	r3, pc, #500	; (adr r3, 800a258 <GetMoon+0x2418>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 fad0 	bl	800060c <__aeabi_dmul>
 800a06c:	4603      	mov	r3, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	461a      	mov	r2, r3
 800a072:	4623      	mov	r3, r4
 800a074:	4628      	mov	r0, r5
 800a076:	4631      	mov	r1, r6
 800a078:	f7f6 f912 	bl	80002a0 <__adddf3>
 800a07c:	4603      	mov	r3, r0
 800a07e:	460c      	mov	r4, r1
 800a080:	4618      	mov	r0, r3
 800a082:	4621      	mov	r1, r4
 800a084:	4b80      	ldr	r3, [pc, #512]	; (800a288 <GetMoon+0x2448>)
 800a086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a08a:	461a      	mov	r2, r3
 800a08c:	4623      	mov	r3, r4
 800a08e:	f7f6 f907 	bl	80002a0 <__adddf3>
 800a092:	4603      	mov	r3, r0
 800a094:	460c      	mov	r4, r1
 800a096:	4a7c      	ldr	r2, [pc, #496]	; (800a288 <GetMoon+0x2448>)
 800a098:	e9c2 3400 	strd	r3, r4, [r2]
    l += .046272 * sin(2 * phase - node - anomaly) + .032573 * sin(2 * phase + node);
 800a09c:	4b7b      	ldr	r3, [pc, #492]	; (800a28c <GetMoon+0x244c>)
 800a09e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	f7f6 f8fb 	bl	80002a0 <__adddf3>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	4b73      	ldr	r3, [pc, #460]	; (800a280 <GetMoon+0x2440>)
 800a0b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4623      	mov	r3, r4
 800a0bc:	f7f6 f8ee 	bl	800029c <__aeabi_dsub>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4b6e      	ldr	r3, [pc, #440]	; (800a284 <GetMoon+0x2444>)
 800a0ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	f7f6 f8e3 	bl	800029c <__aeabi_dsub>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	460c      	mov	r4, r1
 800a0da:	ec44 3b17 	vmov	d7, r3, r4
 800a0de:	eeb0 0a47 	vmov.f32	s0, s14
 800a0e2:	eef0 0a67 	vmov.f32	s1, s15
 800a0e6:	f00f f8cf 	bl	8019288 <sin>
 800a0ea:	ec51 0b10 	vmov	r0, r1, d0
 800a0ee:	a35c      	add	r3, pc, #368	; (adr r3, 800a260 <GetMoon+0x2420>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 fa8a 	bl	800060c <__aeabi_dmul>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	461d      	mov	r5, r3
 800a0fe:	4626      	mov	r6, r4
 800a100:	4b62      	ldr	r3, [pc, #392]	; (800a28c <GetMoon+0x244c>)
 800a102:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	f7f6 f8c9 	bl	80002a0 <__adddf3>
 800a10e:	4603      	mov	r3, r0
 800a110:	460c      	mov	r4, r1
 800a112:	4618      	mov	r0, r3
 800a114:	4621      	mov	r1, r4
 800a116:	4b5a      	ldr	r3, [pc, #360]	; (800a280 <GetMoon+0x2440>)
 800a118:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a11c:	461a      	mov	r2, r3
 800a11e:	4623      	mov	r3, r4
 800a120:	f7f6 f8be 	bl	80002a0 <__adddf3>
 800a124:	4603      	mov	r3, r0
 800a126:	460c      	mov	r4, r1
 800a128:	ec44 3b17 	vmov	d7, r3, r4
 800a12c:	eeb0 0a47 	vmov.f32	s0, s14
 800a130:	eef0 0a67 	vmov.f32	s1, s15
 800a134:	f00f f8a8 	bl	8019288 <sin>
 800a138:	ec51 0b10 	vmov	r0, r1, d0
 800a13c:	a34a      	add	r3, pc, #296	; (adr r3, 800a268 <GetMoon+0x2428>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 fa63 	bl	800060c <__aeabi_dmul>
 800a146:	4603      	mov	r3, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	461a      	mov	r2, r3
 800a14c:	4623      	mov	r3, r4
 800a14e:	4628      	mov	r0, r5
 800a150:	4631      	mov	r1, r6
 800a152:	f7f6 f8a5 	bl	80002a0 <__adddf3>
 800a156:	4603      	mov	r3, r0
 800a158:	460c      	mov	r4, r1
 800a15a:	4618      	mov	r0, r3
 800a15c:	4621      	mov	r1, r4
 800a15e:	4b4a      	ldr	r3, [pc, #296]	; (800a288 <GetMoon+0x2448>)
 800a160:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a164:	461a      	mov	r2, r3
 800a166:	4623      	mov	r3, r4
 800a168:	f7f6 f89a 	bl	80002a0 <__adddf3>
 800a16c:	4603      	mov	r3, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4a45      	ldr	r2, [pc, #276]	; (800a288 <GetMoon+0x2448>)
 800a172:	e9c2 3400 	strd	r3, r4, [r2]
    l += .017198 * sin(2 * anomaly + node) + .009267 * sin(2 * phase + anomaly - node);
 800a176:	4b43      	ldr	r3, [pc, #268]	; (800a284 <GetMoon+0x2444>)
 800a178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	f7f6 f88e 	bl	80002a0 <__adddf3>
 800a184:	4603      	mov	r3, r0
 800a186:	460c      	mov	r4, r1
 800a188:	4618      	mov	r0, r3
 800a18a:	4621      	mov	r1, r4
 800a18c:	4b3c      	ldr	r3, [pc, #240]	; (800a280 <GetMoon+0x2440>)
 800a18e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a192:	461a      	mov	r2, r3
 800a194:	4623      	mov	r3, r4
 800a196:	f7f6 f883 	bl	80002a0 <__adddf3>
 800a19a:	4603      	mov	r3, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	ec44 3b17 	vmov	d7, r3, r4
 800a1a2:	eeb0 0a47 	vmov.f32	s0, s14
 800a1a6:	eef0 0a67 	vmov.f32	s1, s15
 800a1aa:	f00f f86d 	bl	8019288 <sin>
 800a1ae:	ec51 0b10 	vmov	r0, r1, d0
 800a1b2:	a32f      	add	r3, pc, #188	; (adr r3, 800a270 <GetMoon+0x2430>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	f7f6 fa28 	bl	800060c <__aeabi_dmul>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	461d      	mov	r5, r3
 800a1c2:	4626      	mov	r6, r4
 800a1c4:	4b31      	ldr	r3, [pc, #196]	; (800a28c <GetMoon+0x244c>)
 800a1c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	f7f6 f867 	bl	80002a0 <__adddf3>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	4621      	mov	r1, r4
 800a1da:	4b2a      	ldr	r3, [pc, #168]	; (800a284 <GetMoon+0x2444>)
 800a1dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	4623      	mov	r3, r4
 800a1e4:	f7f6 f85c 	bl	80002a0 <__adddf3>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4b23      	ldr	r3, [pc, #140]	; (800a280 <GetMoon+0x2440>)
 800a1f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	f7f6 f84f 	bl	800029c <__aeabi_dsub>
 800a1fe:	4603      	mov	r3, r0
 800a200:	460c      	mov	r4, r1
 800a202:	ec44 3b17 	vmov	d7, r3, r4
 800a206:	eeb0 0a47 	vmov.f32	s0, s14
 800a20a:	eef0 0a67 	vmov.f32	s1, s15
 800a20e:	f00f f83b 	bl	8019288 <sin>
 800a212:	ec51 0b10 	vmov	r0, r1, d0
 800a216:	a318      	add	r3, pc, #96	; (adr r3, 800a278 <GetMoon+0x2438>)
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	f7f6 f9f6 	bl	800060c <__aeabi_dmul>
 800a220:	4603      	mov	r3, r0
 800a222:	460c      	mov	r4, r1
 800a224:	461a      	mov	r2, r3
 800a226:	4623      	mov	r3, r4
 800a228:	4628      	mov	r0, r5
 800a22a:	4631      	mov	r1, r6
 800a22c:	f7f6 f838 	bl	80002a0 <__adddf3>
 800a230:	4603      	mov	r3, r0
 800a232:	460c      	mov	r4, r1
 800a234:	4618      	mov	r0, r3
 800a236:	4621      	mov	r1, r4
 800a238:	e02a      	b.n	800a290 <GetMoon+0x2450>
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
 800a240:	de43ed96 	.word	0xde43ed96
 800a244:	3fd1f572 	.word	0x3fd1f572
 800a248:	dc55000d 	.word	0xdc55000d
 800a24c:	3fd1c5b8 	.word	0x3fd1c5b8
 800a250:	ac365450 	.word	0xac365450
 800a254:	3fc62ca9 	.word	0x3fc62ca9
 800a258:	bd8be729 	.word	0xbd8be729
 800a25c:	3fac5f17 	.word	0x3fac5f17
 800a260:	ad70e6f3 	.word	0xad70e6f3
 800a264:	3fa7b0f6 	.word	0x3fa7b0f6
 800a268:	83771865 	.word	0x83771865
 800a26c:	3fa0ad68 	.word	0x3fa0ad68
 800a270:	3e39f773 	.word	0x3e39f773
 800a274:	3f919c5a 	.word	0x3f919c5a
 800a278:	af74cd31 	.word	0xaf74cd31
 800a27c:	3f82fa93 	.word	0x3f82fa93
 800a280:	20000670 	.word	0x20000670
 800a284:	20000668 	.word	0x20000668
 800a288:	20000680 	.word	0x20000680
 800a28c:	20000660 	.word	0x20000660
 800a290:	4bd1      	ldr	r3, [pc, #836]	; (800a5d8 <GetMoon+0x2798>)
 800a292:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a296:	461a      	mov	r2, r3
 800a298:	4623      	mov	r3, r4
 800a29a:	f7f6 f801 	bl	80002a0 <__adddf3>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	4acd      	ldr	r2, [pc, #820]	; (800a5d8 <GetMoon+0x2798>)
 800a2a4:	e9c2 3400 	strd	r3, r4, [r2]
    l += .008823 * sin(2 * anomaly - node) + E * .008247 * sin(2 * phase - calc->aux.sanomaly - node) + .004323 * sin(2 * (phase - anomaly) - node);
 800a2a8:	4bcc      	ldr	r3, [pc, #816]	; (800a5dc <GetMoon+0x279c>)
 800a2aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	f7f5 fff5 	bl	80002a0 <__adddf3>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4bc8      	ldr	r3, [pc, #800]	; (800a5e0 <GetMoon+0x27a0>)
 800a2c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4623      	mov	r3, r4
 800a2c8:	f7f5 ffe8 	bl	800029c <__aeabi_dsub>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	ec44 3b17 	vmov	d7, r3, r4
 800a2d4:	eeb0 0a47 	vmov.f32	s0, s14
 800a2d8:	eef0 0a67 	vmov.f32	s1, s15
 800a2dc:	f00e ffd4 	bl	8019288 <sin>
 800a2e0:	ec51 0b10 	vmov	r0, r1, d0
 800a2e4:	a3b0      	add	r3, pc, #704	; (adr r3, 800a5a8 <GetMoon+0x2768>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f7f6 f98f 	bl	800060c <__aeabi_dmul>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	461d      	mov	r5, r3
 800a2f4:	4626      	mov	r6, r4
 800a2f6:	4bbb      	ldr	r3, [pc, #748]	; (800a5e4 <GetMoon+0x27a4>)
 800a2f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2fc:	a3ac      	add	r3, pc, #688	; (adr r3, 800a5b0 <GetMoon+0x2770>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f6 f983 	bl	800060c <__aeabi_dmul>
 800a306:	4603      	mov	r3, r0
 800a308:	460c      	mov	r4, r1
 800a30a:	4698      	mov	r8, r3
 800a30c:	46a1      	mov	r9, r4
 800a30e:	4bb6      	ldr	r3, [pc, #728]	; (800a5e8 <GetMoon+0x27a8>)
 800a310:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	f7f5 ffc2 	bl	80002a0 <__adddf3>
 800a31c:	4603      	mov	r3, r0
 800a31e:	460c      	mov	r4, r1
 800a320:	4618      	mov	r0, r3
 800a322:	4621      	mov	r1, r4
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800a32a:	461a      	mov	r2, r3
 800a32c:	4623      	mov	r3, r4
 800a32e:	f7f5 ffb5 	bl	800029c <__aeabi_dsub>
 800a332:	4603      	mov	r3, r0
 800a334:	460c      	mov	r4, r1
 800a336:	4618      	mov	r0, r3
 800a338:	4621      	mov	r1, r4
 800a33a:	4ba9      	ldr	r3, [pc, #676]	; (800a5e0 <GetMoon+0x27a0>)
 800a33c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a340:	461a      	mov	r2, r3
 800a342:	4623      	mov	r3, r4
 800a344:	f7f5 ffaa 	bl	800029c <__aeabi_dsub>
 800a348:	4603      	mov	r3, r0
 800a34a:	460c      	mov	r4, r1
 800a34c:	ec44 3b17 	vmov	d7, r3, r4
 800a350:	eeb0 0a47 	vmov.f32	s0, s14
 800a354:	eef0 0a67 	vmov.f32	s1, s15
 800a358:	f00e ff96 	bl	8019288 <sin>
 800a35c:	ec54 3b10 	vmov	r3, r4, d0
 800a360:	461a      	mov	r2, r3
 800a362:	4623      	mov	r3, r4
 800a364:	4640      	mov	r0, r8
 800a366:	4649      	mov	r1, r9
 800a368:	f7f6 f950 	bl	800060c <__aeabi_dmul>
 800a36c:	4603      	mov	r3, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	461a      	mov	r2, r3
 800a372:	4623      	mov	r3, r4
 800a374:	4628      	mov	r0, r5
 800a376:	4631      	mov	r1, r6
 800a378:	f7f5 ff92 	bl	80002a0 <__adddf3>
 800a37c:	4603      	mov	r3, r0
 800a37e:	460c      	mov	r4, r1
 800a380:	461d      	mov	r5, r3
 800a382:	4626      	mov	r6, r4
 800a384:	4b98      	ldr	r3, [pc, #608]	; (800a5e8 <GetMoon+0x27a8>)
 800a386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a38a:	4b94      	ldr	r3, [pc, #592]	; (800a5dc <GetMoon+0x279c>)
 800a38c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a390:	461a      	mov	r2, r3
 800a392:	4623      	mov	r3, r4
 800a394:	f7f5 ff82 	bl	800029c <__aeabi_dsub>
 800a398:	4603      	mov	r3, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	4618      	mov	r0, r3
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	f7f5 ff7c 	bl	80002a0 <__adddf3>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	4b8b      	ldr	r3, [pc, #556]	; (800a5e0 <GetMoon+0x27a0>)
 800a3b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	f7f5 ff6f 	bl	800029c <__aeabi_dsub>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	ec44 3b17 	vmov	d7, r3, r4
 800a3c6:	eeb0 0a47 	vmov.f32	s0, s14
 800a3ca:	eef0 0a67 	vmov.f32	s1, s15
 800a3ce:	f00e ff5b 	bl	8019288 <sin>
 800a3d2:	ec51 0b10 	vmov	r0, r1, d0
 800a3d6:	a378      	add	r3, pc, #480	; (adr r3, 800a5b8 <GetMoon+0x2778>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f6 f916 	bl	800060c <__aeabi_dmul>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	4623      	mov	r3, r4
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	f7f5 ff58 	bl	80002a0 <__adddf3>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	4b77      	ldr	r3, [pc, #476]	; (800a5d8 <GetMoon+0x2798>)
 800a3fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3fe:	461a      	mov	r2, r3
 800a400:	4623      	mov	r3, r4
 800a402:	f7f5 ff4d 	bl	80002a0 <__adddf3>
 800a406:	4603      	mov	r3, r0
 800a408:	460c      	mov	r4, r1
 800a40a:	4a73      	ldr	r2, [pc, #460]	; (800a5d8 <GetMoon+0x2798>)
 800a40c:	e9c2 3400 	strd	r3, r4, [r2]
    l += .0042 * sin(2 * phase + node + anomaly) + E * .003372 * sin(node - calc->aux.sanomaly - 2 * phase);
 800a410:	4b75      	ldr	r3, [pc, #468]	; (800a5e8 <GetMoon+0x27a8>)
 800a412:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	f7f5 ff41 	bl	80002a0 <__adddf3>
 800a41e:	4603      	mov	r3, r0
 800a420:	460c      	mov	r4, r1
 800a422:	4618      	mov	r0, r3
 800a424:	4621      	mov	r1, r4
 800a426:	4b6e      	ldr	r3, [pc, #440]	; (800a5e0 <GetMoon+0x27a0>)
 800a428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a42c:	461a      	mov	r2, r3
 800a42e:	4623      	mov	r3, r4
 800a430:	f7f5 ff36 	bl	80002a0 <__adddf3>
 800a434:	4603      	mov	r3, r0
 800a436:	460c      	mov	r4, r1
 800a438:	4618      	mov	r0, r3
 800a43a:	4621      	mov	r1, r4
 800a43c:	4b67      	ldr	r3, [pc, #412]	; (800a5dc <GetMoon+0x279c>)
 800a43e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a442:	461a      	mov	r2, r3
 800a444:	4623      	mov	r3, r4
 800a446:	f7f5 ff2b 	bl	80002a0 <__adddf3>
 800a44a:	4603      	mov	r3, r0
 800a44c:	460c      	mov	r4, r1
 800a44e:	ec44 3b17 	vmov	d7, r3, r4
 800a452:	eeb0 0a47 	vmov.f32	s0, s14
 800a456:	eef0 0a67 	vmov.f32	s1, s15
 800a45a:	f00e ff15 	bl	8019288 <sin>
 800a45e:	ec51 0b10 	vmov	r0, r1, d0
 800a462:	a357      	add	r3, pc, #348	; (adr r3, 800a5c0 <GetMoon+0x2780>)
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f7f6 f8d0 	bl	800060c <__aeabi_dmul>
 800a46c:	4603      	mov	r3, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	461d      	mov	r5, r3
 800a472:	4626      	mov	r6, r4
 800a474:	4b5b      	ldr	r3, [pc, #364]	; (800a5e4 <GetMoon+0x27a4>)
 800a476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a47a:	a353      	add	r3, pc, #332	; (adr r3, 800a5c8 <GetMoon+0x2788>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f6 f8c4 	bl	800060c <__aeabi_dmul>
 800a484:	4603      	mov	r3, r0
 800a486:	460c      	mov	r4, r1
 800a488:	4698      	mov	r8, r3
 800a48a:	46a1      	mov	r9, r4
 800a48c:	4b54      	ldr	r3, [pc, #336]	; (800a5e0 <GetMoon+0x27a0>)
 800a48e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800a498:	461a      	mov	r2, r3
 800a49a:	4623      	mov	r3, r4
 800a49c:	f7f5 fefe 	bl	800029c <__aeabi_dsub>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	469a      	mov	sl, r3
 800a4a6:	46a3      	mov	fp, r4
 800a4a8:	4b4f      	ldr	r3, [pc, #316]	; (800a5e8 <GetMoon+0x27a8>)
 800a4aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	f7f5 fef5 	bl	80002a0 <__adddf3>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4623      	mov	r3, r4
 800a4be:	4650      	mov	r0, sl
 800a4c0:	4659      	mov	r1, fp
 800a4c2:	f7f5 feeb 	bl	800029c <__aeabi_dsub>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	ec44 3b17 	vmov	d7, r3, r4
 800a4ce:	eeb0 0a47 	vmov.f32	s0, s14
 800a4d2:	eef0 0a67 	vmov.f32	s1, s15
 800a4d6:	f00e fed7 	bl	8019288 <sin>
 800a4da:	ec54 3b10 	vmov	r3, r4, d0
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4623      	mov	r3, r4
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	f7f6 f891 	bl	800060c <__aeabi_dmul>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	f7f5 fed3 	bl	80002a0 <__adddf3>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	4618      	mov	r0, r3
 800a500:	4621      	mov	r1, r4
 800a502:	4b35      	ldr	r3, [pc, #212]	; (800a5d8 <GetMoon+0x2798>)
 800a504:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a508:	461a      	mov	r2, r3
 800a50a:	4623      	mov	r3, r4
 800a50c:	f7f5 fec8 	bl	80002a0 <__adddf3>
 800a510:	4603      	mov	r3, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4a30      	ldr	r2, [pc, #192]	; (800a5d8 <GetMoon+0x2798>)
 800a516:	e9c2 3400 	strd	r3, r4, [r2]
    l += E * 2.472E-3 * sin(2 * phase + node - calc->aux.sanomaly - anomaly);
 800a51a:	4b32      	ldr	r3, [pc, #200]	; (800a5e4 <GetMoon+0x27a4>)
 800a51c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a520:	a32b      	add	r3, pc, #172	; (adr r3, 800a5d0 <GetMoon+0x2790>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f6 f871 	bl	800060c <__aeabi_dmul>
 800a52a:	4603      	mov	r3, r0
 800a52c:	460c      	mov	r4, r1
 800a52e:	461d      	mov	r5, r3
 800a530:	4626      	mov	r6, r4
 800a532:	4b2d      	ldr	r3, [pc, #180]	; (800a5e8 <GetMoon+0x27a8>)
 800a534:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	f7f5 feb0 	bl	80002a0 <__adddf3>
 800a540:	4603      	mov	r3, r0
 800a542:	460c      	mov	r4, r1
 800a544:	4618      	mov	r0, r3
 800a546:	4621      	mov	r1, r4
 800a548:	4b25      	ldr	r3, [pc, #148]	; (800a5e0 <GetMoon+0x27a0>)
 800a54a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a54e:	461a      	mov	r2, r3
 800a550:	4623      	mov	r3, r4
 800a552:	f7f5 fea5 	bl	80002a0 <__adddf3>
 800a556:	4603      	mov	r3, r0
 800a558:	460c      	mov	r4, r1
 800a55a:	4618      	mov	r0, r3
 800a55c:	4621      	mov	r1, r4
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800a564:	461a      	mov	r2, r3
 800a566:	4623      	mov	r3, r4
 800a568:	f7f5 fe98 	bl	800029c <__aeabi_dsub>
 800a56c:	4603      	mov	r3, r0
 800a56e:	460c      	mov	r4, r1
 800a570:	4618      	mov	r0, r3
 800a572:	4621      	mov	r1, r4
 800a574:	4b19      	ldr	r3, [pc, #100]	; (800a5dc <GetMoon+0x279c>)
 800a576:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a57a:	461a      	mov	r2, r3
 800a57c:	4623      	mov	r3, r4
 800a57e:	f7f5 fe8d 	bl	800029c <__aeabi_dsub>
 800a582:	4603      	mov	r3, r0
 800a584:	460c      	mov	r4, r1
 800a586:	ec44 3b17 	vmov	d7, r3, r4
 800a58a:	eeb0 0a47 	vmov.f32	s0, s14
 800a58e:	eef0 0a67 	vmov.f32	s1, s15
 800a592:	f00e fe79 	bl	8019288 <sin>
 800a596:	ec54 3b10 	vmov	r3, r4, d0
 800a59a:	461a      	mov	r2, r3
 800a59c:	4623      	mov	r3, r4
 800a59e:	4628      	mov	r0, r5
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	f7f6 f833 	bl	800060c <__aeabi_dmul>
 800a5a6:	e021      	b.n	800a5ec <GetMoon+0x27ac>
 800a5a8:	039ef0f1 	.word	0x039ef0f1
 800a5ac:	3f8211cb 	.word	0x3f8211cb
 800a5b0:	9a52263e 	.word	0x9a52263e
 800a5b4:	3f80e3cd 	.word	0x3f80e3cd
 800a5b8:	79ee02a7 	.word	0x79ee02a7
 800a5bc:	3f71b4fe 	.word	0x3f71b4fe
 800a5c0:	ea4a8c15 	.word	0xea4a8c15
 800a5c4:	3f713404 	.word	0x3f713404
 800a5c8:	b71b8aa0 	.word	0xb71b8aa0
 800a5cc:	3f6b9f98 	.word	0x3f6b9f98
 800a5d0:	e4fb97bb 	.word	0xe4fb97bb
 800a5d4:	3f644028 	.word	0x3f644028
 800a5d8:	20000680 	.word	0x20000680
 800a5dc:	20000668 	.word	0x20000668
 800a5e0:	20000670 	.word	0x20000670
 800a5e4:	20000678 	.word	0x20000678
 800a5e8:	20000660 	.word	0x20000660
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4b8e      	ldr	r3, [pc, #568]	; (800a830 <GetMoon+0x29f0>)
 800a5f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	4623      	mov	r3, r4
 800a5fe:	f7f5 fe4f 	bl	80002a0 <__adddf3>
 800a602:	4603      	mov	r3, r0
 800a604:	460c      	mov	r4, r1
 800a606:	4a8a      	ldr	r2, [pc, #552]	; (800a830 <GetMoon+0x29f0>)
 800a608:	e9c2 3400 	strd	r3, r4, [r2]
    l += E * 2.222E-3 * sin(2 * phase + node - calc->aux.sanomaly);
 800a60c:	4b89      	ldr	r3, [pc, #548]	; (800a834 <GetMoon+0x29f4>)
 800a60e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a612:	a37d      	add	r3, pc, #500	; (adr r3, 800a808 <GetMoon+0x29c8>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f7f5 fff8 	bl	800060c <__aeabi_dmul>
 800a61c:	4603      	mov	r3, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	461d      	mov	r5, r3
 800a622:	4626      	mov	r6, r4
 800a624:	4b84      	ldr	r3, [pc, #528]	; (800a838 <GetMoon+0x29f8>)
 800a626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	f7f5 fe37 	bl	80002a0 <__adddf3>
 800a632:	4603      	mov	r3, r0
 800a634:	460c      	mov	r4, r1
 800a636:	4618      	mov	r0, r3
 800a638:	4621      	mov	r1, r4
 800a63a:	4b80      	ldr	r3, [pc, #512]	; (800a83c <GetMoon+0x29fc>)
 800a63c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a640:	461a      	mov	r2, r3
 800a642:	4623      	mov	r3, r4
 800a644:	f7f5 fe2c 	bl	80002a0 <__adddf3>
 800a648:	4603      	mov	r3, r0
 800a64a:	460c      	mov	r4, r1
 800a64c:	4618      	mov	r0, r3
 800a64e:	4621      	mov	r1, r4
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800a656:	461a      	mov	r2, r3
 800a658:	4623      	mov	r3, r4
 800a65a:	f7f5 fe1f 	bl	800029c <__aeabi_dsub>
 800a65e:	4603      	mov	r3, r0
 800a660:	460c      	mov	r4, r1
 800a662:	ec44 3b17 	vmov	d7, r3, r4
 800a666:	eeb0 0a47 	vmov.f32	s0, s14
 800a66a:	eef0 0a67 	vmov.f32	s1, s15
 800a66e:	f00e fe0b 	bl	8019288 <sin>
 800a672:	ec54 3b10 	vmov	r3, r4, d0
 800a676:	461a      	mov	r2, r3
 800a678:	4623      	mov	r3, r4
 800a67a:	4628      	mov	r0, r5
 800a67c:	4631      	mov	r1, r6
 800a67e:	f7f5 ffc5 	bl	800060c <__aeabi_dmul>
 800a682:	4603      	mov	r3, r0
 800a684:	460c      	mov	r4, r1
 800a686:	4618      	mov	r0, r3
 800a688:	4621      	mov	r1, r4
 800a68a:	4b69      	ldr	r3, [pc, #420]	; (800a830 <GetMoon+0x29f0>)
 800a68c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a690:	461a      	mov	r2, r3
 800a692:	4623      	mov	r3, r4
 800a694:	f7f5 fe04 	bl	80002a0 <__adddf3>
 800a698:	4603      	mov	r3, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	4a64      	ldr	r2, [pc, #400]	; (800a830 <GetMoon+0x29f0>)
 800a69e:	e9c2 3400 	strd	r3, r4, [r2]
    l += E * 2.072E-3 * sin(2 * phase - node - calc->aux.sanomaly - anomaly);
 800a6a2:	4b64      	ldr	r3, [pc, #400]	; (800a834 <GetMoon+0x29f4>)
 800a6a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6a8:	a359      	add	r3, pc, #356	; (adr r3, 800a810 <GetMoon+0x29d0>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	f7f5 ffad 	bl	800060c <__aeabi_dmul>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	461d      	mov	r5, r3
 800a6b8:	4626      	mov	r6, r4
 800a6ba:	4b5f      	ldr	r3, [pc, #380]	; (800a838 <GetMoon+0x29f8>)
 800a6bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	f7f5 fdec 	bl	80002a0 <__adddf3>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4b5a      	ldr	r3, [pc, #360]	; (800a83c <GetMoon+0x29fc>)
 800a6d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4623      	mov	r3, r4
 800a6da:	f7f5 fddf 	bl	800029c <__aeabi_dsub>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4623      	mov	r3, r4
 800a6f0:	f7f5 fdd4 	bl	800029c <__aeabi_dsub>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	4b50      	ldr	r3, [pc, #320]	; (800a840 <GetMoon+0x2a00>)
 800a6fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a702:	461a      	mov	r2, r3
 800a704:	4623      	mov	r3, r4
 800a706:	f7f5 fdc9 	bl	800029c <__aeabi_dsub>
 800a70a:	4603      	mov	r3, r0
 800a70c:	460c      	mov	r4, r1
 800a70e:	ec44 3b17 	vmov	d7, r3, r4
 800a712:	eeb0 0a47 	vmov.f32	s0, s14
 800a716:	eef0 0a67 	vmov.f32	s1, s15
 800a71a:	f00e fdb5 	bl	8019288 <sin>
 800a71e:	ec54 3b10 	vmov	r3, r4, d0
 800a722:	461a      	mov	r2, r3
 800a724:	4623      	mov	r3, r4
 800a726:	4628      	mov	r0, r5
 800a728:	4631      	mov	r1, r6
 800a72a:	f7f5 ff6f 	bl	800060c <__aeabi_dmul>
 800a72e:	4603      	mov	r3, r0
 800a730:	460c      	mov	r4, r1
 800a732:	4618      	mov	r0, r3
 800a734:	4621      	mov	r1, r4
 800a736:	4b3e      	ldr	r3, [pc, #248]	; (800a830 <GetMoon+0x29f0>)
 800a738:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a73c:	461a      	mov	r2, r3
 800a73e:	4623      	mov	r3, r4
 800a740:	f7f5 fdae 	bl	80002a0 <__adddf3>
 800a744:	4603      	mov	r3, r0
 800a746:	460c      	mov	r4, r1
 800a748:	4a39      	ldr	r2, [pc, #228]	; (800a830 <GetMoon+0x29f0>)
 800a74a:	e9c2 3400 	strd	r3, r4, [r2]
    latitude = l;
 800a74e:	4b38      	ldr	r3, [pc, #224]	; (800a830 <GetMoon+0x29f0>)
 800a750:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a754:	4a3b      	ldr	r2, [pc, #236]	; (800a844 <GetMoon+0x2a04>)
 800a756:	e9c2 3400 	strd	r3, r4, [r2]

    params[0] = longitude;
 800a75a:	4b3b      	ldr	r3, [pc, #236]	; (800a848 <GetMoon+0x2a08>)
 800a75c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	e9c2 3400 	strd	r3, r4, [r2]
    params[1] = latitude;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f103 0208 	add.w	r2, r3, #8
 800a76c:	4b35      	ldr	r3, [pc, #212]	; (800a844 <GetMoon+0x2a04>)
 800a76e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a772:	e9c2 3400 	strd	r3, r4, [r2]
    params[2] = distance * EARTH_RADIUS / AU;
 800a776:	4b35      	ldr	r3, [pc, #212]	; (800a84c <GetMoon+0x2a0c>)
 800a778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a77c:	a426      	add	r4, pc, #152	; (adr r4, 800a818 <GetMoon+0x29d8>)
 800a77e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a782:	461a      	mov	r2, r3
 800a784:	4623      	mov	r3, r4
 800a786:	f7f5 ff41 	bl	800060c <__aeabi_dmul>
 800a78a:	4603      	mov	r3, r0
 800a78c:	460c      	mov	r4, r1
 800a78e:	4698      	mov	r8, r3
 800a790:	46a1      	mov	r9, r4
 800a792:	a223      	add	r2, pc, #140	; (adr r2, 800a820 <GetMoon+0x29e0>)
 800a794:	e9d2 1200 	ldrd	r1, r2, [r2]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	f103 0510 	add.w	r5, r3, #16
 800a79e:	4613      	mov	r3, r2
 800a7a0:	460a      	mov	r2, r1
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	f7f6 f85b 	bl	8000860 <__aeabi_ddiv>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	e9c5 3400 	strd	r3, r4, [r5]
    params[3] = atan(1737.4 / (distance * EARTH_RADIUS));
 800a7b2:	4b26      	ldr	r3, [pc, #152]	; (800a84c <GetMoon+0x2a0c>)
 800a7b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7b8:	a417      	add	r4, pc, #92	; (adr r4, 800a818 <GetMoon+0x29d8>)
 800a7ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4623      	mov	r3, r4
 800a7c2:	f7f5 ff23 	bl	800060c <__aeabi_dmul>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4623      	mov	r3, r4
 800a7ce:	a116      	add	r1, pc, #88	; (adr r1, 800a828 <GetMoon+0x29e8>)
 800a7d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7d4:	f7f6 f844 	bl	8000860 <__aeabi_ddiv>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	ec44 3b17 	vmov	d7, r3, r4
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f103 0418 	add.w	r4, r3, #24
 800a7e6:	eeb0 0a47 	vmov.f32	s0, s14
 800a7ea:	eef0 0a67 	vmov.f32	s1, s15
 800a7ee:	f00e fa83 	bl	8018cf8 <atan>
 800a7f2:	eeb0 7a40 	vmov.f32	s14, s0
 800a7f6:	eef0 7a60 	vmov.f32	s15, s1
 800a7fa:	ed84 7b00 	vstr	d7, [r4]
}
 800a7fe:	bf00      	nop
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	2a9d627c 	.word	0x2a9d627c
 800a80c:	3f6233df 	.word	0x3f6233df
 800a810:	87980f56 	.word	0x87980f56
 800a814:	3f60f94c 	.word	0x3f60f94c
 800a818:	f837b4a2 	.word	0xf837b4a2
 800a81c:	40b8ea22 	.word	0x40b8ea22
 800a820:	5d61cac1 	.word	0x5d61cac1
 800a824:	41a1d55d 	.word	0x41a1d55d
 800a828:	9999999a 	.word	0x9999999a
 800a82c:	409b2599 	.word	0x409b2599
 800a830:	20000680 	.word	0x20000680
 800a834:	20000678 	.word	0x20000678
 800a838:	20000660 	.word	0x20000660
 800a83c:	20000670 	.word	0x20000670
 800a840:	20000668 	.word	0x20000668
 800a844:	200006c0 	.word	0x200006c0
 800a848:	20000688 	.word	0x20000688
 800a84c:	200006b8 	.word	0x200006b8

0800a850 <DoCalc>:

void DoCalc(snm_Calculator *calc, double pos[], double params[])
{
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	b095      	sub	sp, #84	; 0x54
 800a856:	af00      	add	r7, sp, #0
 800a858:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a85a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a85c:	647a      	str	r2, [r7, #68]	; 0x44
    STATIC_OPT double set_time, setToday2;

    STATIC_OPT double correction[3];

    // Ecliptic to equatorial coordinates
    t2 = calc->aux.t / 100.0;
 800a85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a860:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800a864:	f04f 0200 	mov.w	r2, #0
 800a868:	4bcd      	ldr	r3, [pc, #820]	; (800aba0 <DoCalc+0x350>)
 800a86a:	f7f5 fff9 	bl	8000860 <__aeabi_ddiv>
 800a86e:	4603      	mov	r3, r0
 800a870:	460c      	mov	r4, r1
 800a872:	4619      	mov	r1, r3
 800a874:	4622      	mov	r2, r4
 800a876:	4bcb      	ldr	r3, [pc, #812]	; (800aba4 <DoCalc+0x354>)
 800a878:	e9c3 1200 	strd	r1, r2, [r3]
    tmp = t2 * (27.87 + t2 * (5.79 + t2 * 2.45));
 800a87c:	4bc9      	ldr	r3, [pc, #804]	; (800aba4 <DoCalc+0x354>)
 800a87e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a882:	a3a3      	add	r3, pc, #652	; (adr r3, 800ab10 <DoCalc+0x2c0>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f5 fec0 	bl	800060c <__aeabi_dmul>
 800a88c:	4603      	mov	r3, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	4618      	mov	r0, r3
 800a892:	4621      	mov	r1, r4
 800a894:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab18 <DoCalc+0x2c8>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fd01 	bl	80002a0 <__adddf3>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4bbf      	ldr	r3, [pc, #764]	; (800aba4 <DoCalc+0x354>)
 800a8a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	4623      	mov	r3, r4
 800a8b0:	f7f5 feac 	bl	800060c <__aeabi_dmul>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	a398      	add	r3, pc, #608	; (adr r3, 800ab20 <DoCalc+0x2d0>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f7f5 fced 	bl	80002a0 <__adddf3>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4bb5      	ldr	r3, [pc, #724]	; (800aba4 <DoCalc+0x354>)
 800a8d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	4623      	mov	r3, r4
 800a8d8:	f7f5 fe98 	bl	800060c <__aeabi_dmul>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	4bb0      	ldr	r3, [pc, #704]	; (800aba8 <DoCalc+0x358>)
 800a8e6:	e9c3 1200 	strd	r1, r2, [r3]
    tmp = t2 * (-249.67 + t2 * (-39.05 + t2 * (7.12 + tmp)));
 800a8ea:	4baf      	ldr	r3, [pc, #700]	; (800aba8 <DoCalc+0x358>)
 800a8ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8f0:	a38d      	add	r3, pc, #564	; (adr r3, 800ab28 <DoCalc+0x2d8>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f7f5 fcd3 	bl	80002a0 <__adddf3>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	4618      	mov	r0, r3
 800a900:	4621      	mov	r1, r4
 800a902:	4ba8      	ldr	r3, [pc, #672]	; (800aba4 <DoCalc+0x354>)
 800a904:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a908:	461a      	mov	r2, r3
 800a90a:	4623      	mov	r3, r4
 800a90c:	f7f5 fe7e 	bl	800060c <__aeabi_dmul>
 800a910:	4603      	mov	r3, r0
 800a912:	460c      	mov	r4, r1
 800a914:	4618      	mov	r0, r3
 800a916:	4621      	mov	r1, r4
 800a918:	a385      	add	r3, pc, #532	; (adr r3, 800ab30 <DoCalc+0x2e0>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fcbd 	bl	800029c <__aeabi_dsub>
 800a922:	4603      	mov	r3, r0
 800a924:	460c      	mov	r4, r1
 800a926:	4618      	mov	r0, r3
 800a928:	4621      	mov	r1, r4
 800a92a:	4b9e      	ldr	r3, [pc, #632]	; (800aba4 <DoCalc+0x354>)
 800a92c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a930:	461a      	mov	r2, r3
 800a932:	4623      	mov	r3, r4
 800a934:	f7f5 fe6a 	bl	800060c <__aeabi_dmul>
 800a938:	4603      	mov	r3, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	4618      	mov	r0, r3
 800a93e:	4621      	mov	r1, r4
 800a940:	a37d      	add	r3, pc, #500	; (adr r3, 800ab38 <DoCalc+0x2e8>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	f7f5 fca9 	bl	800029c <__aeabi_dsub>
 800a94a:	4603      	mov	r3, r0
 800a94c:	460c      	mov	r4, r1
 800a94e:	4618      	mov	r0, r3
 800a950:	4621      	mov	r1, r4
 800a952:	4b94      	ldr	r3, [pc, #592]	; (800aba4 <DoCalc+0x354>)
 800a954:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a958:	461a      	mov	r2, r3
 800a95a:	4623      	mov	r3, r4
 800a95c:	f7f5 fe56 	bl	800060c <__aeabi_dmul>
 800a960:	4603      	mov	r3, r0
 800a962:	460c      	mov	r4, r1
 800a964:	4619      	mov	r1, r3
 800a966:	4622      	mov	r2, r4
 800a968:	4b8f      	ldr	r3, [pc, #572]	; (800aba8 <DoCalc+0x358>)
 800a96a:	e9c3 1200 	strd	r1, r2, [r3]
    tmp = t2 * (-1.55 + t2 * (1999.25 + t2 * (-51.38 + tmp)));
 800a96e:	4b8e      	ldr	r3, [pc, #568]	; (800aba8 <DoCalc+0x358>)
 800a970:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a974:	a372      	add	r3, pc, #456	; (adr r3, 800ab40 <DoCalc+0x2f0>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f5 fc8f 	bl	800029c <__aeabi_dsub>
 800a97e:	4603      	mov	r3, r0
 800a980:	460c      	mov	r4, r1
 800a982:	4618      	mov	r0, r3
 800a984:	4621      	mov	r1, r4
 800a986:	4b87      	ldr	r3, [pc, #540]	; (800aba4 <DoCalc+0x354>)
 800a988:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a98c:	461a      	mov	r2, r3
 800a98e:	4623      	mov	r3, r4
 800a990:	f7f5 fe3c 	bl	800060c <__aeabi_dmul>
 800a994:	4603      	mov	r3, r0
 800a996:	460c      	mov	r4, r1
 800a998:	4618      	mov	r0, r3
 800a99a:	4621      	mov	r1, r4
 800a99c:	a36a      	add	r3, pc, #424	; (adr r3, 800ab48 <DoCalc+0x2f8>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	f7f5 fc7d 	bl	80002a0 <__adddf3>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	4b7d      	ldr	r3, [pc, #500]	; (800aba4 <DoCalc+0x354>)
 800a9b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	4623      	mov	r3, r4
 800a9b8:	f7f5 fe28 	bl	800060c <__aeabi_dmul>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	460c      	mov	r4, r1
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	a362      	add	r3, pc, #392	; (adr r3, 800ab50 <DoCalc+0x300>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f7f5 fc67 	bl	800029c <__aeabi_dsub>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	4b73      	ldr	r3, [pc, #460]	; (800aba4 <DoCalc+0x354>)
 800a9d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4623      	mov	r3, r4
 800a9e0:	f7f5 fe14 	bl	800060c <__aeabi_dmul>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	4b6e      	ldr	r3, [pc, #440]	; (800aba8 <DoCalc+0x358>)
 800a9ee:	e9c3 1200 	strd	r1, r2, [r3]
    tmp = (t2 * (-4680.93 + tmp)) / 3600.0;
 800a9f2:	4b6d      	ldr	r3, [pc, #436]	; (800aba8 <DoCalc+0x358>)
 800a9f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9f8:	a357      	add	r3, pc, #348	; (adr r3, 800ab58 <DoCalc+0x308>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fc4d 	bl	800029c <__aeabi_dsub>
 800aa02:	4603      	mov	r3, r0
 800aa04:	460c      	mov	r4, r1
 800aa06:	4618      	mov	r0, r3
 800aa08:	4621      	mov	r1, r4
 800aa0a:	4b66      	ldr	r3, [pc, #408]	; (800aba4 <DoCalc+0x354>)
 800aa0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa10:	461a      	mov	r2, r3
 800aa12:	4623      	mov	r3, r4
 800aa14:	f7f5 fdfa 	bl	800060c <__aeabi_dmul>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	4621      	mov	r1, r4
 800aa20:	a34f      	add	r3, pc, #316	; (adr r3, 800ab60 <DoCalc+0x310>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f5 ff1b 	bl	8000860 <__aeabi_ddiv>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4622      	mov	r2, r4
 800aa32:	4b5d      	ldr	r3, [pc, #372]	; (800aba8 <DoCalc+0x358>)
 800aa34:	e9c3 1200 	strd	r1, r2, [r3]
    angle = (23.4392911111111 + tmp) * snm_DEG_TO_RAD; // obliquity
 800aa38:	4b5b      	ldr	r3, [pc, #364]	; (800aba8 <DoCalc+0x358>)
 800aa3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa3e:	a34a      	add	r3, pc, #296	; (adr r3, 800ab68 <DoCalc+0x318>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f7f5 fc2c 	bl	80002a0 <__adddf3>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	4621      	mov	r1, r4
 800aa50:	a347      	add	r3, pc, #284	; (adr r3, 800ab70 <DoCalc+0x320>)
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	f7f5 fdd9 	bl	800060c <__aeabi_dmul>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4622      	mov	r2, r4
 800aa62:	4b52      	ldr	r3, [pc, #328]	; (800abac <DoCalc+0x35c>)
 800aa64:	e9c3 1200 	strd	r1, r2, [r3]

    // Add nutation in obliquity
    M1 = (124.90 - 1934.134 * calc->aux.t + 0.002063 * calc->aux.t * calc->aux.t) * snm_DEG_TO_RAD;
 800aa68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa6a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800aa6e:	a342      	add	r3, pc, #264	; (adr r3, 800ab78 <DoCalc+0x328>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fdca 	bl	800060c <__aeabi_dmul>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4623      	mov	r3, r4
 800aa80:	a13f      	add	r1, pc, #252	; (adr r1, 800ab80 <DoCalc+0x330>)
 800aa82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa86:	f7f5 fc09 	bl	800029c <__aeabi_dsub>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	461d      	mov	r5, r3
 800aa90:	4626      	mov	r6, r4
 800aa92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa94:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800aa98:	a33b      	add	r3, pc, #236	; (adr r3, 800ab88 <DoCalc+0x338>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f7f5 fdb5 	bl	800060c <__aeabi_dmul>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaac:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800aab0:	461a      	mov	r2, r3
 800aab2:	4623      	mov	r3, r4
 800aab4:	f7f5 fdaa 	bl	800060c <__aeabi_dmul>
 800aab8:	4603      	mov	r3, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	461a      	mov	r2, r3
 800aabe:	4623      	mov	r3, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	4631      	mov	r1, r6
 800aac4:	f7f5 fbec 	bl	80002a0 <__adddf3>
 800aac8:	4603      	mov	r3, r0
 800aaca:	460c      	mov	r4, r1
 800aacc:	4618      	mov	r0, r3
 800aace:	4621      	mov	r1, r4
 800aad0:	a327      	add	r3, pc, #156	; (adr r3, 800ab70 <DoCalc+0x320>)
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f7f5 fd99 	bl	800060c <__aeabi_dmul>
 800aada:	4603      	mov	r3, r0
 800aadc:	460c      	mov	r4, r1
 800aade:	4619      	mov	r1, r3
 800aae0:	4622      	mov	r2, r4
 800aae2:	4b33      	ldr	r3, [pc, #204]	; (800abb0 <DoCalc+0x360>)
 800aae4:	e9c3 1200 	strd	r1, r2, [r3]
    M2 = (201.11 + 72001.5377 * calc->aux.t + 0.00057 * calc->aux.t * calc->aux.t) * snm_DEG_TO_RAD;
 800aae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaea:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800aaee:	a328      	add	r3, pc, #160	; (adr r3, 800ab90 <DoCalc+0x340>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f7f5 fd8a 	bl	800060c <__aeabi_dmul>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	4618      	mov	r0, r3
 800aafe:	4621      	mov	r1, r4
 800ab00:	a325      	add	r3, pc, #148	; (adr r3, 800ab98 <DoCalc+0x348>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fbcb 	bl	80002a0 <__adddf3>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	e051      	b.n	800abb4 <DoCalc+0x364>
 800ab10:	9999999a 	.word	0x9999999a
 800ab14:	40039999 	.word	0x40039999
 800ab18:	c28f5c29 	.word	0xc28f5c29
 800ab1c:	401728f5 	.word	0x401728f5
 800ab20:	51eb851f 	.word	0x51eb851f
 800ab24:	403bdeb8 	.word	0x403bdeb8
 800ab28:	47ae147b 	.word	0x47ae147b
 800ab2c:	401c7ae1 	.word	0x401c7ae1
 800ab30:	66666666 	.word	0x66666666
 800ab34:	40438666 	.word	0x40438666
 800ab38:	a3d70a3d 	.word	0xa3d70a3d
 800ab3c:	406f3570 	.word	0x406f3570
 800ab40:	d70a3d71 	.word	0xd70a3d71
 800ab44:	4049b0a3 	.word	0x4049b0a3
 800ab48:	00000000 	.word	0x00000000
 800ab4c:	409f3d00 	.word	0x409f3d00
 800ab50:	cccccccd 	.word	0xcccccccd
 800ab54:	3ff8cccc 	.word	0x3ff8cccc
 800ab58:	147ae148 	.word	0x147ae148
 800ab5c:	40b248ee 	.word	0x40b248ee
 800ab60:	00000000 	.word	0x00000000
 800ab64:	40ac2000 	.word	0x40ac2000
 800ab68:	61dba54b 	.word	0x61dba54b
 800ab6c:	40377075 	.word	0x40377075
 800ab70:	a2529d39 	.word	0xa2529d39
 800ab74:	3f91df46 	.word	0x3f91df46
 800ab78:	374bc6a8 	.word	0x374bc6a8
 800ab7c:	409e3889 	.word	0x409e3889
 800ab80:	9999999a 	.word	0x9999999a
 800ab84:	405f3999 	.word	0x405f3999
 800ab88:	b10342ab 	.word	0xb10342ab
 800ab8c:	3f60e66c 	.word	0x3f60e66c
 800ab90:	9a6b50b1 	.word	0x9a6b50b1
 800ab94:	40f19418 	.word	0x40f19418
 800ab98:	1eb851ec 	.word	0x1eb851ec
 800ab9c:	40692385 	.word	0x40692385
 800aba0:	40590000 	.word	0x40590000
 800aba4:	200006c8 	.word	0x200006c8
 800aba8:	200006d0 	.word	0x200006d0
 800abac:	200006d8 	.word	0x200006d8
 800abb0:	200006e0 	.word	0x200006e0
 800abb4:	461d      	mov	r5, r3
 800abb6:	4626      	mov	r6, r4
 800abb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abba:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800abbe:	a3e7      	add	r3, pc, #924	; (adr r3, 800af5c <DoCalc+0x70c>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f7f5 fd22 	bl	800060c <__aeabi_dmul>
 800abc8:	4603      	mov	r3, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	4618      	mov	r0, r3
 800abce:	4621      	mov	r1, r4
 800abd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd2:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800abd6:	461a      	mov	r2, r3
 800abd8:	4623      	mov	r3, r4
 800abda:	f7f5 fd17 	bl	800060c <__aeabi_dmul>
 800abde:	4603      	mov	r3, r0
 800abe0:	460c      	mov	r4, r1
 800abe2:	461a      	mov	r2, r3
 800abe4:	4623      	mov	r3, r4
 800abe6:	4628      	mov	r0, r5
 800abe8:	4631      	mov	r1, r6
 800abea:	f7f5 fb59 	bl	80002a0 <__adddf3>
 800abee:	4603      	mov	r3, r0
 800abf0:	460c      	mov	r4, r1
 800abf2:	4618      	mov	r0, r3
 800abf4:	4621      	mov	r1, r4
 800abf6:	a3ca      	add	r3, pc, #808	; (adr r3, 800af20 <DoCalc+0x6d0>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	f7f5 fd06 	bl	800060c <__aeabi_dmul>
 800ac00:	4603      	mov	r3, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	4619      	mov	r1, r3
 800ac06:	4622      	mov	r2, r4
 800ac08:	4bc9      	ldr	r3, [pc, #804]	; (800af30 <DoCalc+0x6e0>)
 800ac0a:	e9c3 1200 	strd	r1, r2, [r3]
    d = .002558 * cos(M1) - .00015339 * cos(M2);
 800ac0e:	4bc9      	ldr	r3, [pc, #804]	; (800af34 <DoCalc+0x6e4>)
 800ac10:	ed93 7b00 	vldr	d7, [r3]
 800ac14:	eeb0 0a47 	vmov.f32	s0, s14
 800ac18:	eef0 0a67 	vmov.f32	s1, s15
 800ac1c:	f00e fa0c 	bl	8019038 <cos>
 800ac20:	ec51 0b10 	vmov	r0, r1, d0
 800ac24:	a3ba      	add	r3, pc, #744	; (adr r3, 800af10 <DoCalc+0x6c0>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f7f5 fcef 	bl	800060c <__aeabi_dmul>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	460c      	mov	r4, r1
 800ac32:	461d      	mov	r5, r3
 800ac34:	4626      	mov	r6, r4
 800ac36:	4bbe      	ldr	r3, [pc, #760]	; (800af30 <DoCalc+0x6e0>)
 800ac38:	ed93 7b00 	vldr	d7, [r3]
 800ac3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ac40:	eef0 0a67 	vmov.f32	s1, s15
 800ac44:	f00e f9f8 	bl	8019038 <cos>
 800ac48:	ec51 0b10 	vmov	r0, r1, d0
 800ac4c:	a3b2      	add	r3, pc, #712	; (adr r3, 800af18 <DoCalc+0x6c8>)
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f7f5 fcdb 	bl	800060c <__aeabi_dmul>
 800ac56:	4603      	mov	r3, r0
 800ac58:	460c      	mov	r4, r1
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	4628      	mov	r0, r5
 800ac60:	4631      	mov	r1, r6
 800ac62:	f7f5 fb1b 	bl	800029c <__aeabi_dsub>
 800ac66:	4603      	mov	r3, r0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	4622      	mov	r2, r4
 800ac6e:	4bb2      	ldr	r3, [pc, #712]	; (800af38 <DoCalc+0x6e8>)
 800ac70:	e9c3 1200 	strd	r1, r2, [r3]
    angle += d * snm_DEG_TO_RAD;
 800ac74:	4bb0      	ldr	r3, [pc, #704]	; (800af38 <DoCalc+0x6e8>)
 800ac76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac7a:	a3a9      	add	r3, pc, #676	; (adr r3, 800af20 <DoCalc+0x6d0>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f7f5 fcc4 	bl	800060c <__aeabi_dmul>
 800ac84:	4603      	mov	r3, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	4618      	mov	r0, r3
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4bab      	ldr	r3, [pc, #684]	; (800af3c <DoCalc+0x6ec>)
 800ac8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac92:	461a      	mov	r2, r3
 800ac94:	4623      	mov	r3, r4
 800ac96:	f7f5 fb03 	bl	80002a0 <__adddf3>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4622      	mov	r2, r4
 800aca2:	4ba6      	ldr	r3, [pc, #664]	; (800af3c <DoCalc+0x6ec>)
 800aca4:	e9c3 1200 	strd	r1, r2, [r3]

    pos[0] *= snm_DEG_TO_RAD;
 800aca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acae:	a39c      	add	r3, pc, #624	; (adr r3, 800af20 <DoCalc+0x6d0>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 fcaa 	bl	800060c <__aeabi_dmul>
 800acb8:	4603      	mov	r3, r0
 800acba:	460c      	mov	r4, r1
 800acbc:	4619      	mov	r1, r3
 800acbe:	4622      	mov	r2, r4
 800acc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acc2:	e9c3 1200 	strd	r1, r2, [r3]
    pos[1] *= snm_DEG_TO_RAD;
 800acc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acc8:	3308      	adds	r3, #8
 800acca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acd0:	f103 0508 	add.w	r5, r3, #8
 800acd4:	a392      	add	r3, pc, #584	; (adr r3, 800af20 <DoCalc+0x6d0>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fc97 	bl	800060c <__aeabi_dmul>
 800acde:	4603      	mov	r3, r0
 800ace0:	460c      	mov	r4, r1
 800ace2:	e9c5 3400 	strd	r3, r4, [r5]
    cl = cos(pos[1]);
 800ace6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ace8:	3308      	adds	r3, #8
 800acea:	ed93 7b00 	vldr	d7, [r3]
 800acee:	eeb0 0a47 	vmov.f32	s0, s14
 800acf2:	eef0 0a67 	vmov.f32	s1, s15
 800acf6:	f00e f99f 	bl	8019038 <cos>
 800acfa:	eeb0 7a40 	vmov.f32	s14, s0
 800acfe:	eef0 7a60 	vmov.f32	s15, s1
 800ad02:	4b8f      	ldr	r3, [pc, #572]	; (800af40 <DoCalc+0x6f0>)
 800ad04:	ed83 7b00 	vstr	d7, [r3]
    x = pos[2] * cos(pos[0]) * cl;
 800ad08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad0a:	3310      	adds	r3, #16
 800ad0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ad10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad12:	ed93 7b00 	vldr	d7, [r3]
 800ad16:	eeb0 0a47 	vmov.f32	s0, s14
 800ad1a:	eef0 0a67 	vmov.f32	s1, s15
 800ad1e:	f00e f98b 	bl	8019038 <cos>
 800ad22:	ec53 2b10 	vmov	r2, r3, d0
 800ad26:	4620      	mov	r0, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	f7f5 fc6f 	bl	800060c <__aeabi_dmul>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	460c      	mov	r4, r1
 800ad32:	4618      	mov	r0, r3
 800ad34:	4621      	mov	r1, r4
 800ad36:	4b82      	ldr	r3, [pc, #520]	; (800af40 <DoCalc+0x6f0>)
 800ad38:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4623      	mov	r3, r4
 800ad40:	f7f5 fc64 	bl	800060c <__aeabi_dmul>
 800ad44:	4603      	mov	r3, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	4b7d      	ldr	r3, [pc, #500]	; (800af44 <DoCalc+0x6f4>)
 800ad4e:	e9c3 1200 	strd	r1, r2, [r3]
    y = pos[2] * sin(pos[0]) * cl;
 800ad52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad54:	3310      	adds	r3, #16
 800ad56:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ad5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad5c:	ed93 7b00 	vldr	d7, [r3]
 800ad60:	eeb0 0a47 	vmov.f32	s0, s14
 800ad64:	eef0 0a67 	vmov.f32	s1, s15
 800ad68:	f00e fa8e 	bl	8019288 <sin>
 800ad6c:	ec53 2b10 	vmov	r2, r3, d0
 800ad70:	4620      	mov	r0, r4
 800ad72:	4629      	mov	r1, r5
 800ad74:	f7f5 fc4a 	bl	800060c <__aeabi_dmul>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4b6f      	ldr	r3, [pc, #444]	; (800af40 <DoCalc+0x6f0>)
 800ad82:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad86:	461a      	mov	r2, r3
 800ad88:	4623      	mov	r3, r4
 800ad8a:	f7f5 fc3f 	bl	800060c <__aeabi_dmul>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	460c      	mov	r4, r1
 800ad92:	4619      	mov	r1, r3
 800ad94:	4622      	mov	r2, r4
 800ad96:	4b6c      	ldr	r3, [pc, #432]	; (800af48 <DoCalc+0x6f8>)
 800ad98:	e9c3 1200 	strd	r1, r2, [r3]
    z = pos[2] * sin(pos[1]);
 800ad9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad9e:	3310      	adds	r3, #16
 800ada0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ada4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ada6:	3308      	adds	r3, #8
 800ada8:	ed93 7b00 	vldr	d7, [r3]
 800adac:	eeb0 0a47 	vmov.f32	s0, s14
 800adb0:	eef0 0a67 	vmov.f32	s1, s15
 800adb4:	f00e fa68 	bl	8019288 <sin>
 800adb8:	ec53 2b10 	vmov	r2, r3, d0
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	f7f5 fc24 	bl	800060c <__aeabi_dmul>
 800adc4:	4603      	mov	r3, r0
 800adc6:	460c      	mov	r4, r1
 800adc8:	4619      	mov	r1, r3
 800adca:	4622      	mov	r2, r4
 800adcc:	4b5f      	ldr	r3, [pc, #380]	; (800af4c <DoCalc+0x6fc>)
 800adce:	e9c3 1200 	strd	r1, r2, [r3]
    tmp = y * cos(angle) - z * sin(angle);
 800add2:	4b5a      	ldr	r3, [pc, #360]	; (800af3c <DoCalc+0x6ec>)
 800add4:	ed93 7b00 	vldr	d7, [r3]
 800add8:	eeb0 0a47 	vmov.f32	s0, s14
 800addc:	eef0 0a67 	vmov.f32	s1, s15
 800ade0:	f00e f92a 	bl	8019038 <cos>
 800ade4:	ec51 0b10 	vmov	r0, r1, d0
 800ade8:	4b57      	ldr	r3, [pc, #348]	; (800af48 <DoCalc+0x6f8>)
 800adea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adee:	461a      	mov	r2, r3
 800adf0:	4623      	mov	r3, r4
 800adf2:	f7f5 fc0b 	bl	800060c <__aeabi_dmul>
 800adf6:	4603      	mov	r3, r0
 800adf8:	460c      	mov	r4, r1
 800adfa:	461d      	mov	r5, r3
 800adfc:	4626      	mov	r6, r4
 800adfe:	4b4f      	ldr	r3, [pc, #316]	; (800af3c <DoCalc+0x6ec>)
 800ae00:	ed93 7b00 	vldr	d7, [r3]
 800ae04:	eeb0 0a47 	vmov.f32	s0, s14
 800ae08:	eef0 0a67 	vmov.f32	s1, s15
 800ae0c:	f00e fa3c 	bl	8019288 <sin>
 800ae10:	ec51 0b10 	vmov	r0, r1, d0
 800ae14:	4b4d      	ldr	r3, [pc, #308]	; (800af4c <DoCalc+0x6fc>)
 800ae16:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	4623      	mov	r3, r4
 800ae1e:	f7f5 fbf5 	bl	800060c <__aeabi_dmul>
 800ae22:	4603      	mov	r3, r0
 800ae24:	460c      	mov	r4, r1
 800ae26:	461a      	mov	r2, r3
 800ae28:	4623      	mov	r3, r4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	f7f5 fa35 	bl	800029c <__aeabi_dsub>
 800ae32:	4603      	mov	r3, r0
 800ae34:	460c      	mov	r4, r1
 800ae36:	4619      	mov	r1, r3
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4b45      	ldr	r3, [pc, #276]	; (800af50 <DoCalc+0x700>)
 800ae3c:	e9c3 1200 	strd	r1, r2, [r3]
    z = y * sin(angle) + z * cos(angle);
 800ae40:	4b3e      	ldr	r3, [pc, #248]	; (800af3c <DoCalc+0x6ec>)
 800ae42:	ed93 7b00 	vldr	d7, [r3]
 800ae46:	eeb0 0a47 	vmov.f32	s0, s14
 800ae4a:	eef0 0a67 	vmov.f32	s1, s15
 800ae4e:	f00e fa1b 	bl	8019288 <sin>
 800ae52:	ec51 0b10 	vmov	r0, r1, d0
 800ae56:	4b3c      	ldr	r3, [pc, #240]	; (800af48 <DoCalc+0x6f8>)
 800ae58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	4623      	mov	r3, r4
 800ae60:	f7f5 fbd4 	bl	800060c <__aeabi_dmul>
 800ae64:	4603      	mov	r3, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	461d      	mov	r5, r3
 800ae6a:	4626      	mov	r6, r4
 800ae6c:	4b33      	ldr	r3, [pc, #204]	; (800af3c <DoCalc+0x6ec>)
 800ae6e:	ed93 7b00 	vldr	d7, [r3]
 800ae72:	eeb0 0a47 	vmov.f32	s0, s14
 800ae76:	eef0 0a67 	vmov.f32	s1, s15
 800ae7a:	f00e f8dd 	bl	8019038 <cos>
 800ae7e:	ec51 0b10 	vmov	r0, r1, d0
 800ae82:	4b32      	ldr	r3, [pc, #200]	; (800af4c <DoCalc+0x6fc>)
 800ae84:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4623      	mov	r3, r4
 800ae8c:	f7f5 fbbe 	bl	800060c <__aeabi_dmul>
 800ae90:	4603      	mov	r3, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	461a      	mov	r2, r3
 800ae96:	4623      	mov	r3, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	f7f5 fa00 	bl	80002a0 <__adddf3>
 800aea0:	4603      	mov	r3, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	4619      	mov	r1, r3
 800aea6:	4622      	mov	r2, r4
 800aea8:	4b28      	ldr	r3, [pc, #160]	; (800af4c <DoCalc+0x6fc>)
 800aeaa:	e9c3 1200 	strd	r1, r2, [r3]
    y = tmp;
 800aeae:	4b28      	ldr	r3, [pc, #160]	; (800af50 <DoCalc+0x700>)
 800aeb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aeb4:	4a24      	ldr	r2, [pc, #144]	; (800af48 <DoCalc+0x6f8>)
 800aeb6:	e9c2 3400 	strd	r3, r4, [r2]

    // Obtain local apparent sidereal time
    jd0 = floor(calc->aux.jd_ut - 0.5) + 0.5;
 800aeba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aebc:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800aec0:	f04f 0200 	mov.w	r2, #0
 800aec4:	4b23      	ldr	r3, [pc, #140]	; (800af54 <DoCalc+0x704>)
 800aec6:	f7f5 f9e9 	bl	800029c <__aeabi_dsub>
 800aeca:	4603      	mov	r3, r0
 800aecc:	460c      	mov	r4, r1
 800aece:	ec44 3b17 	vmov	d7, r3, r4
 800aed2:	eeb0 0a47 	vmov.f32	s0, s14
 800aed6:	eef0 0a67 	vmov.f32	s1, s15
 800aeda:	f00e f8fd 	bl	80190d8 <floor>
 800aede:	ec51 0b10 	vmov	r0, r1, d0
 800aee2:	f04f 0200 	mov.w	r2, #0
 800aee6:	4b1b      	ldr	r3, [pc, #108]	; (800af54 <DoCalc+0x704>)
 800aee8:	f7f5 f9da 	bl	80002a0 <__adddf3>
 800aeec:	4603      	mov	r3, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	4619      	mov	r1, r3
 800aef2:	4622      	mov	r2, r4
 800aef4:	4b18      	ldr	r3, [pc, #96]	; (800af58 <DoCalc+0x708>)
 800aef6:	e9c3 1200 	strd	r1, r2, [r3]
    T0 = (jd0 - J2000) / JULIAN_DAYS_PER_CENTURY;
 800aefa:	4b17      	ldr	r3, [pc, #92]	; (800af58 <DoCalc+0x708>)
 800aefc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af00:	a409      	add	r4, pc, #36	; (adr r4, 800af28 <DoCalc+0x6d8>)
 800af02:	e9d4 3400 	ldrd	r3, r4, [r4]
 800af06:	461a      	mov	r2, r3
 800af08:	4623      	mov	r3, r4
 800af0a:	f7f5 f9c7 	bl	800029c <__aeabi_dsub>
 800af0e:	e029      	b.n	800af64 <DoCalc+0x714>
 800af10:	cafb3b75 	.word	0xcafb3b75
 800af14:	3f64f483 	.word	0x3f64f483
 800af18:	112b4b88 	.word	0x112b4b88
 800af1c:	3f241aea 	.word	0x3f241aea
 800af20:	a2529d39 	.word	0xa2529d39
 800af24:	3f91df46 	.word	0x3f91df46
 800af28:	80000000 	.word	0x80000000
 800af2c:	4142b42c 	.word	0x4142b42c
 800af30:	200006e8 	.word	0x200006e8
 800af34:	200006e0 	.word	0x200006e0
 800af38:	200006f0 	.word	0x200006f0
 800af3c:	200006d8 	.word	0x200006d8
 800af40:	200006f8 	.word	0x200006f8
 800af44:	20000700 	.word	0x20000700
 800af48:	20000708 	.word	0x20000708
 800af4c:	20000710 	.word	0x20000710
 800af50:	200006d0 	.word	0x200006d0
 800af54:	3fe00000 	.word	0x3fe00000
 800af58:	20000718 	.word	0x20000718
 800af5c:	adea8976 	.word	0xadea8976
 800af60:	3f42ad81 	.word	0x3f42ad81
 800af64:	4603      	mov	r3, r0
 800af66:	460c      	mov	r4, r1
 800af68:	4618      	mov	r0, r3
 800af6a:	4621      	mov	r1, r4
 800af6c:	a4ca      	add	r4, pc, #808	; (adr r4, 800b298 <DoCalc+0xa48>)
 800af6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800af72:	461a      	mov	r2, r3
 800af74:	4623      	mov	r3, r4
 800af76:	f7f5 fc73 	bl	8000860 <__aeabi_ddiv>
 800af7a:	4603      	mov	r3, r0
 800af7c:	460c      	mov	r4, r1
 800af7e:	4619      	mov	r1, r3
 800af80:	4622      	mov	r2, r4
 800af82:	4bcf      	ldr	r3, [pc, #828]	; (800b2c0 <DoCalc+0xa70>)
 800af84:	e9c3 1200 	strd	r1, r2, [r3]
    secs = (calc->aux.jd_ut - jd0) * SECONDS_PER_DAY;
 800af88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8a:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800af8e:	4bcd      	ldr	r3, [pc, #820]	; (800b2c4 <DoCalc+0xa74>)
 800af90:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af94:	461a      	mov	r2, r3
 800af96:	4623      	mov	r3, r4
 800af98:	f7f5 f980 	bl	800029c <__aeabi_dsub>
 800af9c:	4603      	mov	r3, r0
 800af9e:	460c      	mov	r4, r1
 800afa0:	4618      	mov	r0, r3
 800afa2:	4621      	mov	r1, r4
 800afa4:	a4ae      	add	r4, pc, #696	; (adr r4, 800b260 <DoCalc+0xa10>)
 800afa6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800afaa:	461a      	mov	r2, r3
 800afac:	4623      	mov	r3, r4
 800afae:	f7f5 fb2d 	bl	800060c <__aeabi_dmul>
 800afb2:	4603      	mov	r3, r0
 800afb4:	460c      	mov	r4, r1
 800afb6:	4619      	mov	r1, r3
 800afb8:	4622      	mov	r2, r4
 800afba:	4bc3      	ldr	r3, [pc, #780]	; (800b2c8 <DoCalc+0xa78>)
 800afbc:	e9c3 1200 	strd	r1, r2, [r3]
    gmst = (((((-6.2e-6 * T0) + 9.3104e-2) * T0) + 8640184.812866) * T0) + 24110.54841;
 800afc0:	4bbf      	ldr	r3, [pc, #764]	; (800b2c0 <DoCalc+0xa70>)
 800afc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afc6:	a3a8      	add	r3, pc, #672	; (adr r3, 800b268 <DoCalc+0xa18>)
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f7f5 fb1e 	bl	800060c <__aeabi_dmul>
 800afd0:	4603      	mov	r3, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	4618      	mov	r0, r3
 800afd6:	4621      	mov	r1, r4
 800afd8:	a3a5      	add	r3, pc, #660	; (adr r3, 800b270 <DoCalc+0xa20>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	f7f5 f95f 	bl	80002a0 <__adddf3>
 800afe2:	4603      	mov	r3, r0
 800afe4:	460c      	mov	r4, r1
 800afe6:	4618      	mov	r0, r3
 800afe8:	4621      	mov	r1, r4
 800afea:	4bb5      	ldr	r3, [pc, #724]	; (800b2c0 <DoCalc+0xa70>)
 800afec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aff0:	461a      	mov	r2, r3
 800aff2:	4623      	mov	r3, r4
 800aff4:	f7f5 fb0a 	bl	800060c <__aeabi_dmul>
 800aff8:	4603      	mov	r3, r0
 800affa:	460c      	mov	r4, r1
 800affc:	4618      	mov	r0, r3
 800affe:	4621      	mov	r1, r4
 800b000:	a39d      	add	r3, pc, #628	; (adr r3, 800b278 <DoCalc+0xa28>)
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	f7f5 f94b 	bl	80002a0 <__adddf3>
 800b00a:	4603      	mov	r3, r0
 800b00c:	460c      	mov	r4, r1
 800b00e:	4618      	mov	r0, r3
 800b010:	4621      	mov	r1, r4
 800b012:	4bab      	ldr	r3, [pc, #684]	; (800b2c0 <DoCalc+0xa70>)
 800b014:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b018:	461a      	mov	r2, r3
 800b01a:	4623      	mov	r3, r4
 800b01c:	f7f5 faf6 	bl	800060c <__aeabi_dmul>
 800b020:	4603      	mov	r3, r0
 800b022:	460c      	mov	r4, r1
 800b024:	4618      	mov	r0, r3
 800b026:	4621      	mov	r1, r4
 800b028:	a395      	add	r3, pc, #596	; (adr r3, 800b280 <DoCalc+0xa30>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7f5 f937 	bl	80002a0 <__adddf3>
 800b032:	4603      	mov	r3, r0
 800b034:	460c      	mov	r4, r1
 800b036:	4619      	mov	r1, r3
 800b038:	4622      	mov	r2, r4
 800b03a:	4ba4      	ldr	r3, [pc, #656]	; (800b2cc <DoCalc+0xa7c>)
 800b03c:	e9c3 1200 	strd	r1, r2, [r3]
    msday = 1.0 + (((((-1.86e-5 * T0) + 0.186208) * T0) + 8640184.812866) / (SECONDS_PER_DAY * JULIAN_DAYS_PER_CENTURY));
 800b040:	4b9f      	ldr	r3, [pc, #636]	; (800b2c0 <DoCalc+0xa70>)
 800b042:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b046:	a390      	add	r3, pc, #576	; (adr r3, 800b288 <DoCalc+0xa38>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f7f5 fade 	bl	800060c <__aeabi_dmul>
 800b050:	4603      	mov	r3, r0
 800b052:	460c      	mov	r4, r1
 800b054:	4618      	mov	r0, r3
 800b056:	4621      	mov	r1, r4
 800b058:	a38d      	add	r3, pc, #564	; (adr r3, 800b290 <DoCalc+0xa40>)
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f7f5 f91f 	bl	80002a0 <__adddf3>
 800b062:	4603      	mov	r3, r0
 800b064:	460c      	mov	r4, r1
 800b066:	4618      	mov	r0, r3
 800b068:	4621      	mov	r1, r4
 800b06a:	4b95      	ldr	r3, [pc, #596]	; (800b2c0 <DoCalc+0xa70>)
 800b06c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b070:	461a      	mov	r2, r3
 800b072:	4623      	mov	r3, r4
 800b074:	f7f5 faca 	bl	800060c <__aeabi_dmul>
 800b078:	4603      	mov	r3, r0
 800b07a:	460c      	mov	r4, r1
 800b07c:	4618      	mov	r0, r3
 800b07e:	4621      	mov	r1, r4
 800b080:	a37d      	add	r3, pc, #500	; (adr r3, 800b278 <DoCalc+0xa28>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 f90b 	bl	80002a0 <__adddf3>
 800b08a:	4603      	mov	r3, r0
 800b08c:	460c      	mov	r4, r1
 800b08e:	461d      	mov	r5, r3
 800b090:	4626      	mov	r6, r4
 800b092:	a173      	add	r1, pc, #460	; (adr r1, 800b260 <DoCalc+0xa10>)
 800b094:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b098:	a47f      	add	r4, pc, #508	; (adr r4, 800b298 <DoCalc+0xa48>)
 800b09a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	4623      	mov	r3, r4
 800b0a2:	f7f5 fab3 	bl	800060c <__aeabi_dmul>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	4631      	mov	r1, r6
 800b0b2:	f7f5 fbd5 	bl	8000860 <__aeabi_ddiv>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	4621      	mov	r1, r4
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	4b83      	ldr	r3, [pc, #524]	; (800b2d0 <DoCalc+0xa80>)
 800b0c4:	f7f5 f8ec 	bl	80002a0 <__adddf3>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	4b80      	ldr	r3, [pc, #512]	; (800b2d4 <DoCalc+0xa84>)
 800b0d2:	e9c3 1200 	strd	r1, r2, [r3]
    gmst = (gmst + msday * secs) * (15.0 / 3600.0) * snm_DEG_TO_RAD;
 800b0d6:	4b7f      	ldr	r3, [pc, #508]	; (800b2d4 <DoCalc+0xa84>)
 800b0d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0dc:	4b7a      	ldr	r3, [pc, #488]	; (800b2c8 <DoCalc+0xa78>)
 800b0de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4623      	mov	r3, r4
 800b0e6:	f7f5 fa91 	bl	800060c <__aeabi_dmul>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	4b76      	ldr	r3, [pc, #472]	; (800b2cc <DoCalc+0xa7c>)
 800b0f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	4623      	mov	r3, r4
 800b0fc:	f7f5 f8d0 	bl	80002a0 <__adddf3>
 800b100:	4603      	mov	r3, r0
 800b102:	460c      	mov	r4, r1
 800b104:	4618      	mov	r0, r3
 800b106:	4621      	mov	r1, r4
 800b108:	a365      	add	r3, pc, #404	; (adr r3, 800b2a0 <DoCalc+0xa50>)
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f7f5 fa7d 	bl	800060c <__aeabi_dmul>
 800b112:	4603      	mov	r3, r0
 800b114:	460c      	mov	r4, r1
 800b116:	4618      	mov	r0, r3
 800b118:	4621      	mov	r1, r4
 800b11a:	a363      	add	r3, pc, #396	; (adr r3, 800b2a8 <DoCalc+0xa58>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	f7f5 fa74 	bl	800060c <__aeabi_dmul>
 800b124:	4603      	mov	r3, r0
 800b126:	460c      	mov	r4, r1
 800b128:	4619      	mov	r1, r3
 800b12a:	4622      	mov	r2, r4
 800b12c:	4b67      	ldr	r3, [pc, #412]	; (800b2cc <DoCalc+0xa7c>)
 800b12e:	e9c3 1200 	strd	r1, r2, [r3]
    lst = gmst + calc->longitude;
 800b132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b134:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b138:	4b64      	ldr	r3, [pc, #400]	; (800b2cc <DoCalc+0xa7c>)
 800b13a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b13e:	461a      	mov	r2, r3
 800b140:	4623      	mov	r3, r4
 800b142:	f7f5 f8ad 	bl	80002a0 <__adddf3>
 800b146:	4603      	mov	r3, r0
 800b148:	460c      	mov	r4, r1
 800b14a:	4619      	mov	r1, r3
 800b14c:	4622      	mov	r2, r4
 800b14e:	4b62      	ldr	r3, [pc, #392]	; (800b2d8 <DoCalc+0xa88>)
 800b150:	e9c3 1200 	strd	r1, r2, [r3]

    // Obtain topocentric rectangular coordinates
    // Set radiusAU = 0 for geocentric calculations
    // (rise/set/transit will have no sense in this case)
    radiusAU = EARTH_RADIUS / AU;
 800b154:	a156      	add	r1, pc, #344	; (adr r1, 800b2b0 <DoCalc+0xa60>)
 800b156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b15a:	a457      	add	r4, pc, #348	; (adr r4, 800b2b8 <DoCalc+0xa68>)
 800b15c:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b160:	461a      	mov	r2, r3
 800b162:	4623      	mov	r3, r4
 800b164:	f7f5 fb7c 	bl	8000860 <__aeabi_ddiv>
 800b168:	4603      	mov	r3, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4619      	mov	r1, r3
 800b16e:	4622      	mov	r2, r4
 800b170:	4b5a      	ldr	r3, [pc, #360]	; (800b2dc <DoCalc+0xa8c>)
 800b172:	e9c3 1200 	strd	r1, r2, [r3]
    correction[0] = radiusAU * cos(calc->latitude) * cos(lst);
 800b176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b178:	ed93 7b06 	vldr	d7, [r3, #24]
 800b17c:	eeb0 0a47 	vmov.f32	s0, s14
 800b180:	eef0 0a67 	vmov.f32	s1, s15
 800b184:	f00d ff58 	bl	8019038 <cos>
 800b188:	ec51 0b10 	vmov	r0, r1, d0
 800b18c:	4b53      	ldr	r3, [pc, #332]	; (800b2dc <DoCalc+0xa8c>)
 800b18e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b192:	461a      	mov	r2, r3
 800b194:	4623      	mov	r3, r4
 800b196:	f7f5 fa39 	bl	800060c <__aeabi_dmul>
 800b19a:	4603      	mov	r3, r0
 800b19c:	460c      	mov	r4, r1
 800b19e:	4625      	mov	r5, r4
 800b1a0:	461c      	mov	r4, r3
 800b1a2:	4b4d      	ldr	r3, [pc, #308]	; (800b2d8 <DoCalc+0xa88>)
 800b1a4:	ed93 7b00 	vldr	d7, [r3]
 800b1a8:	eeb0 0a47 	vmov.f32	s0, s14
 800b1ac:	eef0 0a67 	vmov.f32	s1, s15
 800b1b0:	f00d ff42 	bl	8019038 <cos>
 800b1b4:	ec53 2b10 	vmov	r2, r3, d0
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	f7f5 fa26 	bl	800060c <__aeabi_dmul>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	4b45      	ldr	r3, [pc, #276]	; (800b2e0 <DoCalc+0xa90>)
 800b1ca:	e9c3 1200 	strd	r1, r2, [r3]
    correction[1] = radiusAU * cos(calc->latitude) * sin(lst);
 800b1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d0:	ed93 7b06 	vldr	d7, [r3, #24]
 800b1d4:	eeb0 0a47 	vmov.f32	s0, s14
 800b1d8:	eef0 0a67 	vmov.f32	s1, s15
 800b1dc:	f00d ff2c 	bl	8019038 <cos>
 800b1e0:	ec51 0b10 	vmov	r0, r1, d0
 800b1e4:	4b3d      	ldr	r3, [pc, #244]	; (800b2dc <DoCalc+0xa8c>)
 800b1e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	4623      	mov	r3, r4
 800b1ee:	f7f5 fa0d 	bl	800060c <__aeabi_dmul>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	4625      	mov	r5, r4
 800b1f8:	461c      	mov	r4, r3
 800b1fa:	4b37      	ldr	r3, [pc, #220]	; (800b2d8 <DoCalc+0xa88>)
 800b1fc:	ed93 7b00 	vldr	d7, [r3]
 800b200:	eeb0 0a47 	vmov.f32	s0, s14
 800b204:	eef0 0a67 	vmov.f32	s1, s15
 800b208:	f00e f83e 	bl	8019288 <sin>
 800b20c:	ec53 2b10 	vmov	r2, r3, d0
 800b210:	4620      	mov	r0, r4
 800b212:	4629      	mov	r1, r5
 800b214:	f7f5 f9fa 	bl	800060c <__aeabi_dmul>
 800b218:	4603      	mov	r3, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	4619      	mov	r1, r3
 800b21e:	4622      	mov	r2, r4
 800b220:	4b2f      	ldr	r3, [pc, #188]	; (800b2e0 <DoCalc+0xa90>)
 800b222:	e9c3 1202 	strd	r1, r2, [r3, #8]
    correction[2] = radiusAU * sin(calc->latitude);
 800b226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b228:	ed93 7b06 	vldr	d7, [r3, #24]
 800b22c:	eeb0 0a47 	vmov.f32	s0, s14
 800b230:	eef0 0a67 	vmov.f32	s1, s15
 800b234:	f00e f828 	bl	8019288 <sin>
 800b238:	ec51 0b10 	vmov	r0, r1, d0
 800b23c:	4b27      	ldr	r3, [pc, #156]	; (800b2dc <DoCalc+0xa8c>)
 800b23e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b242:	461a      	mov	r2, r3
 800b244:	4623      	mov	r3, r4
 800b246:	f7f5 f9e1 	bl	800060c <__aeabi_dmul>
 800b24a:	4603      	mov	r3, r0
 800b24c:	460c      	mov	r4, r1
 800b24e:	4619      	mov	r1, r3
 800b250:	4622      	mov	r2, r4
 800b252:	4b23      	ldr	r3, [pc, #140]	; (800b2e0 <DoCalc+0xa90>)
 800b254:	e9c3 1204 	strd	r1, r2, [r3, #16]
 800b258:	e044      	b.n	800b2e4 <DoCalc+0xa94>
 800b25a:	bf00      	nop
 800b25c:	f3af 8000 	nop.w
 800b260:	00000000 	.word	0x00000000
 800b264:	40f51800 	.word	0x40f51800
 800b268:	05e6c9ce 	.word	0x05e6c9ce
 800b26c:	beda0133 	.word	0xbeda0133
 800b270:	eb2074eb 	.word	0xeb2074eb
 800b274:	3fb7d5a9 	.word	0x3fb7d5a9
 800b278:	1a02ff8f 	.word	0x1a02ff8f
 800b27c:	41607ad7 	.word	0x41607ad7
 800b280:	192641b3 	.word	0x192641b3
 800b284:	40d78ba3 	.word	0x40d78ba3
 800b288:	446d175b 	.word	0x446d175b
 800b28c:	bef380e6 	.word	0xbef380e6
 800b290:	eb2074eb 	.word	0xeb2074eb
 800b294:	3fc7d5a9 	.word	0x3fc7d5a9
 800b298:	00000000 	.word	0x00000000
 800b29c:	40e1d5a0 	.word	0x40e1d5a0
 800b2a0:	11111111 	.word	0x11111111
 800b2a4:	3f711111 	.word	0x3f711111
 800b2a8:	a2529d39 	.word	0xa2529d39
 800b2ac:	3f91df46 	.word	0x3f91df46
 800b2b0:	f837b4a2 	.word	0xf837b4a2
 800b2b4:	40b8ea22 	.word	0x40b8ea22
 800b2b8:	5d61cac1 	.word	0x5d61cac1
 800b2bc:	41a1d55d 	.word	0x41a1d55d
 800b2c0:	20000720 	.word	0x20000720
 800b2c4:	20000718 	.word	0x20000718
 800b2c8:	20000728 	.word	0x20000728
 800b2cc:	20000730 	.word	0x20000730
 800b2d0:	3ff00000 	.word	0x3ff00000
 800b2d4:	20000738 	.word	0x20000738
 800b2d8:	20000740 	.word	0x20000740
 800b2dc:	20000748 	.word	0x20000748
 800b2e0:	20000750 	.word	0x20000750
    xtopo = x - correction[0];
 800b2e4:	4bc2      	ldr	r3, [pc, #776]	; (800b5f0 <DoCalc+0xda0>)
 800b2e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2ea:	4bc2      	ldr	r3, [pc, #776]	; (800b5f4 <DoCalc+0xda4>)
 800b2ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	4623      	mov	r3, r4
 800b2f4:	f7f4 ffd2 	bl	800029c <__aeabi_dsub>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4622      	mov	r2, r4
 800b300:	4bbd      	ldr	r3, [pc, #756]	; (800b5f8 <DoCalc+0xda8>)
 800b302:	e9c3 1200 	strd	r1, r2, [r3]
    ytopo = y - correction[1];
 800b306:	4bbd      	ldr	r3, [pc, #756]	; (800b5fc <DoCalc+0xdac>)
 800b308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b30c:	4bb9      	ldr	r3, [pc, #740]	; (800b5f4 <DoCalc+0xda4>)
 800b30e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800b312:	461a      	mov	r2, r3
 800b314:	4623      	mov	r3, r4
 800b316:	f7f4 ffc1 	bl	800029c <__aeabi_dsub>
 800b31a:	4603      	mov	r3, r0
 800b31c:	460c      	mov	r4, r1
 800b31e:	4619      	mov	r1, r3
 800b320:	4622      	mov	r2, r4
 800b322:	4bb7      	ldr	r3, [pc, #732]	; (800b600 <DoCalc+0xdb0>)
 800b324:	e9c3 1200 	strd	r1, r2, [r3]
    ztopo = z - correction[2];
 800b328:	4bb6      	ldr	r3, [pc, #728]	; (800b604 <DoCalc+0xdb4>)
 800b32a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b32e:	4bb1      	ldr	r3, [pc, #708]	; (800b5f4 <DoCalc+0xda4>)
 800b330:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b334:	461a      	mov	r2, r3
 800b336:	4623      	mov	r3, r4
 800b338:	f7f4 ffb0 	bl	800029c <__aeabi_dsub>
 800b33c:	4603      	mov	r3, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	4619      	mov	r1, r3
 800b342:	4622      	mov	r2, r4
 800b344:	4bb0      	ldr	r3, [pc, #704]	; (800b608 <DoCalc+0xdb8>)
 800b346:	e9c3 1200 	strd	r1, r2, [r3]

    // Obtain topocentric equatorial coordinates
    ra = 0.0;
 800b34a:	4ab0      	ldr	r2, [pc, #704]	; (800b60c <DoCalc+0xdbc>)
 800b34c:	f04f 0300 	mov.w	r3, #0
 800b350:	f04f 0400 	mov.w	r4, #0
 800b354:	e9c2 3400 	strd	r3, r4, [r2]
    dec = M_PI_2;
 800b358:	4aad      	ldr	r2, [pc, #692]	; (800b610 <DoCalc+0xdc0>)
 800b35a:	a4a1      	add	r4, pc, #644	; (adr r4, 800b5e0 <DoCalc+0xd90>)
 800b35c:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b360:	e9c2 3400 	strd	r3, r4, [r2]

    if (ztopo < 0.0)
 800b364:	4ba8      	ldr	r3, [pc, #672]	; (800b608 <DoCalc+0xdb8>)
 800b366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b36a:	f04f 0200 	mov.w	r2, #0
 800b36e:	f04f 0300 	mov.w	r3, #0
 800b372:	f7f5 fbbd 	bl	8000af0 <__aeabi_dcmplt>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d008      	beq.n	800b38e <DoCalc+0xb3e>
        dec = -dec;
 800b37c:	4ba4      	ldr	r3, [pc, #656]	; (800b610 <DoCalc+0xdc0>)
 800b37e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b382:	4698      	mov	r8, r3
 800b384:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 800b388:	4ba1      	ldr	r3, [pc, #644]	; (800b610 <DoCalc+0xdc0>)
 800b38a:	e9c3 8900 	strd	r8, r9, [r3]

    if (ytopo != 0.0 || xtopo != 0.0) {
 800b38e:	4b9c      	ldr	r3, [pc, #624]	; (800b600 <DoCalc+0xdb0>)
 800b390:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b394:	f04f 0200 	mov.w	r2, #0
 800b398:	f04f 0300 	mov.w	r3, #0
 800b39c:	f7f5 fb9e 	bl	8000adc <__aeabi_dcmpeq>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00b      	beq.n	800b3be <DoCalc+0xb6e>
 800b3a6:	4b94      	ldr	r3, [pc, #592]	; (800b5f8 <DoCalc+0xda8>)
 800b3a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3ac:	f04f 0200 	mov.w	r2, #0
 800b3b0:	f04f 0300 	mov.w	r3, #0
 800b3b4:	f7f5 fb92 	bl	8000adc <__aeabi_dcmpeq>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d15e      	bne.n	800b47c <DoCalc+0xc2c>
        ra = atan2(ytopo, xtopo);
 800b3be:	4b90      	ldr	r3, [pc, #576]	; (800b600 <DoCalc+0xdb0>)
 800b3c0:	ed93 7b00 	vldr	d7, [r3]
 800b3c4:	4b8c      	ldr	r3, [pc, #560]	; (800b5f8 <DoCalc+0xda8>)
 800b3c6:	ed93 6b00 	vldr	d6, [r3]
 800b3ca:	eeb0 1a46 	vmov.f32	s2, s12
 800b3ce:	eef0 1a66 	vmov.f32	s3, s13
 800b3d2:	eeb0 0a47 	vmov.f32	s0, s14
 800b3d6:	eef0 0a67 	vmov.f32	s1, s15
 800b3da:	f00e f87d 	bl	80194d8 <atan2>
 800b3de:	eeb0 7a40 	vmov.f32	s14, s0
 800b3e2:	eef0 7a60 	vmov.f32	s15, s1
 800b3e6:	4b89      	ldr	r3, [pc, #548]	; (800b60c <DoCalc+0xdbc>)
 800b3e8:	ed83 7b00 	vstr	d7, [r3]
        dec = atan2(ztopo / sqrt(xtopo * xtopo +
 800b3ec:	4b86      	ldr	r3, [pc, #536]	; (800b608 <DoCalc+0xdb8>)
 800b3ee:	e9d3 5600 	ldrd	r5, r6, [r3]
 800b3f2:	4b81      	ldr	r3, [pc, #516]	; (800b5f8 <DoCalc+0xda8>)
 800b3f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3f8:	4b7f      	ldr	r3, [pc, #508]	; (800b5f8 <DoCalc+0xda8>)
 800b3fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3fe:	461a      	mov	r2, r3
 800b400:	4623      	mov	r3, r4
 800b402:	f7f5 f903 	bl	800060c <__aeabi_dmul>
 800b406:	4603      	mov	r3, r0
 800b408:	460c      	mov	r4, r1
 800b40a:	4698      	mov	r8, r3
 800b40c:	46a1      	mov	r9, r4
                                             ytopo * ytopo), 1.0);
 800b40e:	4b7c      	ldr	r3, [pc, #496]	; (800b600 <DoCalc+0xdb0>)
 800b410:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b414:	4b7a      	ldr	r3, [pc, #488]	; (800b600 <DoCalc+0xdb0>)
 800b416:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b41a:	461a      	mov	r2, r3
 800b41c:	4623      	mov	r3, r4
 800b41e:	f7f5 f8f5 	bl	800060c <__aeabi_dmul>
 800b422:	4603      	mov	r3, r0
 800b424:	460c      	mov	r4, r1
        dec = atan2(ztopo / sqrt(xtopo * xtopo +
 800b426:	461a      	mov	r2, r3
 800b428:	4623      	mov	r3, r4
 800b42a:	4640      	mov	r0, r8
 800b42c:	4649      	mov	r1, r9
 800b42e:	f7f4 ff37 	bl	80002a0 <__adddf3>
 800b432:	4603      	mov	r3, r0
 800b434:	460c      	mov	r4, r1
 800b436:	ec44 3b17 	vmov	d7, r3, r4
 800b43a:	eeb0 0a47 	vmov.f32	s0, s14
 800b43e:	eef0 0a67 	vmov.f32	s1, s15
 800b442:	f00e f9bb 	bl	80197bc <sqrt>
 800b446:	ec54 3b10 	vmov	r3, r4, d0
 800b44a:	461a      	mov	r2, r3
 800b44c:	4623      	mov	r3, r4
 800b44e:	4628      	mov	r0, r5
 800b450:	4631      	mov	r1, r6
 800b452:	f7f5 fa05 	bl	8000860 <__aeabi_ddiv>
 800b456:	4603      	mov	r3, r0
 800b458:	460c      	mov	r4, r1
 800b45a:	ec44 3b17 	vmov	d7, r3, r4
 800b45e:	ed9f 1b62 	vldr	d1, [pc, #392]	; 800b5e8 <DoCalc+0xd98>
 800b462:	eeb0 0a47 	vmov.f32	s0, s14
 800b466:	eef0 0a67 	vmov.f32	s1, s15
 800b46a:	f00e f835 	bl	80194d8 <atan2>
 800b46e:	eeb0 7a40 	vmov.f32	s14, s0
 800b472:	eef0 7a60 	vmov.f32	s15, s1
 800b476:	4b66      	ldr	r3, [pc, #408]	; (800b610 <DoCalc+0xdc0>)
 800b478:	ed83 7b00 	vstr	d7, [r3]
    }

    dist = sqrt(xtopo * xtopo +
 800b47c:	4b5e      	ldr	r3, [pc, #376]	; (800b5f8 <DoCalc+0xda8>)
 800b47e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b482:	4b5d      	ldr	r3, [pc, #372]	; (800b5f8 <DoCalc+0xda8>)
 800b484:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b488:	461a      	mov	r2, r3
 800b48a:	4623      	mov	r3, r4
 800b48c:	f7f5 f8be 	bl	800060c <__aeabi_dmul>
 800b490:	4603      	mov	r3, r0
 800b492:	460c      	mov	r4, r1
 800b494:	461d      	mov	r5, r3
 800b496:	4626      	mov	r6, r4
                             ytopo * ytopo +
 800b498:	4b59      	ldr	r3, [pc, #356]	; (800b600 <DoCalc+0xdb0>)
 800b49a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b49e:	4b58      	ldr	r3, [pc, #352]	; (800b600 <DoCalc+0xdb0>)
 800b4a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4623      	mov	r3, r4
 800b4a8:	f7f5 f8b0 	bl	800060c <__aeabi_dmul>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	460c      	mov	r4, r1
    dist = sqrt(xtopo * xtopo +
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4623      	mov	r3, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	f7f4 fef2 	bl	80002a0 <__adddf3>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	460c      	mov	r4, r1
 800b4c0:	461d      	mov	r5, r3
 800b4c2:	4626      	mov	r6, r4
                             ztopo * ztopo);
 800b4c4:	4b50      	ldr	r3, [pc, #320]	; (800b608 <DoCalc+0xdb8>)
 800b4c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4ca:	4b4f      	ldr	r3, [pc, #316]	; (800b608 <DoCalc+0xdb8>)
 800b4cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	4623      	mov	r3, r4
 800b4d4:	f7f5 f89a 	bl	800060c <__aeabi_dmul>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	460c      	mov	r4, r1
    dist = sqrt(xtopo * xtopo +
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4623      	mov	r3, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	f7f4 fedc 	bl	80002a0 <__adddf3>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	ec44 3b17 	vmov	d7, r3, r4
 800b4f0:	eeb0 0a47 	vmov.f32	s0, s14
 800b4f4:	eef0 0a67 	vmov.f32	s1, s15
 800b4f8:	f00e f960 	bl	80197bc <sqrt>
 800b4fc:	eeb0 7a40 	vmov.f32	s14, s0
 800b500:	eef0 7a60 	vmov.f32	s15, s1
 800b504:	4b43      	ldr	r3, [pc, #268]	; (800b614 <DoCalc+0xdc4>)
 800b506:	ed83 7b00 	vstr	d7, [r3]

    // Hour angle
    angh = lst - ra;
 800b50a:	4b43      	ldr	r3, [pc, #268]	; (800b618 <DoCalc+0xdc8>)
 800b50c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b510:	4b3e      	ldr	r3, [pc, #248]	; (800b60c <DoCalc+0xdbc>)
 800b512:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b516:	461a      	mov	r2, r3
 800b518:	4623      	mov	r3, r4
 800b51a:	f7f4 febf 	bl	800029c <__aeabi_dsub>
 800b51e:	4603      	mov	r3, r0
 800b520:	460c      	mov	r4, r1
 800b522:	4619      	mov	r1, r3
 800b524:	4622      	mov	r2, r4
 800b526:	4b3d      	ldr	r3, [pc, #244]	; (800b61c <DoCalc+0xdcc>)
 800b528:	e9c3 1200 	strd	r1, r2, [r3]

    // Obtain azimuth and geometric alt
    sinlat = sin(calc->latitude);
 800b52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52e:	ed93 7b06 	vldr	d7, [r3, #24]
 800b532:	eeb0 0a47 	vmov.f32	s0, s14
 800b536:	eef0 0a67 	vmov.f32	s1, s15
 800b53a:	f00d fea5 	bl	8019288 <sin>
 800b53e:	eeb0 7a40 	vmov.f32	s14, s0
 800b542:	eef0 7a60 	vmov.f32	s15, s1
 800b546:	4b36      	ldr	r3, [pc, #216]	; (800b620 <DoCalc+0xdd0>)
 800b548:	ed83 7b00 	vstr	d7, [r3]
    coslat = cos(calc->latitude);
 800b54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b54e:	ed93 7b06 	vldr	d7, [r3, #24]
 800b552:	eeb0 0a47 	vmov.f32	s0, s14
 800b556:	eef0 0a67 	vmov.f32	s1, s15
 800b55a:	f00d fd6d 	bl	8019038 <cos>
 800b55e:	eeb0 7a40 	vmov.f32	s14, s0
 800b562:	eef0 7a60 	vmov.f32	s15, s1
 800b566:	4b2f      	ldr	r3, [pc, #188]	; (800b624 <DoCalc+0xdd4>)
 800b568:	ed83 7b00 	vstr	d7, [r3]
    sindec = sin(dec);
 800b56c:	4b28      	ldr	r3, [pc, #160]	; (800b610 <DoCalc+0xdc0>)
 800b56e:	ed93 7b00 	vldr	d7, [r3]
 800b572:	eeb0 0a47 	vmov.f32	s0, s14
 800b576:	eef0 0a67 	vmov.f32	s1, s15
 800b57a:	f00d fe85 	bl	8019288 <sin>
 800b57e:	eeb0 7a40 	vmov.f32	s14, s0
 800b582:	eef0 7a60 	vmov.f32	s15, s1
 800b586:	4b28      	ldr	r3, [pc, #160]	; (800b628 <DoCalc+0xdd8>)
 800b588:	ed83 7b00 	vstr	d7, [r3]
    cosdec = cos(dec);
 800b58c:	4b20      	ldr	r3, [pc, #128]	; (800b610 <DoCalc+0xdc0>)
 800b58e:	ed93 7b00 	vldr	d7, [r3]
 800b592:	eeb0 0a47 	vmov.f32	s0, s14
 800b596:	eef0 0a67 	vmov.f32	s1, s15
 800b59a:	f00d fd4d 	bl	8019038 <cos>
 800b59e:	eeb0 7a40 	vmov.f32	s14, s0
 800b5a2:	eef0 7a60 	vmov.f32	s15, s1
 800b5a6:	4b21      	ldr	r3, [pc, #132]	; (800b62c <DoCalc+0xddc>)
 800b5a8:	ed83 7b00 	vstr	d7, [r3]
    h = sinlat * sindec + coslat * cosdec * cos(angh);
 800b5ac:	4b1c      	ldr	r3, [pc, #112]	; (800b620 <DoCalc+0xdd0>)
 800b5ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5b2:	4b1d      	ldr	r3, [pc, #116]	; (800b628 <DoCalc+0xdd8>)
 800b5b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	4623      	mov	r3, r4
 800b5bc:	f7f5 f826 	bl	800060c <__aeabi_dmul>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	4698      	mov	r8, r3
 800b5c6:	46a1      	mov	r9, r4
 800b5c8:	4b16      	ldr	r3, [pc, #88]	; (800b624 <DoCalc+0xdd4>)
 800b5ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5ce:	4b17      	ldr	r3, [pc, #92]	; (800b62c <DoCalc+0xddc>)
 800b5d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	4623      	mov	r3, r4
 800b5d8:	e02a      	b.n	800b630 <DoCalc+0xde0>
 800b5da:	bf00      	nop
 800b5dc:	f3af 8000 	nop.w
 800b5e0:	54442d18 	.word	0x54442d18
 800b5e4:	3ff921fb 	.word	0x3ff921fb
 800b5e8:	00000000 	.word	0x00000000
 800b5ec:	3ff00000 	.word	0x3ff00000
 800b5f0:	20000700 	.word	0x20000700
 800b5f4:	20000750 	.word	0x20000750
 800b5f8:	20000768 	.word	0x20000768
 800b5fc:	20000708 	.word	0x20000708
 800b600:	20000770 	.word	0x20000770
 800b604:	20000710 	.word	0x20000710
 800b608:	20000778 	.word	0x20000778
 800b60c:	20000780 	.word	0x20000780
 800b610:	20000788 	.word	0x20000788
 800b614:	20000790 	.word	0x20000790
 800b618:	20000740 	.word	0x20000740
 800b61c:	20000798 	.word	0x20000798
 800b620:	200007a0 	.word	0x200007a0
 800b624:	200007a8 	.word	0x200007a8
 800b628:	200007b0 	.word	0x200007b0
 800b62c:	200007b8 	.word	0x200007b8
 800b630:	f7f4 ffec 	bl	800060c <__aeabi_dmul>
 800b634:	4603      	mov	r3, r0
 800b636:	460c      	mov	r4, r1
 800b638:	4625      	mov	r5, r4
 800b63a:	461c      	mov	r4, r3
 800b63c:	4bc6      	ldr	r3, [pc, #792]	; (800b958 <DoCalc+0x1108>)
 800b63e:	ed93 7b00 	vldr	d7, [r3]
 800b642:	eeb0 0a47 	vmov.f32	s0, s14
 800b646:	eef0 0a67 	vmov.f32	s1, s15
 800b64a:	f00d fcf5 	bl	8019038 <cos>
 800b64e:	ec53 2b10 	vmov	r2, r3, d0
 800b652:	4620      	mov	r0, r4
 800b654:	4629      	mov	r1, r5
 800b656:	f7f4 ffd9 	bl	800060c <__aeabi_dmul>
 800b65a:	4603      	mov	r3, r0
 800b65c:	460c      	mov	r4, r1
 800b65e:	461a      	mov	r2, r3
 800b660:	4623      	mov	r3, r4
 800b662:	4640      	mov	r0, r8
 800b664:	4649      	mov	r1, r9
 800b666:	f7f4 fe1b 	bl	80002a0 <__adddf3>
 800b66a:	4603      	mov	r3, r0
 800b66c:	460c      	mov	r4, r1
 800b66e:	4619      	mov	r1, r3
 800b670:	4622      	mov	r2, r4
 800b672:	4bba      	ldr	r3, [pc, #744]	; (800b95c <DoCalc+0x110c>)
 800b674:	e9c3 1200 	strd	r1, r2, [r3]
    alt = asin(h);
 800b678:	4bb8      	ldr	r3, [pc, #736]	; (800b95c <DoCalc+0x110c>)
 800b67a:	ed93 7b00 	vldr	d7, [r3]
 800b67e:	eeb0 0a47 	vmov.f32	s0, s14
 800b682:	eef0 0a67 	vmov.f32	s1, s15
 800b686:	f00d fecf 	bl	8019428 <asin>
 800b68a:	eeb0 7a40 	vmov.f32	s14, s0
 800b68e:	eef0 7a60 	vmov.f32	s15, s1
 800b692:	4bb3      	ldr	r3, [pc, #716]	; (800b960 <DoCalc+0x1110>)
 800b694:	ed83 7b00 	vstr	d7, [r3]
    azy = sin(angh);
 800b698:	4baf      	ldr	r3, [pc, #700]	; (800b958 <DoCalc+0x1108>)
 800b69a:	ed93 7b00 	vldr	d7, [r3]
 800b69e:	eeb0 0a47 	vmov.f32	s0, s14
 800b6a2:	eef0 0a67 	vmov.f32	s1, s15
 800b6a6:	f00d fdef 	bl	8019288 <sin>
 800b6aa:	eeb0 7a40 	vmov.f32	s14, s0
 800b6ae:	eef0 7a60 	vmov.f32	s15, s1
 800b6b2:	4bac      	ldr	r3, [pc, #688]	; (800b964 <DoCalc+0x1114>)
 800b6b4:	ed83 7b00 	vstr	d7, [r3]
    azx = cos(angh) * sinlat - sindec * coslat / cosdec;
 800b6b8:	4ba7      	ldr	r3, [pc, #668]	; (800b958 <DoCalc+0x1108>)
 800b6ba:	ed93 7b00 	vldr	d7, [r3]
 800b6be:	eeb0 0a47 	vmov.f32	s0, s14
 800b6c2:	eef0 0a67 	vmov.f32	s1, s15
 800b6c6:	f00d fcb7 	bl	8019038 <cos>
 800b6ca:	ec51 0b10 	vmov	r0, r1, d0
 800b6ce:	4ba6      	ldr	r3, [pc, #664]	; (800b968 <DoCalc+0x1118>)
 800b6d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	4623      	mov	r3, r4
 800b6d8:	f7f4 ff98 	bl	800060c <__aeabi_dmul>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	461d      	mov	r5, r3
 800b6e2:	4626      	mov	r6, r4
 800b6e4:	4ba1      	ldr	r3, [pc, #644]	; (800b96c <DoCalc+0x111c>)
 800b6e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6ea:	4ba1      	ldr	r3, [pc, #644]	; (800b970 <DoCalc+0x1120>)
 800b6ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	4623      	mov	r3, r4
 800b6f4:	f7f4 ff8a 	bl	800060c <__aeabi_dmul>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	4621      	mov	r1, r4
 800b700:	4b9c      	ldr	r3, [pc, #624]	; (800b974 <DoCalc+0x1124>)
 800b702:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b706:	461a      	mov	r2, r3
 800b708:	4623      	mov	r3, r4
 800b70a:	f7f5 f8a9 	bl	8000860 <__aeabi_ddiv>
 800b70e:	4603      	mov	r3, r0
 800b710:	460c      	mov	r4, r1
 800b712:	461a      	mov	r2, r3
 800b714:	4623      	mov	r3, r4
 800b716:	4628      	mov	r0, r5
 800b718:	4631      	mov	r1, r6
 800b71a:	f7f4 fdbf 	bl	800029c <__aeabi_dsub>
 800b71e:	4603      	mov	r3, r0
 800b720:	460c      	mov	r4, r1
 800b722:	4619      	mov	r1, r3
 800b724:	4622      	mov	r2, r4
 800b726:	4b94      	ldr	r3, [pc, #592]	; (800b978 <DoCalc+0x1128>)
 800b728:	e9c3 1200 	strd	r1, r2, [r3]
    azi = M_PI + atan2(azy, azx); // 0 = north
 800b72c:	4b8d      	ldr	r3, [pc, #564]	; (800b964 <DoCalc+0x1114>)
 800b72e:	ed93 7b00 	vldr	d7, [r3]
 800b732:	4b91      	ldr	r3, [pc, #580]	; (800b978 <DoCalc+0x1128>)
 800b734:	ed93 6b00 	vldr	d6, [r3]
 800b738:	eeb0 1a46 	vmov.f32	s2, s12
 800b73c:	eef0 1a66 	vmov.f32	s3, s13
 800b740:	eeb0 0a47 	vmov.f32	s0, s14
 800b744:	eef0 0a67 	vmov.f32	s1, s15
 800b748:	f00d fec6 	bl	80194d8 <atan2>
 800b74c:	ec51 0b10 	vmov	r0, r1, d0
 800b750:	a369      	add	r3, pc, #420	; (adr r3, 800b8f8 <DoCalc+0x10a8>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	f7f4 fda3 	bl	80002a0 <__adddf3>
 800b75a:	4603      	mov	r3, r0
 800b75c:	460c      	mov	r4, r1
 800b75e:	4619      	mov	r1, r3
 800b760:	4622      	mov	r2, r4
 800b762:	4b86      	ldr	r3, [pc, #536]	; (800b97c <DoCalc+0x112c>)
 800b764:	e9c3 1200 	strd	r1, r2, [r3]

    // Get apparent elevation
    if (alt > -3 * snm_DEG_TO_RAD) {
 800b768:	4b7d      	ldr	r3, [pc, #500]	; (800b960 <DoCalc+0x1110>)
 800b76a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b76e:	a364      	add	r3, pc, #400	; (adr r3, 800b900 <DoCalc+0x10b0>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7f5 f9da 	bl	8000b2c <__aeabi_dcmpgt>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 8089 	beq.w	800b892 <DoCalc+0x1042>
        r = 0.016667 * snm_DEG_TO_RAD * fabs(tan(M_PI_2 - (alt * snm_RAD_TO_DEG +  7.31 / (alt * snm_RAD_TO_DEG + 4.4)) * snm_DEG_TO_RAD));
 800b780:	4b77      	ldr	r3, [pc, #476]	; (800b960 <DoCalc+0x1110>)
 800b782:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b786:	a360      	add	r3, pc, #384	; (adr r3, 800b908 <DoCalc+0x10b8>)
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	f7f4 ff3e 	bl	800060c <__aeabi_dmul>
 800b790:	4603      	mov	r3, r0
 800b792:	460c      	mov	r4, r1
 800b794:	461d      	mov	r5, r3
 800b796:	4626      	mov	r6, r4
 800b798:	4b71      	ldr	r3, [pc, #452]	; (800b960 <DoCalc+0x1110>)
 800b79a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b79e:	a35a      	add	r3, pc, #360	; (adr r3, 800b908 <DoCalc+0x10b8>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f7f4 ff32 	bl	800060c <__aeabi_dmul>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	a357      	add	r3, pc, #348	; (adr r3, 800b910 <DoCalc+0x10c0>)
 800b7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b6:	f7f4 fd73 	bl	80002a0 <__adddf3>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	460c      	mov	r4, r1
 800b7be:	461a      	mov	r2, r3
 800b7c0:	4623      	mov	r3, r4
 800b7c2:	a155      	add	r1, pc, #340	; (adr r1, 800b918 <DoCalc+0x10c8>)
 800b7c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7c8:	f7f5 f84a 	bl	8000860 <__aeabi_ddiv>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4623      	mov	r3, r4
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	f7f4 fd62 	bl	80002a0 <__adddf3>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	a34e      	add	r3, pc, #312	; (adr r3, 800b920 <DoCalc+0x10d0>)
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	f7f4 ff0f 	bl	800060c <__aeabi_dmul>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4623      	mov	r3, r4
 800b7f6:	a14c      	add	r1, pc, #304	; (adr r1, 800b928 <DoCalc+0x10d8>)
 800b7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7fc:	f7f4 fd4e 	bl	800029c <__aeabi_dsub>
 800b800:	4603      	mov	r3, r0
 800b802:	460c      	mov	r4, r1
 800b804:	ec44 3b17 	vmov	d7, r3, r4
 800b808:	eeb0 0a47 	vmov.f32	s0, s14
 800b80c:	eef0 0a67 	vmov.f32	s1, s15
 800b810:	f00d fd82 	bl	8019318 <tan>
 800b814:	ec54 3b10 	vmov	r3, r4, d0
 800b818:	469a      	mov	sl, r3
 800b81a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800b81e:	a344      	add	r3, pc, #272	; (adr r3, 800b930 <DoCalc+0x10e0>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	4650      	mov	r0, sl
 800b826:	4659      	mov	r1, fp
 800b828:	f7f4 fef0 	bl	800060c <__aeabi_dmul>
 800b82c:	4603      	mov	r3, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	4619      	mov	r1, r3
 800b832:	4622      	mov	r2, r4
 800b834:	4b52      	ldr	r3, [pc, #328]	; (800b980 <DoCalc+0x1130>)
 800b836:	e9c3 1200 	strd	r1, r2, [r3]
        refr = r * ( 0.28 * 1010 / (10 + 273.0)); // Assuming pressure of 1010 mb and T = 10 C
 800b83a:	4b51      	ldr	r3, [pc, #324]	; (800b980 <DoCalc+0x1130>)
 800b83c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b840:	a33d      	add	r3, pc, #244	; (adr r3, 800b938 <DoCalc+0x10e8>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 fee1 	bl	800060c <__aeabi_dmul>
 800b84a:	4603      	mov	r3, r0
 800b84c:	460c      	mov	r4, r1
 800b84e:	4619      	mov	r1, r3
 800b850:	4622      	mov	r2, r4
 800b852:	4b4c      	ldr	r3, [pc, #304]	; (800b984 <DoCalc+0x1134>)
 800b854:	e9c3 1200 	strd	r1, r2, [r3]
        alt = fmin(alt + refr, M_PI_2); // This is not accurate, but acceptable
 800b858:	4b41      	ldr	r3, [pc, #260]	; (800b960 <DoCalc+0x1110>)
 800b85a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b85e:	4b49      	ldr	r3, [pc, #292]	; (800b984 <DoCalc+0x1134>)
 800b860:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b864:	461a      	mov	r2, r3
 800b866:	4623      	mov	r3, r4
 800b868:	f7f4 fd1a 	bl	80002a0 <__adddf3>
 800b86c:	4603      	mov	r3, r0
 800b86e:	460c      	mov	r4, r1
 800b870:	ec44 3b17 	vmov	d7, r3, r4
 800b874:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 800b928 <DoCalc+0x10d8>
 800b878:	eeb0 0a47 	vmov.f32	s0, s14
 800b87c:	eef0 0a67 	vmov.f32	s1, s15
 800b880:	f00d fcae 	bl	80191e0 <fmin>
 800b884:	eeb0 7a40 	vmov.f32	s14, s0
 800b888:	eef0 7a60 	vmov.f32	s15, s1
 800b88c:	4b34      	ldr	r3, [pc, #208]	; (800b960 <DoCalc+0x1110>)
 800b88e:	ed83 7b00 	vstr	d7, [r3]
    }

    switch (calc->twilight) {
 800b892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d87e      	bhi.n	800b99a <DoCalc+0x114a>
 800b89c:	a201      	add	r2, pc, #4	; (adr r2, 800b8a4 <DoCalc+0x1054>)
 800b89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a2:	bf00      	nop
 800b8a4:	0800b98d 	.word	0x0800b98d
 800b8a8:	0800b8e9 	.word	0x0800b8e9
 800b8ac:	0800b8db 	.word	0x0800b8db
 800b8b0:	0800b8b5 	.word	0x0800b8b5
    case HORIZON_34arcmin:
        // Rise, set, transit times, taking into account Sun/Moon angular radius (pos[3]).
        // The 34' factor is the standard refraction at horizon.
        // Removing angular radius will do calculations for the center of the disk instead
        // of the upper limb.
        tmp = -(34.0 / 60.0) * snm_DEG_TO_RAD - pos[3];
 800b8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b6:	3318      	adds	r3, #24
 800b8b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	4623      	mov	r3, r4
 800b8c0:	a11f      	add	r1, pc, #124	; (adr r1, 800b940 <DoCalc+0x10f0>)
 800b8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c6:	f7f4 fce9 	bl	800029c <__aeabi_dsub>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4622      	mov	r2, r4
 800b8d2:	4b2d      	ldr	r3, [pc, #180]	; (800b988 <DoCalc+0x1138>)
 800b8d4:	e9c3 1200 	strd	r1, r2, [r3]
        break;
 800b8d8:	e05f      	b.n	800b99a <DoCalc+0x114a>
    case TWILIGHT_CIVIL:
        tmp = -6 * snm_DEG_TO_RAD;
 800b8da:	4a2b      	ldr	r2, [pc, #172]	; (800b988 <DoCalc+0x1138>)
 800b8dc:	a41a      	add	r4, pc, #104	; (adr r4, 800b948 <DoCalc+0x10f8>)
 800b8de:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b8e2:	e9c2 3400 	strd	r3, r4, [r2]
        break;
 800b8e6:	e058      	b.n	800b99a <DoCalc+0x114a>
    case TWILIGHT_NAUTICAL:
        tmp = -12 * snm_DEG_TO_RAD;
 800b8e8:	4a27      	ldr	r2, [pc, #156]	; (800b988 <DoCalc+0x1138>)
 800b8ea:	a419      	add	r4, pc, #100	; (adr r4, 800b950 <DoCalc+0x1100>)
 800b8ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b8f0:	e9c2 3400 	strd	r3, r4, [r2]
        break;
 800b8f4:	e051      	b.n	800b99a <DoCalc+0x114a>
 800b8f6:	bf00      	nop
 800b8f8:	54442d18 	.word	0x54442d18
 800b8fc:	400921fb 	.word	0x400921fb
 800b900:	f37bebd6 	.word	0xf37bebd6
 800b904:	bfaacee9 	.word	0xbfaacee9
 800b908:	1a63c1f8 	.word	0x1a63c1f8
 800b90c:	404ca5dc 	.word	0x404ca5dc
 800b910:	9999999a 	.word	0x9999999a
 800b914:	40119999 	.word	0x40119999
 800b918:	a3d70a3d 	.word	0xa3d70a3d
 800b91c:	401d3d70 	.word	0x401d3d70
 800b920:	a2529d39 	.word	0xa2529d39
 800b924:	3f91df46 	.word	0x3f91df46
 800b928:	54442d18 	.word	0x54442d18
 800b92c:	3ff921fb 	.word	0x3ff921fb
 800b930:	54829fa6 	.word	0x54829fa6
 800b934:	3f331064 	.word	0x3f331064
 800b938:	e9ed8bda 	.word	0xe9ed8bda
 800b93c:	3feffa35 	.word	0x3feffa35
 800b940:	0d4c900d 	.word	0x0d4c900d
 800b944:	bf844150 	.word	0xbf844150
 800b948:	f37bebd6 	.word	0xf37bebd6
 800b94c:	bfbacee9 	.word	0xbfbacee9
 800b950:	f37bebd6 	.word	0xf37bebd6
 800b954:	bfcacee9 	.word	0xbfcacee9
 800b958:	20000798 	.word	0x20000798
 800b95c:	200007c0 	.word	0x200007c0
 800b960:	200007c8 	.word	0x200007c8
 800b964:	200007d0 	.word	0x200007d0
 800b968:	200007a0 	.word	0x200007a0
 800b96c:	200007b0 	.word	0x200007b0
 800b970:	200007a8 	.word	0x200007a8
 800b974:	200007b8 	.word	0x200007b8
 800b978:	200007d8 	.word	0x200007d8
 800b97c:	200007e0 	.word	0x200007e0
 800b980:	200007e8 	.word	0x200007e8
 800b984:	200007f0 	.word	0x200007f0
 800b988:	200006d0 	.word	0x200006d0
    case TWILIGHT_ASTRONOMICAL:
        tmp = -18 * snm_DEG_TO_RAD;
 800b98c:	4ad8      	ldr	r2, [pc, #864]	; (800bcf0 <DoCalc+0x14a0>)
 800b98e:	a4c2      	add	r4, pc, #776	; (adr r4, 800bc98 <DoCalc+0x1448>)
 800b990:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b994:	e9c2 3400 	strd	r3, r4, [r2]
        break;
 800b998:	bf00      	nop
    }

    // Compute cosine of hour angle
    tmp = (sin(tmp) - sin(calc->latitude) * sin(dec)) / (cos(calc->latitude) * cos(dec));
 800b99a:	4bd5      	ldr	r3, [pc, #852]	; (800bcf0 <DoCalc+0x14a0>)
 800b99c:	ed93 7b00 	vldr	d7, [r3]
 800b9a0:	eeb0 0a47 	vmov.f32	s0, s14
 800b9a4:	eef0 0a67 	vmov.f32	s1, s15
 800b9a8:	f00d fc6e 	bl	8019288 <sin>
 800b9ac:	ec56 5b10 	vmov	r5, r6, d0
 800b9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b2:	ed93 7b06 	vldr	d7, [r3, #24]
 800b9b6:	eeb0 0a47 	vmov.f32	s0, s14
 800b9ba:	eef0 0a67 	vmov.f32	s1, s15
 800b9be:	f00d fc63 	bl	8019288 <sin>
 800b9c2:	ec59 8b10 	vmov	r8, r9, d0
 800b9c6:	4bcb      	ldr	r3, [pc, #812]	; (800bcf4 <DoCalc+0x14a4>)
 800b9c8:	ed93 7b00 	vldr	d7, [r3]
 800b9cc:	eeb0 0a47 	vmov.f32	s0, s14
 800b9d0:	eef0 0a67 	vmov.f32	s1, s15
 800b9d4:	f00d fc58 	bl	8019288 <sin>
 800b9d8:	ec54 3b10 	vmov	r3, r4, d0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4623      	mov	r3, r4
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	4649      	mov	r1, r9
 800b9e4:	f7f4 fe12 	bl	800060c <__aeabi_dmul>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	4623      	mov	r3, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	f7f4 fc52 	bl	800029c <__aeabi_dsub>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	461d      	mov	r5, r3
 800b9fe:	4626      	mov	r6, r4
 800ba00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba02:	ed93 7b06 	vldr	d7, [r3, #24]
 800ba06:	eeb0 0a47 	vmov.f32	s0, s14
 800ba0a:	eef0 0a67 	vmov.f32	s1, s15
 800ba0e:	f00d fb13 	bl	8019038 <cos>
 800ba12:	ec59 8b10 	vmov	r8, r9, d0
 800ba16:	4bb7      	ldr	r3, [pc, #732]	; (800bcf4 <DoCalc+0x14a4>)
 800ba18:	ed93 7b00 	vldr	d7, [r3]
 800ba1c:	eeb0 0a47 	vmov.f32	s0, s14
 800ba20:	eef0 0a67 	vmov.f32	s1, s15
 800ba24:	f00d fb08 	bl	8019038 <cos>
 800ba28:	ec54 3b10 	vmov	r3, r4, d0
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	4623      	mov	r3, r4
 800ba30:	4640      	mov	r0, r8
 800ba32:	4649      	mov	r1, r9
 800ba34:	f7f4 fdea 	bl	800060c <__aeabi_dmul>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	4623      	mov	r3, r4
 800ba40:	4628      	mov	r0, r5
 800ba42:	4631      	mov	r1, r6
 800ba44:	f7f4 ff0c 	bl	8000860 <__aeabi_ddiv>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4622      	mov	r2, r4
 800ba50:	4ba7      	ldr	r3, [pc, #668]	; (800bcf0 <DoCalc+0x14a0>)
 800ba52:	e9c3 1200 	strd	r1, r2, [r3]
    celestialHoursToEarthTime = RAD_TO_DAY / SIDEREAL_DAY_LENGTH;
 800ba56:	a492      	add	r4, pc, #584	; (adr r4, 800bca0 <DoCalc+0x1450>)
 800ba58:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4623      	mov	r3, r4
 800ba60:	a191      	add	r1, pc, #580	; (adr r1, 800bca8 <DoCalc+0x1458>)
 800ba62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba66:	f7f4 fefb 	bl	8000860 <__aeabi_ddiv>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4622      	mov	r2, r4
 800ba72:	4ba1      	ldr	r3, [pc, #644]	; (800bcf8 <DoCalc+0x14a8>)
 800ba74:	e9c3 1200 	strd	r1, r2, [r3]

    // Make calculations for the meridian
    transit_time1 = celestialHoursToEarthTime * NormalizeRadians(ra - lst);
 800ba78:	4ba0      	ldr	r3, [pc, #640]	; (800bcfc <DoCalc+0x14ac>)
 800ba7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba7e:	4ba0      	ldr	r3, [pc, #640]	; (800bd00 <DoCalc+0x14b0>)
 800ba80:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba84:	461a      	mov	r2, r3
 800ba86:	4623      	mov	r3, r4
 800ba88:	f7f4 fc08 	bl	800029c <__aeabi_dsub>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	ec44 3b17 	vmov	d7, r3, r4
 800ba94:	eeb0 0a47 	vmov.f32	s0, s14
 800ba98:	eef0 0a67 	vmov.f32	s1, s15
 800ba9c:	f7fb fd88 	bl	80075b0 <NormalizeRadians>
 800baa0:	ec51 0b10 	vmov	r0, r1, d0
 800baa4:	4b94      	ldr	r3, [pc, #592]	; (800bcf8 <DoCalc+0x14a8>)
 800baa6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baaa:	461a      	mov	r2, r3
 800baac:	4623      	mov	r3, r4
 800baae:	f7f4 fdad 	bl	800060c <__aeabi_dmul>
 800bab2:	4603      	mov	r3, r0
 800bab4:	460c      	mov	r4, r1
 800bab6:	4619      	mov	r1, r3
 800bab8:	4622      	mov	r2, r4
 800baba:	4b92      	ldr	r3, [pc, #584]	; (800bd04 <DoCalc+0x14b4>)
 800babc:	e9c3 1200 	strd	r1, r2, [r3]
    transit_time2 = celestialHoursToEarthTime * (NormalizeRadians(ra - lst) - TWO_PI);
 800bac0:	4b8e      	ldr	r3, [pc, #568]	; (800bcfc <DoCalc+0x14ac>)
 800bac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bac6:	4b8e      	ldr	r3, [pc, #568]	; (800bd00 <DoCalc+0x14b0>)
 800bac8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bacc:	461a      	mov	r2, r3
 800bace:	4623      	mov	r3, r4
 800bad0:	f7f4 fbe4 	bl	800029c <__aeabi_dsub>
 800bad4:	4603      	mov	r3, r0
 800bad6:	460c      	mov	r4, r1
 800bad8:	ec44 3b17 	vmov	d7, r3, r4
 800badc:	eeb0 0a47 	vmov.f32	s0, s14
 800bae0:	eef0 0a67 	vmov.f32	s1, s15
 800bae4:	f7fb fd64 	bl	80075b0 <NormalizeRadians>
 800bae8:	ec51 0b10 	vmov	r0, r1, d0
 800baec:	a370      	add	r3, pc, #448	; (adr r3, 800bcb0 <DoCalc+0x1460>)
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f7f4 fbd3 	bl	800029c <__aeabi_dsub>
 800baf6:	4603      	mov	r3, r0
 800baf8:	460c      	mov	r4, r1
 800bafa:	4618      	mov	r0, r3
 800bafc:	4621      	mov	r1, r4
 800bafe:	4b7e      	ldr	r3, [pc, #504]	; (800bcf8 <DoCalc+0x14a8>)
 800bb00:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb04:	461a      	mov	r2, r3
 800bb06:	4623      	mov	r3, r4
 800bb08:	f7f4 fd80 	bl	800060c <__aeabi_dmul>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	460c      	mov	r4, r1
 800bb10:	4619      	mov	r1, r3
 800bb12:	4622      	mov	r2, r4
 800bb14:	4b7c      	ldr	r3, [pc, #496]	; (800bd08 <DoCalc+0x14b8>)
 800bb16:	e9c3 1200 	strd	r1, r2, [r3]
    transit_alt = asin(sin(dec) * sin(calc->latitude) + cos(dec) * cos(calc->latitude));
 800bb1a:	4b76      	ldr	r3, [pc, #472]	; (800bcf4 <DoCalc+0x14a4>)
 800bb1c:	ed93 7b00 	vldr	d7, [r3]
 800bb20:	eeb0 0a47 	vmov.f32	s0, s14
 800bb24:	eef0 0a67 	vmov.f32	s1, s15
 800bb28:	f00d fbae 	bl	8019288 <sin>
 800bb2c:	ec55 4b10 	vmov	r4, r5, d0
 800bb30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb32:	ed93 7b06 	vldr	d7, [r3, #24]
 800bb36:	eeb0 0a47 	vmov.f32	s0, s14
 800bb3a:	eef0 0a67 	vmov.f32	s1, s15
 800bb3e:	f00d fba3 	bl	8019288 <sin>
 800bb42:	ec53 2b10 	vmov	r2, r3, d0
 800bb46:	4620      	mov	r0, r4
 800bb48:	4629      	mov	r1, r5
 800bb4a:	f7f4 fd5f 	bl	800060c <__aeabi_dmul>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	461d      	mov	r5, r3
 800bb54:	4626      	mov	r6, r4
 800bb56:	4b67      	ldr	r3, [pc, #412]	; (800bcf4 <DoCalc+0x14a4>)
 800bb58:	ed93 7b00 	vldr	d7, [r3]
 800bb5c:	eeb0 0a47 	vmov.f32	s0, s14
 800bb60:	eef0 0a67 	vmov.f32	s1, s15
 800bb64:	f00d fa68 	bl	8019038 <cos>
 800bb68:	ec59 8b10 	vmov	r8, r9, d0
 800bb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb6e:	ed93 7b06 	vldr	d7, [r3, #24]
 800bb72:	eeb0 0a47 	vmov.f32	s0, s14
 800bb76:	eef0 0a67 	vmov.f32	s1, s15
 800bb7a:	f00d fa5d 	bl	8019038 <cos>
 800bb7e:	ec54 3b10 	vmov	r3, r4, d0
 800bb82:	461a      	mov	r2, r3
 800bb84:	4623      	mov	r3, r4
 800bb86:	4640      	mov	r0, r8
 800bb88:	4649      	mov	r1, r9
 800bb8a:	f7f4 fd3f 	bl	800060c <__aeabi_dmul>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	461a      	mov	r2, r3
 800bb94:	4623      	mov	r3, r4
 800bb96:	4628      	mov	r0, r5
 800bb98:	4631      	mov	r1, r6
 800bb9a:	f7f4 fb81 	bl	80002a0 <__adddf3>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	460c      	mov	r4, r1
 800bba2:	ec44 3b17 	vmov	d7, r3, r4
 800bba6:	eeb0 0a47 	vmov.f32	s0, s14
 800bbaa:	eef0 0a67 	vmov.f32	s1, s15
 800bbae:	f00d fc3b 	bl	8019428 <asin>
 800bbb2:	eeb0 7a40 	vmov.f32	s14, s0
 800bbb6:	eef0 7a60 	vmov.f32	s15, s1
 800bbba:	4b54      	ldr	r3, [pc, #336]	; (800bd0c <DoCalc+0x14bc>)
 800bbbc:	ed83 7b00 	vstr	d7, [r3]

    if (transit_alt > -3 * snm_DEG_TO_RAD) {
 800bbc0:	4b52      	ldr	r3, [pc, #328]	; (800bd0c <DoCalc+0x14bc>)
 800bbc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbc6:	a33c      	add	r3, pc, #240	; (adr r3, 800bcb8 <DoCalc+0x1468>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 ffae 	bl	8000b2c <__aeabi_dcmpgt>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 80ca 	beq.w	800bd6c <DoCalc+0x151c>
        r = 0.016667 * snm_DEG_TO_RAD * fabs(tan(M_PI_2 - (transit_alt * snm_RAD_TO_DEG +  7.31 / (transit_alt * snm_RAD_TO_DEG + 4.4)) * snm_DEG_TO_RAD));
 800bbd8:	4b4c      	ldr	r3, [pc, #304]	; (800bd0c <DoCalc+0x14bc>)
 800bbda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbde:	a338      	add	r3, pc, #224	; (adr r3, 800bcc0 <DoCalc+0x1470>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 fd12 	bl	800060c <__aeabi_dmul>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	460c      	mov	r4, r1
 800bbec:	461d      	mov	r5, r3
 800bbee:	4626      	mov	r6, r4
 800bbf0:	4b46      	ldr	r3, [pc, #280]	; (800bd0c <DoCalc+0x14bc>)
 800bbf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbf6:	a332      	add	r3, pc, #200	; (adr r3, 800bcc0 <DoCalc+0x1470>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fd06 	bl	800060c <__aeabi_dmul>
 800bc00:	4603      	mov	r3, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	4618      	mov	r0, r3
 800bc06:	4621      	mov	r1, r4
 800bc08:	a32f      	add	r3, pc, #188	; (adr r3, 800bcc8 <DoCalc+0x1478>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 fb47 	bl	80002a0 <__adddf3>
 800bc12:	4603      	mov	r3, r0
 800bc14:	460c      	mov	r4, r1
 800bc16:	461a      	mov	r2, r3
 800bc18:	4623      	mov	r3, r4
 800bc1a:	a12d      	add	r1, pc, #180	; (adr r1, 800bcd0 <DoCalc+0x1480>)
 800bc1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc20:	f7f4 fe1e 	bl	8000860 <__aeabi_ddiv>
 800bc24:	4603      	mov	r3, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	461a      	mov	r2, r3
 800bc2a:	4623      	mov	r3, r4
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	4631      	mov	r1, r6
 800bc30:	f7f4 fb36 	bl	80002a0 <__adddf3>
 800bc34:	4603      	mov	r3, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	4618      	mov	r0, r3
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	a326      	add	r3, pc, #152	; (adr r3, 800bcd8 <DoCalc+0x1488>)
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	f7f4 fce3 	bl	800060c <__aeabi_dmul>
 800bc46:	4603      	mov	r3, r0
 800bc48:	460c      	mov	r4, r1
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	4623      	mov	r3, r4
 800bc4e:	a124      	add	r1, pc, #144	; (adr r1, 800bce0 <DoCalc+0x1490>)
 800bc50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc54:	f7f4 fb22 	bl	800029c <__aeabi_dsub>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	ec44 3b17 	vmov	d7, r3, r4
 800bc60:	eeb0 0a47 	vmov.f32	s0, s14
 800bc64:	eef0 0a67 	vmov.f32	s1, s15
 800bc68:	f00d fb56 	bl	8019318 <tan>
 800bc6c:	ec54 3b10 	vmov	r3, r4, d0
 800bc70:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc78:	a31b      	add	r3, pc, #108	; (adr r3, 800bce8 <DoCalc+0x1498>)
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800bc82:	f7f4 fcc3 	bl	800060c <__aeabi_dmul>
 800bc86:	4603      	mov	r3, r0
 800bc88:	460c      	mov	r4, r1
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	4b20      	ldr	r3, [pc, #128]	; (800bd10 <DoCalc+0x14c0>)
 800bc90:	e9c3 1200 	strd	r1, r2, [r3]
 800bc94:	e03e      	b.n	800bd14 <DoCalc+0x14c4>
 800bc96:	bf00      	nop
 800bc98:	769cf0e0 	.word	0x769cf0e0
 800bc9c:	bfd41b2f 	.word	0xbfd41b2f
 800bca0:	cdc9f32b 	.word	0xcdc9f32b
 800bca4:	3ff00b36 	.word	0x3ff00b36
 800bca8:	6dc9c883 	.word	0x6dc9c883
 800bcac:	3fc45f30 	.word	0x3fc45f30
 800bcb0:	54442d18 	.word	0x54442d18
 800bcb4:	401921fb 	.word	0x401921fb
 800bcb8:	f37bebd6 	.word	0xf37bebd6
 800bcbc:	bfaacee9 	.word	0xbfaacee9
 800bcc0:	1a63c1f8 	.word	0x1a63c1f8
 800bcc4:	404ca5dc 	.word	0x404ca5dc
 800bcc8:	9999999a 	.word	0x9999999a
 800bccc:	40119999 	.word	0x40119999
 800bcd0:	a3d70a3d 	.word	0xa3d70a3d
 800bcd4:	401d3d70 	.word	0x401d3d70
 800bcd8:	a2529d39 	.word	0xa2529d39
 800bcdc:	3f91df46 	.word	0x3f91df46
 800bce0:	54442d18 	.word	0x54442d18
 800bce4:	3ff921fb 	.word	0x3ff921fb
 800bce8:	54829fa6 	.word	0x54829fa6
 800bcec:	3f331064 	.word	0x3f331064
 800bcf0:	200006d0 	.word	0x200006d0
 800bcf4:	20000788 	.word	0x20000788
 800bcf8:	200007f8 	.word	0x200007f8
 800bcfc:	20000780 	.word	0x20000780
 800bd00:	20000740 	.word	0x20000740
 800bd04:	20000800 	.word	0x20000800
 800bd08:	20000808 	.word	0x20000808
 800bd0c:	20000810 	.word	0x20000810
 800bd10:	200007e8 	.word	0x200007e8
        refr = r * ( 0.28 * 1010 / (10 + 273.0)); // Assuming pressure of 1010 mb and T = 10 C
 800bd14:	4bba      	ldr	r3, [pc, #744]	; (800c000 <DoCalc+0x17b0>)
 800bd16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd1a:	a3b3      	add	r3, pc, #716	; (adr r3, 800bfe8 <DoCalc+0x1798>)
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	f7f4 fc74 	bl	800060c <__aeabi_dmul>
 800bd24:	4603      	mov	r3, r0
 800bd26:	460c      	mov	r4, r1
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	4bb5      	ldr	r3, [pc, #724]	; (800c004 <DoCalc+0x17b4>)
 800bd2e:	e9c3 1200 	strd	r1, r2, [r3]
        transit_alt = fmin(transit_alt + refr, M_PI_2); // This is not accurate, but acceptable
 800bd32:	4bb5      	ldr	r3, [pc, #724]	; (800c008 <DoCalc+0x17b8>)
 800bd34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd38:	4bb2      	ldr	r3, [pc, #712]	; (800c004 <DoCalc+0x17b4>)
 800bd3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	4623      	mov	r3, r4
 800bd42:	f7f4 faad 	bl	80002a0 <__adddf3>
 800bd46:	4603      	mov	r3, r0
 800bd48:	460c      	mov	r4, r1
 800bd4a:	ec44 3b17 	vmov	d7, r3, r4
 800bd4e:	ed9f 1ba8 	vldr	d1, [pc, #672]	; 800bff0 <DoCalc+0x17a0>
 800bd52:	eeb0 0a47 	vmov.f32	s0, s14
 800bd56:	eef0 0a67 	vmov.f32	s1, s15
 800bd5a:	f00d fa41 	bl	80191e0 <fmin>
 800bd5e:	eeb0 7a40 	vmov.f32	s14, s0
 800bd62:	eef0 7a60 	vmov.f32	s15, s1
 800bd66:	4ba8      	ldr	r3, [pc, #672]	; (800c008 <DoCalc+0x17b8>)
 800bd68:	ed83 7b00 	vstr	d7, [r3]
    }

    // Obtain the current event in time
    transit_time = transit_time1;
 800bd6c:	4ba7      	ldr	r3, [pc, #668]	; (800c00c <DoCalc+0x17bc>)
 800bd6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd72:	4aa7      	ldr	r2, [pc, #668]	; (800c010 <DoCalc+0x17c0>)
 800bd74:	e9c2 3400 	strd	r3, r4, [r2]
    jdToday = floor(calc->aux.jd_ut - 0.5) + 0.5;
 800bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7a:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800bd7e:	f04f 0200 	mov.w	r2, #0
 800bd82:	4ba4      	ldr	r3, [pc, #656]	; (800c014 <DoCalc+0x17c4>)
 800bd84:	f7f4 fa8a 	bl	800029c <__aeabi_dsub>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	ec44 3b17 	vmov	d7, r3, r4
 800bd90:	eeb0 0a47 	vmov.f32	s0, s14
 800bd94:	eef0 0a67 	vmov.f32	s1, s15
 800bd98:	f00d f99e 	bl	80190d8 <floor>
 800bd9c:	ec51 0b10 	vmov	r0, r1, d0
 800bda0:	f04f 0200 	mov.w	r2, #0
 800bda4:	4b9b      	ldr	r3, [pc, #620]	; (800c014 <DoCalc+0x17c4>)
 800bda6:	f7f4 fa7b 	bl	80002a0 <__adddf3>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	460c      	mov	r4, r1
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	4b99      	ldr	r3, [pc, #612]	; (800c018 <DoCalc+0x17c8>)
 800bdb4:	e9c3 1200 	strd	r1, r2, [r3]
    transitToday2 = floor(calc->aux.jd_ut + transit_time2 - 0.5) + 0.5;
 800bdb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdba:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800bdbe:	4b97      	ldr	r3, [pc, #604]	; (800c01c <DoCalc+0x17cc>)
 800bdc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	4623      	mov	r3, r4
 800bdc8:	f7f4 fa6a 	bl	80002a0 <__adddf3>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	460c      	mov	r4, r1
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	f04f 0200 	mov.w	r2, #0
 800bdd8:	4b8e      	ldr	r3, [pc, #568]	; (800c014 <DoCalc+0x17c4>)
 800bdda:	f7f4 fa5f 	bl	800029c <__aeabi_dsub>
 800bdde:	4603      	mov	r3, r0
 800bde0:	460c      	mov	r4, r1
 800bde2:	ec44 3b17 	vmov	d7, r3, r4
 800bde6:	eeb0 0a47 	vmov.f32	s0, s14
 800bdea:	eef0 0a67 	vmov.f32	s1, s15
 800bdee:	f00d f973 	bl	80190d8 <floor>
 800bdf2:	ec51 0b10 	vmov	r0, r1, d0
 800bdf6:	f04f 0200 	mov.w	r2, #0
 800bdfa:	4b86      	ldr	r3, [pc, #536]	; (800c014 <DoCalc+0x17c4>)
 800bdfc:	f7f4 fa50 	bl	80002a0 <__adddf3>
 800be00:	4603      	mov	r3, r0
 800be02:	460c      	mov	r4, r1
 800be04:	4619      	mov	r1, r3
 800be06:	4622      	mov	r2, r4
 800be08:	4b85      	ldr	r3, [pc, #532]	; (800c020 <DoCalc+0x17d0>)
 800be0a:	e9c3 1200 	strd	r1, r2, [r3]
    // Obtain the transit time. Preference should be given to the closest event
    // in time to the current calculation time
    if (jdToday == transitToday2 && fabs(transit_time2) < fabs(transit_time1)) transit_time = transit_time2;
 800be0e:	4b82      	ldr	r3, [pc, #520]	; (800c018 <DoCalc+0x17c8>)
 800be10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be14:	4b82      	ldr	r3, [pc, #520]	; (800c020 <DoCalc+0x17d0>)
 800be16:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be1a:	461a      	mov	r2, r3
 800be1c:	4623      	mov	r3, r4
 800be1e:	f7f4 fe5d 	bl	8000adc <__aeabi_dcmpeq>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01c      	beq.n	800be62 <DoCalc+0x1612>
 800be28:	4b7c      	ldr	r3, [pc, #496]	; (800c01c <DoCalc+0x17cc>)
 800be2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be2e:	633b      	str	r3, [r7, #48]	; 0x30
 800be30:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800be34:	637b      	str	r3, [r7, #52]	; 0x34
 800be36:	4b75      	ldr	r3, [pc, #468]	; (800c00c <DoCalc+0x17bc>)
 800be38:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be3e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800be42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800be48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800be4c:	f7f4 fe50 	bl	8000af0 <__aeabi_dcmplt>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d005      	beq.n	800be62 <DoCalc+0x1612>
 800be56:	4b71      	ldr	r3, [pc, #452]	; (800c01c <DoCalc+0x17cc>)
 800be58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be5c:	4a6c      	ldr	r2, [pc, #432]	; (800c010 <DoCalc+0x17c0>)
 800be5e:	e9c2 3400 	strd	r3, r4, [r2]
    transit = calc->aux.jd_ut + transit_time;
 800be62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be64:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800be68:	4b69      	ldr	r3, [pc, #420]	; (800c010 <DoCalc+0x17c0>)
 800be6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be6e:	461a      	mov	r2, r3
 800be70:	4623      	mov	r3, r4
 800be72:	f7f4 fa15 	bl	80002a0 <__adddf3>
 800be76:	4603      	mov	r3, r0
 800be78:	460c      	mov	r4, r1
 800be7a:	4a6a      	ldr	r2, [pc, #424]	; (800c024 <DoCalc+0x17d4>)
 800be7c:	e9c2 3400 	strd	r3, r4, [r2]

    // Make calculations for rise and set
    rise = -1;
 800be80:	4a69      	ldr	r2, [pc, #420]	; (800c028 <DoCalc+0x17d8>)
 800be82:	f04f 0300 	mov.w	r3, #0
 800be86:	4c69      	ldr	r4, [pc, #420]	; (800c02c <DoCalc+0x17dc>)
 800be88:	e9c2 3400 	strd	r3, r4, [r2]
    set = -1;
 800be8c:	4a68      	ldr	r2, [pc, #416]	; (800c030 <DoCalc+0x17e0>)
 800be8e:	f04f 0300 	mov.w	r3, #0
 800be92:	4c66      	ldr	r4, [pc, #408]	; (800c02c <DoCalc+0x17dc>)
 800be94:	e9c2 3400 	strd	r3, r4, [r2]

    if (fabs(tmp) <= 1.0) {
 800be98:	4b66      	ldr	r3, [pc, #408]	; (800c034 <DoCalc+0x17e4>)
 800be9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be9e:	623b      	str	r3, [r7, #32]
 800bea0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bea4:	627b      	str	r3, [r7, #36]	; 0x24
 800bea6:	f04f 0200 	mov.w	r2, #0
 800beaa:	4b63      	ldr	r3, [pc, #396]	; (800c038 <DoCalc+0x17e8>)
 800beac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800beb0:	f7f4 fe28 	bl	8000b04 <__aeabi_dcmple>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 81de 	beq.w	800c278 <DoCalc+0x1a28>
        ang_hor = fabs(acos(tmp));
 800bebc:	4b5d      	ldr	r3, [pc, #372]	; (800c034 <DoCalc+0x17e4>)
 800bebe:	ed93 7b00 	vldr	d7, [r3]
 800bec2:	eeb0 0a47 	vmov.f32	s0, s14
 800bec6:	eef0 0a67 	vmov.f32	s1, s15
 800beca:	f00d fa55 	bl	8019378 <acos>
 800bece:	eeb0 7a40 	vmov.f32	s14, s0
 800bed2:	eef0 7a60 	vmov.f32	s15, s1
 800bed6:	4b59      	ldr	r3, [pc, #356]	; (800c03c <DoCalc+0x17ec>)
 800bed8:	ed83 7b00 	vstr	d7, [r3]
        rise_time1 = celestialHoursToEarthTime * NormalizeRadians(ra - ang_hor - lst);
 800bedc:	4b58      	ldr	r3, [pc, #352]	; (800c040 <DoCalc+0x17f0>)
 800bede:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bee2:	4b56      	ldr	r3, [pc, #344]	; (800c03c <DoCalc+0x17ec>)
 800bee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bee8:	461a      	mov	r2, r3
 800beea:	4623      	mov	r3, r4
 800beec:	f7f4 f9d6 	bl	800029c <__aeabi_dsub>
 800bef0:	4603      	mov	r3, r0
 800bef2:	460c      	mov	r4, r1
 800bef4:	4618      	mov	r0, r3
 800bef6:	4621      	mov	r1, r4
 800bef8:	4b52      	ldr	r3, [pc, #328]	; (800c044 <DoCalc+0x17f4>)
 800befa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800befe:	461a      	mov	r2, r3
 800bf00:	4623      	mov	r3, r4
 800bf02:	f7f4 f9cb 	bl	800029c <__aeabi_dsub>
 800bf06:	4603      	mov	r3, r0
 800bf08:	460c      	mov	r4, r1
 800bf0a:	ec44 3b17 	vmov	d7, r3, r4
 800bf0e:	eeb0 0a47 	vmov.f32	s0, s14
 800bf12:	eef0 0a67 	vmov.f32	s1, s15
 800bf16:	f7fb fb4b 	bl	80075b0 <NormalizeRadians>
 800bf1a:	ec51 0b10 	vmov	r0, r1, d0
 800bf1e:	4b4a      	ldr	r3, [pc, #296]	; (800c048 <DoCalc+0x17f8>)
 800bf20:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf24:	461a      	mov	r2, r3
 800bf26:	4623      	mov	r3, r4
 800bf28:	f7f4 fb70 	bl	800060c <__aeabi_dmul>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	460c      	mov	r4, r1
 800bf30:	4a46      	ldr	r2, [pc, #280]	; (800c04c <DoCalc+0x17fc>)
 800bf32:	e9c2 3400 	strd	r3, r4, [r2]
        set_time1 = celestialHoursToEarthTime * NormalizeRadians(ra + ang_hor - lst);
 800bf36:	4b42      	ldr	r3, [pc, #264]	; (800c040 <DoCalc+0x17f0>)
 800bf38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf3c:	4b3f      	ldr	r3, [pc, #252]	; (800c03c <DoCalc+0x17ec>)
 800bf3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf42:	461a      	mov	r2, r3
 800bf44:	4623      	mov	r3, r4
 800bf46:	f7f4 f9ab 	bl	80002a0 <__adddf3>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	4618      	mov	r0, r3
 800bf50:	4621      	mov	r1, r4
 800bf52:	4b3c      	ldr	r3, [pc, #240]	; (800c044 <DoCalc+0x17f4>)
 800bf54:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	f7f4 f99e 	bl	800029c <__aeabi_dsub>
 800bf60:	4603      	mov	r3, r0
 800bf62:	460c      	mov	r4, r1
 800bf64:	ec44 3b17 	vmov	d7, r3, r4
 800bf68:	eeb0 0a47 	vmov.f32	s0, s14
 800bf6c:	eef0 0a67 	vmov.f32	s1, s15
 800bf70:	f7fb fb1e 	bl	80075b0 <NormalizeRadians>
 800bf74:	ec51 0b10 	vmov	r0, r1, d0
 800bf78:	4b33      	ldr	r3, [pc, #204]	; (800c048 <DoCalc+0x17f8>)
 800bf7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	4623      	mov	r3, r4
 800bf82:	f7f4 fb43 	bl	800060c <__aeabi_dmul>
 800bf86:	4603      	mov	r3, r0
 800bf88:	460c      	mov	r4, r1
 800bf8a:	4a31      	ldr	r2, [pc, #196]	; (800c050 <DoCalc+0x1800>)
 800bf8c:	e9c2 3400 	strd	r3, r4, [r2]
        rise_time2 = celestialHoursToEarthTime * (NormalizeRadians(ra - ang_hor - lst) - TWO_PI);
 800bf90:	4b2b      	ldr	r3, [pc, #172]	; (800c040 <DoCalc+0x17f0>)
 800bf92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf96:	4b29      	ldr	r3, [pc, #164]	; (800c03c <DoCalc+0x17ec>)
 800bf98:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	4623      	mov	r3, r4
 800bfa0:	f7f4 f97c 	bl	800029c <__aeabi_dsub>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	4621      	mov	r1, r4
 800bfac:	4b25      	ldr	r3, [pc, #148]	; (800c044 <DoCalc+0x17f4>)
 800bfae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	4623      	mov	r3, r4
 800bfb6:	f7f4 f971 	bl	800029c <__aeabi_dsub>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	ec44 3b17 	vmov	d7, r3, r4
 800bfc2:	eeb0 0a47 	vmov.f32	s0, s14
 800bfc6:	eef0 0a67 	vmov.f32	s1, s15
 800bfca:	f7fb faf1 	bl	80075b0 <NormalizeRadians>
 800bfce:	ec51 0b10 	vmov	r0, r1, d0
 800bfd2:	a309      	add	r3, pc, #36	; (adr r3, 800bff8 <DoCalc+0x17a8>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 f960 	bl	800029c <__aeabi_dsub>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	e036      	b.n	800c054 <DoCalc+0x1804>
 800bfe6:	bf00      	nop
 800bfe8:	e9ed8bda 	.word	0xe9ed8bda
 800bfec:	3feffa35 	.word	0x3feffa35
 800bff0:	54442d18 	.word	0x54442d18
 800bff4:	3ff921fb 	.word	0x3ff921fb
 800bff8:	54442d18 	.word	0x54442d18
 800bffc:	401921fb 	.word	0x401921fb
 800c000:	200007e8 	.word	0x200007e8
 800c004:	200007f0 	.word	0x200007f0
 800c008:	20000810 	.word	0x20000810
 800c00c:	20000800 	.word	0x20000800
 800c010:	20000818 	.word	0x20000818
 800c014:	3fe00000 	.word	0x3fe00000
 800c018:	20000820 	.word	0x20000820
 800c01c:	20000808 	.word	0x20000808
 800c020:	20000828 	.word	0x20000828
 800c024:	20000830 	.word	0x20000830
 800c028:	20000838 	.word	0x20000838
 800c02c:	bff00000 	.word	0xbff00000
 800c030:	20000840 	.word	0x20000840
 800c034:	200006d0 	.word	0x200006d0
 800c038:	3ff00000 	.word	0x3ff00000
 800c03c:	20000848 	.word	0x20000848
 800c040:	20000780 	.word	0x20000780
 800c044:	20000740 	.word	0x20000740
 800c048:	200007f8 	.word	0x200007f8
 800c04c:	20000850 	.word	0x20000850
 800c050:	20000858 	.word	0x20000858
 800c054:	4ba6      	ldr	r3, [pc, #664]	; (800c2f0 <DoCalc+0x1aa0>)
 800c056:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c05a:	461a      	mov	r2, r3
 800c05c:	4623      	mov	r3, r4
 800c05e:	f7f4 fad5 	bl	800060c <__aeabi_dmul>
 800c062:	4603      	mov	r3, r0
 800c064:	460c      	mov	r4, r1
 800c066:	4aa3      	ldr	r2, [pc, #652]	; (800c2f4 <DoCalc+0x1aa4>)
 800c068:	e9c2 3400 	strd	r3, r4, [r2]
        set_time2 = celestialHoursToEarthTime * (NormalizeRadians(ra + ang_hor - lst) - TWO_PI);
 800c06c:	4ba2      	ldr	r3, [pc, #648]	; (800c2f8 <DoCalc+0x1aa8>)
 800c06e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c072:	4ba2      	ldr	r3, [pc, #648]	; (800c2fc <DoCalc+0x1aac>)
 800c074:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c078:	461a      	mov	r2, r3
 800c07a:	4623      	mov	r3, r4
 800c07c:	f7f4 f910 	bl	80002a0 <__adddf3>
 800c080:	4603      	mov	r3, r0
 800c082:	460c      	mov	r4, r1
 800c084:	4618      	mov	r0, r3
 800c086:	4621      	mov	r1, r4
 800c088:	4b9d      	ldr	r3, [pc, #628]	; (800c300 <DoCalc+0x1ab0>)
 800c08a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c08e:	461a      	mov	r2, r3
 800c090:	4623      	mov	r3, r4
 800c092:	f7f4 f903 	bl	800029c <__aeabi_dsub>
 800c096:	4603      	mov	r3, r0
 800c098:	460c      	mov	r4, r1
 800c09a:	ec44 3b17 	vmov	d7, r3, r4
 800c09e:	eeb0 0a47 	vmov.f32	s0, s14
 800c0a2:	eef0 0a67 	vmov.f32	s1, s15
 800c0a6:	f7fb fa83 	bl	80075b0 <NormalizeRadians>
 800c0aa:	ec51 0b10 	vmov	r0, r1, d0
 800c0ae:	a38e      	add	r3, pc, #568	; (adr r3, 800c2e8 <DoCalc+0x1a98>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	f7f4 f8f2 	bl	800029c <__aeabi_dsub>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	4618      	mov	r0, r3
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4b8b      	ldr	r3, [pc, #556]	; (800c2f0 <DoCalc+0x1aa0>)
 800c0c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	4623      	mov	r3, r4
 800c0ca:	f7f4 fa9f 	bl	800060c <__aeabi_dmul>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	4a8c      	ldr	r2, [pc, #560]	; (800c304 <DoCalc+0x1ab4>)
 800c0d4:	e9c2 3400 	strd	r3, r4, [r2]

        // Obtain the current events in time. Preference should be given to the closest event
        // in time to the current calculation time (so that iteration in other method will converge)
        rise_time = rise_time1;
 800c0d8:	4b8b      	ldr	r3, [pc, #556]	; (800c308 <DoCalc+0x1ab8>)
 800c0da:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0de:	4a8b      	ldr	r2, [pc, #556]	; (800c30c <DoCalc+0x1abc>)
 800c0e0:	e9c2 3400 	strd	r3, r4, [r2]
        riseToday2 = floor(calc->aux.jd_ut + rise_time2 - 0.5) + 0.5;
 800c0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e6:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800c0ea:	4b82      	ldr	r3, [pc, #520]	; (800c2f4 <DoCalc+0x1aa4>)
 800c0ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	4623      	mov	r3, r4
 800c0f4:	f7f4 f8d4 	bl	80002a0 <__adddf3>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	4621      	mov	r1, r4
 800c100:	f04f 0200 	mov.w	r2, #0
 800c104:	4b82      	ldr	r3, [pc, #520]	; (800c310 <DoCalc+0x1ac0>)
 800c106:	f7f4 f8c9 	bl	800029c <__aeabi_dsub>
 800c10a:	4603      	mov	r3, r0
 800c10c:	460c      	mov	r4, r1
 800c10e:	ec44 3b17 	vmov	d7, r3, r4
 800c112:	eeb0 0a47 	vmov.f32	s0, s14
 800c116:	eef0 0a67 	vmov.f32	s1, s15
 800c11a:	f00c ffdd 	bl	80190d8 <floor>
 800c11e:	ec51 0b10 	vmov	r0, r1, d0
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	4b7a      	ldr	r3, [pc, #488]	; (800c310 <DoCalc+0x1ac0>)
 800c128:	f7f4 f8ba 	bl	80002a0 <__adddf3>
 800c12c:	4603      	mov	r3, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	4a78      	ldr	r2, [pc, #480]	; (800c314 <DoCalc+0x1ac4>)
 800c132:	e9c2 3400 	strd	r3, r4, [r2]

        if (jdToday == riseToday2 && fabs(rise_time2) < fabs(rise_time1))
 800c136:	4b78      	ldr	r3, [pc, #480]	; (800c318 <DoCalc+0x1ac8>)
 800c138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c13c:	4b75      	ldr	r3, [pc, #468]	; (800c314 <DoCalc+0x1ac4>)
 800c13e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c142:	461a      	mov	r2, r3
 800c144:	4623      	mov	r3, r4
 800c146:	f7f4 fcc9 	bl	8000adc <__aeabi_dcmpeq>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01c      	beq.n	800c18a <DoCalc+0x193a>
 800c150:	4b68      	ldr	r3, [pc, #416]	; (800c2f4 <DoCalc+0x1aa4>)
 800c152:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c156:	61bb      	str	r3, [r7, #24]
 800c158:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c15c:	61fb      	str	r3, [r7, #28]
 800c15e:	4b6a      	ldr	r3, [pc, #424]	; (800c308 <DoCalc+0x1ab8>)
 800c160:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c164:	613b      	str	r3, [r7, #16]
 800c166:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c16a:	617b      	str	r3, [r7, #20]
 800c16c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c170:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c174:	f7f4 fcbc 	bl	8000af0 <__aeabi_dcmplt>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d005      	beq.n	800c18a <DoCalc+0x193a>
            rise_time = rise_time2;
 800c17e:	4b5d      	ldr	r3, [pc, #372]	; (800c2f4 <DoCalc+0x1aa4>)
 800c180:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c184:	4a61      	ldr	r2, [pc, #388]	; (800c30c <DoCalc+0x1abc>)
 800c186:	e9c2 3400 	strd	r3, r4, [r2]

        set_time = set_time1;
 800c18a:	4b64      	ldr	r3, [pc, #400]	; (800c31c <DoCalc+0x1acc>)
 800c18c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c190:	4a63      	ldr	r2, [pc, #396]	; (800c320 <DoCalc+0x1ad0>)
 800c192:	e9c2 3400 	strd	r3, r4, [r2]
        setToday2 = floor(calc->aux.jd_ut + set_time2 - 0.5) + 0.5;
 800c196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c198:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800c19c:	4b59      	ldr	r3, [pc, #356]	; (800c304 <DoCalc+0x1ab4>)
 800c19e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	4623      	mov	r3, r4
 800c1a6:	f7f4 f87b 	bl	80002a0 <__adddf3>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	460c      	mov	r4, r1
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	4b56      	ldr	r3, [pc, #344]	; (800c310 <DoCalc+0x1ac0>)
 800c1b8:	f7f4 f870 	bl	800029c <__aeabi_dsub>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	460c      	mov	r4, r1
 800c1c0:	ec44 3b17 	vmov	d7, r3, r4
 800c1c4:	eeb0 0a47 	vmov.f32	s0, s14
 800c1c8:	eef0 0a67 	vmov.f32	s1, s15
 800c1cc:	f00c ff84 	bl	80190d8 <floor>
 800c1d0:	ec51 0b10 	vmov	r0, r1, d0
 800c1d4:	f04f 0200 	mov.w	r2, #0
 800c1d8:	4b4d      	ldr	r3, [pc, #308]	; (800c310 <DoCalc+0x1ac0>)
 800c1da:	f7f4 f861 	bl	80002a0 <__adddf3>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	460c      	mov	r4, r1
 800c1e2:	4a50      	ldr	r2, [pc, #320]	; (800c324 <DoCalc+0x1ad4>)
 800c1e4:	e9c2 3400 	strd	r3, r4, [r2]

        if (jdToday == setToday2 && fabs(set_time2) < fabs(set_time1))
 800c1e8:	4b4b      	ldr	r3, [pc, #300]	; (800c318 <DoCalc+0x1ac8>)
 800c1ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1ee:	4b4d      	ldr	r3, [pc, #308]	; (800c324 <DoCalc+0x1ad4>)
 800c1f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	4623      	mov	r3, r4
 800c1f8:	f7f4 fc70 	bl	8000adc <__aeabi_dcmpeq>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d01c      	beq.n	800c23c <DoCalc+0x19ec>
 800c202:	4b40      	ldr	r3, [pc, #256]	; (800c304 <DoCalc+0x1ab4>)
 800c204:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c208:	60bb      	str	r3, [r7, #8]
 800c20a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	4b42      	ldr	r3, [pc, #264]	; (800c31c <DoCalc+0x1acc>)
 800c212:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c21c:	607b      	str	r3, [r7, #4]
 800c21e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c226:	f7f4 fc63 	bl	8000af0 <__aeabi_dcmplt>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d005      	beq.n	800c23c <DoCalc+0x19ec>
            set_time = set_time2;
 800c230:	4b34      	ldr	r3, [pc, #208]	; (800c304 <DoCalc+0x1ab4>)
 800c232:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c236:	4a3a      	ldr	r2, [pc, #232]	; (800c320 <DoCalc+0x1ad0>)
 800c238:	e9c2 3400 	strd	r3, r4, [r2]

        rise = calc->aux.jd_ut + rise_time;
 800c23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c23e:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800c242:	4b32      	ldr	r3, [pc, #200]	; (800c30c <DoCalc+0x1abc>)
 800c244:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c248:	461a      	mov	r2, r3
 800c24a:	4623      	mov	r3, r4
 800c24c:	f7f4 f828 	bl	80002a0 <__adddf3>
 800c250:	4603      	mov	r3, r0
 800c252:	460c      	mov	r4, r1
 800c254:	4a34      	ldr	r2, [pc, #208]	; (800c328 <DoCalc+0x1ad8>)
 800c256:	e9c2 3400 	strd	r3, r4, [r2]
        set = calc->aux.jd_ut + set_time;
 800c25a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c25c:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800c260:	4b2f      	ldr	r3, [pc, #188]	; (800c320 <DoCalc+0x1ad0>)
 800c262:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c266:	461a      	mov	r2, r3
 800c268:	4623      	mov	r3, r4
 800c26a:	f7f4 f819 	bl	80002a0 <__adddf3>
 800c26e:	4603      	mov	r3, r0
 800c270:	460c      	mov	r4, r1
 800c272:	4a2e      	ldr	r2, [pc, #184]	; (800c32c <DoCalc+0x1adc>)
 800c274:	e9c2 3400 	strd	r3, r4, [r2]
    }

    params[0] = azi;
 800c278:	4b2d      	ldr	r3, [pc, #180]	; (800c330 <DoCalc+0x1ae0>)
 800c27a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c27e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c280:	e9c2 3400 	strd	r3, r4, [r2]
    params[1] = alt;
 800c284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c286:	f103 0208 	add.w	r2, r3, #8
 800c28a:	4b2a      	ldr	r3, [pc, #168]	; (800c334 <DoCalc+0x1ae4>)
 800c28c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c290:	e9c2 3400 	strd	r3, r4, [r2]
    params[2] = rise;
 800c294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c296:	f103 0210 	add.w	r2, r3, #16
 800c29a:	4b23      	ldr	r3, [pc, #140]	; (800c328 <DoCalc+0x1ad8>)
 800c29c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2a0:	e9c2 3400 	strd	r3, r4, [r2]
    params[3] = set;
 800c2a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2a6:	f103 0218 	add.w	r2, r3, #24
 800c2aa:	4b20      	ldr	r3, [pc, #128]	; (800c32c <DoCalc+0x1adc>)
 800c2ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2b0:	e9c2 3400 	strd	r3, r4, [r2]
    params[4] = transit;
 800c2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b6:	f103 0220 	add.w	r2, r3, #32
 800c2ba:	4b1f      	ldr	r3, [pc, #124]	; (800c338 <DoCalc+0x1ae8>)
 800c2bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2c0:	e9c2 3400 	strd	r3, r4, [r2]
    params[5] = transit_alt;
 800c2c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c2ca:	4b1c      	ldr	r3, [pc, #112]	; (800c33c <DoCalc+0x1aec>)
 800c2cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2d0:	e9c2 3400 	strd	r3, r4, [r2]
    params[6] = ra;
 800c2d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2da:	4b07      	ldr	r3, [pc, #28]	; (800c2f8 <DoCalc+0x1aa8>)
 800c2dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2e0:	e9c2 3400 	strd	r3, r4, [r2]
    params[7] = dec;
 800c2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2e6:	e02b      	b.n	800c340 <DoCalc+0x1af0>
 800c2e8:	54442d18 	.word	0x54442d18
 800c2ec:	401921fb 	.word	0x401921fb
 800c2f0:	200007f8 	.word	0x200007f8
 800c2f4:	20000860 	.word	0x20000860
 800c2f8:	20000780 	.word	0x20000780
 800c2fc:	20000848 	.word	0x20000848
 800c300:	20000740 	.word	0x20000740
 800c304:	20000868 	.word	0x20000868
 800c308:	20000850 	.word	0x20000850
 800c30c:	20000870 	.word	0x20000870
 800c310:	3fe00000 	.word	0x3fe00000
 800c314:	20000878 	.word	0x20000878
 800c318:	20000820 	.word	0x20000820
 800c31c:	20000858 	.word	0x20000858
 800c320:	20000880 	.word	0x20000880
 800c324:	20000888 	.word	0x20000888
 800c328:	20000838 	.word	0x20000838
 800c32c:	20000840 	.word	0x20000840
 800c330:	200007e0 	.word	0x200007e0
 800c334:	200007c8 	.word	0x200007c8
 800c338:	20000830 	.word	0x20000830
 800c33c:	20000810 	.word	0x20000810
 800c340:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c344:	4b08      	ldr	r3, [pc, #32]	; (800c368 <DoCalc+0x1b18>)
 800c346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c34a:	e9c2 3400 	strd	r3, r4, [r2]
    params[8] = dist;
 800c34e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c350:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800c354:	4b05      	ldr	r3, [pc, #20]	; (800c36c <DoCalc+0x1b1c>)
 800c356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c35a:	e9c2 3400 	strd	r3, r4, [r2]
}
 800c35e:	bf00      	nop
 800c360:	3754      	adds	r7, #84	; 0x54
 800c362:	46bd      	mov	sp, r7
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	20000788 	.word	0x20000788
 800c36c:	20000790 	.word	0x20000790

0800c370 <ObtainAccurateRiseSetTransit>:

double ObtainAccurateRiseSetTransit(snm_Calculator *calc, double riseSetJD, int index, int niter, int sun)
{
 800c370:	b5b0      	push	{r4, r5, r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af00      	add	r7, sp, #0
 800c376:	6178      	str	r0, [r7, #20]
 800c378:	ed87 0b02 	vstr	d0, [r7, #8]
 800c37c:	6139      	str	r1, [r7, #16]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
    STATIC_OPT double step = -1;
    STATIC_OPT double out[9];
    STATIC_OPT double sun_params[4];
    STATIC_OPT double moon_params[4];

    step = -1;
 800c382:	493f      	ldr	r1, [pc, #252]	; (800c480 <ObtainAccurateRiseSetTransit+0x110>)
 800c384:	f04f 0200 	mov.w	r2, #0
 800c388:	4b3e      	ldr	r3, [pc, #248]	; (800c484 <ObtainAccurateRiseSetTransit+0x114>)
 800c38a:	e9c1 2300 	strd	r2, r3, [r1]

    for (int i = 0; i < niter; i++) {
 800c38e:	2300      	movs	r3, #0
 800c390:	61fb      	str	r3, [r7, #28]
 800c392:	e044      	b.n	800c41e <ObtainAccurateRiseSetTransit+0xae>
        if (riseSetJD == -1)
 800c394:	f04f 0200 	mov.w	r2, #0
 800c398:	4b3a      	ldr	r3, [pc, #232]	; (800c484 <ObtainAccurateRiseSetTransit+0x114>)
 800c39a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c39e:	f7f4 fb9d 	bl	8000adc <__aeabi_dcmpeq>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <ObtainAccurateRiseSetTransit+0x3e>
            return riseSetJD; // -1 means no rise/set from that location
 800c3a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c3ac:	e059      	b.n	800c462 <ObtainAccurateRiseSetTransit+0xf2>

        SetUTDate(calc, riseSetJD);
 800c3ae:	ed97 0b02 	vldr	d0, [r7, #8]
 800c3b2:	6978      	ldr	r0, [r7, #20]
 800c3b4:	f7fb f858 	bl	8007468 <SetUTDate>
        

        if (sun) {
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d009      	beq.n	800c3d2 <ObtainAccurateRiseSetTransit+0x62>
            GetSun(calc, sun_params);
 800c3be:	4932      	ldr	r1, [pc, #200]	; (800c488 <ObtainAccurateRiseSetTransit+0x118>)
 800c3c0:	6978      	ldr	r0, [r7, #20]
 800c3c2:	f7fb f9a5 	bl	8007710 <GetSun>
            DoCalc(calc, sun_params, out);
 800c3c6:	4a31      	ldr	r2, [pc, #196]	; (800c48c <ObtainAccurateRiseSetTransit+0x11c>)
 800c3c8:	492f      	ldr	r1, [pc, #188]	; (800c488 <ObtainAccurateRiseSetTransit+0x118>)
 800c3ca:	6978      	ldr	r0, [r7, #20]
 800c3cc:	f7fe fa40 	bl	800a850 <DoCalc>
 800c3d0:	e008      	b.n	800c3e4 <ObtainAccurateRiseSetTransit+0x74>
        } else {
            GetMoon(calc, moon_params);
 800c3d2:	492f      	ldr	r1, [pc, #188]	; (800c490 <ObtainAccurateRiseSetTransit+0x120>)
 800c3d4:	6978      	ldr	r0, [r7, #20]
 800c3d6:	f7fb fd33 	bl	8007e40 <GetMoon>
            DoCalc(calc, moon_params, out);
 800c3da:	4a2c      	ldr	r2, [pc, #176]	; (800c48c <ObtainAccurateRiseSetTransit+0x11c>)
 800c3dc:	492c      	ldr	r1, [pc, #176]	; (800c490 <ObtainAccurateRiseSetTransit+0x120>)
 800c3de:	6978      	ldr	r0, [r7, #20]
 800c3e0:	f7fe fa36 	bl	800a850 <DoCalc>
        }

        step = fabs(riseSetJD - out[index]);
 800c3e4:	4a29      	ldr	r2, [pc, #164]	; (800c48c <ObtainAccurateRiseSetTransit+0x11c>)
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	4413      	add	r3, r2
 800c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3f4:	f7f3 ff52 	bl	800029c <__aeabi_dsub>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800c402:	4b1f      	ldr	r3, [pc, #124]	; (800c480 <ObtainAccurateRiseSetTransit+0x110>)
 800c404:	e9c3 4500 	strd	r4, r5, [r3]
        riseSetJD = out[index];
 800c408:	4a20      	ldr	r2, [pc, #128]	; (800c48c <ObtainAccurateRiseSetTransit+0x11c>)
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	00db      	lsls	r3, r3, #3
 800c40e:	4413      	add	r3, r2
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	e9c7 2302 	strd	r2, r3, [r7, #8]
    for (int i = 0; i < niter; i++) {
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	3301      	adds	r3, #1
 800c41c:	61fb      	str	r3, [r7, #28]
 800c41e:	69fa      	ldr	r2, [r7, #28]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	429a      	cmp	r2, r3
 800c424:	dbb6      	blt.n	800c394 <ObtainAccurateRiseSetTransit+0x24>
    }

    if (step > 1.0 / SECONDS_PER_DAY)
 800c426:	a414      	add	r4, pc, #80	; (adr r4, 800c478 <ObtainAccurateRiseSetTransit+0x108>)
 800c428:	e9d4 3400 	ldrd	r3, r4, [r4]
 800c42c:	461a      	mov	r2, r3
 800c42e:	4623      	mov	r3, r4
 800c430:	f04f 0000 	mov.w	r0, #0
 800c434:	4917      	ldr	r1, [pc, #92]	; (800c494 <ObtainAccurateRiseSetTransit+0x124>)
 800c436:	f7f4 fa13 	bl	8000860 <__aeabi_ddiv>
 800c43a:	4603      	mov	r3, r0
 800c43c:	460c      	mov	r4, r1
 800c43e:	4618      	mov	r0, r3
 800c440:	4621      	mov	r1, r4
 800c442:	4b0f      	ldr	r3, [pc, #60]	; (800c480 <ObtainAccurateRiseSetTransit+0x110>)
 800c444:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c448:	461a      	mov	r2, r3
 800c44a:	4623      	mov	r3, r4
 800c44c:	f7f4 fb50 	bl	8000af0 <__aeabi_dcmplt>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d003      	beq.n	800c45e <ObtainAccurateRiseSetTransit+0xee>
        return -1; // did not converge => without rise/set/transit in this date
 800c456:	f04f 0300 	mov.w	r3, #0
 800c45a:	4c0a      	ldr	r4, [pc, #40]	; (800c484 <ObtainAccurateRiseSetTransit+0x114>)
 800c45c:	e001      	b.n	800c462 <ObtainAccurateRiseSetTransit+0xf2>

    return riseSetJD;
 800c45e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c462:	ec44 3b17 	vmov	d7, r3, r4
}
 800c466:	eeb0 0a47 	vmov.f32	s0, s14
 800c46a:	eef0 0a67 	vmov.f32	s1, s15
 800c46e:	3720      	adds	r7, #32
 800c470:	46bd      	mov	sp, r7
 800c472:	bdb0      	pop	{r4, r5, r7, pc}
 800c474:	f3af 8000 	nop.w
 800c478:	00000000 	.word	0x00000000
 800c47c:	40f51800 	.word	0x40f51800
 800c480:	20000138 	.word	0x20000138
 800c484:	bff00000 	.word	0xbff00000
 800c488:	20000890 	.word	0x20000890
 800c48c:	200008b0 	.word	0x200008b0
 800c490:	200008f8 	.word	0x200008f8
 800c494:	3ff00000 	.word	0x3ff00000

0800c498 <snm_CalculatorCreate>:

//////////////////////////////////////////////////////////////////////////////////


void snm_CalculatorCreate(snm_Calculator *calc)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
    memset(calc, 0, sizeof(snm_Calculator));
 800c4a0:	22e8      	movs	r2, #232	; 0xe8
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f008 feca 	bl	801523e <memset>
}
 800c4aa:	bf00      	nop
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <snm_CalculatorSetTime>:

void snm_CalculatorSetTime(snm_Calculator *calc, int day, int month, int year)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b085      	sub	sp, #20
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	60f8      	str	r0, [r7, #12]
 800c4ba:	60b9      	str	r1, [r7, #8]
 800c4bc:	607a      	str	r2, [r7, #4]
 800c4be:	603b      	str	r3, [r7, #0]
    calc->day = day;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	601a      	str	r2, [r3, #0]
    calc->month = month;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	605a      	str	r2, [r3, #4]
    calc->year = year;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	609a      	str	r2, [r3, #8]
}
 800c4d2:	bf00      	nop
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <snm_CalculatorSetDate>:

void snm_CalculatorSetDate(snm_Calculator *calc, int hour, int minute, int second)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	60b9      	str	r1, [r7, #8]
 800c4e8:	607a      	str	r2, [r7, #4]
 800c4ea:	603b      	str	r3, [r7, #0]
    calc->hour = hour;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	60da      	str	r2, [r3, #12]
    calc->minute = minute;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	611a      	str	r2, [r3, #16]
    calc->second = second;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	615a      	str	r2, [r3, #20]
}
 800c4fe:	bf00      	nop
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <snm_CalculatorSetPoint>:

void snm_CalculatorSetPoint(snm_Calculator *calc, double latitude, double longitude)
{
 800c50a:	b490      	push	{r4, r7}
 800c50c:	b086      	sub	sp, #24
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6178      	str	r0, [r7, #20]
 800c512:	ed87 0b02 	vstr	d0, [r7, #8]
 800c516:	ed87 1b00 	vstr	d1, [r7]
    calc->latitude = latitude;
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c520:	e9c2 3406 	strd	r3, r4, [r2, #24]
    calc->longitude = longitude;
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c52a:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800c52e:	bf00      	nop
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bc90      	pop	{r4, r7}
 800c536:	4770      	bx	lr

0800c538 <snm_CalculatorSetTwilight>:

void snm_CalculatorSetTwilight(snm_Calculator *calc, 
                               TWILIGHT twilight)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	460b      	mov	r3, r1
 800c542:	70fb      	strb	r3, [r7, #3]
    calc->twilight = twilight;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	78fa      	ldrb	r2, [r7, #3]
 800c548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <snm_CalculatorCalc>:

void snm_CalculatorCalc(snm_Calculator *calc)
{
 800c558:	b590      	push	{r4, r7, lr}
 800c55a:	b0a7      	sub	sp, #156	; 0x9c
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
    double sun_params[4];
    double out[9];
    double jd, sa, sl, ma;
    int niter = 3; //Number of iterations to get accurate rise/set/transit times
 800c560:	2303      	movs	r3, #3
 800c562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    SetTimes(calc);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7fa ffc6 	bl	80074f8 <SetTimes>

    jd = calc->aux.jd_ut;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	e9d3 3430 	ldrd	r3, r4, [r3, #192]	; 0xc0
 800c572:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88

    // First the Sun
    GetSun(calc, sun_params);
 800c576:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7fb f8c7 	bl	8007710 <GetSun>
    DoCalc(calc, sun_params, out);
 800c582:	f107 0208 	add.w	r2, r7, #8
 800c586:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7fe f95f 	bl	800a850 <DoCalc>

    calc->sun_az = out[0];
 800c592:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    calc->sun_elev = out[1];
 800c59c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
    calc->sun_rise = out[2];
 800c5a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    calc->sun_set = out[3];
 800c5b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
    calc->sun_transit = out[4];
 800c5ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    calc->sun_transit_elev = out[5];
 800c5c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    calc->sun_dist = out[8];
 800c5ce:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

    sa = calc->aux.sanomaly;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800c5de:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    sl = calc->aux.slongitude;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 800c5e8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

    calc->sun_rise = ObtainAccurateRiseSetTransit(calc, calc->sun_rise, 2, niter, TRUE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5f8:	2102      	movs	r1, #2
 800c5fa:	eeb0 0a47 	vmov.f32	s0, s14
 800c5fe:	eef0 0a67 	vmov.f32	s1, s15
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff feb4 	bl	800c370 <ObtainAccurateRiseSetTransit>
 800c608:	eeb0 7a40 	vmov.f32	s14, s0
 800c60c:	eef0 7a60 	vmov.f32	s15, s1
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    calc->sun_set = ObtainAccurateRiseSetTransit(calc, calc->sun_set, 3, niter, TRUE);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800c61c:	2301      	movs	r3, #1
 800c61e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c622:	2103      	movs	r1, #3
 800c624:	eeb0 0a47 	vmov.f32	s0, s14
 800c628:	eef0 0a67 	vmov.f32	s1, s15
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff fe9f 	bl	800c370 <ObtainAccurateRiseSetTransit>
 800c632:	eeb0 7a40 	vmov.f32	s14, s0
 800c636:	eef0 7a60 	vmov.f32	s15, s1
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
    calc->sun_transit = ObtainAccurateRiseSetTransit(calc, calc->sun_transit, 4, niter, TRUE);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800c646:	2301      	movs	r3, #1
 800c648:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c64c:	2104      	movs	r1, #4
 800c64e:	eeb0 0a47 	vmov.f32	s0, s14
 800c652:	eef0 0a67 	vmov.f32	s1, s15
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7ff fe8a 	bl	800c370 <ObtainAccurateRiseSetTransit>
 800c65c:	eeb0 7a40 	vmov.f32	s14, s0
 800c660:	eef0 7a60 	vmov.f32	s15, s1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68

    if (calc->sun_transit == -1) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800c670:	f04f 0200 	mov.w	r2, #0
 800c674:	4b7c      	ldr	r3, [pc, #496]	; (800c868 <snm_CalculatorCalc+0x310>)
 800c676:	f7f4 fa31 	bl	8000adc <__aeabi_dcmpeq>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d007      	beq.n	800c690 <snm_CalculatorCalc+0x138>
        calc->sun_transit_elev = 0;
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	f04f 0300 	mov.w	r3, #0
 800c686:	f04f 0400 	mov.w	r4, #0
 800c68a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
 800c68e:	e01c      	b.n	800c6ca <snm_CalculatorCalc+0x172>
    } else {
        // Update Sun's maximum elevation
        SetUTDate(calc, calc->sun_transit);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800c696:	eeb0 0a47 	vmov.f32	s0, s14
 800c69a:	eef0 0a67 	vmov.f32	s1, s15
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7fa fee2 	bl	8007468 <SetUTDate>
        GetSun(calc, sun_params);
 800c6a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7fb f830 	bl	8007710 <GetSun>
        DoCalc(calc, sun_params, out);
 800c6b0:	f107 0208 	add.w	r2, r7, #8
 800c6b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7fe f8c8 	bl	800a850 <DoCalc>
        calc->sun_transit_elev = out[5];
 800c6c0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    }

    // Now Moon
    SetUTDate(calc, jd);
 800c6ca:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7fa feca 	bl	8007468 <SetUTDate>
    calc->aux.sanomaly = sa;
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800c6da:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
    calc->aux.slongitude = sl;
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c6e4:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
    GetMoon(calc, sun_params);
 800c6e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7fb fba6 	bl	8007e40 <GetMoon>
    DoCalc(calc, sun_params, out);
 800c6f4:	f107 0208 	add.w	r2, r7, #8
 800c6f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7fe f8a6 	bl	800a850 <DoCalc>

    calc->moon_az = out[0];
 800c704:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    calc->moon_elev = out[1];
 800c70e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
    calc->moon_rise = out[2];
 800c718:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
    calc->moon_set = out[3];
 800c722:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
    calc->moon_transit = out[4];
 800c72c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
    calc->moon_transit_elev = out[5];
 800c736:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
    calc->moon_dist = out[8];
 800c740:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
    ma = calc->moon_age;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 800c750:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

    niter = 5; // Number of iterations to get accurate rise/set/transit times
 800c754:	2305      	movs	r3, #5
 800c756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    calc->moon_rise = ObtainAccurateRiseSetTransit(
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800c760:	2300      	movs	r3, #0
 800c762:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c766:	2102      	movs	r1, #2
 800c768:	eeb0 0a47 	vmov.f32	s0, s14
 800c76c:	eef0 0a67 	vmov.f32	s1, s15
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff fdfd 	bl	800c370 <ObtainAccurateRiseSetTransit>
 800c776:	eeb0 7a40 	vmov.f32	s14, s0
 800c77a:	eef0 7a60 	vmov.f32	s15, s1
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                calc, calc->moon_rise, 2, niter, FALSE);
    calc->moon_set = ObtainAccurateRiseSetTransit(
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800c78a:	2300      	movs	r3, #0
 800c78c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c790:	2103      	movs	r1, #3
 800c792:	eeb0 0a47 	vmov.f32	s0, s14
 800c796:	eef0 0a67 	vmov.f32	s1, s15
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff fde8 	bl	800c370 <ObtainAccurateRiseSetTransit>
 800c7a0:	eeb0 7a40 	vmov.f32	s14, s0
 800c7a4:	eef0 7a60 	vmov.f32	s15, s1
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                calc, calc->moon_set, 3, niter, FALSE);
    calc->moon_transit = ObtainAccurateRiseSetTransit(
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c7ba:	2104      	movs	r1, #4
 800c7bc:	eeb0 0a47 	vmov.f32	s0, s14
 800c7c0:	eef0 0a67 	vmov.f32	s1, s15
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff fdd3 	bl	800c370 <ObtainAccurateRiseSetTransit>
 800c7ca:	eeb0 7a40 	vmov.f32	s14, s0
 800c7ce:	eef0 7a60 	vmov.f32	s15, s1
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
                calc, calc->moon_transit, 4, niter, FALSE);

    if (calc->moon_transit == -1) {
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800c7de:	f04f 0200 	mov.w	r2, #0
 800c7e2:	4b21      	ldr	r3, [pc, #132]	; (800c868 <snm_CalculatorCalc+0x310>)
 800c7e4:	f7f4 f97a 	bl	8000adc <__aeabi_dcmpeq>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d007      	beq.n	800c7fe <snm_CalculatorCalc+0x2a6>
        calc->moon_transit_elev = 0;
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	f04f 0300 	mov.w	r3, #0
 800c7f4:	f04f 0400 	mov.w	r4, #0
 800c7f8:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 800c7fc:	e01c      	b.n	800c838 <snm_CalculatorCalc+0x2e0>
    } else {
        // Update Moon's maximum elevation
        SetUTDate(calc, calc->moon_transit);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 800c804:	eeb0 0a47 	vmov.f32	s0, s14
 800c808:	eef0 0a67 	vmov.f32	s1, s15
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7fa fe2b 	bl	8007468 <SetUTDate>
        // double tmp[4];
        // GetSun(calc, tmp);
        GetMoon(calc, sun_params);
 800c812:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7fb fb11 	bl	8007e40 <GetMoon>
        DoCalc(calc, sun_params, out);
 800c81e:	f107 0208 	add.w	r2, r7, #8
 800c822:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7fe f811 	bl	800a850 <DoCalc>
        calc->moon_transit_elev = out[5];
 800c82e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
    }

    SetUTDate(calc, jd);
 800c838:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7fa fe13 	bl	8007468 <SetUTDate>
    calc->aux.sanomaly = sa;
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800c848:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
    calc->aux.slongitude = sl;
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c852:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
    calc->moon_age = ma;
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c85c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
}
 800c860:	bf00      	nop
 800c862:	379c      	adds	r7, #156	; 0x9c
 800c864:	46bd      	mov	sp, r7
 800c866:	bd90      	pop	{r4, r7, pc}
 800c868:	bff00000 	.word	0xbff00000
 800c86c:	00000000 	.word	0x00000000

0800c870 <GetDate>:

void GetDate(double jd, double params[]) 
{
 800c870:	b5b0      	push	{r4, r5, r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	ed87 0b02 	vstr	d0, [r7, #8]
 800c87a:	6078      	str	r0, [r7, #4]
    STATIC_OPT double exactDay;
    STATIC_OPT int day, month, year;
    STATIC_OPT double h, m;
    STATIC_OPT int hour, minute, second;

    if (jd < 2299160.0 && jd >= 2299150.0) {
 800c87c:	a3b7      	add	r3, pc, #732	; (adr r3, 800cb5c <GetDate+0x2ec>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c886:	f7f4 f933 	bl	8000af0 <__aeabi_dcmplt>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d012      	beq.n	800c8b6 <GetDate+0x46>
 800c890:	a3b4      	add	r3, pc, #720	; (adr r3, 800cb64 <GetDate+0x2f4>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c89a:	f7f4 f93d 	bl	8000b18 <__aeabi_dcmpge>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d008      	beq.n	800c8b6 <GetDate+0x46>
        fprintf(stderr, 
 800c8a4:	4ba0      	ldr	r3, [pc, #640]	; (800cb28 <GetDate+0x2b8>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68d8      	ldr	r0, [r3, #12]
 800c8aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c8ae:	499f      	ldr	r1, [pc, #636]	; (800cb2c <GetDate+0x2bc>)
 800c8b0:	f008 fc84 	bl	80151bc <fiprintf>
                "Invalid julian day %f. "
                "This date does not exist.\n", 
                jd);
        return;
 800c8b4:	e22c      	b.n	800cd10 <GetDate+0x4a0>
    }

    // The conversion formulas are from Meeus,
    // Chapter 7.
    Z = floor(jd + 0.5);
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	4b9d      	ldr	r3, [pc, #628]	; (800cb30 <GetDate+0x2c0>)
 800c8bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8c0:	f7f3 fcee 	bl	80002a0 <__adddf3>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	ec44 3b17 	vmov	d7, r3, r4
 800c8cc:	eeb0 0a47 	vmov.f32	s0, s14
 800c8d0:	eef0 0a67 	vmov.f32	s1, s15
 800c8d4:	f00c fc00 	bl	80190d8 <floor>
 800c8d8:	eeb0 7a40 	vmov.f32	s14, s0
 800c8dc:	eef0 7a60 	vmov.f32	s15, s1
 800c8e0:	4b94      	ldr	r3, [pc, #592]	; (800cb34 <GetDate+0x2c4>)
 800c8e2:	ed83 7b00 	vstr	d7, [r3]
    F = jd + 0.5 - Z;
 800c8e6:	f04f 0200 	mov.w	r2, #0
 800c8ea:	4b91      	ldr	r3, [pc, #580]	; (800cb30 <GetDate+0x2c0>)
 800c8ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8f0:	f7f3 fcd6 	bl	80002a0 <__adddf3>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	4b8d      	ldr	r3, [pc, #564]	; (800cb34 <GetDate+0x2c4>)
 800c8fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c902:	461a      	mov	r2, r3
 800c904:	4623      	mov	r3, r4
 800c906:	f7f3 fcc9 	bl	800029c <__aeabi_dsub>
 800c90a:	4603      	mov	r3, r0
 800c90c:	460c      	mov	r4, r1
 800c90e:	4a8a      	ldr	r2, [pc, #552]	; (800cb38 <GetDate+0x2c8>)
 800c910:	e9c2 3400 	strd	r3, r4, [r2]
    A = Z;
 800c914:	4b87      	ldr	r3, [pc, #540]	; (800cb34 <GetDate+0x2c4>)
 800c916:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c91a:	4a88      	ldr	r2, [pc, #544]	; (800cb3c <GetDate+0x2cc>)
 800c91c:	e9c2 3400 	strd	r3, r4, [r2]

    if (Z >= 2299161) {
 800c920:	4b84      	ldr	r3, [pc, #528]	; (800cb34 <GetDate+0x2c4>)
 800c922:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c926:	a372      	add	r3, pc, #456	; (adr r3, 800caf0 <GetDate+0x280>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f7f4 f8f4 	bl	8000b18 <__aeabi_dcmpge>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d033      	beq.n	800c99e <GetDate+0x12e>
        a = (int) ((Z - 1867216.25) / 36524.25);
 800c936:	4b7f      	ldr	r3, [pc, #508]	; (800cb34 <GetDate+0x2c4>)
 800c938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c93c:	a36e      	add	r3, pc, #440	; (adr r3, 800caf8 <GetDate+0x288>)
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	f7f3 fcab 	bl	800029c <__aeabi_dsub>
 800c946:	4603      	mov	r3, r0
 800c948:	460c      	mov	r4, r1
 800c94a:	4618      	mov	r0, r3
 800c94c:	4621      	mov	r1, r4
 800c94e:	a36c      	add	r3, pc, #432	; (adr r3, 800cb00 <GetDate+0x290>)
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	f7f3 ff84 	bl	8000860 <__aeabi_ddiv>
 800c958:	4603      	mov	r3, r0
 800c95a:	460c      	mov	r4, r1
 800c95c:	4618      	mov	r0, r3
 800c95e:	4621      	mov	r1, r4
 800c960:	f7f4 f904 	bl	8000b6c <__aeabi_d2iz>
 800c964:	4602      	mov	r2, r0
 800c966:	4b76      	ldr	r3, [pc, #472]	; (800cb40 <GetDate+0x2d0>)
 800c968:	601a      	str	r2, [r3, #0]
        A += 1 + a - a / 4;
 800c96a:	4b75      	ldr	r3, [pc, #468]	; (800cb40 <GetDate+0x2d0>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	1c5a      	adds	r2, r3, #1
 800c970:	4b73      	ldr	r3, [pc, #460]	; (800cb40 <GetDate+0x2d0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	da00      	bge.n	800c97a <GetDate+0x10a>
 800c978:	3303      	adds	r3, #3
 800c97a:	109b      	asrs	r3, r3, #2
 800c97c:	425b      	negs	r3, r3
 800c97e:	4413      	add	r3, r2
 800c980:	4618      	mov	r0, r3
 800c982:	f7f3 fdd9 	bl	8000538 <__aeabi_i2d>
 800c986:	4b6d      	ldr	r3, [pc, #436]	; (800cb3c <GetDate+0x2cc>)
 800c988:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c98c:	461a      	mov	r2, r3
 800c98e:	4623      	mov	r3, r4
 800c990:	f7f3 fc86 	bl	80002a0 <__adddf3>
 800c994:	4603      	mov	r3, r0
 800c996:	460c      	mov	r4, r1
 800c998:	4a68      	ldr	r2, [pc, #416]	; (800cb3c <GetDate+0x2cc>)
 800c99a:	e9c2 3400 	strd	r3, r4, [r2]
    }

    B = A + 1524;
 800c99e:	4b67      	ldr	r3, [pc, #412]	; (800cb3c <GetDate+0x2cc>)
 800c9a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9a4:	a358      	add	r3, pc, #352	; (adr r3, 800cb08 <GetDate+0x298>)
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	f7f3 fc79 	bl	80002a0 <__adddf3>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	4a64      	ldr	r2, [pc, #400]	; (800cb44 <GetDate+0x2d4>)
 800c9b4:	e9c2 3400 	strd	r3, r4, [r2]
    C = (int) ((B - 122.1) / 365.25);
 800c9b8:	4b62      	ldr	r3, [pc, #392]	; (800cb44 <GetDate+0x2d4>)
 800c9ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9be:	a354      	add	r3, pc, #336	; (adr r3, 800cb10 <GetDate+0x2a0>)
 800c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c4:	f7f3 fc6a 	bl	800029c <__aeabi_dsub>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	a351      	add	r3, pc, #324	; (adr r3, 800cb18 <GetDate+0x2a8>)
 800c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d6:	f7f3 ff43 	bl	8000860 <__aeabi_ddiv>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	460c      	mov	r4, r1
 800c9de:	4618      	mov	r0, r3
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	f7f4 f8c3 	bl	8000b6c <__aeabi_d2iz>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	4b57      	ldr	r3, [pc, #348]	; (800cb48 <GetDate+0x2d8>)
 800c9ea:	601a      	str	r2, [r3, #0]
    D = (int) (C * 365.25);
 800c9ec:	4b56      	ldr	r3, [pc, #344]	; (800cb48 <GetDate+0x2d8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7f3 fda1 	bl	8000538 <__aeabi_i2d>
 800c9f6:	a348      	add	r3, pc, #288	; (adr r3, 800cb18 <GetDate+0x2a8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7f3 fe06 	bl	800060c <__aeabi_dmul>
 800ca00:	4603      	mov	r3, r0
 800ca02:	460c      	mov	r4, r1
 800ca04:	4618      	mov	r0, r3
 800ca06:	4621      	mov	r1, r4
 800ca08:	f7f4 f8b0 	bl	8000b6c <__aeabi_d2iz>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	4b4f      	ldr	r3, [pc, #316]	; (800cb4c <GetDate+0x2dc>)
 800ca10:	601a      	str	r2, [r3, #0]
    E = (int) ((B - D) / 30.6001);
 800ca12:	4b4c      	ldr	r3, [pc, #304]	; (800cb44 <GetDate+0x2d4>)
 800ca14:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ca18:	4b4c      	ldr	r3, [pc, #304]	; (800cb4c <GetDate+0x2dc>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7f3 fd8b 	bl	8000538 <__aeabi_i2d>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	4620      	mov	r0, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	f7f3 fc37 	bl	800029c <__aeabi_dsub>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	460c      	mov	r4, r1
 800ca32:	4618      	mov	r0, r3
 800ca34:	4621      	mov	r1, r4
 800ca36:	a33a      	add	r3, pc, #232	; (adr r3, 800cb20 <GetDate+0x2b0>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	f7f3 ff10 	bl	8000860 <__aeabi_ddiv>
 800ca40:	4603      	mov	r3, r0
 800ca42:	460c      	mov	r4, r1
 800ca44:	4618      	mov	r0, r3
 800ca46:	4621      	mov	r1, r4
 800ca48:	f7f4 f890 	bl	8000b6c <__aeabi_d2iz>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	4b40      	ldr	r3, [pc, #256]	; (800cb50 <GetDate+0x2e0>)
 800ca50:	601a      	str	r2, [r3, #0]

    exactDay = F + B - D - (int) (30.6001 * E);
 800ca52:	4b39      	ldr	r3, [pc, #228]	; (800cb38 <GetDate+0x2c8>)
 800ca54:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca58:	4b3a      	ldr	r3, [pc, #232]	; (800cb44 <GetDate+0x2d4>)
 800ca5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	4623      	mov	r3, r4
 800ca62:	f7f3 fc1d 	bl	80002a0 <__adddf3>
 800ca66:	4603      	mov	r3, r0
 800ca68:	460c      	mov	r4, r1
 800ca6a:	4625      	mov	r5, r4
 800ca6c:	461c      	mov	r4, r3
 800ca6e:	4b37      	ldr	r3, [pc, #220]	; (800cb4c <GetDate+0x2dc>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7f3 fd60 	bl	8000538 <__aeabi_i2d>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	4629      	mov	r1, r5
 800ca80:	f7f3 fc0c 	bl	800029c <__aeabi_dsub>
 800ca84:	4603      	mov	r3, r0
 800ca86:	460c      	mov	r4, r1
 800ca88:	4625      	mov	r5, r4
 800ca8a:	461c      	mov	r4, r3
 800ca8c:	4b30      	ldr	r3, [pc, #192]	; (800cb50 <GetDate+0x2e0>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7f3 fd51 	bl	8000538 <__aeabi_i2d>
 800ca96:	a322      	add	r3, pc, #136	; (adr r3, 800cb20 <GetDate+0x2b0>)
 800ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9c:	f7f3 fdb6 	bl	800060c <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4610      	mov	r0, r2
 800caa6:	4619      	mov	r1, r3
 800caa8:	f7f4 f860 	bl	8000b6c <__aeabi_d2iz>
 800caac:	4603      	mov	r3, r0
 800caae:	4618      	mov	r0, r3
 800cab0:	f7f3 fd42 	bl	8000538 <__aeabi_i2d>
 800cab4:	4602      	mov	r2, r0
 800cab6:	460b      	mov	r3, r1
 800cab8:	4620      	mov	r0, r4
 800caba:	4629      	mov	r1, r5
 800cabc:	f7f3 fbee 	bl	800029c <__aeabi_dsub>
 800cac0:	4603      	mov	r3, r0
 800cac2:	460c      	mov	r4, r1
 800cac4:	4a23      	ldr	r2, [pc, #140]	; (800cb54 <GetDate+0x2e4>)
 800cac6:	e9c2 3400 	strd	r3, r4, [r2]
    day = (int) exactDay;
 800caca:	4b22      	ldr	r3, [pc, #136]	; (800cb54 <GetDate+0x2e4>)
 800cacc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cad0:	4618      	mov	r0, r3
 800cad2:	4621      	mov	r1, r4
 800cad4:	f7f4 f84a 	bl	8000b6c <__aeabi_d2iz>
 800cad8:	4602      	mov	r2, r0
 800cada:	4b1f      	ldr	r3, [pc, #124]	; (800cb58 <GetDate+0x2e8>)
 800cadc:	601a      	str	r2, [r3, #0]
    month = (E < 14) ? E - 1 : E - 13;
 800cade:	4b1c      	ldr	r3, [pc, #112]	; (800cb50 <GetDate+0x2e0>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b0d      	cmp	r3, #13
 800cae4:	dc42      	bgt.n	800cb6c <GetDate+0x2fc>
 800cae6:	4b1a      	ldr	r3, [pc, #104]	; (800cb50 <GetDate+0x2e0>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	3b01      	subs	r3, #1
 800caec:	e041      	b.n	800cb72 <GetDate+0x302>
 800caee:	bf00      	nop
 800caf0:	80000000 	.word	0x80000000
 800caf4:	41418a8c 	.word	0x41418a8c
 800caf8:	40000000 	.word	0x40000000
 800cafc:	413c7dd0 	.word	0x413c7dd0
 800cb00:	00000000 	.word	0x00000000
 800cb04:	40e1d588 	.word	0x40e1d588
 800cb08:	00000000 	.word	0x00000000
 800cb0c:	4097d000 	.word	0x4097d000
 800cb10:	66666666 	.word	0x66666666
 800cb14:	405e8666 	.word	0x405e8666
 800cb18:	00000000 	.word	0x00000000
 800cb1c:	4076d400 	.word	0x4076d400
 800cb20:	27525461 	.word	0x27525461
 800cb24:	403e99a0 	.word	0x403e99a0
 800cb28:	20000154 	.word	0x20000154
 800cb2c:	0801c238 	.word	0x0801c238
 800cb30:	3fe00000 	.word	0x3fe00000
 800cb34:	20000918 	.word	0x20000918
 800cb38:	20000920 	.word	0x20000920
 800cb3c:	20000928 	.word	0x20000928
 800cb40:	20000930 	.word	0x20000930
 800cb44:	20000938 	.word	0x20000938
 800cb48:	20000940 	.word	0x20000940
 800cb4c:	20000944 	.word	0x20000944
 800cb50:	20000948 	.word	0x20000948
 800cb54:	20000950 	.word	0x20000950
 800cb58:	20000958 	.word	0x20000958
 800cb5c:	00000000 	.word	0x00000000
 800cb60:	41418a8c 	.word	0x41418a8c
 800cb64:	00000000 	.word	0x00000000
 800cb68:	41418a87 	.word	0x41418a87
 800cb6c:	4b6e      	ldr	r3, [pc, #440]	; (800cd28 <GetDate+0x4b8>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3b0d      	subs	r3, #13
 800cb72:	4a6e      	ldr	r2, [pc, #440]	; (800cd2c <GetDate+0x4bc>)
 800cb74:	6013      	str	r3, [r2, #0]
    year = C - 4715;
 800cb76:	4b6e      	ldr	r3, [pc, #440]	; (800cd30 <GetDate+0x4c0>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f5a3 5393 	sub.w	r3, r3, #4704	; 0x1260
 800cb7e:	3b0b      	subs	r3, #11
 800cb80:	4a6c      	ldr	r2, [pc, #432]	; (800cd34 <GetDate+0x4c4>)
 800cb82:	6013      	str	r3, [r2, #0]

    if (month > 2)
 800cb84:	4b69      	ldr	r3, [pc, #420]	; (800cd2c <GetDate+0x4bc>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	dd04      	ble.n	800cb96 <GetDate+0x326>
        year--;
 800cb8c:	4b69      	ldr	r3, [pc, #420]	; (800cd34 <GetDate+0x4c4>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	4a68      	ldr	r2, [pc, #416]	; (800cd34 <GetDate+0x4c4>)
 800cb94:	6013      	str	r3, [r2, #0]

    h = ((exactDay - day) * SECONDS_PER_DAY) / 3600.0;
 800cb96:	4b68      	ldr	r3, [pc, #416]	; (800cd38 <GetDate+0x4c8>)
 800cb98:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cb9c:	4b67      	ldr	r3, [pc, #412]	; (800cd3c <GetDate+0x4cc>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7f3 fcc9 	bl	8000538 <__aeabi_i2d>
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	4620      	mov	r0, r4
 800cbac:	4629      	mov	r1, r5
 800cbae:	f7f3 fb75 	bl	800029c <__aeabi_dsub>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	4621      	mov	r1, r4
 800cbba:	a457      	add	r4, pc, #348	; (adr r4, 800cd18 <GetDate+0x4a8>)
 800cbbc:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	4623      	mov	r3, r4
 800cbc4:	f7f3 fd22 	bl	800060c <__aeabi_dmul>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	460c      	mov	r4, r1
 800cbcc:	4618      	mov	r0, r3
 800cbce:	4621      	mov	r1, r4
 800cbd0:	a353      	add	r3, pc, #332	; (adr r3, 800cd20 <GetDate+0x4b0>)
 800cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd6:	f7f3 fe43 	bl	8000860 <__aeabi_ddiv>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	460c      	mov	r4, r1
 800cbde:	4a58      	ldr	r2, [pc, #352]	; (800cd40 <GetDate+0x4d0>)
 800cbe0:	e9c2 3400 	strd	r3, r4, [r2]

    hour = (int) h;
 800cbe4:	4b56      	ldr	r3, [pc, #344]	; (800cd40 <GetDate+0x4d0>)
 800cbe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cbea:	4618      	mov	r0, r3
 800cbec:	4621      	mov	r1, r4
 800cbee:	f7f3 ffbd 	bl	8000b6c <__aeabi_d2iz>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	4b53      	ldr	r3, [pc, #332]	; (800cd44 <GetDate+0x4d4>)
 800cbf6:	601a      	str	r2, [r3, #0]
    m = (h - hour) * 60.0;
 800cbf8:	4b51      	ldr	r3, [pc, #324]	; (800cd40 <GetDate+0x4d0>)
 800cbfa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cbfe:	4b51      	ldr	r3, [pc, #324]	; (800cd44 <GetDate+0x4d4>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7f3 fc98 	bl	8000538 <__aeabi_i2d>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	4629      	mov	r1, r5
 800cc10:	f7f3 fb44 	bl	800029c <__aeabi_dsub>
 800cc14:	4603      	mov	r3, r0
 800cc16:	460c      	mov	r4, r1
 800cc18:	4618      	mov	r0, r3
 800cc1a:	4621      	mov	r1, r4
 800cc1c:	f04f 0200 	mov.w	r2, #0
 800cc20:	4b49      	ldr	r3, [pc, #292]	; (800cd48 <GetDate+0x4d8>)
 800cc22:	f7f3 fcf3 	bl	800060c <__aeabi_dmul>
 800cc26:	4603      	mov	r3, r0
 800cc28:	460c      	mov	r4, r1
 800cc2a:	4a48      	ldr	r2, [pc, #288]	; (800cd4c <GetDate+0x4dc>)
 800cc2c:	e9c2 3400 	strd	r3, r4, [r2]
    minute = (int) m;
 800cc30:	4b46      	ldr	r3, [pc, #280]	; (800cd4c <GetDate+0x4dc>)
 800cc32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cc36:	4618      	mov	r0, r3
 800cc38:	4621      	mov	r1, r4
 800cc3a:	f7f3 ff97 	bl	8000b6c <__aeabi_d2iz>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	4b43      	ldr	r3, [pc, #268]	; (800cd50 <GetDate+0x4e0>)
 800cc42:	601a      	str	r2, [r3, #0]
    second = (int) ((m - minute) * 60.0);
 800cc44:	4b41      	ldr	r3, [pc, #260]	; (800cd4c <GetDate+0x4dc>)
 800cc46:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cc4a:	4b41      	ldr	r3, [pc, #260]	; (800cd50 <GetDate+0x4e0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7f3 fc72 	bl	8000538 <__aeabi_i2d>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4620      	mov	r0, r4
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	f7f3 fb1e 	bl	800029c <__aeabi_dsub>
 800cc60:	4603      	mov	r3, r0
 800cc62:	460c      	mov	r4, r1
 800cc64:	4618      	mov	r0, r3
 800cc66:	4621      	mov	r1, r4
 800cc68:	f04f 0200 	mov.w	r2, #0
 800cc6c:	4b36      	ldr	r3, [pc, #216]	; (800cd48 <GetDate+0x4d8>)
 800cc6e:	f7f3 fccd 	bl	800060c <__aeabi_dmul>
 800cc72:	4603      	mov	r3, r0
 800cc74:	460c      	mov	r4, r1
 800cc76:	4618      	mov	r0, r3
 800cc78:	4621      	mov	r1, r4
 800cc7a:	f7f3 ff77 	bl	8000b6c <__aeabi_d2iz>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	4b34      	ldr	r3, [pc, #208]	; (800cd54 <GetDate+0x4e4>)
 800cc82:	601a      	str	r2, [r3, #0]

    params[0] = year;
 800cc84:	4b2b      	ldr	r3, [pc, #172]	; (800cd34 <GetDate+0x4c4>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7f3 fc55 	bl	8000538 <__aeabi_i2d>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	460c      	mov	r4, r1
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	e9c2 3400 	strd	r3, r4, [r2]
    params[1] = month;
 800cc98:	4b24      	ldr	r3, [pc, #144]	; (800cd2c <GetDate+0x4bc>)
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f103 0508 	add.w	r5, r3, #8
 800cca2:	4610      	mov	r0, r2
 800cca4:	f7f3 fc48 	bl	8000538 <__aeabi_i2d>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	460c      	mov	r4, r1
 800ccac:	e9c5 3400 	strd	r3, r4, [r5]
    params[2] = day;
 800ccb0:	4b22      	ldr	r3, [pc, #136]	; (800cd3c <GetDate+0x4cc>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f103 0510 	add.w	r5, r3, #16
 800ccba:	4610      	mov	r0, r2
 800ccbc:	f7f3 fc3c 	bl	8000538 <__aeabi_i2d>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	e9c5 3400 	strd	r3, r4, [r5]
    params[3] = hour;
 800ccc8:	4b1e      	ldr	r3, [pc, #120]	; (800cd44 <GetDate+0x4d4>)
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f103 0518 	add.w	r5, r3, #24
 800ccd2:	4610      	mov	r0, r2
 800ccd4:	f7f3 fc30 	bl	8000538 <__aeabi_i2d>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	460c      	mov	r4, r1
 800ccdc:	e9c5 3400 	strd	r3, r4, [r5]
    params[4] = minute;
 800cce0:	4b1b      	ldr	r3, [pc, #108]	; (800cd50 <GetDate+0x4e0>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f103 0520 	add.w	r5, r3, #32
 800ccea:	4610      	mov	r0, r2
 800ccec:	f7f3 fc24 	bl	8000538 <__aeabi_i2d>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	e9c5 3400 	strd	r3, r4, [r5]
    params[5] = second;
 800ccf8:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <GetDate+0x4e4>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800cd02:	4610      	mov	r0, r2
 800cd04:	f7f3 fc18 	bl	8000538 <__aeabi_i2d>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	e9c5 3400 	strd	r3, r4, [r5]
}
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bdb0      	pop	{r4, r5, r7, pc}
 800cd16:	bf00      	nop
 800cd18:	00000000 	.word	0x00000000
 800cd1c:	40f51800 	.word	0x40f51800
 800cd20:	00000000 	.word	0x00000000
 800cd24:	40ac2000 	.word	0x40ac2000
 800cd28:	20000948 	.word	0x20000948
 800cd2c:	2000095c 	.word	0x2000095c
 800cd30:	20000940 	.word	0x20000940
 800cd34:	20000960 	.word	0x20000960
 800cd38:	20000950 	.word	0x20000950
 800cd3c:	20000958 	.word	0x20000958
 800cd40:	20000968 	.word	0x20000968
 800cd44:	20000970 	.word	0x20000970
 800cd48:	404e0000 	.word	0x404e0000
 800cd4c:	20000978 	.word	0x20000978
 800cd50:	20000980 	.word	0x20000980
 800cd54:	20000984 	.word	0x20000984

0800cd58 <snm_CalculatorGetDateAsTm>:

struct tm snm_CalculatorGetDateAsTm(double jd,
                                    double tz)
{
 800cd58:	b5b0      	push	{r4, r5, r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6178      	str	r0, [r7, #20]
 800cd60:	ed87 0b02 	vstr	d0, [r7, #8]
 800cd64:	ed87 1b00 	vstr	d1, [r7]
    STATIC_OPT struct tm timestamp = {0};
    STATIC_OPT double date[6];
    STATIC_OPT int year, month, day, hour, minute, second;
    
    if (jd == -1) {
 800cd68:	f04f 0200 	mov.w	r2, #0
 800cd6c:	4b52      	ldr	r3, [pc, #328]	; (800ceb8 <snm_CalculatorGetDateAsTm+0x160>)
 800cd6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd72:	f7f3 feb3 	bl	8000adc <__aeabi_dcmpeq>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d012      	beq.n	800cda2 <snm_CalculatorGetDateAsTm+0x4a>
        fprintf(stderr, 
 800cd7c:	4b4f      	ldr	r3, [pc, #316]	; (800cebc <snm_CalculatorGetDateAsTm+0x164>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68d8      	ldr	r0, [r3, #12]
 800cd82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd86:	494e      	ldr	r1, [pc, #312]	; (800cec0 <snm_CalculatorGetDateAsTm+0x168>)
 800cd88:	f008 fa18 	bl	80151bc <fiprintf>
                "Invalid julian day %f. "
                "This date does not exist.\n", 
                jd);
        return timestamp;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	4a4d      	ldr	r2, [pc, #308]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800cd90:	461c      	mov	r4, r3
 800cd92:	4615      	mov	r5, r2
 800cd94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	e086      	b.n	800ceb0 <snm_CalculatorGetDateAsTm+0x158>
    }

    memset(date, 0, sizeof(date));
 800cda2:	2230      	movs	r2, #48	; 0x30
 800cda4:	2100      	movs	r1, #0
 800cda6:	4848      	ldr	r0, [pc, #288]	; (800cec8 <snm_CalculatorGetDateAsTm+0x170>)
 800cda8:	f008 fa49 	bl	801523e <memset>
    GetDate(jd, date);
 800cdac:	4846      	ldr	r0, [pc, #280]	; (800cec8 <snm_CalculatorGetDateAsTm+0x170>)
 800cdae:	ed97 0b02 	vldr	d0, [r7, #8]
 800cdb2:	f7ff fd5d 	bl	800c870 <GetDate>

    year = date[0];
 800cdb6:	4b44      	ldr	r3, [pc, #272]	; (800cec8 <snm_CalculatorGetDateAsTm+0x170>)
 800cdb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	4621      	mov	r1, r4
 800cdc0:	f7f3 fed4 	bl	8000b6c <__aeabi_d2iz>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	4b41      	ldr	r3, [pc, #260]	; (800cecc <snm_CalculatorGetDateAsTm+0x174>)
 800cdc8:	601a      	str	r2, [r3, #0]
    month = date[1];
 800cdca:	4b3f      	ldr	r3, [pc, #252]	; (800cec8 <snm_CalculatorGetDateAsTm+0x170>)
 800cdcc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	f7f3 feca 	bl	8000b6c <__aeabi_d2iz>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	4b3d      	ldr	r3, [pc, #244]	; (800ced0 <snm_CalculatorGetDateAsTm+0x178>)
 800cddc:	601a      	str	r2, [r3, #0]
    day = date[2];
 800cdde:	4b3a      	ldr	r3, [pc, #232]	; (800cec8 <snm_CalculatorGetDateAsTm+0x170>)
 800cde0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800cde4:	4618      	mov	r0, r3
 800cde6:	4621      	mov	r1, r4
 800cde8:	f7f3 fec0 	bl	8000b6c <__aeabi_d2iz>
 800cdec:	4602      	mov	r2, r0
 800cdee:	4b39      	ldr	r3, [pc, #228]	; (800ced4 <snm_CalculatorGetDateAsTm+0x17c>)
 800cdf0:	601a      	str	r2, [r3, #0]
    hour = date[3];
 800cdf2:	4b35      	ldr	r3, [pc, #212]	; (800cec8 <snm_CalculatorGetDateAsTm+0x170>)
 800cdf4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	f7f3 feb6 	bl	8000b6c <__aeabi_d2iz>
 800ce00:	4602      	mov	r2, r0
 800ce02:	4b35      	ldr	r3, [pc, #212]	; (800ced8 <snm_CalculatorGetDateAsTm+0x180>)
 800ce04:	601a      	str	r2, [r3, #0]
    minute = date[4];
 800ce06:	4b30      	ldr	r3, [pc, #192]	; (800cec8 <snm_CalculatorGetDateAsTm+0x170>)
 800ce08:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	4621      	mov	r1, r4
 800ce10:	f7f3 feac 	bl	8000b6c <__aeabi_d2iz>
 800ce14:	4602      	mov	r2, r0
 800ce16:	4b31      	ldr	r3, [pc, #196]	; (800cedc <snm_CalculatorGetDateAsTm+0x184>)
 800ce18:	601a      	str	r2, [r3, #0]
    second = date[5];
 800ce1a:	4b2b      	ldr	r3, [pc, #172]	; (800cec8 <snm_CalculatorGetDateAsTm+0x170>)
 800ce1c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800ce20:	4618      	mov	r0, r3
 800ce22:	4621      	mov	r1, r4
 800ce24:	f7f3 fea2 	bl	8000b6c <__aeabi_d2iz>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	4b2d      	ldr	r3, [pc, #180]	; (800cee0 <snm_CalculatorGetDateAsTm+0x188>)
 800ce2c:	601a      	str	r2, [r3, #0]

    timestamp.tm_year = year - 1900;
 800ce2e:	4b27      	ldr	r3, [pc, #156]	; (800cecc <snm_CalculatorGetDateAsTm+0x174>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800ce36:	4a23      	ldr	r2, [pc, #140]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800ce38:	6153      	str	r3, [r2, #20]
    timestamp.tm_mon = month - 1;
 800ce3a:	4b25      	ldr	r3, [pc, #148]	; (800ced0 <snm_CalculatorGetDateAsTm+0x178>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	4a20      	ldr	r2, [pc, #128]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800ce42:	6113      	str	r3, [r2, #16]
    timestamp.tm_mday = day;
 800ce44:	4b23      	ldr	r3, [pc, #140]	; (800ced4 <snm_CalculatorGetDateAsTm+0x17c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a1e      	ldr	r2, [pc, #120]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800ce4a:	60d3      	str	r3, [r2, #12]
    timestamp.tm_hour = hour;
 800ce4c:	4b22      	ldr	r3, [pc, #136]	; (800ced8 <snm_CalculatorGetDateAsTm+0x180>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a1c      	ldr	r2, [pc, #112]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800ce52:	6093      	str	r3, [r2, #8]
    timestamp.tm_min = minute + tz * 60.;
 800ce54:	4b21      	ldr	r3, [pc, #132]	; (800cedc <snm_CalculatorGetDateAsTm+0x184>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7f3 fb6d 	bl	8000538 <__aeabi_i2d>
 800ce5e:	4604      	mov	r4, r0
 800ce60:	460d      	mov	r5, r1
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	4b1f      	ldr	r3, [pc, #124]	; (800cee4 <snm_CalculatorGetDateAsTm+0x18c>)
 800ce68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce6c:	f7f3 fbce 	bl	800060c <__aeabi_dmul>
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	4620      	mov	r0, r4
 800ce76:	4629      	mov	r1, r5
 800ce78:	f7f3 fa12 	bl	80002a0 <__adddf3>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	4618      	mov	r0, r3
 800ce82:	4621      	mov	r1, r4
 800ce84:	f7f3 fe72 	bl	8000b6c <__aeabi_d2iz>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	4b0e      	ldr	r3, [pc, #56]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800ce8c:	605a      	str	r2, [r3, #4]
    timestamp.tm_sec = second;
 800ce8e:	4b14      	ldr	r3, [pc, #80]	; (800cee0 <snm_CalculatorGetDateAsTm+0x188>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a0c      	ldr	r2, [pc, #48]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800ce94:	6013      	str	r3, [r2, #0]

    mktime(&timestamp);
 800ce96:	480b      	ldr	r0, [pc, #44]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800ce98:	f008 fab4 	bl	8015404 <mktime>

    return timestamp;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	4a09      	ldr	r2, [pc, #36]	; (800cec4 <snm_CalculatorGetDateAsTm+0x16c>)
 800cea0:	461c      	mov	r4, r3
 800cea2:	4615      	mov	r5, r2
 800cea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	6023      	str	r3, [r4, #0]
}
 800ceb0:	6978      	ldr	r0, [r7, #20]
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bdb0      	pop	{r4, r5, r7, pc}
 800ceb8:	bff00000 	.word	0xbff00000
 800cebc:	20000154 	.word	0x20000154
 800cec0:	0801c238 	.word	0x0801c238
 800cec4:	20000988 	.word	0x20000988
 800cec8:	200009b0 	.word	0x200009b0
 800cecc:	200009e0 	.word	0x200009e0
 800ced0:	200009e4 	.word	0x200009e4
 800ced4:	200009e8 	.word	0x200009e8
 800ced8:	200009ec 	.word	0x200009ec
 800cedc:	200009f0 	.word	0x200009f0
 800cee0:	200009f4 	.word	0x200009f4
 800cee4:	404e0000 	.word	0x404e0000

0800cee8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cef4:	2300      	movs	r3, #0
 800cef6:	617b      	str	r3, [r7, #20]
 800cef8:	e00a      	b.n	800cf10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800cefa:	f3af 8000 	nop.w
 800cefe:	4601      	mov	r1, r0
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	60ba      	str	r2, [r7, #8]
 800cf06:	b2ca      	uxtb	r2, r1
 800cf08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	dbf0      	blt.n	800cefa <_read+0x12>
	}

return len;
 800cf18:	687b      	ldr	r3, [r7, #4]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3718      	adds	r7, #24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b086      	sub	sp, #24
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	60f8      	str	r0, [r7, #12]
 800cf2a:	60b9      	str	r1, [r7, #8]
 800cf2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf2e:	2300      	movs	r3, #0
 800cf30:	617b      	str	r3, [r7, #20]
 800cf32:	e009      	b.n	800cf48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	1c5a      	adds	r2, r3, #1
 800cf38:	60ba      	str	r2, [r7, #8]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	3301      	adds	r3, #1
 800cf46:	617b      	str	r3, [r7, #20]
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	dbf1      	blt.n	800cf34 <_write+0x12>
	}
	return len;
 800cf50:	687b      	ldr	r3, [r7, #4]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <_close>:

int _close(int file)
{
 800cf5a:	b480      	push	{r7}
 800cf5c:	b083      	sub	sp, #12
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
	return -1;
 800cf62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b083      	sub	sp, #12
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cf82:	605a      	str	r2, [r3, #4]
	return 0;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <_isatty>:

int _isatty(int file)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b083      	sub	sp, #12
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
	return 1;
 800cf9a:	2301      	movs	r3, #1
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
	return 0;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
	...

0800cfc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cfcc:	4b11      	ldr	r3, [pc, #68]	; (800d014 <_sbrk+0x50>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d102      	bne.n	800cfda <_sbrk+0x16>
		heap_end = &end;
 800cfd4:	4b0f      	ldr	r3, [pc, #60]	; (800d014 <_sbrk+0x50>)
 800cfd6:	4a10      	ldr	r2, [pc, #64]	; (800d018 <_sbrk+0x54>)
 800cfd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800cfda:	4b0e      	ldr	r3, [pc, #56]	; (800d014 <_sbrk+0x50>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800cfe0:	4b0c      	ldr	r3, [pc, #48]	; (800d014 <_sbrk+0x50>)
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	466a      	mov	r2, sp
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d907      	bls.n	800cffe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800cfee:	f008 f8df 	bl	80151b0 <__errno>
 800cff2:	4602      	mov	r2, r0
 800cff4:	230c      	movs	r3, #12
 800cff6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800cff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cffc:	e006      	b.n	800d00c <_sbrk+0x48>
	}

	heap_end += incr;
 800cffe:	4b05      	ldr	r3, [pc, #20]	; (800d014 <_sbrk+0x50>)
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4413      	add	r3, r2
 800d006:	4a03      	ldr	r2, [pc, #12]	; (800d014 <_sbrk+0x50>)
 800d008:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d00a:	68fb      	ldr	r3, [r7, #12]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	200009fc 	.word	0x200009fc
 800d018:	20005408 	.word	0x20005408

0800d01c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d01c:	b480      	push	{r7}
 800d01e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d020:	4b08      	ldr	r3, [pc, #32]	; (800d044 <SystemInit+0x28>)
 800d022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d026:	4a07      	ldr	r2, [pc, #28]	; (800d044 <SystemInit+0x28>)
 800d028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d02c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d030:	4b04      	ldr	r3, [pc, #16]	; (800d044 <SystemInit+0x28>)
 800d032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d036:	609a      	str	r2, [r3, #8]
#endif
}
 800d038:	bf00      	nop
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	e000ed00 	.word	0xe000ed00

0800d048 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b092      	sub	sp, #72	; 0x48
 800d04c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d04e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d052:	2200      	movs	r2, #0
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d05c:	2200      	movs	r2, #0
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	605a      	str	r2, [r3, #4]
 800d062:	609a      	str	r2, [r3, #8]
 800d064:	60da      	str	r2, [r3, #12]
 800d066:	611a      	str	r2, [r3, #16]
 800d068:	615a      	str	r2, [r3, #20]
 800d06a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d06c:	1d3b      	adds	r3, r7, #4
 800d06e:	2220      	movs	r2, #32
 800d070:	2100      	movs	r1, #0
 800d072:	4618      	mov	r0, r3
 800d074:	f008 f8e3 	bl	801523e <memset>

  htim1.Instance = TIM1;
 800d078:	4b33      	ldr	r3, [pc, #204]	; (800d148 <MX_TIM1_Init+0x100>)
 800d07a:	4a34      	ldr	r2, [pc, #208]	; (800d14c <MX_TIM1_Init+0x104>)
 800d07c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800d07e:	4b32      	ldr	r3, [pc, #200]	; (800d148 <MX_TIM1_Init+0x100>)
 800d080:	2200      	movs	r2, #0
 800d082:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d084:	4b30      	ldr	r3, [pc, #192]	; (800d148 <MX_TIM1_Init+0x100>)
 800d086:	2200      	movs	r2, #0
 800d088:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800d08a:	4b2f      	ldr	r3, [pc, #188]	; (800d148 <MX_TIM1_Init+0x100>)
 800d08c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d090:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d092:	4b2d      	ldr	r3, [pc, #180]	; (800d148 <MX_TIM1_Init+0x100>)
 800d094:	2200      	movs	r2, #0
 800d096:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d098:	4b2b      	ldr	r3, [pc, #172]	; (800d148 <MX_TIM1_Init+0x100>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d09e:	4b2a      	ldr	r3, [pc, #168]	; (800d148 <MX_TIM1_Init+0x100>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800d0a4:	4828      	ldr	r0, [pc, #160]	; (800d148 <MX_TIM1_Init+0x100>)
 800d0a6:	f004 fca4 	bl	80119f2 <HAL_TIM_PWM_Init>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800d0b0:	f7f9 fb4c 	bl	800674c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d0bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	4821      	ldr	r0, [pc, #132]	; (800d148 <MX_TIM1_Init+0x100>)
 800d0c4:	f005 fcbc 	bl	8012a40 <HAL_TIMEx_MasterConfigSynchronization>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800d0ce:	f7f9 fb3d 	bl	800674c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d0d2:	2360      	movs	r3, #96	; 0x60
 800d0d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 32767;
 800d0d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d0da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d0f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	4813      	ldr	r0, [pc, #76]	; (800d148 <MX_TIM1_Init+0x100>)
 800d0fa:	f004 ff55 	bl	8011fa8 <HAL_TIM_PWM_ConfigChannel>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d001      	beq.n	800d108 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800d104:	f7f9 fb22 	bl	800674c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d108:	2300      	movs	r3, #0
 800d10a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d110:	2300      	movs	r3, #0
 800d112:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d118:	2300      	movs	r3, #0
 800d11a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d11c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d120:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d122:	2300      	movs	r3, #0
 800d124:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800d126:	1d3b      	adds	r3, r7, #4
 800d128:	4619      	mov	r1, r3
 800d12a:	4807      	ldr	r0, [pc, #28]	; (800d148 <MX_TIM1_Init+0x100>)
 800d12c:	f005 fd04 	bl	8012b38 <HAL_TIMEx_ConfigBreakDeadTime>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800d136:	f7f9 fb09 	bl	800674c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800d13a:	4803      	ldr	r0, [pc, #12]	; (800d148 <MX_TIM1_Init+0x100>)
 800d13c:	f000 f9ce 	bl	800d4dc <HAL_TIM_MspPostInit>

}
 800d140:	bf00      	nop
 800d142:	3748      	adds	r7, #72	; 0x48
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	20004d54 	.word	0x20004d54
 800d14c:	40010000 	.word	0x40010000

0800d150 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08e      	sub	sp, #56	; 0x38
 800d154:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	605a      	str	r2, [r3, #4]
 800d160:	609a      	str	r2, [r3, #8]
 800d162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d164:	f107 0320 	add.w	r3, r7, #32
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]
 800d16c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d16e:	1d3b      	adds	r3, r7, #4
 800d170:	2200      	movs	r2, #0
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	605a      	str	r2, [r3, #4]
 800d176:	609a      	str	r2, [r3, #8]
 800d178:	60da      	str	r2, [r3, #12]
 800d17a:	611a      	str	r2, [r3, #16]
 800d17c:	615a      	str	r2, [r3, #20]
 800d17e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800d180:	4b2c      	ldr	r3, [pc, #176]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d188:	4b2a      	ldr	r3, [pc, #168]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d18e:	4b29      	ldr	r3, [pc, #164]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d190:	2200      	movs	r2, #0
 800d192:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104;
 800d194:	4b27      	ldr	r3, [pc, #156]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d196:	2268      	movs	r2, #104	; 0x68
 800d198:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d19a:	4b26      	ldr	r3, [pc, #152]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d1a0:	4b24      	ldr	r3, [pc, #144]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d1a6:	4823      	ldr	r0, [pc, #140]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d1a8:	f004 fbb0 	bl	801190c <HAL_TIM_Base_Init>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800d1b2:	f7f9 facb 	bl	800674c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d1b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d1bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	481c      	ldr	r0, [pc, #112]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d1c4:	f004 ffb6 	bl	8012134 <HAL_TIM_ConfigClockSource>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d001      	beq.n	800d1d2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800d1ce:	f7f9 fabd 	bl	800674c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d1d2:	4818      	ldr	r0, [pc, #96]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d1d4:	f004 fc0d 	bl	80119f2 <HAL_TIM_PWM_Init>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800d1de:	f7f9 fab5 	bl	800674c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d1ea:	f107 0320 	add.w	r3, r7, #32
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4810      	ldr	r0, [pc, #64]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d1f2:	f005 fc25 	bl	8012a40 <HAL_TIMEx_MasterConfigSynchronization>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800d1fc:	f7f9 faa6 	bl	800674c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d200:	2360      	movs	r3, #96	; 0x60
 800d202:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d208:	2300      	movs	r3, #0
 800d20a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d20c:	2300      	movs	r3, #0
 800d20e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d210:	1d3b      	adds	r3, r7, #4
 800d212:	2200      	movs	r2, #0
 800d214:	4619      	mov	r1, r3
 800d216:	4807      	ldr	r0, [pc, #28]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d218:	f004 fec6 	bl	8011fa8 <HAL_TIM_PWM_ConfigChannel>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800d222:	f7f9 fa93 	bl	800674c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800d226:	4803      	ldr	r0, [pc, #12]	; (800d234 <MX_TIM2_Init+0xe4>)
 800d228:	f000 f958 	bl	800d4dc <HAL_TIM_MspPostInit>

}
 800d22c:	bf00      	nop
 800d22e:	3738      	adds	r7, #56	; 0x38
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	20004d94 	.word	0x20004d94

0800d238 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08e      	sub	sp, #56	; 0x38
 800d23c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d23e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	605a      	str	r2, [r3, #4]
 800d248:	609a      	str	r2, [r3, #8]
 800d24a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d24c:	f107 0320 	add.w	r3, r7, #32
 800d250:	2200      	movs	r2, #0
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d256:	1d3b      	adds	r3, r7, #4
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	605a      	str	r2, [r3, #4]
 800d25e:	609a      	str	r2, [r3, #8]
 800d260:	60da      	str	r2, [r3, #12]
 800d262:	611a      	str	r2, [r3, #16]
 800d264:	615a      	str	r2, [r3, #20]
 800d266:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800d268:	4b2c      	ldr	r3, [pc, #176]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d26a:	4a2d      	ldr	r2, [pc, #180]	; (800d320 <MX_TIM5_Init+0xe8>)
 800d26c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8;
 800d26e:	4b2b      	ldr	r3, [pc, #172]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d270:	2208      	movs	r2, #8
 800d272:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d274:	4b29      	ldr	r3, [pc, #164]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d276:	2200      	movs	r2, #0
 800d278:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 800d27a:	4b28      	ldr	r3, [pc, #160]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d27c:	22ff      	movs	r2, #255	; 0xff
 800d27e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d280:	4b26      	ldr	r3, [pc, #152]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d282:	2200      	movs	r2, #0
 800d284:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d286:	4b25      	ldr	r3, [pc, #148]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d288:	2200      	movs	r2, #0
 800d28a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800d28c:	4823      	ldr	r0, [pc, #140]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d28e:	f004 fb3d 	bl	801190c <HAL_TIM_Base_Init>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800d298:	f7f9 fa58 	bl	800674c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d29c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800d2a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	481c      	ldr	r0, [pc, #112]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d2aa:	f004 ff43 	bl	8012134 <HAL_TIM_ConfigClockSource>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 800d2b4:	f7f9 fa4a 	bl	800674c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800d2b8:	4818      	ldr	r0, [pc, #96]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d2ba:	f004 fb9a 	bl	80119f2 <HAL_TIM_PWM_Init>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800d2c4:	f7f9 fa42 	bl	800674c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d2d0:	f107 0320 	add.w	r3, r7, #32
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	4811      	ldr	r0, [pc, #68]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d2d8:	f005 fbb2 	bl	8012a40 <HAL_TIMEx_MasterConfigSynchronization>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800d2e2:	f7f9 fa33 	bl	800674c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d2e6:	2360      	movs	r3, #96	; 0x60
 800d2e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 230;
 800d2ea:	23e6      	movs	r3, #230	; 0xe6
 800d2ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d2f6:	1d3b      	adds	r3, r7, #4
 800d2f8:	220c      	movs	r2, #12
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4807      	ldr	r0, [pc, #28]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d2fe:	f004 fe53 	bl	8011fa8 <HAL_TIM_PWM_ConfigChannel>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800d308:	f7f9 fa20 	bl	800674c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 800d30c:	4803      	ldr	r0, [pc, #12]	; (800d31c <MX_TIM5_Init+0xe4>)
 800d30e:	f000 f8e5 	bl	800d4dc <HAL_TIM_MspPostInit>

}
 800d312:	bf00      	nop
 800d314:	3738      	adds	r7, #56	; 0x38
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	20004d14 	.word	0x20004d14
 800d320:	40000c00 	.word	0x40000c00

0800d324 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d32a:	463b      	mov	r3, r7
 800d32c:	2200      	movs	r2, #0
 800d32e:	601a      	str	r2, [r3, #0]
 800d330:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800d332:	4b14      	ldr	r3, [pc, #80]	; (800d384 <MX_TIM7_Init+0x60>)
 800d334:	4a14      	ldr	r2, [pc, #80]	; (800d388 <MX_TIM7_Init+0x64>)
 800d336:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800d338:	4b12      	ldr	r3, [pc, #72]	; (800d384 <MX_TIM7_Init+0x60>)
 800d33a:	2253      	movs	r2, #83	; 0x53
 800d33c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d33e:	4b11      	ldr	r3, [pc, #68]	; (800d384 <MX_TIM7_Init+0x60>)
 800d340:	2200      	movs	r2, #0
 800d342:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800d344:	4b0f      	ldr	r3, [pc, #60]	; (800d384 <MX_TIM7_Init+0x60>)
 800d346:	2231      	movs	r2, #49	; 0x31
 800d348:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d34a:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <MX_TIM7_Init+0x60>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800d350:	480c      	ldr	r0, [pc, #48]	; (800d384 <MX_TIM7_Init+0x60>)
 800d352:	f004 fadb 	bl	801190c <HAL_TIM_Base_Init>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d001      	beq.n	800d360 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800d35c:	f7f9 f9f6 	bl	800674c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d360:	2300      	movs	r3, #0
 800d362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d364:	2300      	movs	r3, #0
 800d366:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800d368:	463b      	mov	r3, r7
 800d36a:	4619      	mov	r1, r3
 800d36c:	4805      	ldr	r0, [pc, #20]	; (800d384 <MX_TIM7_Init+0x60>)
 800d36e:	f005 fb67 	bl	8012a40 <HAL_TIMEx_MasterConfigSynchronization>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d001      	beq.n	800d37c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800d378:	f7f9 f9e8 	bl	800674c <Error_Handler>
  }

}
 800d37c:	bf00      	nop
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20004dd4 	.word	0x20004dd4
 800d388:	40001400 	.word	0x40001400

0800d38c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a0b      	ldr	r2, [pc, #44]	; (800d3c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d10d      	bne.n	800d3ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d39e:	2300      	movs	r3, #0
 800d3a0:	60fb      	str	r3, [r7, #12]
 800d3a2:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <HAL_TIM_PWM_MspInit+0x40>)
 800d3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3a6:	4a09      	ldr	r2, [pc, #36]	; (800d3cc <HAL_TIM_PWM_MspInit+0x40>)
 800d3a8:	f043 0301 	orr.w	r3, r3, #1
 800d3ac:	6453      	str	r3, [r2, #68]	; 0x44
 800d3ae:	4b07      	ldr	r3, [pc, #28]	; (800d3cc <HAL_TIM_PWM_MspInit+0x40>)
 800d3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	60fb      	str	r3, [r7, #12]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800d3ba:	bf00      	nop
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	40010000 	.word	0x40010000
 800d3cc:	40023800 	.word	0x40023800

0800d3d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3e0:	d13e      	bne.n	800d460 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	617b      	str	r3, [r7, #20]
 800d3e6:	4b38      	ldr	r3, [pc, #224]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ea:	4a37      	ldr	r2, [pc, #220]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d3ec:	f043 0301 	orr.w	r3, r3, #1
 800d3f0:	6413      	str	r3, [r2, #64]	; 0x40
 800d3f2:	4b35      	ldr	r3, [pc, #212]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f6:	f003 0301 	and.w	r3, r3, #1
 800d3fa:	617b      	str	r3, [r7, #20]
 800d3fc:	697b      	ldr	r3, [r7, #20]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800d3fe:	4b33      	ldr	r3, [pc, #204]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d400:	4a33      	ldr	r2, [pc, #204]	; (800d4d0 <HAL_TIM_Base_MspInit+0x100>)
 800d402:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800d404:	4b31      	ldr	r3, [pc, #196]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d406:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800d40a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d40c:	4b2f      	ldr	r3, [pc, #188]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d40e:	2240      	movs	r2, #64	; 0x40
 800d410:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d412:	4b2e      	ldr	r3, [pc, #184]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d414:	2200      	movs	r2, #0
 800d416:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800d418:	4b2c      	ldr	r3, [pc, #176]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d41a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d41e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d420:	4b2a      	ldr	r3, [pc, #168]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d426:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d428:	4b28      	ldr	r3, [pc, #160]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d42a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d42e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800d430:	4b26      	ldr	r3, [pc, #152]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d432:	2200      	movs	r2, #0
 800d434:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800d436:	4b25      	ldr	r3, [pc, #148]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d438:	2200      	movs	r2, #0
 800d43a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d43c:	4b23      	ldr	r3, [pc, #140]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d43e:	2200      	movs	r2, #0
 800d440:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800d442:	4822      	ldr	r0, [pc, #136]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d444:	f001 f87e 	bl	800e544 <HAL_DMA_Init>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800d44e:	f7f9 f97d 	bl	800674c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a1d      	ldr	r2, [pc, #116]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d456:	625a      	str	r2, [r3, #36]	; 0x24
 800d458:	4a1c      	ldr	r2, [pc, #112]	; (800d4cc <HAL_TIM_Base_MspInit+0xfc>)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800d45e:	e02e      	b.n	800d4be <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a1b      	ldr	r2, [pc, #108]	; (800d4d4 <HAL_TIM_Base_MspInit+0x104>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d10e      	bne.n	800d488 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d46a:	2300      	movs	r3, #0
 800d46c:	613b      	str	r3, [r7, #16]
 800d46e:	4b16      	ldr	r3, [pc, #88]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d472:	4a15      	ldr	r2, [pc, #84]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d474:	f043 0308 	orr.w	r3, r3, #8
 800d478:	6413      	str	r3, [r2, #64]	; 0x40
 800d47a:	4b13      	ldr	r3, [pc, #76]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47e:	f003 0308 	and.w	r3, r3, #8
 800d482:	613b      	str	r3, [r7, #16]
 800d484:	693b      	ldr	r3, [r7, #16]
}
 800d486:	e01a      	b.n	800d4be <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM7)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a12      	ldr	r2, [pc, #72]	; (800d4d8 <HAL_TIM_Base_MspInit+0x108>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d115      	bne.n	800d4be <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800d492:	2300      	movs	r3, #0
 800d494:	60fb      	str	r3, [r7, #12]
 800d496:	4b0c      	ldr	r3, [pc, #48]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49a:	4a0b      	ldr	r2, [pc, #44]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d49c:	f043 0320 	orr.w	r3, r3, #32
 800d4a0:	6413      	str	r3, [r2, #64]	; 0x40
 800d4a2:	4b09      	ldr	r3, [pc, #36]	; (800d4c8 <HAL_TIM_Base_MspInit+0xf8>)
 800d4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a6:	f003 0320 	and.w	r3, r3, #32
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	2105      	movs	r1, #5
 800d4b2:	2037      	movs	r0, #55	; 0x37
 800d4b4:	f001 f81c 	bl	800e4f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800d4b8:	2037      	movs	r0, #55	; 0x37
 800d4ba:	f001 f835 	bl	800e528 <HAL_NVIC_EnableIRQ>
}
 800d4be:	bf00      	nop
 800d4c0:	3718      	adds	r7, #24
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	40023800 	.word	0x40023800
 800d4cc:	20004cb4 	.word	0x20004cb4
 800d4d0:	40026088 	.word	0x40026088
 800d4d4:	40000c00 	.word	0x40000c00
 800d4d8:	40001400 	.word	0x40001400

0800d4dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b08a      	sub	sp, #40	; 0x28
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4e4:	f107 0314 	add.w	r3, r7, #20
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	605a      	str	r2, [r3, #4]
 800d4ee:	609a      	str	r2, [r3, #8]
 800d4f0:	60da      	str	r2, [r3, #12]
 800d4f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a36      	ldr	r2, [pc, #216]	; (800d5d4 <HAL_TIM_MspPostInit+0xf8>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d11f      	bne.n	800d53e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4fe:	2300      	movs	r3, #0
 800d500:	613b      	str	r3, [r7, #16]
 800d502:	4b35      	ldr	r3, [pc, #212]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d506:	4a34      	ldr	r2, [pc, #208]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d508:	f043 0301 	orr.w	r3, r3, #1
 800d50c:	6313      	str	r3, [r2, #48]	; 0x30
 800d50e:	4b32      	ldr	r3, [pc, #200]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	613b      	str	r3, [r7, #16]
 800d518:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 800d51a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d51e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d520:	2302      	movs	r3, #2
 800d522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d524:	2301      	movs	r3, #1
 800d526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d528:	2302      	movs	r3, #2
 800d52a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d52c:	2301      	movs	r3, #1
 800d52e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 800d530:	f107 0314 	add.w	r3, r7, #20
 800d534:	4619      	mov	r1, r3
 800d536:	4829      	ldr	r0, [pc, #164]	; (800d5dc <HAL_TIM_MspPostInit+0x100>)
 800d538:	f001 fd90 	bl	800f05c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800d53c:	e046      	b.n	800d5cc <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d546:	d11e      	bne.n	800d586 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d548:	2300      	movs	r3, #0
 800d54a:	60fb      	str	r3, [r7, #12]
 800d54c:	4b22      	ldr	r3, [pc, #136]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d550:	4a21      	ldr	r2, [pc, #132]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d552:	f043 0301 	orr.w	r3, r3, #1
 800d556:	6313      	str	r3, [r2, #48]	; 0x30
 800d558:	4b1f      	ldr	r3, [pc, #124]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d55c:	f003 0301 	and.w	r3, r3, #1
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RGB_DATA_Pin;
 800d564:	2301      	movs	r3, #1
 800d566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d568:	2302      	movs	r3, #2
 800d56a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d56c:	2302      	movs	r3, #2
 800d56e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d570:	2303      	movs	r3, #3
 800d572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d574:	2301      	movs	r3, #1
 800d576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RGB_DATA_GPIO_Port, &GPIO_InitStruct);
 800d578:	f107 0314 	add.w	r3, r7, #20
 800d57c:	4619      	mov	r1, r3
 800d57e:	4817      	ldr	r0, [pc, #92]	; (800d5dc <HAL_TIM_MspPostInit+0x100>)
 800d580:	f001 fd6c 	bl	800f05c <HAL_GPIO_Init>
}
 800d584:	e022      	b.n	800d5cc <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a15      	ldr	r2, [pc, #84]	; (800d5e0 <HAL_TIM_MspPostInit+0x104>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d11d      	bne.n	800d5cc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d590:	2300      	movs	r3, #0
 800d592:	60bb      	str	r3, [r7, #8]
 800d594:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d598:	4a0f      	ldr	r2, [pc, #60]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d59a:	f043 0301 	orr.w	r3, r3, #1
 800d59e:	6313      	str	r3, [r2, #48]	; 0x30
 800d5a0:	4b0d      	ldr	r3, [pc, #52]	; (800d5d8 <HAL_TIM_MspPostInit+0xfc>)
 800d5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a4:	f003 0301 	and.w	r3, r3, #1
 800d5a8:	60bb      	str	r3, [r7, #8]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 800d5ac:	2308      	movs	r3, #8
 800d5ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800d5bc:	2302      	movs	r3, #2
 800d5be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 800d5c0:	f107 0314 	add.w	r3, r7, #20
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4805      	ldr	r0, [pc, #20]	; (800d5dc <HAL_TIM_MspPostInit+0x100>)
 800d5c8:	f001 fd48 	bl	800f05c <HAL_GPIO_Init>
}
 800d5cc:	bf00      	nop
 800d5ce:	3728      	adds	r7, #40	; 0x28
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	40010000 	.word	0x40010000
 800d5d8:	40023800 	.word	0x40023800
 800d5dc:	40020000 	.word	0x40020000
 800d5e0:	40000c00 	.word	0x40000c00

0800d5e4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800d5e8:	4b11      	ldr	r3, [pc, #68]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d5ea:	4a12      	ldr	r2, [pc, #72]	; (800d634 <MX_USART3_UART_Init+0x50>)
 800d5ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800d5ee:	4b10      	ldr	r3, [pc, #64]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d5f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d5f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d5f6:	4b0e      	ldr	r3, [pc, #56]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d5fc:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d5fe:	2200      	movs	r2, #0
 800d600:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d602:	4b0b      	ldr	r3, [pc, #44]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d604:	2200      	movs	r2, #0
 800d606:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d608:	4b09      	ldr	r3, [pc, #36]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d60a:	220c      	movs	r2, #12
 800d60c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d60e:	4b08      	ldr	r3, [pc, #32]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d610:	2200      	movs	r2, #0
 800d612:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d614:	4b06      	ldr	r3, [pc, #24]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d616:	2200      	movs	r2, #0
 800d618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800d61a:	4805      	ldr	r0, [pc, #20]	; (800d630 <MX_USART3_UART_Init+0x4c>)
 800d61c:	f005 faf2 	bl	8012c04 <HAL_UART_Init>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d001      	beq.n	800d62a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800d626:	f7f9 f891 	bl	800674c <Error_Handler>
  }

}
 800d62a:	bf00      	nop
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	20004e14 	.word	0x20004e14
 800d634:	40004800 	.word	0x40004800

0800d638 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08a      	sub	sp, #40	; 0x28
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d640:	f107 0314 	add.w	r3, r7, #20
 800d644:	2200      	movs	r2, #0
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	605a      	str	r2, [r3, #4]
 800d64a:	609a      	str	r2, [r3, #8]
 800d64c:	60da      	str	r2, [r3, #12]
 800d64e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a1d      	ldr	r2, [pc, #116]	; (800d6cc <HAL_UART_MspInit+0x94>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d134      	bne.n	800d6c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d65a:	2300      	movs	r3, #0
 800d65c:	613b      	str	r3, [r7, #16]
 800d65e:	4b1c      	ldr	r3, [pc, #112]	; (800d6d0 <HAL_UART_MspInit+0x98>)
 800d660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d662:	4a1b      	ldr	r2, [pc, #108]	; (800d6d0 <HAL_UART_MspInit+0x98>)
 800d664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d668:	6413      	str	r3, [r2, #64]	; 0x40
 800d66a:	4b19      	ldr	r3, [pc, #100]	; (800d6d0 <HAL_UART_MspInit+0x98>)
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d672:	613b      	str	r3, [r7, #16]
 800d674:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d676:	2300      	movs	r3, #0
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	4b15      	ldr	r3, [pc, #84]	; (800d6d0 <HAL_UART_MspInit+0x98>)
 800d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67e:	4a14      	ldr	r2, [pc, #80]	; (800d6d0 <HAL_UART_MspInit+0x98>)
 800d680:	f043 0302 	orr.w	r3, r3, #2
 800d684:	6313      	str	r3, [r2, #48]	; 0x30
 800d686:	4b12      	ldr	r3, [pc, #72]	; (800d6d0 <HAL_UART_MspInit+0x98>)
 800d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68a:	f003 0302 	and.w	r3, r3, #2
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800d692:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d698:	2302      	movs	r3, #2
 800d69a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d69c:	2300      	movs	r3, #0
 800d69e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d6a4:	2307      	movs	r3, #7
 800d6a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6a8:	f107 0314 	add.w	r3, r7, #20
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	4809      	ldr	r0, [pc, #36]	; (800d6d4 <HAL_UART_MspInit+0x9c>)
 800d6b0:	f001 fcd4 	bl	800f05c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2105      	movs	r1, #5
 800d6b8:	2027      	movs	r0, #39	; 0x27
 800d6ba:	f000 ff19 	bl	800e4f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d6be:	2027      	movs	r0, #39	; 0x27
 800d6c0:	f000 ff32 	bl	800e528 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800d6c4:	bf00      	nop
 800d6c6:	3728      	adds	r7, #40	; 0x28
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	40004800 	.word	0x40004800
 800d6d0:	40023800 	.word	0x40023800
 800d6d4:	40020400 	.word	0x40020400

0800d6d8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d6dc:	4b14      	ldr	r3, [pc, #80]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d6de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d6e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d6e4:	4b12      	ldr	r3, [pc, #72]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d6e6:	2204      	movs	r2, #4
 800d6e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d6ea:	4b11      	ldr	r3, [pc, #68]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d6ec:	2202      	movs	r2, #2
 800d6ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d6f0:	4b0f      	ldr	r3, [pc, #60]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d6f6:	4b0e      	ldr	r3, [pc, #56]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d6fc:	4b0c      	ldr	r3, [pc, #48]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d6fe:	2200      	movs	r2, #0
 800d700:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d702:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d704:	2200      	movs	r2, #0
 800d706:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d708:	4b09      	ldr	r3, [pc, #36]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d70e:	4b08      	ldr	r3, [pc, #32]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d710:	2200      	movs	r2, #0
 800d712:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d714:	4b06      	ldr	r3, [pc, #24]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d716:	2200      	movs	r2, #0
 800d718:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d71a:	4805      	ldr	r0, [pc, #20]	; (800d730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800d71c:	f002 fdf1 	bl	8010302 <HAL_PCD_Init>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d001      	beq.n	800d72a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800d726:	f7f9 f811 	bl	800674c <Error_Handler>
  }

}
 800d72a:	bf00      	nop
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	20004e54 	.word	0x20004e54

0800d734 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b08a      	sub	sp, #40	; 0x28
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d73c:	f107 0314 	add.w	r3, r7, #20
 800d740:	2200      	movs	r2, #0
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	605a      	str	r2, [r3, #4]
 800d746:	609a      	str	r2, [r3, #8]
 800d748:	60da      	str	r2, [r3, #12]
 800d74a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d754:	d132      	bne.n	800d7bc <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d756:	2300      	movs	r3, #0
 800d758:	613b      	str	r3, [r7, #16]
 800d75a:	4b1a      	ldr	r3, [pc, #104]	; (800d7c4 <HAL_PCD_MspInit+0x90>)
 800d75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d75e:	4a19      	ldr	r2, [pc, #100]	; (800d7c4 <HAL_PCD_MspInit+0x90>)
 800d760:	f043 0301 	orr.w	r3, r3, #1
 800d764:	6313      	str	r3, [r2, #48]	; 0x30
 800d766:	4b17      	ldr	r3, [pc, #92]	; (800d7c4 <HAL_PCD_MspInit+0x90>)
 800d768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76a:	f003 0301 	and.w	r3, r3, #1
 800d76e:	613b      	str	r3, [r7, #16]
 800d770:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d772:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d778:	2302      	movs	r3, #2
 800d77a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d77c:	2300      	movs	r3, #0
 800d77e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d780:	2303      	movs	r3, #3
 800d782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d784:	230a      	movs	r3, #10
 800d786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d788:	f107 0314 	add.w	r3, r7, #20
 800d78c:	4619      	mov	r1, r3
 800d78e:	480e      	ldr	r0, [pc, #56]	; (800d7c8 <HAL_PCD_MspInit+0x94>)
 800d790:	f001 fc64 	bl	800f05c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d794:	4b0b      	ldr	r3, [pc, #44]	; (800d7c4 <HAL_PCD_MspInit+0x90>)
 800d796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d798:	4a0a      	ldr	r2, [pc, #40]	; (800d7c4 <HAL_PCD_MspInit+0x90>)
 800d79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d79e:	6353      	str	r3, [r2, #52]	; 0x34
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	4b07      	ldr	r3, [pc, #28]	; (800d7c4 <HAL_PCD_MspInit+0x90>)
 800d7a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7a8:	4a06      	ldr	r2, [pc, #24]	; (800d7c4 <HAL_PCD_MspInit+0x90>)
 800d7aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7ae:	6453      	str	r3, [r2, #68]	; 0x44
 800d7b0:	4b04      	ldr	r3, [pc, #16]	; (800d7c4 <HAL_PCD_MspInit+0x90>)
 800d7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7b8:	60fb      	str	r3, [r7, #12]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7bc:	bf00      	nop
 800d7be:	3728      	adds	r7, #40	; 0x28
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	40023800 	.word	0x40023800
 800d7c8:	40020000 	.word	0x40020000

0800d7cc <Wire_SetI2C>:
static uint8_t wire_buff[256];
static const uint32_t wire_timeout = 100u;
static I2C_HandleTypeDef *wire_i2c;

void Wire_SetI2C(I2C_HandleTypeDef *i2c)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
    wire_i2c = i2c;
 800d7d4:	4a04      	ldr	r2, [pc, #16]	; (800d7e8 <Wire_SetI2C+0x1c>)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6013      	str	r3, [r2, #0]
}
 800d7da:	bf00      	nop
 800d7dc:	370c      	adds	r7, #12
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	20000b04 	.word	0x20000b04

0800d7ec <Wire_beginTransmission>:

void Wire_beginTransmission(uint8_t address)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	71fb      	strb	r3, [r7, #7]
    wire_dev_address = address;
 800d7f6:	79fb      	ldrb	r3, [r7, #7]
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	4b07      	ldr	r3, [pc, #28]	; (800d818 <Wire_beginTransmission+0x2c>)
 800d7fc:	801a      	strh	r2, [r3, #0]

    memset(wire_buff, 0, sizeof(wire_buff));
 800d7fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d802:	2100      	movs	r1, #0
 800d804:	4805      	ldr	r0, [pc, #20]	; (800d81c <Wire_beginTransmission+0x30>)
 800d806:	f007 fd1a 	bl	801523e <memset>
    wire_buff_idx = 0;
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <Wire_beginTransmission+0x34>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
}
 800d810:	bf00      	nop
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	20000a00 	.word	0x20000a00
 800d81c:	20000a04 	.word	0x20000a04
 800d820:	20000a02 	.word	0x20000a02

0800d824 <Wire_endTransmission>:

uint8_t Wire_endTransmission(void)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af02      	add	r7, sp, #8
    HAL_I2C_Master_Transmit(wire_i2c,
 800d82a:	4b09      	ldr	r3, [pc, #36]	; (800d850 <Wire_endTransmission+0x2c>)
 800d82c:	6818      	ldr	r0, [r3, #0]
 800d82e:	4b09      	ldr	r3, [pc, #36]	; (800d854 <Wire_endTransmission+0x30>)
 800d830:	8819      	ldrh	r1, [r3, #0]
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <Wire_endTransmission+0x34>)
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	b29a      	uxth	r2, r3
 800d838:	2364      	movs	r3, #100	; 0x64
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	4613      	mov	r3, r2
 800d83e:	4a07      	ldr	r2, [pc, #28]	; (800d85c <Wire_endTransmission+0x38>)
 800d840:	f001 ff10 	bl	800f664 <HAL_I2C_Master_Transmit>
                            wire_dev_address,
                            wire_buff,
                            wire_buff_idx,
                            wire_timeout);
    return wire_buff_idx;
 800d844:	4b04      	ldr	r3, [pc, #16]	; (800d858 <Wire_endTransmission+0x34>)
 800d846:	781b      	ldrb	r3, [r3, #0]
}
 800d848:	4618      	mov	r0, r3
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	20000b04 	.word	0x20000b04
 800d854:	20000a00 	.word	0x20000a00
 800d858:	20000a02 	.word	0x20000a02
 800d85c:	20000a04 	.word	0x20000a04

0800d860 <Wire_requestFrom>:

uint8_t Wire_requestFrom(uint8_t address,
                         uint8_t quantity)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af02      	add	r7, sp, #8
 800d866:	4603      	mov	r3, r0
 800d868:	460a      	mov	r2, r1
 800d86a:	71fb      	strb	r3, [r7, #7]
 800d86c:	4613      	mov	r3, r2
 800d86e:	71bb      	strb	r3, [r7, #6]
    memset(wire_buff, 0, sizeof(wire_buff));
 800d870:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d874:	2100      	movs	r1, #0
 800d876:	480b      	ldr	r0, [pc, #44]	; (800d8a4 <Wire_requestFrom+0x44>)
 800d878:	f007 fce1 	bl	801523e <memset>
    wire_buff_idx = 0;
 800d87c:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <Wire_requestFrom+0x48>)
 800d87e:	2200      	movs	r2, #0
 800d880:	701a      	strb	r2, [r3, #0]

    HAL_I2C_Master_Receive(wire_i2c,
 800d882:	4b0a      	ldr	r3, [pc, #40]	; (800d8ac <Wire_requestFrom+0x4c>)
 800d884:	6818      	ldr	r0, [r3, #0]
 800d886:	4b0a      	ldr	r3, [pc, #40]	; (800d8b0 <Wire_requestFrom+0x50>)
 800d888:	8819      	ldrh	r1, [r3, #0]
 800d88a:	79bb      	ldrb	r3, [r7, #6]
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	2364      	movs	r3, #100	; 0x64
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	4613      	mov	r3, r2
 800d894:	4a03      	ldr	r2, [pc, #12]	; (800d8a4 <Wire_requestFrom+0x44>)
 800d896:	f001 ffe3 	bl	800f860 <HAL_I2C_Master_Receive>
                           wire_dev_address,
                           wire_buff,
                           quantity,
                           wire_timeout);

    return quantity;
 800d89a:	79bb      	ldrb	r3, [r7, #6]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	20000a04 	.word	0x20000a04
 800d8a8:	20000a02 	.word	0x20000a02
 800d8ac:	20000b04 	.word	0x20000b04
 800d8b0:	20000a00 	.word	0x20000a00

0800d8b4 <Wire_write>:

size_t Wire_write(uint8_t data)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	71fb      	strb	r3, [r7, #7]
    wire_buff[wire_buff_idx++] = data;
 800d8be:	4b08      	ldr	r3, [pc, #32]	; (800d8e0 <Wire_write+0x2c>)
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	b2d1      	uxtb	r1, r2
 800d8c6:	4a06      	ldr	r2, [pc, #24]	; (800d8e0 <Wire_write+0x2c>)
 800d8c8:	7011      	strb	r1, [r2, #0]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4a05      	ldr	r2, [pc, #20]	; (800d8e4 <Wire_write+0x30>)
 800d8ce:	79fb      	ldrb	r3, [r7, #7]
 800d8d0:	5453      	strb	r3, [r2, r1]
    return 1;
 800d8d2:	2301      	movs	r3, #1
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	20000a02 	.word	0x20000a02
 800d8e4:	20000a04 	.word	0x20000a04

0800d8e8 <Wire_read>:

int Wire_read(void)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	af00      	add	r7, sp, #0
    return wire_buff[wire_buff_idx++];
 800d8ec:	4b06      	ldr	r3, [pc, #24]	; (800d908 <Wire_read+0x20>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	b2d1      	uxtb	r1, r2
 800d8f4:	4a04      	ldr	r2, [pc, #16]	; (800d908 <Wire_read+0x20>)
 800d8f6:	7011      	strb	r1, [r2, #0]
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4b04      	ldr	r3, [pc, #16]	; (800d90c <Wire_read+0x24>)
 800d8fc:	5c9b      	ldrb	r3, [r3, r2]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	20000a02 	.word	0x20000a02
 800d90c:	20000a04 	.word	0x20000a04

0800d910 <ws2812_init>:
//------------------------------------------------------------------
uint32_t BUF_DMA[ARRAY_LEN];

//------------------------------------------------------------------
void ws2812_init(void)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
	int i;

	memset(BUF_DMA, 0x00, sizeof(BUF_DMA));
 800d916:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d91a:	2100      	movs	r1, #0
 800d91c:	480a      	ldr	r0, [pc, #40]	; (800d948 <ws2812_init+0x38>)
 800d91e:	f007 fc8e 	bl	801523e <memset>
	for (i = 0; i < LED_COUNT * 24; i++)
 800d922:	2300      	movs	r3, #0
 800d924:	607b      	str	r3, [r7, #4]
 800d926:	e007      	b.n	800d938 <ws2812_init+0x28>
		BUF_DMA[i] = LOW;
 800d928:	4a07      	ldr	r2, [pc, #28]	; (800d948 <ws2812_init+0x38>)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	211c      	movs	r1, #28
 800d92e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < LED_COUNT * 24; i++)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3301      	adds	r3, #1
 800d936:	607b      	str	r3, [r7, #4]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b2f      	cmp	r3, #47	; 0x2f
 800d93c:	ddf4      	ble.n	800d928 <ws2812_init+0x18>
}
 800d93e:	bf00      	nop
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	2000525c 	.word	0x2000525c

0800d94c <ws2812_pixel_rgb_to_buf_dma>:

//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel, uint8_t Gpixel, uint8_t Bpixel,
		uint16_t posX)
{
 800d94c:	b490      	push	{r4, r7}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	4611      	mov	r1, r2
 800d958:	461a      	mov	r2, r3
 800d95a:	4623      	mov	r3, r4
 800d95c:	71fb      	strb	r3, [r7, #7]
 800d95e:	4603      	mov	r3, r0
 800d960:	71bb      	strb	r3, [r7, #6]
 800d962:	460b      	mov	r3, r1
 800d964:	717b      	strb	r3, [r7, #5]
 800d966:	4613      	mov	r3, r2
 800d968:	807b      	strh	r3, [r7, #2]
	volatile uint16_t i;

	for (i = 0; i < 8; i++) {
 800d96a:	2300      	movs	r3, #0
 800d96c:	81fb      	strh	r3, [r7, #14]
 800d96e:	e07a      	b.n	800da66 <ws2812_pixel_rgb_to_buf_dma+0x11a>

		if (BitIsSet(Rpixel, (7 - i)) == 1) {
 800d970:	79fa      	ldrb	r2, [r7, #7]
 800d972:	89fb      	ldrh	r3, [r7, #14]
 800d974:	b29b      	uxth	r3, r3
 800d976:	f1c3 0307 	rsb	r3, r3, #7
 800d97a:	fa42 f303 	asr.w	r3, r2, r3
 800d97e:	f003 0301 	and.w	r3, r3, #1
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00e      	beq.n	800d9a4 <ws2812_pixel_rgb_to_buf_dma+0x58>
			BUF_DMA[0 + posX * 24 + i + 8] = HIGH;
 800d986:	887a      	ldrh	r2, [r7, #2]
 800d988:	4613      	mov	r3, r2
 800d98a:	005b      	lsls	r3, r3, #1
 800d98c:	4413      	add	r3, r2
 800d98e:	00db      	lsls	r3, r3, #3
 800d990:	461a      	mov	r2, r3
 800d992:	89fb      	ldrh	r3, [r7, #14]
 800d994:	b29b      	uxth	r3, r3
 800d996:	4413      	add	r3, r2
 800d998:	3308      	adds	r3, #8
 800d99a:	4a37      	ldr	r2, [pc, #220]	; (800da78 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d99c:	213b      	movs	r1, #59	; 0x3b
 800d99e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800d9a2:	e00d      	b.n	800d9c0 <ws2812_pixel_rgb_to_buf_dma+0x74>
		} else {
			BUF_DMA[0 + posX * 24 + i + 8] = LOW;
 800d9a4:	887a      	ldrh	r2, [r7, #2]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	4413      	add	r3, r2
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	89fb      	ldrh	r3, [r7, #14]
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	4413      	add	r3, r2
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	4a2f      	ldr	r2, [pc, #188]	; (800da78 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d9ba:	211c      	movs	r1, #28
 800d9bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (BitIsSet(Gpixel, (7 - i)) == 1) {
 800d9c0:	79ba      	ldrb	r2, [r7, #6]
 800d9c2:	89fb      	ldrh	r3, [r7, #14]
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	f1c3 0307 	rsb	r3, r3, #7
 800d9ca:	fa42 f303 	asr.w	r3, r2, r3
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00d      	beq.n	800d9f2 <ws2812_pixel_rgb_to_buf_dma+0xa6>
			BUF_DMA[0 + posX * 24 + i + 0] = HIGH;
 800d9d6:	887a      	ldrh	r2, [r7, #2]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	4413      	add	r3, r2
 800d9de:	00db      	lsls	r3, r3, #3
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	89fb      	ldrh	r3, [r7, #14]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	4413      	add	r3, r2
 800d9e8:	4a23      	ldr	r2, [pc, #140]	; (800da78 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800d9ea:	213b      	movs	r1, #59	; 0x3b
 800d9ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800d9f0:	e00c      	b.n	800da0c <ws2812_pixel_rgb_to_buf_dma+0xc0>
		} else {
			BUF_DMA[0 + posX * 24 + i + 0] = LOW;
 800d9f2:	887a      	ldrh	r2, [r7, #2]
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	4413      	add	r3, r2
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	89fb      	ldrh	r3, [r7, #14]
 800da00:	b29b      	uxth	r3, r3
 800da02:	4413      	add	r3, r2
 800da04:	4a1c      	ldr	r2, [pc, #112]	; (800da78 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800da06:	211c      	movs	r1, #28
 800da08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (BitIsSet(Bpixel, (7 - i)) == 1) {
 800da0c:	797a      	ldrb	r2, [r7, #5]
 800da0e:	89fb      	ldrh	r3, [r7, #14]
 800da10:	b29b      	uxth	r3, r3
 800da12:	f1c3 0307 	rsb	r3, r3, #7
 800da16:	fa42 f303 	asr.w	r3, r2, r3
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00e      	beq.n	800da40 <ws2812_pixel_rgb_to_buf_dma+0xf4>
			BUF_DMA[0 + posX * 24 + i + 16] = HIGH;
 800da22:	887a      	ldrh	r2, [r7, #2]
 800da24:	4613      	mov	r3, r2
 800da26:	005b      	lsls	r3, r3, #1
 800da28:	4413      	add	r3, r2
 800da2a:	00db      	lsls	r3, r3, #3
 800da2c:	461a      	mov	r2, r3
 800da2e:	89fb      	ldrh	r3, [r7, #14]
 800da30:	b29b      	uxth	r3, r3
 800da32:	4413      	add	r3, r2
 800da34:	3310      	adds	r3, #16
 800da36:	4a10      	ldr	r2, [pc, #64]	; (800da78 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800da38:	213b      	movs	r1, #59	; 0x3b
 800da3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800da3e:	e00d      	b.n	800da5c <ws2812_pixel_rgb_to_buf_dma+0x110>
		} else {
			BUF_DMA[0 + posX * 24 + i + 16] = LOW;
 800da40:	887a      	ldrh	r2, [r7, #2]
 800da42:	4613      	mov	r3, r2
 800da44:	005b      	lsls	r3, r3, #1
 800da46:	4413      	add	r3, r2
 800da48:	00db      	lsls	r3, r3, #3
 800da4a:	461a      	mov	r2, r3
 800da4c:	89fb      	ldrh	r3, [r7, #14]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4413      	add	r3, r2
 800da52:	3310      	adds	r3, #16
 800da54:	4a08      	ldr	r2, [pc, #32]	; (800da78 <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800da56:	211c      	movs	r1, #28
 800da58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++) {
 800da5c:	89fb      	ldrh	r3, [r7, #14]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	3301      	adds	r3, #1
 800da62:	b29b      	uxth	r3, r3
 800da64:	81fb      	strh	r3, [r7, #14]
 800da66:	89fb      	ldrh	r3, [r7, #14]
 800da68:	b29b      	uxth	r3, r3
 800da6a:	2b07      	cmp	r3, #7
 800da6c:	d980      	bls.n	800d970 <ws2812_pixel_rgb_to_buf_dma+0x24>
		}

	}
}
 800da6e:	bf00      	nop
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bc90      	pop	{r4, r7}
 800da76:	4770      	bx	lr
 800da78:	2000525c 	.word	0x2000525c

0800da7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800da7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dab4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800da80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800da82:	e003      	b.n	800da8c <LoopCopyDataInit>

0800da84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800da84:	4b0c      	ldr	r3, [pc, #48]	; (800dab8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800da86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800da88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800da8a:	3104      	adds	r1, #4

0800da8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800da8c:	480b      	ldr	r0, [pc, #44]	; (800dabc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800da8e:	4b0c      	ldr	r3, [pc, #48]	; (800dac0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800da90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800da92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800da94:	d3f6      	bcc.n	800da84 <CopyDataInit>
  ldr  r2, =_sbss
 800da96:	4a0b      	ldr	r2, [pc, #44]	; (800dac4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800da98:	e002      	b.n	800daa0 <LoopFillZerobss>

0800da9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800da9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800da9c:	f842 3b04 	str.w	r3, [r2], #4

0800daa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800daa0:	4b09      	ldr	r3, [pc, #36]	; (800dac8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800daa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800daa4:	d3f9      	bcc.n	800da9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800daa6:	f7ff fab9 	bl	800d01c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800daaa:	f007 fb99 	bl	80151e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800daae:	f7f8 fdad 	bl	800660c <main>
  bx  lr    
 800dab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800dab4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800dab8:	0801c938 	.word	0x0801c938
  ldr  r0, =_sdata
 800dabc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800dac0:	20000388 	.word	0x20000388
  ldr  r2, =_sbss
 800dac4:	20000388 	.word	0x20000388
  ldr  r3, = _ebss
 800dac8:	20005404 	.word	0x20005404

0800dacc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dacc:	e7fe      	b.n	800dacc <ADC_IRQHandler>
	...

0800dad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dad4:	4b0e      	ldr	r3, [pc, #56]	; (800db10 <HAL_Init+0x40>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a0d      	ldr	r2, [pc, #52]	; (800db10 <HAL_Init+0x40>)
 800dada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800dae0:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <HAL_Init+0x40>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a0a      	ldr	r2, [pc, #40]	; (800db10 <HAL_Init+0x40>)
 800dae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800daea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800daec:	4b08      	ldr	r3, [pc, #32]	; (800db10 <HAL_Init+0x40>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a07      	ldr	r2, [pc, #28]	; (800db10 <HAL_Init+0x40>)
 800daf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800daf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800daf8:	2003      	movs	r0, #3
 800dafa:	f000 fcee 	bl	800e4da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800dafe:	2000      	movs	r0, #0
 800db00:	f7f9 f8ee 	bl	8006ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800db04:	f7f9 f8c0 	bl	8006c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	40023c00 	.word	0x40023c00

0800db14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800db14:	b480      	push	{r7}
 800db16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800db18:	4b06      	ldr	r3, [pc, #24]	; (800db34 <HAL_IncTick+0x20>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	461a      	mov	r2, r3
 800db1e:	4b06      	ldr	r3, [pc, #24]	; (800db38 <HAL_IncTick+0x24>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4413      	add	r3, r2
 800db24:	4a04      	ldr	r2, [pc, #16]	; (800db38 <HAL_IncTick+0x24>)
 800db26:	6013      	str	r3, [r2, #0]
}
 800db28:	bf00      	nop
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	2000014c 	.word	0x2000014c
 800db38:	200053dc 	.word	0x200053dc

0800db3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800db3c:	b480      	push	{r7}
 800db3e:	af00      	add	r7, sp, #0
  return uwTick;
 800db40:	4b03      	ldr	r3, [pc, #12]	; (800db50 <HAL_GetTick+0x14>)
 800db42:	681b      	ldr	r3, [r3, #0]
}
 800db44:	4618      	mov	r0, r3
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	200053dc 	.word	0x200053dc

0800db54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800db5c:	f7ff ffee 	bl	800db3c <HAL_GetTick>
 800db60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db6c:	d005      	beq.n	800db7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800db6e:	4b09      	ldr	r3, [pc, #36]	; (800db94 <HAL_Delay+0x40>)
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	461a      	mov	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	4413      	add	r3, r2
 800db78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800db7a:	bf00      	nop
 800db7c:	f7ff ffde 	bl	800db3c <HAL_GetTick>
 800db80:	4602      	mov	r2, r0
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d8f7      	bhi.n	800db7c <HAL_Delay+0x28>
  {
  }
}
 800db8c:	bf00      	nop
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	2000014c 	.word	0x2000014c

0800db98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e033      	b.n	800dc16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d109      	bne.n	800dbca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7f3 fa42 	bl	8001040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbce:	f003 0310 	and.w	r3, r3, #16
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d118      	bne.n	800dc08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800dbde:	f023 0302 	bic.w	r3, r3, #2
 800dbe2:	f043 0202 	orr.w	r2, r3, #2
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 fa4a 	bl	800e084 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbfa:	f023 0303 	bic.w	r3, r3, #3
 800dbfe:	f043 0201 	orr.w	r2, r3, #1
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	641a      	str	r2, [r3, #64]	; 0x40
 800dc06:	e001      	b.n	800dc0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
	...

0800dc20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d101      	bne.n	800dc3e <HAL_ADC_Start_DMA+0x1e>
 800dc3a:	2302      	movs	r3, #2
 800dc3c:	e0cc      	b.n	800ddd8 <HAL_ADC_Start_DMA+0x1b8>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2201      	movs	r2, #1
 800dc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	f003 0301 	and.w	r3, r3, #1
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d018      	beq.n	800dc86 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689a      	ldr	r2, [r3, #8]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f042 0201 	orr.w	r2, r2, #1
 800dc62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800dc64:	4b5e      	ldr	r3, [pc, #376]	; (800dde0 <HAL_ADC_Start_DMA+0x1c0>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a5e      	ldr	r2, [pc, #376]	; (800dde4 <HAL_ADC_Start_DMA+0x1c4>)
 800dc6a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc6e:	0c9a      	lsrs	r2, r3, #18
 800dc70:	4613      	mov	r3, r2
 800dc72:	005b      	lsls	r3, r3, #1
 800dc74:	4413      	add	r3, r2
 800dc76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800dc78:	e002      	b.n	800dc80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	3b01      	subs	r3, #1
 800dc7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1f9      	bne.n	800dc7a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	f040 80a0 	bne.w	800ddd6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800dc9e:	f023 0301 	bic.w	r3, r3, #1
 800dca2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d007      	beq.n	800dcc8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800dcc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dcd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcd4:	d106      	bne.n	800dce4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcda:	f023 0206 	bic.w	r2, r3, #6
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	645a      	str	r2, [r3, #68]	; 0x44
 800dce2:	e002      	b.n	800dcea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dcf2:	4b3d      	ldr	r3, [pc, #244]	; (800dde8 <HAL_ADC_Start_DMA+0x1c8>)
 800dcf4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfa:	4a3c      	ldr	r2, [pc, #240]	; (800ddec <HAL_ADC_Start_DMA+0x1cc>)
 800dcfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd02:	4a3b      	ldr	r2, [pc, #236]	; (800ddf0 <HAL_ADC_Start_DMA+0x1d0>)
 800dd04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0a:	4a3a      	ldr	r2, [pc, #232]	; (800ddf4 <HAL_ADC_Start_DMA+0x1d4>)
 800dd0c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800dd16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	685a      	ldr	r2, [r3, #4]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800dd26:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	689a      	ldr	r2, [r3, #8]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd36:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	334c      	adds	r3, #76	; 0x4c
 800dd42:	4619      	mov	r1, r3
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f000 fcaa 	bl	800e6a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	f003 031f 	and.w	r3, r3, #31
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d12a      	bne.n	800ddae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a26      	ldr	r2, [pc, #152]	; (800ddf8 <HAL_ADC_Start_DMA+0x1d8>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d015      	beq.n	800dd8e <HAL_ADC_Start_DMA+0x16e>
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a25      	ldr	r2, [pc, #148]	; (800ddfc <HAL_ADC_Start_DMA+0x1dc>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d105      	bne.n	800dd78 <HAL_ADC_Start_DMA+0x158>
 800dd6c:	4b1e      	ldr	r3, [pc, #120]	; (800dde8 <HAL_ADC_Start_DMA+0x1c8>)
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	f003 031f 	and.w	r3, r3, #31
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00a      	beq.n	800dd8e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a20      	ldr	r2, [pc, #128]	; (800de00 <HAL_ADC_Start_DMA+0x1e0>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d129      	bne.n	800ddd6 <HAL_ADC_Start_DMA+0x1b6>
 800dd82:	4b19      	ldr	r3, [pc, #100]	; (800dde8 <HAL_ADC_Start_DMA+0x1c8>)
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	f003 031f 	and.w	r3, r3, #31
 800dd8a:	2b0f      	cmp	r3, #15
 800dd8c:	d823      	bhi.n	800ddd6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d11c      	bne.n	800ddd6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	689a      	ldr	r2, [r3, #8]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ddaa:	609a      	str	r2, [r3, #8]
 800ddac:	e013      	b.n	800ddd6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a11      	ldr	r2, [pc, #68]	; (800ddf8 <HAL_ADC_Start_DMA+0x1d8>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d10e      	bne.n	800ddd6 <HAL_ADC_Start_DMA+0x1b6>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d107      	bne.n	800ddd6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	689a      	ldr	r2, [r3, #8]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ddd4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3718      	adds	r7, #24
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20000144 	.word	0x20000144
 800dde4:	431bde83 	.word	0x431bde83
 800dde8:	40012300 	.word	0x40012300
 800ddec:	0800e27d 	.word	0x0800e27d
 800ddf0:	0800e337 	.word	0x0800e337
 800ddf4:	0800e353 	.word	0x0800e353
 800ddf8:	40012000 	.word	0x40012000
 800ddfc:	40012100 	.word	0x40012100
 800de00:	40012200 	.word	0x40012200

0800de04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800de0c:	bf00      	nop
 800de0e:	370c      	adds	r7, #12
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800de20:	bf00      	nop
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800de34:	bf00      	nop
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800de4a:	2300      	movs	r3, #0
 800de4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de54:	2b01      	cmp	r3, #1
 800de56:	d101      	bne.n	800de5c <HAL_ADC_ConfigChannel+0x1c>
 800de58:	2302      	movs	r3, #2
 800de5a:	e105      	b.n	800e068 <HAL_ADC_ConfigChannel+0x228>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b09      	cmp	r3, #9
 800de6a:	d925      	bls.n	800deb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	68d9      	ldr	r1, [r3, #12]
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	b29b      	uxth	r3, r3
 800de78:	461a      	mov	r2, r3
 800de7a:	4613      	mov	r3, r2
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	4413      	add	r3, r2
 800de80:	3b1e      	subs	r3, #30
 800de82:	2207      	movs	r2, #7
 800de84:	fa02 f303 	lsl.w	r3, r2, r3
 800de88:	43da      	mvns	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	400a      	ands	r2, r1
 800de90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68d9      	ldr	r1, [r3, #12]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	689a      	ldr	r2, [r3, #8]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	4618      	mov	r0, r3
 800dea4:	4603      	mov	r3, r0
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	4403      	add	r3, r0
 800deaa:	3b1e      	subs	r3, #30
 800deac:	409a      	lsls	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	430a      	orrs	r2, r1
 800deb4:	60da      	str	r2, [r3, #12]
 800deb6:	e022      	b.n	800defe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	6919      	ldr	r1, [r3, #16]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	461a      	mov	r2, r3
 800dec6:	4613      	mov	r3, r2
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	4413      	add	r3, r2
 800decc:	2207      	movs	r2, #7
 800dece:	fa02 f303 	lsl.w	r3, r2, r3
 800ded2:	43da      	mvns	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	400a      	ands	r2, r1
 800deda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	6919      	ldr	r1, [r3, #16]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	689a      	ldr	r2, [r3, #8]
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	b29b      	uxth	r3, r3
 800deec:	4618      	mov	r0, r3
 800deee:	4603      	mov	r3, r0
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	4403      	add	r3, r0
 800def4:	409a      	lsls	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	430a      	orrs	r2, r1
 800defc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	2b06      	cmp	r3, #6
 800df04:	d824      	bhi.n	800df50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	685a      	ldr	r2, [r3, #4]
 800df10:	4613      	mov	r3, r2
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	4413      	add	r3, r2
 800df16:	3b05      	subs	r3, #5
 800df18:	221f      	movs	r2, #31
 800df1a:	fa02 f303 	lsl.w	r3, r2, r3
 800df1e:	43da      	mvns	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	400a      	ands	r2, r1
 800df26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	b29b      	uxth	r3, r3
 800df34:	4618      	mov	r0, r3
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	685a      	ldr	r2, [r3, #4]
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	3b05      	subs	r3, #5
 800df42:	fa00 f203 	lsl.w	r2, r0, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	430a      	orrs	r2, r1
 800df4c:	635a      	str	r2, [r3, #52]	; 0x34
 800df4e:	e04c      	b.n	800dfea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	2b0c      	cmp	r3, #12
 800df56:	d824      	bhi.n	800dfa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	685a      	ldr	r2, [r3, #4]
 800df62:	4613      	mov	r3, r2
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	4413      	add	r3, r2
 800df68:	3b23      	subs	r3, #35	; 0x23
 800df6a:	221f      	movs	r2, #31
 800df6c:	fa02 f303 	lsl.w	r3, r2, r3
 800df70:	43da      	mvns	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	400a      	ands	r2, r1
 800df78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	b29b      	uxth	r3, r3
 800df86:	4618      	mov	r0, r3
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	4613      	mov	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	3b23      	subs	r3, #35	; 0x23
 800df94:	fa00 f203 	lsl.w	r2, r0, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	430a      	orrs	r2, r1
 800df9e:	631a      	str	r2, [r3, #48]	; 0x30
 800dfa0:	e023      	b.n	800dfea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	685a      	ldr	r2, [r3, #4]
 800dfac:	4613      	mov	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	4413      	add	r3, r2
 800dfb2:	3b41      	subs	r3, #65	; 0x41
 800dfb4:	221f      	movs	r2, #31
 800dfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dfba:	43da      	mvns	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	400a      	ands	r2, r1
 800dfc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	3b41      	subs	r3, #65	; 0x41
 800dfde:	fa00 f203 	lsl.w	r2, r0, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	430a      	orrs	r2, r1
 800dfe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dfea:	4b22      	ldr	r3, [pc, #136]	; (800e074 <HAL_ADC_ConfigChannel+0x234>)
 800dfec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a21      	ldr	r2, [pc, #132]	; (800e078 <HAL_ADC_ConfigChannel+0x238>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d109      	bne.n	800e00c <HAL_ADC_ConfigChannel+0x1cc>
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b12      	cmp	r3, #18
 800dffe:	d105      	bne.n	800e00c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a19      	ldr	r2, [pc, #100]	; (800e078 <HAL_ADC_ConfigChannel+0x238>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d123      	bne.n	800e05e <HAL_ADC_ConfigChannel+0x21e>
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b10      	cmp	r3, #16
 800e01c:	d003      	beq.n	800e026 <HAL_ADC_ConfigChannel+0x1e6>
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b11      	cmp	r3, #17
 800e024:	d11b      	bne.n	800e05e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b10      	cmp	r3, #16
 800e038:	d111      	bne.n	800e05e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800e03a:	4b10      	ldr	r3, [pc, #64]	; (800e07c <HAL_ADC_ConfigChannel+0x23c>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4a10      	ldr	r2, [pc, #64]	; (800e080 <HAL_ADC_ConfigChannel+0x240>)
 800e040:	fba2 2303 	umull	r2, r3, r2, r3
 800e044:	0c9a      	lsrs	r2, r3, #18
 800e046:	4613      	mov	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	005b      	lsls	r3, r3, #1
 800e04e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e050:	e002      	b.n	800e058 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	3b01      	subs	r3, #1
 800e056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1f9      	bne.n	800e052 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr
 800e074:	40012300 	.word	0x40012300
 800e078:	40012000 	.word	0x40012000
 800e07c:	20000144 	.word	0x20000144
 800e080:	431bde83 	.word	0x431bde83

0800e084 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e08c:	4b79      	ldr	r3, [pc, #484]	; (800e274 <ADC_Init+0x1f0>)
 800e08e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	685a      	ldr	r2, [r3, #4]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	431a      	orrs	r2, r3
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	685a      	ldr	r2, [r3, #4]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e0b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	6859      	ldr	r1, [r3, #4]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	021a      	lsls	r2, r3, #8
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	430a      	orrs	r2, r1
 800e0cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	685a      	ldr	r2, [r3, #4]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800e0dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6859      	ldr	r1, [r3, #4]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	689a      	ldr	r2, [r3, #8]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	430a      	orrs	r2, r1
 800e0ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	689a      	ldr	r2, [r3, #8]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6899      	ldr	r1, [r3, #8]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68da      	ldr	r2, [r3, #12]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	430a      	orrs	r2, r1
 800e110:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e116:	4a58      	ldr	r2, [pc, #352]	; (800e278 <ADC_Init+0x1f4>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d022      	beq.n	800e162 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	689a      	ldr	r2, [r3, #8]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e12a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6899      	ldr	r1, [r3, #8]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	430a      	orrs	r2, r1
 800e13c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	689a      	ldr	r2, [r3, #8]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e14c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	6899      	ldr	r1, [r3, #8]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	430a      	orrs	r2, r1
 800e15e:	609a      	str	r2, [r3, #8]
 800e160:	e00f      	b.n	800e182 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	689a      	ldr	r2, [r3, #8]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	689a      	ldr	r2, [r3, #8]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e180:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	689a      	ldr	r2, [r3, #8]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f022 0202 	bic.w	r2, r2, #2
 800e190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	6899      	ldr	r1, [r3, #8]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	7e1b      	ldrb	r3, [r3, #24]
 800e19c:	005a      	lsls	r2, r3, #1
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	430a      	orrs	r2, r1
 800e1a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d01b      	beq.n	800e1e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	685a      	ldr	r2, [r3, #4]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	685a      	ldr	r2, [r3, #4]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800e1ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6859      	ldr	r1, [r3, #4]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	035a      	lsls	r2, r3, #13
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	430a      	orrs	r2, r1
 800e1e4:	605a      	str	r2, [r3, #4]
 800e1e6:	e007      	b.n	800e1f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	685a      	ldr	r2, [r3, #4]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800e206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	69db      	ldr	r3, [r3, #28]
 800e212:	3b01      	subs	r3, #1
 800e214:	051a      	lsls	r2, r3, #20
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	430a      	orrs	r2, r1
 800e21c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	689a      	ldr	r2, [r3, #8]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e22c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	6899      	ldr	r1, [r3, #8]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e23a:	025a      	lsls	r2, r3, #9
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	430a      	orrs	r2, r1
 800e242:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	689a      	ldr	r2, [r3, #8]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6899      	ldr	r1, [r3, #8]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	029a      	lsls	r2, r3, #10
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	430a      	orrs	r2, r1
 800e266:	609a      	str	r2, [r3, #8]
}
 800e268:	bf00      	nop
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	40012300 	.word	0x40012300
 800e278:	0f000001 	.word	0x0f000001

0800e27c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e288:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e292:	2b00      	cmp	r3, #0
 800e294:	d13c      	bne.n	800e310 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d12b      	bne.n	800e308 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d127      	bne.n	800e308 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d006      	beq.n	800e2d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d119      	bne.n	800e308 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	685a      	ldr	r2, [r3, #4]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f022 0220 	bic.w	r2, r2, #32
 800e2e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d105      	bne.n	800e308 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e300:	f043 0201 	orr.w	r2, r3, #1
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff fd7b 	bl	800de04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800e30e:	e00e      	b.n	800e32e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e314:	f003 0310 	and.w	r3, r3, #16
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	f7ff fd85 	bl	800de2c <HAL_ADC_ErrorCallback>
}
 800e322:	e004      	b.n	800e32e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	4798      	blx	r3
}
 800e32e:	bf00      	nop
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b084      	sub	sp, #16
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e342:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f7ff fd67 	bl	800de18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e34a:	bf00      	nop
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2240      	movs	r2, #64	; 0x40
 800e364:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e36a:	f043 0204 	orr.w	r2, r3, #4
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f7ff fd5a 	bl	800de2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e378:	bf00      	nop
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f003 0307 	and.w	r3, r3, #7
 800e38e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e390:	4b0c      	ldr	r3, [pc, #48]	; (800e3c4 <__NVIC_SetPriorityGrouping+0x44>)
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e39c:	4013      	ands	r3, r2
 800e39e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e3a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e3ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e3b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e3b2:	4a04      	ldr	r2, [pc, #16]	; (800e3c4 <__NVIC_SetPriorityGrouping+0x44>)
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	60d3      	str	r3, [r2, #12]
}
 800e3b8:	bf00      	nop
 800e3ba:	3714      	adds	r7, #20
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr
 800e3c4:	e000ed00 	.word	0xe000ed00

0800e3c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e3cc:	4b04      	ldr	r3, [pc, #16]	; (800e3e0 <__NVIC_GetPriorityGrouping+0x18>)
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	0a1b      	lsrs	r3, r3, #8
 800e3d2:	f003 0307 	and.w	r3, r3, #7
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	e000ed00 	.word	0xe000ed00

0800e3e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e3ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	db0b      	blt.n	800e40e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e3f6:	79fb      	ldrb	r3, [r7, #7]
 800e3f8:	f003 021f 	and.w	r2, r3, #31
 800e3fc:	4907      	ldr	r1, [pc, #28]	; (800e41c <__NVIC_EnableIRQ+0x38>)
 800e3fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e402:	095b      	lsrs	r3, r3, #5
 800e404:	2001      	movs	r0, #1
 800e406:	fa00 f202 	lsl.w	r2, r0, r2
 800e40a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e40e:	bf00      	nop
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	e000e100 	.word	0xe000e100

0800e420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	4603      	mov	r3, r0
 800e428:	6039      	str	r1, [r7, #0]
 800e42a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e42c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e430:	2b00      	cmp	r3, #0
 800e432:	db0a      	blt.n	800e44a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	b2da      	uxtb	r2, r3
 800e438:	490c      	ldr	r1, [pc, #48]	; (800e46c <__NVIC_SetPriority+0x4c>)
 800e43a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e43e:	0112      	lsls	r2, r2, #4
 800e440:	b2d2      	uxtb	r2, r2
 800e442:	440b      	add	r3, r1
 800e444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e448:	e00a      	b.n	800e460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	4908      	ldr	r1, [pc, #32]	; (800e470 <__NVIC_SetPriority+0x50>)
 800e450:	79fb      	ldrb	r3, [r7, #7]
 800e452:	f003 030f 	and.w	r3, r3, #15
 800e456:	3b04      	subs	r3, #4
 800e458:	0112      	lsls	r2, r2, #4
 800e45a:	b2d2      	uxtb	r2, r2
 800e45c:	440b      	add	r3, r1
 800e45e:	761a      	strb	r2, [r3, #24]
}
 800e460:	bf00      	nop
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	e000e100 	.word	0xe000e100
 800e470:	e000ed00 	.word	0xe000ed00

0800e474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e474:	b480      	push	{r7}
 800e476:	b089      	sub	sp, #36	; 0x24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f003 0307 	and.w	r3, r3, #7
 800e486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	f1c3 0307 	rsb	r3, r3, #7
 800e48e:	2b04      	cmp	r3, #4
 800e490:	bf28      	it	cs
 800e492:	2304      	movcs	r3, #4
 800e494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	3304      	adds	r3, #4
 800e49a:	2b06      	cmp	r3, #6
 800e49c:	d902      	bls.n	800e4a4 <NVIC_EncodePriority+0x30>
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	3b03      	subs	r3, #3
 800e4a2:	e000      	b.n	800e4a6 <NVIC_EncodePriority+0x32>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e4a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b2:	43da      	mvns	r2, r3
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	401a      	ands	r2, r3
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e4bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e4c6:	43d9      	mvns	r1, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e4cc:	4313      	orrs	r3, r2
         );
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3724      	adds	r7, #36	; 0x24
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7ff ff4c 	bl	800e380 <__NVIC_SetPriorityGrouping>
}
 800e4e8:	bf00      	nop
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e4fe:	2300      	movs	r3, #0
 800e500:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e502:	f7ff ff61 	bl	800e3c8 <__NVIC_GetPriorityGrouping>
 800e506:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	68b9      	ldr	r1, [r7, #8]
 800e50c:	6978      	ldr	r0, [r7, #20]
 800e50e:	f7ff ffb1 	bl	800e474 <NVIC_EncodePriority>
 800e512:	4602      	mov	r2, r0
 800e514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e518:	4611      	mov	r1, r2
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff ff80 	bl	800e420 <__NVIC_SetPriority>
}
 800e520:	bf00      	nop
 800e522:	3718      	adds	r7, #24
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	4603      	mov	r3, r0
 800e530:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e536:	4618      	mov	r0, r3
 800e538:	f7ff ff54 	bl	800e3e4 <__NVIC_EnableIRQ>
}
 800e53c:	bf00      	nop
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e54c:	2300      	movs	r3, #0
 800e54e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800e550:	f7ff faf4 	bl	800db3c <HAL_GetTick>
 800e554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800e55c:	2301      	movs	r3, #1
 800e55e:	e099      	b.n	800e694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2202      	movs	r2, #2
 800e56c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f022 0201 	bic.w	r2, r2, #1
 800e57e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e580:	e00f      	b.n	800e5a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e582:	f7ff fadb 	bl	800db3c <HAL_GetTick>
 800e586:	4602      	mov	r2, r0
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	1ad3      	subs	r3, r2, r3
 800e58c:	2b05      	cmp	r3, #5
 800e58e:	d908      	bls.n	800e5a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2220      	movs	r2, #32
 800e594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2203      	movs	r2, #3
 800e59a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e59e:	2303      	movs	r3, #3
 800e5a0:	e078      	b.n	800e694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 0301 	and.w	r3, r3, #1
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e8      	bne.n	800e582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e5b8:	697a      	ldr	r2, [r7, #20]
 800e5ba:	4b38      	ldr	r3, [pc, #224]	; (800e69c <HAL_DMA_Init+0x158>)
 800e5bc:	4013      	ands	r3, r2
 800e5be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e5ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e5da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	699b      	ldr	r3, [r3, #24]
 800e5e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e5e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a1b      	ldr	r3, [r3, #32]
 800e5ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f8:	2b04      	cmp	r3, #4
 800e5fa:	d107      	bne.n	800e60c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e604:	4313      	orrs	r3, r2
 800e606:	697a      	ldr	r2, [r7, #20]
 800e608:	4313      	orrs	r3, r2
 800e60a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	695b      	ldr	r3, [r3, #20]
 800e61a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	f023 0307 	bic.w	r3, r3, #7
 800e622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e628:	697a      	ldr	r2, [r7, #20]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e632:	2b04      	cmp	r3, #4
 800e634:	d117      	bne.n	800e666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00e      	beq.n	800e666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 fa91 	bl	800eb70 <DMA_CheckFifoParam>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d008      	beq.n	800e666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2240      	movs	r2, #64	; 0x40
 800e658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2201      	movs	r2, #1
 800e65e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e662:	2301      	movs	r3, #1
 800e664:	e016      	b.n	800e694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	697a      	ldr	r2, [r7, #20]
 800e66c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 fa48 	bl	800eb04 <DMA_CalcBaseAndBitshift>
 800e674:	4603      	mov	r3, r0
 800e676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e67c:	223f      	movs	r2, #63	; 0x3f
 800e67e:	409a      	lsls	r2, r3
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3718      	adds	r7, #24
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	f010803f 	.word	0xf010803f

0800e6a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
 800e6ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d101      	bne.n	800e6c6 <HAL_DMA_Start_IT+0x26>
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	e040      	b.n	800e748 <HAL_DMA_Start_IT+0xa8>
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d12f      	bne.n	800e73a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2202      	movs	r2, #2
 800e6de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	68b9      	ldr	r1, [r7, #8]
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f000 f9da 	bl	800eaa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f8:	223f      	movs	r2, #63	; 0x3f
 800e6fa:	409a      	lsls	r2, r3
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0216 	orr.w	r2, r2, #22
 800e70e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e714:	2b00      	cmp	r3, #0
 800e716:	d007      	beq.n	800e728 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f042 0208 	orr.w	r2, r2, #8
 800e726:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f042 0201 	orr.w	r2, r2, #1
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	e005      	b.n	800e746 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e742:	2302      	movs	r3, #2
 800e744:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e746:	7dfb      	ldrb	r3, [r7, #23]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	2b02      	cmp	r3, #2
 800e762:	d004      	beq.n	800e76e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2280      	movs	r2, #128	; 0x80
 800e768:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	e00c      	b.n	800e788 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2205      	movs	r2, #5
 800e772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f022 0201 	bic.w	r2, r2, #1
 800e784:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e79c:	2300      	movs	r3, #0
 800e79e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e7a0:	4b92      	ldr	r3, [pc, #584]	; (800e9ec <HAL_DMA_IRQHandler+0x258>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a92      	ldr	r2, [pc, #584]	; (800e9f0 <HAL_DMA_IRQHandler+0x25c>)
 800e7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e7aa:	0a9b      	lsrs	r3, r3, #10
 800e7ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7be:	2208      	movs	r2, #8
 800e7c0:	409a      	lsls	r2, r3
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d01a      	beq.n	800e800 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f003 0304 	and.w	r3, r3, #4
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d013      	beq.n	800e800 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f022 0204 	bic.w	r2, r2, #4
 800e7e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7ec:	2208      	movs	r2, #8
 800e7ee:	409a      	lsls	r2, r3
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7f8:	f043 0201 	orr.w	r2, r3, #1
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e804:	2201      	movs	r2, #1
 800e806:	409a      	lsls	r2, r3
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	4013      	ands	r3, r2
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d012      	beq.n	800e836 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00b      	beq.n	800e836 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e822:	2201      	movs	r2, #1
 800e824:	409a      	lsls	r2, r3
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e82e:	f043 0202 	orr.w	r2, r3, #2
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e83a:	2204      	movs	r2, #4
 800e83c:	409a      	lsls	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	4013      	ands	r3, r2
 800e842:	2b00      	cmp	r3, #0
 800e844:	d012      	beq.n	800e86c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f003 0302 	and.w	r3, r3, #2
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00b      	beq.n	800e86c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e858:	2204      	movs	r2, #4
 800e85a:	409a      	lsls	r2, r3
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e864:	f043 0204 	orr.w	r2, r3, #4
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e870:	2210      	movs	r2, #16
 800e872:	409a      	lsls	r2, r3
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	4013      	ands	r3, r2
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d043      	beq.n	800e904 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f003 0308 	and.w	r3, r3, #8
 800e886:	2b00      	cmp	r3, #0
 800e888:	d03c      	beq.n	800e904 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e88e:	2210      	movs	r2, #16
 800e890:	409a      	lsls	r2, r3
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d018      	beq.n	800e8d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d108      	bne.n	800e8c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d024      	beq.n	800e904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	4798      	blx	r3
 800e8c2:	e01f      	b.n	800e904 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d01b      	beq.n	800e904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	4798      	blx	r3
 800e8d4:	e016      	b.n	800e904 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d107      	bne.n	800e8f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f022 0208 	bic.w	r2, r2, #8
 800e8f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d003      	beq.n	800e904 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e908:	2220      	movs	r2, #32
 800e90a:	409a      	lsls	r2, r3
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	4013      	ands	r3, r2
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 808e 	beq.w	800ea32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f003 0310 	and.w	r3, r3, #16
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 8086 	beq.w	800ea32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e92a:	2220      	movs	r2, #32
 800e92c:	409a      	lsls	r2, r3
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	2b05      	cmp	r3, #5
 800e93c:	d136      	bne.n	800e9ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f022 0216 	bic.w	r2, r2, #22
 800e94c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	695a      	ldr	r2, [r3, #20]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e95c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e962:	2b00      	cmp	r3, #0
 800e964:	d103      	bne.n	800e96e <HAL_DMA_IRQHandler+0x1da>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d007      	beq.n	800e97e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f022 0208 	bic.w	r2, r2, #8
 800e97c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e982:	223f      	movs	r2, #63	; 0x3f
 800e984:	409a      	lsls	r2, r3
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2201      	movs	r2, #1
 800e996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d07d      	beq.n	800ea9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	4798      	blx	r3
        }
        return;
 800e9aa:	e078      	b.n	800ea9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d01c      	beq.n	800e9f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d108      	bne.n	800e9da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d030      	beq.n	800ea32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	4798      	blx	r3
 800e9d8:	e02b      	b.n	800ea32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d027      	beq.n	800ea32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	4798      	blx	r3
 800e9ea:	e022      	b.n	800ea32 <HAL_DMA_IRQHandler+0x29e>
 800e9ec:	20000144 	.word	0x20000144
 800e9f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d10f      	bne.n	800ea22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f022 0210 	bic.w	r2, r2, #16
 800ea10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d003      	beq.n	800ea32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d032      	beq.n	800eaa0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea3e:	f003 0301 	and.w	r3, r3, #1
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d022      	beq.n	800ea8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2205      	movs	r2, #5
 800ea4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f022 0201 	bic.w	r2, r2, #1
 800ea5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	3301      	adds	r3, #1
 800ea62:	60bb      	str	r3, [r7, #8]
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d307      	bcc.n	800ea7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f003 0301 	and.w	r3, r3, #1
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1f2      	bne.n	800ea5e <HAL_DMA_IRQHandler+0x2ca>
 800ea78:	e000      	b.n	800ea7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ea7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d005      	beq.n	800eaa0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	4798      	blx	r3
 800ea9c:	e000      	b.n	800eaa0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ea9e:	bf00      	nop
    }
  }
}
 800eaa0:	3718      	adds	r7, #24
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop

0800eaa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
 800eab4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eac4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	683a      	ldr	r2, [r7, #0]
 800eacc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	2b40      	cmp	r3, #64	; 0x40
 800ead4:	d108      	bne.n	800eae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800eae6:	e007      	b.n	800eaf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	60da      	str	r2, [r3, #12]
}
 800eaf8:	bf00      	nop
 800eafa:	3714      	adds	r7, #20
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	3b10      	subs	r3, #16
 800eb14:	4a14      	ldr	r2, [pc, #80]	; (800eb68 <DMA_CalcBaseAndBitshift+0x64>)
 800eb16:	fba2 2303 	umull	r2, r3, r2, r3
 800eb1a:	091b      	lsrs	r3, r3, #4
 800eb1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800eb1e:	4a13      	ldr	r2, [pc, #76]	; (800eb6c <DMA_CalcBaseAndBitshift+0x68>)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	4413      	add	r3, r2
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	461a      	mov	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d909      	bls.n	800eb46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800eb3a:	f023 0303 	bic.w	r3, r3, #3
 800eb3e:	1d1a      	adds	r2, r3, #4
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	659a      	str	r2, [r3, #88]	; 0x58
 800eb44:	e007      	b.n	800eb56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800eb4e:	f023 0303 	bic.w	r3, r3, #3
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3714      	adds	r7, #20
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	aaaaaaab 	.word	0xaaaaaaab
 800eb6c:	0801c2d8 	.word	0x0801c2d8

0800eb70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d11f      	bne.n	800ebca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2b03      	cmp	r3, #3
 800eb8e:	d855      	bhi.n	800ec3c <DMA_CheckFifoParam+0xcc>
 800eb90:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <DMA_CheckFifoParam+0x28>)
 800eb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb96:	bf00      	nop
 800eb98:	0800eba9 	.word	0x0800eba9
 800eb9c:	0800ebbb 	.word	0x0800ebbb
 800eba0:	0800eba9 	.word	0x0800eba9
 800eba4:	0800ec3d 	.word	0x0800ec3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d045      	beq.n	800ec40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebb8:	e042      	b.n	800ec40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ebc2:	d13f      	bne.n	800ec44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebc8:	e03c      	b.n	800ec44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebd2:	d121      	bne.n	800ec18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d836      	bhi.n	800ec48 <DMA_CheckFifoParam+0xd8>
 800ebda:	a201      	add	r2, pc, #4	; (adr r2, 800ebe0 <DMA_CheckFifoParam+0x70>)
 800ebdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe0:	0800ebf1 	.word	0x0800ebf1
 800ebe4:	0800ebf7 	.word	0x0800ebf7
 800ebe8:	0800ebf1 	.word	0x0800ebf1
 800ebec:	0800ec09 	.word	0x0800ec09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	73fb      	strb	r3, [r7, #15]
      break;
 800ebf4:	e02f      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d024      	beq.n	800ec4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ec02:	2301      	movs	r3, #1
 800ec04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ec06:	e021      	b.n	800ec4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ec10:	d11e      	bne.n	800ec50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ec12:	2301      	movs	r3, #1
 800ec14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ec16:	e01b      	b.n	800ec50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2b02      	cmp	r3, #2
 800ec1c:	d902      	bls.n	800ec24 <DMA_CheckFifoParam+0xb4>
 800ec1e:	2b03      	cmp	r3, #3
 800ec20:	d003      	beq.n	800ec2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ec22:	e018      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	73fb      	strb	r3, [r7, #15]
      break;
 800ec28:	e015      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00e      	beq.n	800ec54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	73fb      	strb	r3, [r7, #15]
      break;
 800ec3a:	e00b      	b.n	800ec54 <DMA_CheckFifoParam+0xe4>
      break;
 800ec3c:	bf00      	nop
 800ec3e:	e00a      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
      break;
 800ec40:	bf00      	nop
 800ec42:	e008      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
      break;
 800ec44:	bf00      	nop
 800ec46:	e006      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
      break;
 800ec48:	bf00      	nop
 800ec4a:	e004      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
      break;
 800ec4c:	bf00      	nop
 800ec4e:	e002      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
      break;   
 800ec50:	bf00      	nop
 800ec52:	e000      	b.n	800ec56 <DMA_CheckFifoParam+0xe6>
      break;
 800ec54:	bf00      	nop
    }
  } 
  
  return status; 
 800ec56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3714      	adds	r7, #20
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ec72:	2301      	movs	r3, #1
 800ec74:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ec76:	4b23      	ldr	r3, [pc, #140]	; (800ed04 <HAL_FLASH_Program+0xa0>)
 800ec78:	7e1b      	ldrb	r3, [r3, #24]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d101      	bne.n	800ec82 <HAL_FLASH_Program+0x1e>
 800ec7e:	2302      	movs	r3, #2
 800ec80:	e03b      	b.n	800ecfa <HAL_FLASH_Program+0x96>
 800ec82:	4b20      	ldr	r3, [pc, #128]	; (800ed04 <HAL_FLASH_Program+0xa0>)
 800ec84:	2201      	movs	r2, #1
 800ec86:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ec88:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ec8c:	f000 f870 	bl	800ed70 <FLASH_WaitForLastOperation>
 800ec90:	4603      	mov	r3, r0
 800ec92:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800ec94:	7dfb      	ldrb	r3, [r7, #23]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d12b      	bne.n	800ecf2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d105      	bne.n	800ecac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800eca0:	783b      	ldrb	r3, [r7, #0]
 800eca2:	4619      	mov	r1, r3
 800eca4:	68b8      	ldr	r0, [r7, #8]
 800eca6:	f000 f919 	bl	800eedc <FLASH_Program_Byte>
 800ecaa:	e016      	b.n	800ecda <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d105      	bne.n	800ecbe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ecb2:	883b      	ldrh	r3, [r7, #0]
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	68b8      	ldr	r0, [r7, #8]
 800ecb8:	f000 f8ec 	bl	800ee94 <FLASH_Program_HalfWord>
 800ecbc:	e00d      	b.n	800ecda <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	d105      	bne.n	800ecd0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	68b8      	ldr	r0, [r7, #8]
 800ecca:	f000 f8c1 	bl	800ee50 <FLASH_Program_Word>
 800ecce:	e004      	b.n	800ecda <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ecd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecd4:	68b8      	ldr	r0, [r7, #8]
 800ecd6:	f000 f88b 	bl	800edf0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ecda:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ecde:	f000 f847 	bl	800ed70 <FLASH_WaitForLastOperation>
 800ece2:	4603      	mov	r3, r0
 800ece4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ece6:	4b08      	ldr	r3, [pc, #32]	; (800ed08 <HAL_FLASH_Program+0xa4>)
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	4a07      	ldr	r2, [pc, #28]	; (800ed08 <HAL_FLASH_Program+0xa4>)
 800ecec:	f023 0301 	bic.w	r3, r3, #1
 800ecf0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ecf2:	4b04      	ldr	r3, [pc, #16]	; (800ed04 <HAL_FLASH_Program+0xa0>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ecf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3718      	adds	r7, #24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	200053e0 	.word	0x200053e0
 800ed08:	40023c00 	.word	0x40023c00

0800ed0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ed12:	2300      	movs	r3, #0
 800ed14:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ed16:	4b0b      	ldr	r3, [pc, #44]	; (800ed44 <HAL_FLASH_Unlock+0x38>)
 800ed18:	691b      	ldr	r3, [r3, #16]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	da0b      	bge.n	800ed36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ed1e:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <HAL_FLASH_Unlock+0x38>)
 800ed20:	4a09      	ldr	r2, [pc, #36]	; (800ed48 <HAL_FLASH_Unlock+0x3c>)
 800ed22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ed24:	4b07      	ldr	r3, [pc, #28]	; (800ed44 <HAL_FLASH_Unlock+0x38>)
 800ed26:	4a09      	ldr	r2, [pc, #36]	; (800ed4c <HAL_FLASH_Unlock+0x40>)
 800ed28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ed2a:	4b06      	ldr	r3, [pc, #24]	; (800ed44 <HAL_FLASH_Unlock+0x38>)
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	da01      	bge.n	800ed36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800ed32:	2301      	movs	r3, #1
 800ed34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800ed36:	79fb      	ldrb	r3, [r7, #7]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr
 800ed44:	40023c00 	.word	0x40023c00
 800ed48:	45670123 	.word	0x45670123
 800ed4c:	cdef89ab 	.word	0xcdef89ab

0800ed50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ed50:	b480      	push	{r7}
 800ed52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800ed54:	4b05      	ldr	r3, [pc, #20]	; (800ed6c <HAL_FLASH_Lock+0x1c>)
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	4a04      	ldr	r2, [pc, #16]	; (800ed6c <HAL_FLASH_Lock+0x1c>)
 800ed5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ed5e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	40023c00 	.word	0x40023c00

0800ed70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ed7c:	4b1a      	ldr	r3, [pc, #104]	; (800ede8 <FLASH_WaitForLastOperation+0x78>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ed82:	f7fe fedb 	bl	800db3c <HAL_GetTick>
 800ed86:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ed88:	e010      	b.n	800edac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed90:	d00c      	beq.n	800edac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d007      	beq.n	800eda8 <FLASH_WaitForLastOperation+0x38>
 800ed98:	f7fe fed0 	bl	800db3c <HAL_GetTick>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d201      	bcs.n	800edac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800eda8:	2303      	movs	r3, #3
 800edaa:	e019      	b.n	800ede0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800edac:	4b0f      	ldr	r3, [pc, #60]	; (800edec <FLASH_WaitForLastOperation+0x7c>)
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d1e8      	bne.n	800ed8a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800edb8:	4b0c      	ldr	r3, [pc, #48]	; (800edec <FLASH_WaitForLastOperation+0x7c>)
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	f003 0301 	and.w	r3, r3, #1
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d002      	beq.n	800edca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800edc4:	4b09      	ldr	r3, [pc, #36]	; (800edec <FLASH_WaitForLastOperation+0x7c>)
 800edc6:	2201      	movs	r2, #1
 800edc8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800edca:	4b08      	ldr	r3, [pc, #32]	; (800edec <FLASH_WaitForLastOperation+0x7c>)
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d003      	beq.n	800edde <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800edd6:	f000 f8a3 	bl	800ef20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800edda:	2301      	movs	r3, #1
 800eddc:	e000      	b.n	800ede0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800edde:	2300      	movs	r3, #0
  
}  
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	200053e0 	.word	0x200053e0
 800edec:	40023c00 	.word	0x40023c00

0800edf0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800edf0:	b490      	push	{r4, r7}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800edfc:	4b13      	ldr	r3, [pc, #76]	; (800ee4c <FLASH_Program_DoubleWord+0x5c>)
 800edfe:	691b      	ldr	r3, [r3, #16]
 800ee00:	4a12      	ldr	r2, [pc, #72]	; (800ee4c <FLASH_Program_DoubleWord+0x5c>)
 800ee02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ee08:	4b10      	ldr	r3, [pc, #64]	; (800ee4c <FLASH_Program_DoubleWord+0x5c>)
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	4a0f      	ldr	r2, [pc, #60]	; (800ee4c <FLASH_Program_DoubleWord+0x5c>)
 800ee0e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ee12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ee14:	4b0d      	ldr	r3, [pc, #52]	; (800ee4c <FLASH_Program_DoubleWord+0x5c>)
 800ee16:	691b      	ldr	r3, [r3, #16]
 800ee18:	4a0c      	ldr	r2, [pc, #48]	; (800ee4c <FLASH_Program_DoubleWord+0x5c>)
 800ee1a:	f043 0301 	orr.w	r3, r3, #1
 800ee1e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	683a      	ldr	r2, [r7, #0]
 800ee24:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800ee26:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ee2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ee2e:	f04f 0300 	mov.w	r3, #0
 800ee32:	f04f 0400 	mov.w	r4, #0
 800ee36:	0013      	movs	r3, r2
 800ee38:	2400      	movs	r4, #0
 800ee3a:	68fa      	ldr	r2, [r7, #12]
 800ee3c:	3204      	adds	r2, #4
 800ee3e:	6013      	str	r3, [r2, #0]
}
 800ee40:	bf00      	nop
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bc90      	pop	{r4, r7}
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop
 800ee4c:	40023c00 	.word	0x40023c00

0800ee50 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee5a:	4b0d      	ldr	r3, [pc, #52]	; (800ee90 <FLASH_Program_Word+0x40>)
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	4a0c      	ldr	r2, [pc, #48]	; (800ee90 <FLASH_Program_Word+0x40>)
 800ee60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ee66:	4b0a      	ldr	r3, [pc, #40]	; (800ee90 <FLASH_Program_Word+0x40>)
 800ee68:	691b      	ldr	r3, [r3, #16]
 800ee6a:	4a09      	ldr	r2, [pc, #36]	; (800ee90 <FLASH_Program_Word+0x40>)
 800ee6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ee72:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <FLASH_Program_Word+0x40>)
 800ee74:	691b      	ldr	r3, [r3, #16]
 800ee76:	4a06      	ldr	r2, [pc, #24]	; (800ee90 <FLASH_Program_Word+0x40>)
 800ee78:	f043 0301 	orr.w	r3, r3, #1
 800ee7c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	683a      	ldr	r2, [r7, #0]
 800ee82:	601a      	str	r2, [r3, #0]
}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	40023c00 	.word	0x40023c00

0800ee94 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800eea0:	4b0d      	ldr	r3, [pc, #52]	; (800eed8 <FLASH_Program_HalfWord+0x44>)
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	4a0c      	ldr	r2, [pc, #48]	; (800eed8 <FLASH_Program_HalfWord+0x44>)
 800eea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eeaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800eeac:	4b0a      	ldr	r3, [pc, #40]	; (800eed8 <FLASH_Program_HalfWord+0x44>)
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	4a09      	ldr	r2, [pc, #36]	; (800eed8 <FLASH_Program_HalfWord+0x44>)
 800eeb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eeb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800eeb8:	4b07      	ldr	r3, [pc, #28]	; (800eed8 <FLASH_Program_HalfWord+0x44>)
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	4a06      	ldr	r2, [pc, #24]	; (800eed8 <FLASH_Program_HalfWord+0x44>)
 800eebe:	f043 0301 	orr.w	r3, r3, #1
 800eec2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	887a      	ldrh	r2, [r7, #2]
 800eec8:	801a      	strh	r2, [r3, #0]
}
 800eeca:	bf00      	nop
 800eecc:	370c      	adds	r7, #12
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	40023c00 	.word	0x40023c00

0800eedc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	460b      	mov	r3, r1
 800eee6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800eee8:	4b0c      	ldr	r3, [pc, #48]	; (800ef1c <FLASH_Program_Byte+0x40>)
 800eeea:	691b      	ldr	r3, [r3, #16]
 800eeec:	4a0b      	ldr	r2, [pc, #44]	; (800ef1c <FLASH_Program_Byte+0x40>)
 800eeee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800eef4:	4b09      	ldr	r3, [pc, #36]	; (800ef1c <FLASH_Program_Byte+0x40>)
 800eef6:	4a09      	ldr	r2, [pc, #36]	; (800ef1c <FLASH_Program_Byte+0x40>)
 800eef8:	691b      	ldr	r3, [r3, #16]
 800eefa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800eefc:	4b07      	ldr	r3, [pc, #28]	; (800ef1c <FLASH_Program_Byte+0x40>)
 800eefe:	691b      	ldr	r3, [r3, #16]
 800ef00:	4a06      	ldr	r2, [pc, #24]	; (800ef1c <FLASH_Program_Byte+0x40>)
 800ef02:	f043 0301 	orr.w	r3, r3, #1
 800ef06:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	78fa      	ldrb	r2, [r7, #3]
 800ef0c:	701a      	strb	r2, [r3, #0]
}
 800ef0e:	bf00      	nop
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	40023c00 	.word	0x40023c00

0800ef20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ef20:	b480      	push	{r7}
 800ef22:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ef24:	4b27      	ldr	r3, [pc, #156]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	f003 0310 	and.w	r3, r3, #16
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d008      	beq.n	800ef42 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ef30:	4b25      	ldr	r3, [pc, #148]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800ef32:	69db      	ldr	r3, [r3, #28]
 800ef34:	f043 0310 	orr.w	r3, r3, #16
 800ef38:	4a23      	ldr	r2, [pc, #140]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800ef3a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ef3c:	4b21      	ldr	r3, [pc, #132]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef3e:	2210      	movs	r2, #16
 800ef40:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ef42:	4b20      	ldr	r3, [pc, #128]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	f003 0320 	and.w	r3, r3, #32
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d008      	beq.n	800ef60 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ef4e:	4b1e      	ldr	r3, [pc, #120]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800ef50:	69db      	ldr	r3, [r3, #28]
 800ef52:	f043 0308 	orr.w	r3, r3, #8
 800ef56:	4a1c      	ldr	r2, [pc, #112]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800ef58:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ef5a:	4b1a      	ldr	r3, [pc, #104]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef5c:	2220      	movs	r2, #32
 800ef5e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ef60:	4b18      	ldr	r3, [pc, #96]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d008      	beq.n	800ef7e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ef6c:	4b16      	ldr	r3, [pc, #88]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800ef6e:	69db      	ldr	r3, [r3, #28]
 800ef70:	f043 0304 	orr.w	r3, r3, #4
 800ef74:	4a14      	ldr	r2, [pc, #80]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800ef76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ef78:	4b12      	ldr	r3, [pc, #72]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef7a:	2240      	movs	r2, #64	; 0x40
 800ef7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ef7e:	4b11      	ldr	r3, [pc, #68]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d008      	beq.n	800ef9c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ef8a:	4b0f      	ldr	r3, [pc, #60]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800ef8c:	69db      	ldr	r3, [r3, #28]
 800ef8e:	f043 0302 	orr.w	r3, r3, #2
 800ef92:	4a0d      	ldr	r2, [pc, #52]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800ef94:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ef96:	4b0b      	ldr	r3, [pc, #44]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef98:	2280      	movs	r2, #128	; 0x80
 800ef9a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ef9c:	4b09      	ldr	r3, [pc, #36]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	f003 0302 	and.w	r3, r3, #2
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d008      	beq.n	800efba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800efa8:	4b07      	ldr	r3, [pc, #28]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800efaa:	69db      	ldr	r3, [r3, #28]
 800efac:	f043 0320 	orr.w	r3, r3, #32
 800efb0:	4a05      	ldr	r2, [pc, #20]	; (800efc8 <FLASH_SetErrorCode+0xa8>)
 800efb2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800efb4:	4b03      	ldr	r3, [pc, #12]	; (800efc4 <FLASH_SetErrorCode+0xa4>)
 800efb6:	2202      	movs	r2, #2
 800efb8:	60da      	str	r2, [r3, #12]
  }
}
 800efba:	bf00      	nop
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr
 800efc4:	40023c00 	.word	0x40023c00
 800efc8:	200053e0 	.word	0x200053e0

0800efcc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	460b      	mov	r3, r1
 800efd6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800efd8:	2300      	movs	r3, #0
 800efda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800efdc:	78fb      	ldrb	r3, [r7, #3]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800efe2:	2300      	movs	r3, #0
 800efe4:	60fb      	str	r3, [r7, #12]
 800efe6:	e010      	b.n	800f00a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800efe8:	78fb      	ldrb	r3, [r7, #3]
 800efea:	2b01      	cmp	r3, #1
 800efec:	d103      	bne.n	800eff6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800efee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eff2:	60fb      	str	r3, [r7, #12]
 800eff4:	e009      	b.n	800f00a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800eff6:	78fb      	ldrb	r3, [r7, #3]
 800eff8:	2b02      	cmp	r3, #2
 800effa:	d103      	bne.n	800f004 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800effc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f000:	60fb      	str	r3, [r7, #12]
 800f002:	e002      	b.n	800f00a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800f004:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f008:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f00a:	4b13      	ldr	r3, [pc, #76]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f00c:	691b      	ldr	r3, [r3, #16]
 800f00e:	4a12      	ldr	r2, [pc, #72]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f014:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800f016:	4b10      	ldr	r3, [pc, #64]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f018:	691a      	ldr	r2, [r3, #16]
 800f01a:	490f      	ldr	r1, [pc, #60]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	4313      	orrs	r3, r2
 800f020:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800f022:	4b0d      	ldr	r3, [pc, #52]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f024:	691b      	ldr	r3, [r3, #16]
 800f026:	4a0c      	ldr	r2, [pc, #48]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f028:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f02c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800f02e:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f030:	691a      	ldr	r2, [r3, #16]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	00db      	lsls	r3, r3, #3
 800f036:	4313      	orrs	r3, r2
 800f038:	4a07      	ldr	r2, [pc, #28]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f03a:	f043 0302 	orr.w	r3, r3, #2
 800f03e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800f040:	4b05      	ldr	r3, [pc, #20]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	4a04      	ldr	r2, [pc, #16]	; (800f058 <FLASH_Erase_Sector+0x8c>)
 800f046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f04a:	6113      	str	r3, [r2, #16]
}
 800f04c:	bf00      	nop
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	40023c00 	.word	0x40023c00

0800f05c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b089      	sub	sp, #36	; 0x24
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f066:	2300      	movs	r3, #0
 800f068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f06a:	2300      	movs	r3, #0
 800f06c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f06e:	2300      	movs	r3, #0
 800f070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f072:	2300      	movs	r3, #0
 800f074:	61fb      	str	r3, [r7, #28]
 800f076:	e16b      	b.n	800f350 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f078:	2201      	movs	r2, #1
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	fa02 f303 	lsl.w	r3, r2, r3
 800f080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	4013      	ands	r3, r2
 800f08a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f08c:	693a      	ldr	r2, [r7, #16]
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	429a      	cmp	r2, r3
 800f092:	f040 815a 	bne.w	800f34a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d00b      	beq.n	800f0b6 <HAL_GPIO_Init+0x5a>
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d007      	beq.n	800f0b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f0aa:	2b11      	cmp	r3, #17
 800f0ac:	d003      	beq.n	800f0b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	2b12      	cmp	r3, #18
 800f0b4:	d130      	bne.n	800f118 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	2203      	movs	r2, #3
 800f0c2:	fa02 f303 	lsl.w	r3, r2, r3
 800f0c6:	43db      	mvns	r3, r3
 800f0c8:	69ba      	ldr	r2, [r7, #24]
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	68da      	ldr	r2, [r3, #12]
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f0da:	69ba      	ldr	r2, [r7, #24]
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	69ba      	ldr	r2, [r7, #24]
 800f0e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0f4:	43db      	mvns	r3, r3
 800f0f6:	69ba      	ldr	r2, [r7, #24]
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	091b      	lsrs	r3, r3, #4
 800f102:	f003 0201 	and.w	r2, r3, #1
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	fa02 f303 	lsl.w	r3, r2, r3
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	4313      	orrs	r3, r2
 800f110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	69ba      	ldr	r2, [r7, #24]
 800f116:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	2203      	movs	r2, #3
 800f124:	fa02 f303 	lsl.w	r3, r2, r3
 800f128:	43db      	mvns	r3, r3
 800f12a:	69ba      	ldr	r2, [r7, #24]
 800f12c:	4013      	ands	r3, r2
 800f12e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	689a      	ldr	r2, [r3, #8]
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	005b      	lsls	r3, r3, #1
 800f138:	fa02 f303 	lsl.w	r3, r2, r3
 800f13c:	69ba      	ldr	r2, [r7, #24]
 800f13e:	4313      	orrs	r3, r2
 800f140:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	69ba      	ldr	r2, [r7, #24]
 800f146:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	2b02      	cmp	r3, #2
 800f14e:	d003      	beq.n	800f158 <HAL_GPIO_Init+0xfc>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	2b12      	cmp	r3, #18
 800f156:	d123      	bne.n	800f1a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	08da      	lsrs	r2, r3, #3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	3208      	adds	r2, #8
 800f160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	f003 0307 	and.w	r3, r3, #7
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	220f      	movs	r2, #15
 800f170:	fa02 f303 	lsl.w	r3, r2, r3
 800f174:	43db      	mvns	r3, r3
 800f176:	69ba      	ldr	r2, [r7, #24]
 800f178:	4013      	ands	r3, r2
 800f17a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	691a      	ldr	r2, [r3, #16]
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	f003 0307 	and.w	r3, r3, #7
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	fa02 f303 	lsl.w	r3, r2, r3
 800f18c:	69ba      	ldr	r2, [r7, #24]
 800f18e:	4313      	orrs	r3, r2
 800f190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	08da      	lsrs	r2, r3, #3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	3208      	adds	r2, #8
 800f19a:	69b9      	ldr	r1, [r7, #24]
 800f19c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	005b      	lsls	r3, r3, #1
 800f1aa:	2203      	movs	r2, #3
 800f1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f1b0:	43db      	mvns	r3, r3
 800f1b2:	69ba      	ldr	r2, [r7, #24]
 800f1b4:	4013      	ands	r3, r2
 800f1b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	f003 0203 	and.w	r2, r3, #3
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	005b      	lsls	r3, r3, #1
 800f1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f1c8:	69ba      	ldr	r2, [r7, #24]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	69ba      	ldr	r2, [r7, #24]
 800f1d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f000 80b4 	beq.w	800f34a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	60fb      	str	r3, [r7, #12]
 800f1e6:	4b5f      	ldr	r3, [pc, #380]	; (800f364 <HAL_GPIO_Init+0x308>)
 800f1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ea:	4a5e      	ldr	r2, [pc, #376]	; (800f364 <HAL_GPIO_Init+0x308>)
 800f1ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f1f0:	6453      	str	r3, [r2, #68]	; 0x44
 800f1f2:	4b5c      	ldr	r3, [pc, #368]	; (800f364 <HAL_GPIO_Init+0x308>)
 800f1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1fa:	60fb      	str	r3, [r7, #12]
 800f1fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f1fe:	4a5a      	ldr	r2, [pc, #360]	; (800f368 <HAL_GPIO_Init+0x30c>)
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	089b      	lsrs	r3, r3, #2
 800f204:	3302      	adds	r3, #2
 800f206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f20a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	f003 0303 	and.w	r3, r3, #3
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	220f      	movs	r2, #15
 800f216:	fa02 f303 	lsl.w	r3, r2, r3
 800f21a:	43db      	mvns	r3, r3
 800f21c:	69ba      	ldr	r2, [r7, #24]
 800f21e:	4013      	ands	r3, r2
 800f220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a51      	ldr	r2, [pc, #324]	; (800f36c <HAL_GPIO_Init+0x310>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d02b      	beq.n	800f282 <HAL_GPIO_Init+0x226>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4a50      	ldr	r2, [pc, #320]	; (800f370 <HAL_GPIO_Init+0x314>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d025      	beq.n	800f27e <HAL_GPIO_Init+0x222>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4a4f      	ldr	r2, [pc, #316]	; (800f374 <HAL_GPIO_Init+0x318>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d01f      	beq.n	800f27a <HAL_GPIO_Init+0x21e>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4a4e      	ldr	r2, [pc, #312]	; (800f378 <HAL_GPIO_Init+0x31c>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d019      	beq.n	800f276 <HAL_GPIO_Init+0x21a>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4a4d      	ldr	r2, [pc, #308]	; (800f37c <HAL_GPIO_Init+0x320>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d013      	beq.n	800f272 <HAL_GPIO_Init+0x216>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4a4c      	ldr	r2, [pc, #304]	; (800f380 <HAL_GPIO_Init+0x324>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d00d      	beq.n	800f26e <HAL_GPIO_Init+0x212>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4a4b      	ldr	r2, [pc, #300]	; (800f384 <HAL_GPIO_Init+0x328>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d007      	beq.n	800f26a <HAL_GPIO_Init+0x20e>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4a4a      	ldr	r2, [pc, #296]	; (800f388 <HAL_GPIO_Init+0x32c>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d101      	bne.n	800f266 <HAL_GPIO_Init+0x20a>
 800f262:	2307      	movs	r3, #7
 800f264:	e00e      	b.n	800f284 <HAL_GPIO_Init+0x228>
 800f266:	2308      	movs	r3, #8
 800f268:	e00c      	b.n	800f284 <HAL_GPIO_Init+0x228>
 800f26a:	2306      	movs	r3, #6
 800f26c:	e00a      	b.n	800f284 <HAL_GPIO_Init+0x228>
 800f26e:	2305      	movs	r3, #5
 800f270:	e008      	b.n	800f284 <HAL_GPIO_Init+0x228>
 800f272:	2304      	movs	r3, #4
 800f274:	e006      	b.n	800f284 <HAL_GPIO_Init+0x228>
 800f276:	2303      	movs	r3, #3
 800f278:	e004      	b.n	800f284 <HAL_GPIO_Init+0x228>
 800f27a:	2302      	movs	r3, #2
 800f27c:	e002      	b.n	800f284 <HAL_GPIO_Init+0x228>
 800f27e:	2301      	movs	r3, #1
 800f280:	e000      	b.n	800f284 <HAL_GPIO_Init+0x228>
 800f282:	2300      	movs	r3, #0
 800f284:	69fa      	ldr	r2, [r7, #28]
 800f286:	f002 0203 	and.w	r2, r2, #3
 800f28a:	0092      	lsls	r2, r2, #2
 800f28c:	4093      	lsls	r3, r2
 800f28e:	69ba      	ldr	r2, [r7, #24]
 800f290:	4313      	orrs	r3, r2
 800f292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f294:	4934      	ldr	r1, [pc, #208]	; (800f368 <HAL_GPIO_Init+0x30c>)
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	089b      	lsrs	r3, r3, #2
 800f29a:	3302      	adds	r3, #2
 800f29c:	69ba      	ldr	r2, [r7, #24]
 800f29e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f2a2:	4b3a      	ldr	r3, [pc, #232]	; (800f38c <HAL_GPIO_Init+0x330>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	43db      	mvns	r3, r3
 800f2ac:	69ba      	ldr	r2, [r7, #24]
 800f2ae:	4013      	ands	r3, r2
 800f2b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d003      	beq.n	800f2c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800f2be:	69ba      	ldr	r2, [r7, #24]
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f2c6:	4a31      	ldr	r2, [pc, #196]	; (800f38c <HAL_GPIO_Init+0x330>)
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800f2cc:	4b2f      	ldr	r3, [pc, #188]	; (800f38c <HAL_GPIO_Init+0x330>)
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	43db      	mvns	r3, r3
 800f2d6:	69ba      	ldr	r2, [r7, #24]
 800f2d8:	4013      	ands	r3, r2
 800f2da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d003      	beq.n	800f2f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800f2e8:	69ba      	ldr	r2, [r7, #24]
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f2f0:	4a26      	ldr	r2, [pc, #152]	; (800f38c <HAL_GPIO_Init+0x330>)
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f2f6:	4b25      	ldr	r3, [pc, #148]	; (800f38c <HAL_GPIO_Init+0x330>)
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	43db      	mvns	r3, r3
 800f300:	69ba      	ldr	r2, [r7, #24]
 800f302:	4013      	ands	r3, r2
 800f304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800f312:	69ba      	ldr	r2, [r7, #24]
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	4313      	orrs	r3, r2
 800f318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f31a:	4a1c      	ldr	r2, [pc, #112]	; (800f38c <HAL_GPIO_Init+0x330>)
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f320:	4b1a      	ldr	r3, [pc, #104]	; (800f38c <HAL_GPIO_Init+0x330>)
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	43db      	mvns	r3, r3
 800f32a:	69ba      	ldr	r2, [r7, #24]
 800f32c:	4013      	ands	r3, r2
 800f32e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d003      	beq.n	800f344 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800f33c:	69ba      	ldr	r2, [r7, #24]
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	4313      	orrs	r3, r2
 800f342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f344:	4a11      	ldr	r2, [pc, #68]	; (800f38c <HAL_GPIO_Init+0x330>)
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	3301      	adds	r3, #1
 800f34e:	61fb      	str	r3, [r7, #28]
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	2b0f      	cmp	r3, #15
 800f354:	f67f ae90 	bls.w	800f078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f358:	bf00      	nop
 800f35a:	3724      	adds	r7, #36	; 0x24
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	40023800 	.word	0x40023800
 800f368:	40013800 	.word	0x40013800
 800f36c:	40020000 	.word	0x40020000
 800f370:	40020400 	.word	0x40020400
 800f374:	40020800 	.word	0x40020800
 800f378:	40020c00 	.word	0x40020c00
 800f37c:	40021000 	.word	0x40021000
 800f380:	40021400 	.word	0x40021400
 800f384:	40021800 	.word	0x40021800
 800f388:	40021c00 	.word	0x40021c00
 800f38c:	40013c00 	.word	0x40013c00

0800f390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	460b      	mov	r3, r1
 800f39a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	691a      	ldr	r2, [r3, #16]
 800f3a0:	887b      	ldrh	r3, [r7, #2]
 800f3a2:	4013      	ands	r3, r2
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d002      	beq.n	800f3ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	73fb      	strb	r3, [r7, #15]
 800f3ac:	e001      	b.n	800f3b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	807b      	strh	r3, [r7, #2]
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f3d0:	787b      	ldrb	r3, [r7, #1]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d003      	beq.n	800f3de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f3d6:	887a      	ldrh	r2, [r7, #2]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f3dc:	e003      	b.n	800f3e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f3de:	887b      	ldrh	r3, [r7, #2]
 800f3e0:	041a      	lsls	r2, r3, #16
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	619a      	str	r2, [r3, #24]
}
 800f3e6:	bf00      	nop
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
	...

0800f3f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d101      	bne.n	800f406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f402:	2301      	movs	r3, #1
 800f404:	e11f      	b.n	800f646 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d106      	bne.n	800f420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7f6 ffae 	bl	800637c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2224      	movs	r2, #36	; 0x24
 800f424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f022 0201 	bic.w	r2, r2, #1
 800f436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800f458:	f001 fcaa 	bl	8010db0 <HAL_RCC_GetPCLK1Freq>
 800f45c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	4a7b      	ldr	r2, [pc, #492]	; (800f650 <HAL_I2C_Init+0x25c>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d807      	bhi.n	800f478 <HAL_I2C_Init+0x84>
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	4a7a      	ldr	r2, [pc, #488]	; (800f654 <HAL_I2C_Init+0x260>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	bf94      	ite	ls
 800f470:	2301      	movls	r3, #1
 800f472:	2300      	movhi	r3, #0
 800f474:	b2db      	uxtb	r3, r3
 800f476:	e006      	b.n	800f486 <HAL_I2C_Init+0x92>
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4a77      	ldr	r2, [pc, #476]	; (800f658 <HAL_I2C_Init+0x264>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	bf94      	ite	ls
 800f480:	2301      	movls	r3, #1
 800f482:	2300      	movhi	r3, #0
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d001      	beq.n	800f48e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e0db      	b.n	800f646 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	4a72      	ldr	r2, [pc, #456]	; (800f65c <HAL_I2C_Init+0x268>)
 800f492:	fba2 2303 	umull	r2, r3, r2, r3
 800f496:	0c9b      	lsrs	r3, r3, #18
 800f498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	430a      	orrs	r2, r1
 800f4ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	4a64      	ldr	r2, [pc, #400]	; (800f650 <HAL_I2C_Init+0x25c>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d802      	bhi.n	800f4c8 <HAL_I2C_Init+0xd4>
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	e009      	b.n	800f4dc <HAL_I2C_Init+0xe8>
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f4ce:	fb02 f303 	mul.w	r3, r2, r3
 800f4d2:	4a63      	ldr	r2, [pc, #396]	; (800f660 <HAL_I2C_Init+0x26c>)
 800f4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f4d8:	099b      	lsrs	r3, r3, #6
 800f4da:	3301      	adds	r3, #1
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	6812      	ldr	r2, [r2, #0]
 800f4e0:	430b      	orrs	r3, r1
 800f4e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	69db      	ldr	r3, [r3, #28]
 800f4ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800f4ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	4956      	ldr	r1, [pc, #344]	; (800f650 <HAL_I2C_Init+0x25c>)
 800f4f8:	428b      	cmp	r3, r1
 800f4fa:	d80d      	bhi.n	800f518 <HAL_I2C_Init+0x124>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	1e59      	subs	r1, r3, #1
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	005b      	lsls	r3, r3, #1
 800f506:	fbb1 f3f3 	udiv	r3, r1, r3
 800f50a:	3301      	adds	r3, #1
 800f50c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f510:	2b04      	cmp	r3, #4
 800f512:	bf38      	it	cc
 800f514:	2304      	movcc	r3, #4
 800f516:	e04f      	b.n	800f5b8 <HAL_I2C_Init+0x1c4>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d111      	bne.n	800f544 <HAL_I2C_Init+0x150>
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	1e58      	subs	r0, r3, #1
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6859      	ldr	r1, [r3, #4]
 800f528:	460b      	mov	r3, r1
 800f52a:	005b      	lsls	r3, r3, #1
 800f52c:	440b      	add	r3, r1
 800f52e:	fbb0 f3f3 	udiv	r3, r0, r3
 800f532:	3301      	adds	r3, #1
 800f534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f538:	2b00      	cmp	r3, #0
 800f53a:	bf0c      	ite	eq
 800f53c:	2301      	moveq	r3, #1
 800f53e:	2300      	movne	r3, #0
 800f540:	b2db      	uxtb	r3, r3
 800f542:	e012      	b.n	800f56a <HAL_I2C_Init+0x176>
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	1e58      	subs	r0, r3, #1
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6859      	ldr	r1, [r3, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	440b      	add	r3, r1
 800f552:	0099      	lsls	r1, r3, #2
 800f554:	440b      	add	r3, r1
 800f556:	fbb0 f3f3 	udiv	r3, r0, r3
 800f55a:	3301      	adds	r3, #1
 800f55c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f560:	2b00      	cmp	r3, #0
 800f562:	bf0c      	ite	eq
 800f564:	2301      	moveq	r3, #1
 800f566:	2300      	movne	r3, #0
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <HAL_I2C_Init+0x17e>
 800f56e:	2301      	movs	r3, #1
 800f570:	e022      	b.n	800f5b8 <HAL_I2C_Init+0x1c4>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d10e      	bne.n	800f598 <HAL_I2C_Init+0x1a4>
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	1e58      	subs	r0, r3, #1
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6859      	ldr	r1, [r3, #4]
 800f582:	460b      	mov	r3, r1
 800f584:	005b      	lsls	r3, r3, #1
 800f586:	440b      	add	r3, r1
 800f588:	fbb0 f3f3 	udiv	r3, r0, r3
 800f58c:	3301      	adds	r3, #1
 800f58e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f596:	e00f      	b.n	800f5b8 <HAL_I2C_Init+0x1c4>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	1e58      	subs	r0, r3, #1
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6859      	ldr	r1, [r3, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	440b      	add	r3, r1
 800f5a6:	0099      	lsls	r1, r3, #2
 800f5a8:	440b      	add	r3, r1
 800f5aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f5b8:	6879      	ldr	r1, [r7, #4]
 800f5ba:	6809      	ldr	r1, [r1, #0]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	69da      	ldr	r2, [r3, #28]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6a1b      	ldr	r3, [r3, #32]
 800f5d2:	431a      	orrs	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	430a      	orrs	r2, r1
 800f5da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800f5e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	6911      	ldr	r1, [r2, #16]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	68d2      	ldr	r2, [r2, #12]
 800f5f2:	4311      	orrs	r1, r2
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	6812      	ldr	r2, [r2, #0]
 800f5f8:	430b      	orrs	r3, r1
 800f5fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	695a      	ldr	r2, [r3, #20]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	699b      	ldr	r3, [r3, #24]
 800f60e:	431a      	orrs	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	430a      	orrs	r2, r1
 800f616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f042 0201 	orr.w	r2, r2, #1
 800f626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2220      	movs	r2, #32
 800f632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	000186a0 	.word	0x000186a0
 800f654:	001e847f 	.word	0x001e847f
 800f658:	003d08ff 	.word	0x003d08ff
 800f65c:	431bde83 	.word	0x431bde83
 800f660:	10624dd3 	.word	0x10624dd3

0800f664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b088      	sub	sp, #32
 800f668:	af02      	add	r7, sp, #8
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	607a      	str	r2, [r7, #4]
 800f66e:	461a      	mov	r2, r3
 800f670:	460b      	mov	r3, r1
 800f672:	817b      	strh	r3, [r7, #10]
 800f674:	4613      	mov	r3, r2
 800f676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800f678:	f7fe fa60 	bl	800db3c <HAL_GetTick>
 800f67c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f684:	b2db      	uxtb	r3, r3
 800f686:	2b20      	cmp	r3, #32
 800f688:	f040 80e0 	bne.w	800f84c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	2319      	movs	r3, #25
 800f692:	2201      	movs	r2, #1
 800f694:	4970      	ldr	r1, [pc, #448]	; (800f858 <HAL_I2C_Master_Transmit+0x1f4>)
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f000 fc56 	bl	800ff48 <I2C_WaitOnFlagUntilTimeout>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d001      	beq.n	800f6a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800f6a2:	2302      	movs	r3, #2
 800f6a4:	e0d3      	b.n	800f84e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d101      	bne.n	800f6b4 <HAL_I2C_Master_Transmit+0x50>
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	e0cc      	b.n	800f84e <HAL_I2C_Master_Transmit+0x1ea>
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 0301 	and.w	r3, r3, #1
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d007      	beq.n	800f6da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f042 0201 	orr.w	r2, r2, #1
 800f6d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f6e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2221      	movs	r2, #33	; 0x21
 800f6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2210      	movs	r2, #16
 800f6f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	893a      	ldrh	r2, [r7, #8]
 800f70a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f710:	b29a      	uxth	r2, r3
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	4a50      	ldr	r2, [pc, #320]	; (800f85c <HAL_I2C_Master_Transmit+0x1f8>)
 800f71a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f71c:	8979      	ldrh	r1, [r7, #10]
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	6a3a      	ldr	r2, [r7, #32]
 800f722:	68f8      	ldr	r0, [r7, #12]
 800f724:	f000 fac2 	bl	800fcac <I2C_MasterRequestWrite>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d001      	beq.n	800f732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	e08d      	b.n	800f84e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f732:	2300      	movs	r3, #0
 800f734:	613b      	str	r3, [r7, #16]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	613b      	str	r3, [r7, #16]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	699b      	ldr	r3, [r3, #24]
 800f744:	613b      	str	r3, [r7, #16]
 800f746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800f748:	e066      	b.n	800f818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	6a39      	ldr	r1, [r7, #32]
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f000 fcd0 	bl	80100f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00d      	beq.n	800f776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75e:	2b04      	cmp	r3, #4
 800f760:	d107      	bne.n	800f772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f772:	2301      	movs	r3, #1
 800f774:	e06b      	b.n	800f84e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77a:	781a      	ldrb	r2, [r3, #0]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f786:	1c5a      	adds	r2, r3, #1
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f790:	b29b      	uxth	r3, r3
 800f792:	3b01      	subs	r3, #1
 800f794:	b29a      	uxth	r2, r3
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	695b      	ldr	r3, [r3, #20]
 800f7ac:	f003 0304 	and.w	r3, r3, #4
 800f7b0:	2b04      	cmp	r3, #4
 800f7b2:	d11b      	bne.n	800f7ec <HAL_I2C_Master_Transmit+0x188>
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d017      	beq.n	800f7ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c0:	781a      	ldrb	r2, [r3, #0]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f7ec:	697a      	ldr	r2, [r7, #20]
 800f7ee:	6a39      	ldr	r1, [r7, #32]
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f000 fcc0 	bl	8010176 <I2C_WaitOnBTFFlagUntilTimeout>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00d      	beq.n	800f818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f800:	2b04      	cmp	r3, #4
 800f802:	d107      	bne.n	800f814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f814:	2301      	movs	r3, #1
 800f816:	e01a      	b.n	800f84e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d194      	bne.n	800f74a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f82e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2220      	movs	r2, #32
 800f834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2200      	movs	r2, #0
 800f83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2200      	movs	r2, #0
 800f844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f848:	2300      	movs	r3, #0
 800f84a:	e000      	b.n	800f84e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f84c:	2302      	movs	r3, #2
  }
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3718      	adds	r7, #24
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	00100002 	.word	0x00100002
 800f85c:	ffff0000 	.word	0xffff0000

0800f860 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b08c      	sub	sp, #48	; 0x30
 800f864:	af02      	add	r7, sp, #8
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	607a      	str	r2, [r7, #4]
 800f86a:	461a      	mov	r2, r3
 800f86c:	460b      	mov	r3, r1
 800f86e:	817b      	strh	r3, [r7, #10]
 800f870:	4613      	mov	r3, r2
 800f872:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800f874:	f7fe f962 	bl	800db3c <HAL_GetTick>
 800f878:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f880:	b2db      	uxtb	r3, r3
 800f882:	2b20      	cmp	r3, #32
 800f884:	f040 820b 	bne.w	800fc9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800f888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	2319      	movs	r3, #25
 800f88e:	2201      	movs	r2, #1
 800f890:	497c      	ldr	r1, [pc, #496]	; (800fa84 <HAL_I2C_Master_Receive+0x224>)
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f000 fb58 	bl	800ff48 <I2C_WaitOnFlagUntilTimeout>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d001      	beq.n	800f8a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800f89e:	2302      	movs	r3, #2
 800f8a0:	e1fe      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d101      	bne.n	800f8b0 <HAL_I2C_Master_Receive+0x50>
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	e1f7      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f003 0301 	and.w	r3, r3, #1
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d007      	beq.n	800f8d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f042 0201 	orr.w	r2, r2, #1
 800f8d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f8e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2222      	movs	r2, #34	; 0x22
 800f8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2210      	movs	r2, #16
 800f8f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	893a      	ldrh	r2, [r7, #8]
 800f906:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	4a5c      	ldr	r2, [pc, #368]	; (800fa88 <HAL_I2C_Master_Receive+0x228>)
 800f916:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f918:	8979      	ldrh	r1, [r7, #10]
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f91e:	68f8      	ldr	r0, [r7, #12]
 800f920:	f000 fa46 	bl	800fdb0 <I2C_MasterRequestRead>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800f92a:	2301      	movs	r3, #1
 800f92c:	e1b8      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f932:	2b00      	cmp	r3, #0
 800f934:	d113      	bne.n	800f95e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f936:	2300      	movs	r3, #0
 800f938:	623b      	str	r3, [r7, #32]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	695b      	ldr	r3, [r3, #20]
 800f940:	623b      	str	r3, [r7, #32]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	699b      	ldr	r3, [r3, #24]
 800f948:	623b      	str	r3, [r7, #32]
 800f94a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f95a:	601a      	str	r2, [r3, #0]
 800f95c:	e18c      	b.n	800fc78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f962:	2b01      	cmp	r3, #1
 800f964:	d11b      	bne.n	800f99e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f976:	2300      	movs	r3, #0
 800f978:	61fb      	str	r3, [r7, #28]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	695b      	ldr	r3, [r3, #20]
 800f980:	61fb      	str	r3, [r7, #28]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	699b      	ldr	r3, [r3, #24]
 800f988:	61fb      	str	r3, [r7, #28]
 800f98a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f99a:	601a      	str	r2, [r3, #0]
 800f99c:	e16c      	b.n	800fc78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9a2:	2b02      	cmp	r3, #2
 800f9a4:	d11b      	bne.n	800f9de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	61bb      	str	r3, [r7, #24]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	695b      	ldr	r3, [r3, #20]
 800f9d0:	61bb      	str	r3, [r7, #24]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	699b      	ldr	r3, [r3, #24]
 800f9d8:	61bb      	str	r3, [r7, #24]
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	e14c      	b.n	800fc78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f9ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	617b      	str	r3, [r7, #20]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	695b      	ldr	r3, [r3, #20]
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	617b      	str	r3, [r7, #20]
 800fa02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800fa04:	e138      	b.n	800fc78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa0a:	2b03      	cmp	r3, #3
 800fa0c:	f200 80f1 	bhi.w	800fbf2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d123      	bne.n	800fa60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	f000 fbeb 	bl	80101f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d001      	beq.n	800fa2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e139      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	691a      	ldr	r2, [r3, #16]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa36:	b2d2      	uxtb	r2, r2
 800fa38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3e:	1c5a      	adds	r2, r3, #1
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	3b01      	subs	r3, #1
 800fa58:	b29a      	uxth	r2, r3
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa5e:	e10b      	b.n	800fc78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa64:	2b02      	cmp	r3, #2
 800fa66:	d14e      	bne.n	800fb06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	9300      	str	r3, [sp, #0]
 800fa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6e:	2200      	movs	r2, #0
 800fa70:	4906      	ldr	r1, [pc, #24]	; (800fa8c <HAL_I2C_Master_Receive+0x22c>)
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f000 fa68 	bl	800ff48 <I2C_WaitOnFlagUntilTimeout>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d008      	beq.n	800fa90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e10e      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
 800fa82:	bf00      	nop
 800fa84:	00100002 	.word	0x00100002
 800fa88:	ffff0000 	.word	0xffff0000
 800fa8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	691a      	ldr	r2, [r3, #16]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faaa:	b2d2      	uxtb	r2, r2
 800faac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fabc:	3b01      	subs	r3, #1
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fac8:	b29b      	uxth	r3, r3
 800faca:	3b01      	subs	r3, #1
 800facc:	b29a      	uxth	r2, r3
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	691a      	ldr	r2, [r3, #16]
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fadc:	b2d2      	uxtb	r2, r2
 800fade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae4:	1c5a      	adds	r2, r3, #1
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800faee:	3b01      	subs	r3, #1
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	3b01      	subs	r3, #1
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fb04:	e0b8      	b.n	800fc78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800fb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb08:	9300      	str	r3, [sp, #0]
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	4966      	ldr	r1, [pc, #408]	; (800fca8 <HAL_I2C_Master_Receive+0x448>)
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f000 fa19 	bl	800ff48 <I2C_WaitOnFlagUntilTimeout>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d001      	beq.n	800fb20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e0bf      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	691a      	ldr	r2, [r3, #16]
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb3a:	b2d2      	uxtb	r2, r2
 800fb3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb42:	1c5a      	adds	r2, r3, #1
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb4c:	3b01      	subs	r3, #1
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb68:	2200      	movs	r2, #0
 800fb6a:	494f      	ldr	r1, [pc, #316]	; (800fca8 <HAL_I2C_Master_Receive+0x448>)
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	f000 f9eb 	bl	800ff48 <I2C_WaitOnFlagUntilTimeout>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d001      	beq.n	800fb7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e091      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	691a      	ldr	r2, [r3, #16]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb96:	b2d2      	uxtb	r2, r2
 800fb98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9e:	1c5a      	adds	r2, r3, #1
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	691a      	ldr	r2, [r3, #16]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc8:	b2d2      	uxtb	r2, r2
 800fbca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd0:	1c5a      	adds	r2, r3, #1
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fbf0:	e042      	b.n	800fc78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fbf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f000 fafe 	bl	80101f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d001      	beq.n	800fc06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800fc02:	2301      	movs	r3, #1
 800fc04:	e04c      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	691a      	ldr	r2, [r3, #16]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc10:	b2d2      	uxtb	r2, r2
 800fc12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc18:	1c5a      	adds	r2, r3, #1
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc22:	3b01      	subs	r3, #1
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	3b01      	subs	r3, #1
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	695b      	ldr	r3, [r3, #20]
 800fc3e:	f003 0304 	and.w	r3, r3, #4
 800fc42:	2b04      	cmp	r3, #4
 800fc44:	d118      	bne.n	800fc78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	691a      	ldr	r2, [r3, #16]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc50:	b2d2      	uxtb	r2, r2
 800fc52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc58:	1c5a      	adds	r2, r3, #1
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc62:	3b01      	subs	r3, #1
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	3b01      	subs	r3, #1
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	f47f aec2 	bne.w	800fa06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2220      	movs	r2, #32
 800fc86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e000      	b.n	800fca0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800fc9e:	2302      	movs	r3, #2
  }
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3728      	adds	r7, #40	; 0x28
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	00010004 	.word	0x00010004

0800fcac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b088      	sub	sp, #32
 800fcb0:	af02      	add	r7, sp, #8
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	607a      	str	r2, [r7, #4]
 800fcb6:	603b      	str	r3, [r7, #0]
 800fcb8:	460b      	mov	r3, r1
 800fcba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	2b08      	cmp	r3, #8
 800fcc6:	d006      	beq.n	800fcd6 <I2C_MasterRequestWrite+0x2a>
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d003      	beq.n	800fcd6 <I2C_MasterRequestWrite+0x2a>
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fcd4:	d108      	bne.n	800fce8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	e00b      	b.n	800fd00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcec:	2b12      	cmp	r3, #18
 800fcee:	d107      	bne.n	800fd00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fcfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f000 f91b 	bl	800ff48 <I2C_WaitOnFlagUntilTimeout>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00c      	beq.n	800fd32 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d003      	beq.n	800fd2e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800fd2e:	2303      	movs	r3, #3
 800fd30:	e035      	b.n	800fd9e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fd3a:	d108      	bne.n	800fd4e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800fd3c:	897b      	ldrh	r3, [r7, #10]
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	461a      	mov	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fd4a:	611a      	str	r2, [r3, #16]
 800fd4c:	e01b      	b.n	800fd86 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800fd4e:	897b      	ldrh	r3, [r7, #10]
 800fd50:	11db      	asrs	r3, r3, #7
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	f003 0306 	and.w	r3, r3, #6
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	f063 030f 	orn	r3, r3, #15
 800fd5e:	b2da      	uxtb	r2, r3
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	490f      	ldr	r1, [pc, #60]	; (800fda8 <I2C_MasterRequestWrite+0xfc>)
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f000 f942 	bl	800fff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d001      	beq.n	800fd7c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e010      	b.n	800fd9e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800fd7c:	897b      	ldrh	r3, [r7, #10]
 800fd7e:	b2da      	uxtb	r2, r3
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	4908      	ldr	r1, [pc, #32]	; (800fdac <I2C_MasterRequestWrite+0x100>)
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f000 f932 	bl	800fff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e000      	b.n	800fd9e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800fd9c:	2300      	movs	r3, #0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3718      	adds	r7, #24
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	00010008 	.word	0x00010008
 800fdac:	00010002 	.word	0x00010002

0800fdb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b088      	sub	sp, #32
 800fdb4:	af02      	add	r7, sp, #8
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	607a      	str	r2, [r7, #4]
 800fdba:	603b      	str	r3, [r7, #0]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fdd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	2b08      	cmp	r3, #8
 800fdda:	d006      	beq.n	800fdea <I2C_MasterRequestRead+0x3a>
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d003      	beq.n	800fdea <I2C_MasterRequestRead+0x3a>
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fde8:	d108      	bne.n	800fdfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fdf8:	601a      	str	r2, [r3, #0]
 800fdfa:	e00b      	b.n	800fe14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe00:	2b11      	cmp	r3, #17
 800fe02:	d107      	bne.n	800fe14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f000 f891 	bl	800ff48 <I2C_WaitOnFlagUntilTimeout>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00c      	beq.n	800fe46 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d003      	beq.n	800fe42 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800fe42:	2303      	movs	r3, #3
 800fe44:	e078      	b.n	800ff38 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	691b      	ldr	r3, [r3, #16]
 800fe4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe4e:	d108      	bne.n	800fe62 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800fe50:	897b      	ldrh	r3, [r7, #10]
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	f043 0301 	orr.w	r3, r3, #1
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	611a      	str	r2, [r3, #16]
 800fe60:	e05e      	b.n	800ff20 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800fe62:	897b      	ldrh	r3, [r7, #10]
 800fe64:	11db      	asrs	r3, r3, #7
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	f003 0306 	and.w	r3, r3, #6
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	f063 030f 	orn	r3, r3, #15
 800fe72:	b2da      	uxtb	r2, r3
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	4930      	ldr	r1, [pc, #192]	; (800ff40 <I2C_MasterRequestRead+0x190>)
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f000 f8b8 	bl	800fff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d001      	beq.n	800fe90 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e053      	b.n	800ff38 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800fe90:	897b      	ldrh	r3, [r7, #10]
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	4929      	ldr	r1, [pc, #164]	; (800ff44 <I2C_MasterRequestRead+0x194>)
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f000 f8a8 	bl	800fff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d001      	beq.n	800feb0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800feac:	2301      	movs	r3, #1
 800feae:	e043      	b.n	800ff38 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800feb0:	2300      	movs	r3, #0
 800feb2:	613b      	str	r3, [r7, #16]
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	695b      	ldr	r3, [r3, #20]
 800feba:	613b      	str	r3, [r7, #16]
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	699b      	ldr	r3, [r3, #24]
 800fec2:	613b      	str	r3, [r7, #16]
 800fec4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fed4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	9300      	str	r3, [sp, #0]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2200      	movs	r2, #0
 800fede:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800fee2:	68f8      	ldr	r0, [r7, #12]
 800fee4:	f000 f830 	bl	800ff48 <I2C_WaitOnFlagUntilTimeout>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00c      	beq.n	800ff08 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d003      	beq.n	800ff04 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ff04:	2303      	movs	r3, #3
 800ff06:	e017      	b.n	800ff38 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ff08:	897b      	ldrh	r3, [r7, #10]
 800ff0a:	11db      	asrs	r3, r3, #7
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	f003 0306 	and.w	r3, r3, #6
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	f063 030e 	orn	r3, r3, #14
 800ff18:	b2da      	uxtb	r2, r3
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	4907      	ldr	r1, [pc, #28]	; (800ff44 <I2C_MasterRequestRead+0x194>)
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f000 f865 	bl	800fff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800ff32:	2301      	movs	r3, #1
 800ff34:	e000      	b.n	800ff38 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3718      	adds	r7, #24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	00010008 	.word	0x00010008
 800ff44:	00010002 	.word	0x00010002

0800ff48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	603b      	str	r3, [r7, #0]
 800ff54:	4613      	mov	r3, r2
 800ff56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ff58:	e025      	b.n	800ffa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff60:	d021      	beq.n	800ffa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff62:	f7fd fdeb 	bl	800db3c <HAL_GetTick>
 800ff66:	4602      	mov	r2, r0
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	683a      	ldr	r2, [r7, #0]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d302      	bcc.n	800ff78 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d116      	bne.n	800ffa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2220      	movs	r2, #32
 800ff82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff92:	f043 0220 	orr.w	r2, r3, #32
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e023      	b.n	800ffee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	0c1b      	lsrs	r3, r3, #16
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d10d      	bne.n	800ffcc <I2C_WaitOnFlagUntilTimeout+0x84>
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	695b      	ldr	r3, [r3, #20]
 800ffb6:	43da      	mvns	r2, r3
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	4013      	ands	r3, r2
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	bf0c      	ite	eq
 800ffc2:	2301      	moveq	r3, #1
 800ffc4:	2300      	movne	r3, #0
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	461a      	mov	r2, r3
 800ffca:	e00c      	b.n	800ffe6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	699b      	ldr	r3, [r3, #24]
 800ffd2:	43da      	mvns	r2, r3
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	4013      	ands	r3, r2
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	bf0c      	ite	eq
 800ffde:	2301      	moveq	r3, #1
 800ffe0:	2300      	movne	r3, #0
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	79fb      	ldrb	r3, [r7, #7]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d0b6      	beq.n	800ff5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ffec:	2300      	movs	r3, #0
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b084      	sub	sp, #16
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	60f8      	str	r0, [r7, #12]
 800fffe:	60b9      	str	r1, [r7, #8]
 8010000:	607a      	str	r2, [r7, #4]
 8010002:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010004:	e051      	b.n	80100aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	695b      	ldr	r3, [r3, #20]
 801000c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010014:	d123      	bne.n	801005e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010024:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801002e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2200      	movs	r2, #0
 8010034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2220      	movs	r2, #32
 801003a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801004a:	f043 0204 	orr.w	r2, r3, #4
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2200      	movs	r2, #0
 8010056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	e046      	b.n	80100ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010064:	d021      	beq.n	80100aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010066:	f7fd fd69 	bl	800db3c <HAL_GetTick>
 801006a:	4602      	mov	r2, r0
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	429a      	cmp	r2, r3
 8010074:	d302      	bcc.n	801007c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d116      	bne.n	80100aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2200      	movs	r2, #0
 8010080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2220      	movs	r2, #32
 8010086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2200      	movs	r2, #0
 801008e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010096:	f043 0220 	orr.w	r2, r3, #32
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	e020      	b.n	80100ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	0c1b      	lsrs	r3, r3, #16
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d10c      	bne.n	80100ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	695b      	ldr	r3, [r3, #20]
 80100ba:	43da      	mvns	r2, r3
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	4013      	ands	r3, r2
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	bf14      	ite	ne
 80100c6:	2301      	movne	r3, #1
 80100c8:	2300      	moveq	r3, #0
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	e00b      	b.n	80100e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	699b      	ldr	r3, [r3, #24]
 80100d4:	43da      	mvns	r2, r3
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	4013      	ands	r3, r2
 80100da:	b29b      	uxth	r3, r3
 80100dc:	2b00      	cmp	r3, #0
 80100de:	bf14      	ite	ne
 80100e0:	2301      	movne	r3, #1
 80100e2:	2300      	moveq	r3, #0
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d18d      	bne.n	8010006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3710      	adds	r7, #16
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010100:	e02d      	b.n	801015e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f000 f8ce 	bl	80102a4 <I2C_IsAcknowledgeFailed>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d001      	beq.n	8010112 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801010e:	2301      	movs	r3, #1
 8010110:	e02d      	b.n	801016e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010118:	d021      	beq.n	801015e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801011a:	f7fd fd0f 	bl	800db3c <HAL_GetTick>
 801011e:	4602      	mov	r2, r0
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	68ba      	ldr	r2, [r7, #8]
 8010126:	429a      	cmp	r2, r3
 8010128:	d302      	bcc.n	8010130 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d116      	bne.n	801015e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2200      	movs	r2, #0
 8010134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2220      	movs	r2, #32
 801013a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2200      	movs	r2, #0
 8010142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801014a:	f043 0220 	orr.w	r2, r3, #32
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801015a:	2301      	movs	r3, #1
 801015c:	e007      	b.n	801016e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	695b      	ldr	r3, [r3, #20]
 8010164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010168:	2b80      	cmp	r3, #128	; 0x80
 801016a:	d1ca      	bne.n	8010102 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801016c:	2300      	movs	r3, #0
}
 801016e:	4618      	mov	r0, r3
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b084      	sub	sp, #16
 801017a:	af00      	add	r7, sp, #0
 801017c:	60f8      	str	r0, [r7, #12]
 801017e:	60b9      	str	r1, [r7, #8]
 8010180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010182:	e02d      	b.n	80101e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f000 f88d 	bl	80102a4 <I2C_IsAcknowledgeFailed>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	e02d      	b.n	80101f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801019a:	d021      	beq.n	80101e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801019c:	f7fd fcce 	bl	800db3c <HAL_GetTick>
 80101a0:	4602      	mov	r2, r0
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	1ad3      	subs	r3, r2, r3
 80101a6:	68ba      	ldr	r2, [r7, #8]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d302      	bcc.n	80101b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d116      	bne.n	80101e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2200      	movs	r2, #0
 80101b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2220      	movs	r2, #32
 80101bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101cc:	f043 0220 	orr.w	r2, r3, #32
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2200      	movs	r2, #0
 80101d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80101dc:	2301      	movs	r3, #1
 80101de:	e007      	b.n	80101f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	695b      	ldr	r3, [r3, #20]
 80101e6:	f003 0304 	and.w	r3, r3, #4
 80101ea:	2b04      	cmp	r3, #4
 80101ec:	d1ca      	bne.n	8010184 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80101ee:	2300      	movs	r3, #0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010204:	e042      	b.n	801028c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	695b      	ldr	r3, [r3, #20]
 801020c:	f003 0310 	and.w	r3, r3, #16
 8010210:	2b10      	cmp	r3, #16
 8010212:	d119      	bne.n	8010248 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f06f 0210 	mvn.w	r2, #16
 801021c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2200      	movs	r2, #0
 8010222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2220      	movs	r2, #32
 8010228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010244:	2301      	movs	r3, #1
 8010246:	e029      	b.n	801029c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010248:	f7fd fc78 	bl	800db3c <HAL_GetTick>
 801024c:	4602      	mov	r2, r0
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	68ba      	ldr	r2, [r7, #8]
 8010254:	429a      	cmp	r2, r3
 8010256:	d302      	bcc.n	801025e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d116      	bne.n	801028c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2200      	movs	r2, #0
 8010262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2220      	movs	r2, #32
 8010268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2200      	movs	r2, #0
 8010270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010278:	f043 0220 	orr.w	r2, r3, #32
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2200      	movs	r2, #0
 8010284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010288:	2301      	movs	r3, #1
 801028a:	e007      	b.n	801029c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	695b      	ldr	r3, [r3, #20]
 8010292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010296:	2b40      	cmp	r3, #64	; 0x40
 8010298:	d1b5      	bne.n	8010206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	695b      	ldr	r3, [r3, #20]
 80102b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80102b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102ba:	d11b      	bne.n	80102f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80102c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2220      	movs	r2, #32
 80102d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102e0:	f043 0204 	orr.w	r2, r3, #4
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80102f0:	2301      	movs	r3, #1
 80102f2:	e000      	b.n	80102f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010304:	b08f      	sub	sp, #60	; 0x3c
 8010306:	af0a      	add	r7, sp, #40	; 0x28
 8010308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d101      	bne.n	8010314 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8010310:	2301      	movs	r3, #1
 8010312:	e10f      	b.n	8010534 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8010320:	b2db      	uxtb	r3, r3
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7fd fa00 	bl	800d734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2203      	movs	r2, #3
 8010338:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010344:	2b00      	cmp	r3, #0
 8010346:	d102      	bne.n	801034e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4618      	mov	r0, r3
 8010354:	f003 fac1 	bl	80138da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	603b      	str	r3, [r7, #0]
 801035e:	687e      	ldr	r6, [r7, #4]
 8010360:	466d      	mov	r5, sp
 8010362:	f106 0410 	add.w	r4, r6, #16
 8010366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801036a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801036c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801036e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010372:	e885 0003 	stmia.w	r5, {r0, r1}
 8010376:	1d33      	adds	r3, r6, #4
 8010378:	cb0e      	ldmia	r3, {r1, r2, r3}
 801037a:	6838      	ldr	r0, [r7, #0]
 801037c:	f003 fa4c 	bl	8013818 <USB_CoreInit>
 8010380:	4603      	mov	r3, r0
 8010382:	2b00      	cmp	r3, #0
 8010384:	d005      	beq.n	8010392 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2202      	movs	r2, #2
 801038a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801038e:	2301      	movs	r3, #1
 8010390:	e0d0      	b.n	8010534 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2100      	movs	r1, #0
 8010398:	4618      	mov	r0, r3
 801039a:	f003 faaf 	bl	80138fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801039e:	2300      	movs	r3, #0
 80103a0:	73fb      	strb	r3, [r7, #15]
 80103a2:	e04a      	b.n	801043a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80103a4:	7bfa      	ldrb	r2, [r7, #15]
 80103a6:	6879      	ldr	r1, [r7, #4]
 80103a8:	4613      	mov	r3, r2
 80103aa:	00db      	lsls	r3, r3, #3
 80103ac:	1a9b      	subs	r3, r3, r2
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	440b      	add	r3, r1
 80103b2:	333d      	adds	r3, #61	; 0x3d
 80103b4:	2201      	movs	r2, #1
 80103b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80103b8:	7bfa      	ldrb	r2, [r7, #15]
 80103ba:	6879      	ldr	r1, [r7, #4]
 80103bc:	4613      	mov	r3, r2
 80103be:	00db      	lsls	r3, r3, #3
 80103c0:	1a9b      	subs	r3, r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	440b      	add	r3, r1
 80103c6:	333c      	adds	r3, #60	; 0x3c
 80103c8:	7bfa      	ldrb	r2, [r7, #15]
 80103ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80103cc:	7bfa      	ldrb	r2, [r7, #15]
 80103ce:	7bfb      	ldrb	r3, [r7, #15]
 80103d0:	b298      	uxth	r0, r3
 80103d2:	6879      	ldr	r1, [r7, #4]
 80103d4:	4613      	mov	r3, r2
 80103d6:	00db      	lsls	r3, r3, #3
 80103d8:	1a9b      	subs	r3, r3, r2
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	440b      	add	r3, r1
 80103de:	3342      	adds	r3, #66	; 0x42
 80103e0:	4602      	mov	r2, r0
 80103e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80103e4:	7bfa      	ldrb	r2, [r7, #15]
 80103e6:	6879      	ldr	r1, [r7, #4]
 80103e8:	4613      	mov	r3, r2
 80103ea:	00db      	lsls	r3, r3, #3
 80103ec:	1a9b      	subs	r3, r3, r2
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	440b      	add	r3, r1
 80103f2:	333f      	adds	r3, #63	; 0x3f
 80103f4:	2200      	movs	r2, #0
 80103f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80103f8:	7bfa      	ldrb	r2, [r7, #15]
 80103fa:	6879      	ldr	r1, [r7, #4]
 80103fc:	4613      	mov	r3, r2
 80103fe:	00db      	lsls	r3, r3, #3
 8010400:	1a9b      	subs	r3, r3, r2
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	440b      	add	r3, r1
 8010406:	3344      	adds	r3, #68	; 0x44
 8010408:	2200      	movs	r2, #0
 801040a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801040c:	7bfa      	ldrb	r2, [r7, #15]
 801040e:	6879      	ldr	r1, [r7, #4]
 8010410:	4613      	mov	r3, r2
 8010412:	00db      	lsls	r3, r3, #3
 8010414:	1a9b      	subs	r3, r3, r2
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	440b      	add	r3, r1
 801041a:	3348      	adds	r3, #72	; 0x48
 801041c:	2200      	movs	r2, #0
 801041e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8010420:	7bfa      	ldrb	r2, [r7, #15]
 8010422:	6879      	ldr	r1, [r7, #4]
 8010424:	4613      	mov	r3, r2
 8010426:	00db      	lsls	r3, r3, #3
 8010428:	1a9b      	subs	r3, r3, r2
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	440b      	add	r3, r1
 801042e:	3350      	adds	r3, #80	; 0x50
 8010430:	2200      	movs	r2, #0
 8010432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010434:	7bfb      	ldrb	r3, [r7, #15]
 8010436:	3301      	adds	r3, #1
 8010438:	73fb      	strb	r3, [r7, #15]
 801043a:	7bfa      	ldrb	r2, [r7, #15]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	429a      	cmp	r2, r3
 8010442:	d3af      	bcc.n	80103a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010444:	2300      	movs	r3, #0
 8010446:	73fb      	strb	r3, [r7, #15]
 8010448:	e044      	b.n	80104d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801044a:	7bfa      	ldrb	r2, [r7, #15]
 801044c:	6879      	ldr	r1, [r7, #4]
 801044e:	4613      	mov	r3, r2
 8010450:	00db      	lsls	r3, r3, #3
 8010452:	1a9b      	subs	r3, r3, r2
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	440b      	add	r3, r1
 8010458:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 801045c:	2200      	movs	r2, #0
 801045e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8010460:	7bfa      	ldrb	r2, [r7, #15]
 8010462:	6879      	ldr	r1, [r7, #4]
 8010464:	4613      	mov	r3, r2
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	1a9b      	subs	r3, r3, r2
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	440b      	add	r3, r1
 801046e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8010472:	7bfa      	ldrb	r2, [r7, #15]
 8010474:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010476:	7bfa      	ldrb	r2, [r7, #15]
 8010478:	6879      	ldr	r1, [r7, #4]
 801047a:	4613      	mov	r3, r2
 801047c:	00db      	lsls	r3, r3, #3
 801047e:	1a9b      	subs	r3, r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	440b      	add	r3, r1
 8010484:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010488:	2200      	movs	r2, #0
 801048a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801048c:	7bfa      	ldrb	r2, [r7, #15]
 801048e:	6879      	ldr	r1, [r7, #4]
 8010490:	4613      	mov	r3, r2
 8010492:	00db      	lsls	r3, r3, #3
 8010494:	1a9b      	subs	r3, r3, r2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	440b      	add	r3, r1
 801049a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801049e:	2200      	movs	r2, #0
 80104a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80104a2:	7bfa      	ldrb	r2, [r7, #15]
 80104a4:	6879      	ldr	r1, [r7, #4]
 80104a6:	4613      	mov	r3, r2
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	1a9b      	subs	r3, r3, r2
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	440b      	add	r3, r1
 80104b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80104b4:	2200      	movs	r2, #0
 80104b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80104b8:	7bfa      	ldrb	r2, [r7, #15]
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	4613      	mov	r3, r2
 80104be:	00db      	lsls	r3, r3, #3
 80104c0:	1a9b      	subs	r3, r3, r2
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	440b      	add	r3, r1
 80104c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80104ca:	2200      	movs	r2, #0
 80104cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80104ce:	7bfb      	ldrb	r3, [r7, #15]
 80104d0:	3301      	adds	r3, #1
 80104d2:	73fb      	strb	r3, [r7, #15]
 80104d4:	7bfa      	ldrb	r2, [r7, #15]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d3b5      	bcc.n	801044a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	603b      	str	r3, [r7, #0]
 80104e4:	687e      	ldr	r6, [r7, #4]
 80104e6:	466d      	mov	r5, sp
 80104e8:	f106 0410 	add.w	r4, r6, #16
 80104ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80104ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80104f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80104f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80104f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80104f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80104fc:	1d33      	adds	r3, r6, #4
 80104fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010500:	6838      	ldr	r0, [r7, #0]
 8010502:	f003 fa25 	bl	8013950 <USB_DevInit>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d005      	beq.n	8010518 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2202      	movs	r2, #2
 8010510:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8010514:	2301      	movs	r3, #1
 8010516:	e00d      	b.n	8010534 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2201      	movs	r2, #1
 8010524:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4618      	mov	r0, r3
 801052e:	f003 fbd4 	bl	8013cda <USB_DevDisconnect>

  return HAL_OK;
 8010532:	2300      	movs	r3, #0
}
 8010534:	4618      	mov	r0, r3
 8010536:	3714      	adds	r7, #20
 8010538:	46bd      	mov	sp, r7
 801053a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801053c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b086      	sub	sp, #24
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d101      	bne.n	801054e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801054a:	2301      	movs	r3, #1
 801054c:	e25b      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f003 0301 	and.w	r3, r3, #1
 8010556:	2b00      	cmp	r3, #0
 8010558:	d075      	beq.n	8010646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801055a:	4ba3      	ldr	r3, [pc, #652]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	f003 030c 	and.w	r3, r3, #12
 8010562:	2b04      	cmp	r3, #4
 8010564:	d00c      	beq.n	8010580 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010566:	4ba0      	ldr	r3, [pc, #640]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801056e:	2b08      	cmp	r3, #8
 8010570:	d112      	bne.n	8010598 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010572:	4b9d      	ldr	r3, [pc, #628]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801057a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801057e:	d10b      	bne.n	8010598 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010580:	4b99      	ldr	r3, [pc, #612]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010588:	2b00      	cmp	r3, #0
 801058a:	d05b      	beq.n	8010644 <HAL_RCC_OscConfig+0x108>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d157      	bne.n	8010644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010594:	2301      	movs	r3, #1
 8010596:	e236      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105a0:	d106      	bne.n	80105b0 <HAL_RCC_OscConfig+0x74>
 80105a2:	4b91      	ldr	r3, [pc, #580]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4a90      	ldr	r2, [pc, #576]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105ac:	6013      	str	r3, [r2, #0]
 80105ae:	e01d      	b.n	80105ec <HAL_RCC_OscConfig+0xb0>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80105b8:	d10c      	bne.n	80105d4 <HAL_RCC_OscConfig+0x98>
 80105ba:	4b8b      	ldr	r3, [pc, #556]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4a8a      	ldr	r2, [pc, #552]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80105c4:	6013      	str	r3, [r2, #0]
 80105c6:	4b88      	ldr	r3, [pc, #544]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4a87      	ldr	r2, [pc, #540]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105d0:	6013      	str	r3, [r2, #0]
 80105d2:	e00b      	b.n	80105ec <HAL_RCC_OscConfig+0xb0>
 80105d4:	4b84      	ldr	r3, [pc, #528]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a83      	ldr	r2, [pc, #524]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80105de:	6013      	str	r3, [r2, #0]
 80105e0:	4b81      	ldr	r3, [pc, #516]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a80      	ldr	r2, [pc, #512]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80105e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80105ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d013      	beq.n	801061c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80105f4:	f7fd faa2 	bl	800db3c <HAL_GetTick>
 80105f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80105fa:	e008      	b.n	801060e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80105fc:	f7fd fa9e 	bl	800db3c <HAL_GetTick>
 8010600:	4602      	mov	r2, r0
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	1ad3      	subs	r3, r2, r3
 8010606:	2b64      	cmp	r3, #100	; 0x64
 8010608:	d901      	bls.n	801060e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801060a:	2303      	movs	r3, #3
 801060c:	e1fb      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801060e:	4b76      	ldr	r3, [pc, #472]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010616:	2b00      	cmp	r3, #0
 8010618:	d0f0      	beq.n	80105fc <HAL_RCC_OscConfig+0xc0>
 801061a:	e014      	b.n	8010646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801061c:	f7fd fa8e 	bl	800db3c <HAL_GetTick>
 8010620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010622:	e008      	b.n	8010636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010624:	f7fd fa8a 	bl	800db3c <HAL_GetTick>
 8010628:	4602      	mov	r2, r0
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	1ad3      	subs	r3, r2, r3
 801062e:	2b64      	cmp	r3, #100	; 0x64
 8010630:	d901      	bls.n	8010636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010632:	2303      	movs	r3, #3
 8010634:	e1e7      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010636:	4b6c      	ldr	r3, [pc, #432]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801063e:	2b00      	cmp	r3, #0
 8010640:	d1f0      	bne.n	8010624 <HAL_RCC_OscConfig+0xe8>
 8010642:	e000      	b.n	8010646 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f003 0302 	and.w	r3, r3, #2
 801064e:	2b00      	cmp	r3, #0
 8010650:	d063      	beq.n	801071a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010652:	4b65      	ldr	r3, [pc, #404]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010654:	689b      	ldr	r3, [r3, #8]
 8010656:	f003 030c 	and.w	r3, r3, #12
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00b      	beq.n	8010676 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801065e:	4b62      	ldr	r3, [pc, #392]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010666:	2b08      	cmp	r3, #8
 8010668:	d11c      	bne.n	80106a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801066a:	4b5f      	ldr	r3, [pc, #380]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010672:	2b00      	cmp	r3, #0
 8010674:	d116      	bne.n	80106a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010676:	4b5c      	ldr	r3, [pc, #368]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f003 0302 	and.w	r3, r3, #2
 801067e:	2b00      	cmp	r3, #0
 8010680:	d005      	beq.n	801068e <HAL_RCC_OscConfig+0x152>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	2b01      	cmp	r3, #1
 8010688:	d001      	beq.n	801068e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801068a:	2301      	movs	r3, #1
 801068c:	e1bb      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801068e:	4b56      	ldr	r3, [pc, #344]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	691b      	ldr	r3, [r3, #16]
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	4952      	ldr	r1, [pc, #328]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 801069e:	4313      	orrs	r3, r2
 80106a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80106a2:	e03a      	b.n	801071a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d020      	beq.n	80106ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80106ac:	4b4f      	ldr	r3, [pc, #316]	; (80107ec <HAL_RCC_OscConfig+0x2b0>)
 80106ae:	2201      	movs	r2, #1
 80106b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106b2:	f7fd fa43 	bl	800db3c <HAL_GetTick>
 80106b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80106b8:	e008      	b.n	80106cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80106ba:	f7fd fa3f 	bl	800db3c <HAL_GetTick>
 80106be:	4602      	mov	r2, r0
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	d901      	bls.n	80106cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80106c8:	2303      	movs	r3, #3
 80106ca:	e19c      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80106cc:	4b46      	ldr	r3, [pc, #280]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f003 0302 	and.w	r3, r3, #2
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d0f0      	beq.n	80106ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80106d8:	4b43      	ldr	r3, [pc, #268]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	691b      	ldr	r3, [r3, #16]
 80106e4:	00db      	lsls	r3, r3, #3
 80106e6:	4940      	ldr	r1, [pc, #256]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80106e8:	4313      	orrs	r3, r2
 80106ea:	600b      	str	r3, [r1, #0]
 80106ec:	e015      	b.n	801071a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80106ee:	4b3f      	ldr	r3, [pc, #252]	; (80107ec <HAL_RCC_OscConfig+0x2b0>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106f4:	f7fd fa22 	bl	800db3c <HAL_GetTick>
 80106f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80106fa:	e008      	b.n	801070e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80106fc:	f7fd fa1e 	bl	800db3c <HAL_GetTick>
 8010700:	4602      	mov	r2, r0
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	2b02      	cmp	r3, #2
 8010708:	d901      	bls.n	801070e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801070a:	2303      	movs	r3, #3
 801070c:	e17b      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801070e:	4b36      	ldr	r3, [pc, #216]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f003 0302 	and.w	r3, r3, #2
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1f0      	bne.n	80106fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f003 0308 	and.w	r3, r3, #8
 8010722:	2b00      	cmp	r3, #0
 8010724:	d030      	beq.n	8010788 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	695b      	ldr	r3, [r3, #20]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d016      	beq.n	801075c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801072e:	4b30      	ldr	r3, [pc, #192]	; (80107f0 <HAL_RCC_OscConfig+0x2b4>)
 8010730:	2201      	movs	r2, #1
 8010732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010734:	f7fd fa02 	bl	800db3c <HAL_GetTick>
 8010738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801073a:	e008      	b.n	801074e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801073c:	f7fd f9fe 	bl	800db3c <HAL_GetTick>
 8010740:	4602      	mov	r2, r0
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	2b02      	cmp	r3, #2
 8010748:	d901      	bls.n	801074e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801074a:	2303      	movs	r3, #3
 801074c:	e15b      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801074e:	4b26      	ldr	r3, [pc, #152]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 8010750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010752:	f003 0302 	and.w	r3, r3, #2
 8010756:	2b00      	cmp	r3, #0
 8010758:	d0f0      	beq.n	801073c <HAL_RCC_OscConfig+0x200>
 801075a:	e015      	b.n	8010788 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801075c:	4b24      	ldr	r3, [pc, #144]	; (80107f0 <HAL_RCC_OscConfig+0x2b4>)
 801075e:	2200      	movs	r2, #0
 8010760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010762:	f7fd f9eb 	bl	800db3c <HAL_GetTick>
 8010766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010768:	e008      	b.n	801077c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801076a:	f7fd f9e7 	bl	800db3c <HAL_GetTick>
 801076e:	4602      	mov	r2, r0
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	1ad3      	subs	r3, r2, r3
 8010774:	2b02      	cmp	r3, #2
 8010776:	d901      	bls.n	801077c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8010778:	2303      	movs	r3, #3
 801077a:	e144      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801077c:	4b1a      	ldr	r3, [pc, #104]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 801077e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010780:	f003 0302 	and.w	r3, r3, #2
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1f0      	bne.n	801076a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f003 0304 	and.w	r3, r3, #4
 8010790:	2b00      	cmp	r3, #0
 8010792:	f000 80a0 	beq.w	80108d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010796:	2300      	movs	r3, #0
 8010798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801079a:	4b13      	ldr	r3, [pc, #76]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 801079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d10f      	bne.n	80107c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80107a6:	2300      	movs	r3, #0
 80107a8:	60bb      	str	r3, [r7, #8]
 80107aa:	4b0f      	ldr	r3, [pc, #60]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80107ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ae:	4a0e      	ldr	r2, [pc, #56]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80107b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107b4:	6413      	str	r3, [r2, #64]	; 0x40
 80107b6:	4b0c      	ldr	r3, [pc, #48]	; (80107e8 <HAL_RCC_OscConfig+0x2ac>)
 80107b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107be:	60bb      	str	r3, [r7, #8]
 80107c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80107c2:	2301      	movs	r3, #1
 80107c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80107c6:	4b0b      	ldr	r3, [pc, #44]	; (80107f4 <HAL_RCC_OscConfig+0x2b8>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d121      	bne.n	8010816 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80107d2:	4b08      	ldr	r3, [pc, #32]	; (80107f4 <HAL_RCC_OscConfig+0x2b8>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4a07      	ldr	r2, [pc, #28]	; (80107f4 <HAL_RCC_OscConfig+0x2b8>)
 80107d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80107de:	f7fd f9ad 	bl	800db3c <HAL_GetTick>
 80107e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80107e4:	e011      	b.n	801080a <HAL_RCC_OscConfig+0x2ce>
 80107e6:	bf00      	nop
 80107e8:	40023800 	.word	0x40023800
 80107ec:	42470000 	.word	0x42470000
 80107f0:	42470e80 	.word	0x42470e80
 80107f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80107f8:	f7fd f9a0 	bl	800db3c <HAL_GetTick>
 80107fc:	4602      	mov	r2, r0
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	2b02      	cmp	r3, #2
 8010804:	d901      	bls.n	801080a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8010806:	2303      	movs	r3, #3
 8010808:	e0fd      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801080a:	4b81      	ldr	r3, [pc, #516]	; (8010a10 <HAL_RCC_OscConfig+0x4d4>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010812:	2b00      	cmp	r3, #0
 8010814:	d0f0      	beq.n	80107f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	689b      	ldr	r3, [r3, #8]
 801081a:	2b01      	cmp	r3, #1
 801081c:	d106      	bne.n	801082c <HAL_RCC_OscConfig+0x2f0>
 801081e:	4b7d      	ldr	r3, [pc, #500]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010822:	4a7c      	ldr	r2, [pc, #496]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010824:	f043 0301 	orr.w	r3, r3, #1
 8010828:	6713      	str	r3, [r2, #112]	; 0x70
 801082a:	e01c      	b.n	8010866 <HAL_RCC_OscConfig+0x32a>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	2b05      	cmp	r3, #5
 8010832:	d10c      	bne.n	801084e <HAL_RCC_OscConfig+0x312>
 8010834:	4b77      	ldr	r3, [pc, #476]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010838:	4a76      	ldr	r2, [pc, #472]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 801083a:	f043 0304 	orr.w	r3, r3, #4
 801083e:	6713      	str	r3, [r2, #112]	; 0x70
 8010840:	4b74      	ldr	r3, [pc, #464]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010844:	4a73      	ldr	r2, [pc, #460]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010846:	f043 0301 	orr.w	r3, r3, #1
 801084a:	6713      	str	r3, [r2, #112]	; 0x70
 801084c:	e00b      	b.n	8010866 <HAL_RCC_OscConfig+0x32a>
 801084e:	4b71      	ldr	r3, [pc, #452]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010852:	4a70      	ldr	r2, [pc, #448]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010854:	f023 0301 	bic.w	r3, r3, #1
 8010858:	6713      	str	r3, [r2, #112]	; 0x70
 801085a:	4b6e      	ldr	r3, [pc, #440]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 801085c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801085e:	4a6d      	ldr	r2, [pc, #436]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010860:	f023 0304 	bic.w	r3, r3, #4
 8010864:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	689b      	ldr	r3, [r3, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d015      	beq.n	801089a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801086e:	f7fd f965 	bl	800db3c <HAL_GetTick>
 8010872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010874:	e00a      	b.n	801088c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010876:	f7fd f961 	bl	800db3c <HAL_GetTick>
 801087a:	4602      	mov	r2, r0
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	f241 3288 	movw	r2, #5000	; 0x1388
 8010884:	4293      	cmp	r3, r2
 8010886:	d901      	bls.n	801088c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8010888:	2303      	movs	r3, #3
 801088a:	e0bc      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801088c:	4b61      	ldr	r3, [pc, #388]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 801088e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010890:	f003 0302 	and.w	r3, r3, #2
 8010894:	2b00      	cmp	r3, #0
 8010896:	d0ee      	beq.n	8010876 <HAL_RCC_OscConfig+0x33a>
 8010898:	e014      	b.n	80108c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801089a:	f7fd f94f 	bl	800db3c <HAL_GetTick>
 801089e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80108a0:	e00a      	b.n	80108b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80108a2:	f7fd f94b 	bl	800db3c <HAL_GetTick>
 80108a6:	4602      	mov	r2, r0
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d901      	bls.n	80108b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80108b4:	2303      	movs	r3, #3
 80108b6:	e0a6      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80108b8:	4b56      	ldr	r3, [pc, #344]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 80108ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108bc:	f003 0302 	and.w	r3, r3, #2
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1ee      	bne.n	80108a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80108c4:	7dfb      	ldrb	r3, [r7, #23]
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d105      	bne.n	80108d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80108ca:	4b52      	ldr	r3, [pc, #328]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 80108cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ce:	4a51      	ldr	r2, [pc, #324]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 80108d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80108d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 8092 	beq.w	8010a04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80108e0:	4b4c      	ldr	r3, [pc, #304]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 80108e2:	689b      	ldr	r3, [r3, #8]
 80108e4:	f003 030c 	and.w	r3, r3, #12
 80108e8:	2b08      	cmp	r3, #8
 80108ea:	d05c      	beq.n	80109a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	699b      	ldr	r3, [r3, #24]
 80108f0:	2b02      	cmp	r3, #2
 80108f2:	d141      	bne.n	8010978 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80108f4:	4b48      	ldr	r3, [pc, #288]	; (8010a18 <HAL_RCC_OscConfig+0x4dc>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80108fa:	f7fd f91f 	bl	800db3c <HAL_GetTick>
 80108fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010900:	e008      	b.n	8010914 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010902:	f7fd f91b 	bl	800db3c <HAL_GetTick>
 8010906:	4602      	mov	r2, r0
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	2b02      	cmp	r3, #2
 801090e:	d901      	bls.n	8010914 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8010910:	2303      	movs	r3, #3
 8010912:	e078      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010914:	4b3f      	ldr	r3, [pc, #252]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1f0      	bne.n	8010902 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	69da      	ldr	r2, [r3, #28]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6a1b      	ldr	r3, [r3, #32]
 8010928:	431a      	orrs	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801092e:	019b      	lsls	r3, r3, #6
 8010930:	431a      	orrs	r2, r3
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010936:	085b      	lsrs	r3, r3, #1
 8010938:	3b01      	subs	r3, #1
 801093a:	041b      	lsls	r3, r3, #16
 801093c:	431a      	orrs	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010942:	061b      	lsls	r3, r3, #24
 8010944:	4933      	ldr	r1, [pc, #204]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 8010946:	4313      	orrs	r3, r2
 8010948:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801094a:	4b33      	ldr	r3, [pc, #204]	; (8010a18 <HAL_RCC_OscConfig+0x4dc>)
 801094c:	2201      	movs	r2, #1
 801094e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010950:	f7fd f8f4 	bl	800db3c <HAL_GetTick>
 8010954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010956:	e008      	b.n	801096a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010958:	f7fd f8f0 	bl	800db3c <HAL_GetTick>
 801095c:	4602      	mov	r2, r0
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	2b02      	cmp	r3, #2
 8010964:	d901      	bls.n	801096a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010966:	2303      	movs	r3, #3
 8010968:	e04d      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801096a:	4b2a      	ldr	r3, [pc, #168]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010972:	2b00      	cmp	r3, #0
 8010974:	d0f0      	beq.n	8010958 <HAL_RCC_OscConfig+0x41c>
 8010976:	e045      	b.n	8010a04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010978:	4b27      	ldr	r3, [pc, #156]	; (8010a18 <HAL_RCC_OscConfig+0x4dc>)
 801097a:	2200      	movs	r2, #0
 801097c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801097e:	f7fd f8dd 	bl	800db3c <HAL_GetTick>
 8010982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010984:	e008      	b.n	8010998 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010986:	f7fd f8d9 	bl	800db3c <HAL_GetTick>
 801098a:	4602      	mov	r2, r0
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	2b02      	cmp	r3, #2
 8010992:	d901      	bls.n	8010998 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010994:	2303      	movs	r3, #3
 8010996:	e036      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010998:	4b1e      	ldr	r3, [pc, #120]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d1f0      	bne.n	8010986 <HAL_RCC_OscConfig+0x44a>
 80109a4:	e02e      	b.n	8010a04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	699b      	ldr	r3, [r3, #24]
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d101      	bne.n	80109b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80109ae:	2301      	movs	r3, #1
 80109b0:	e029      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80109b2:	4b18      	ldr	r3, [pc, #96]	; (8010a14 <HAL_RCC_OscConfig+0x4d8>)
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	69db      	ldr	r3, [r3, #28]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d11c      	bne.n	8010a00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d115      	bne.n	8010a00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80109da:	4013      	ands	r3, r2
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d10d      	bne.n	8010a00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d106      	bne.n	8010a00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d001      	beq.n	8010a04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8010a00:	2301      	movs	r3, #1
 8010a02:	e000      	b.n	8010a06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8010a04:	2300      	movs	r3, #0
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3718      	adds	r7, #24
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	40007000 	.word	0x40007000
 8010a14:	40023800 	.word	0x40023800
 8010a18:	42470060 	.word	0x42470060

08010a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d101      	bne.n	8010a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e0cc      	b.n	8010bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010a30:	4b68      	ldr	r3, [pc, #416]	; (8010bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f003 030f 	and.w	r3, r3, #15
 8010a38:	683a      	ldr	r2, [r7, #0]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d90c      	bls.n	8010a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010a3e:	4b65      	ldr	r3, [pc, #404]	; (8010bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8010a40:	683a      	ldr	r2, [r7, #0]
 8010a42:	b2d2      	uxtb	r2, r2
 8010a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010a46:	4b63      	ldr	r3, [pc, #396]	; (8010bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f003 030f 	and.w	r3, r3, #15
 8010a4e:	683a      	ldr	r2, [r7, #0]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d001      	beq.n	8010a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010a54:	2301      	movs	r3, #1
 8010a56:	e0b8      	b.n	8010bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f003 0302 	and.w	r3, r3, #2
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d020      	beq.n	8010aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f003 0304 	and.w	r3, r3, #4
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d005      	beq.n	8010a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010a70:	4b59      	ldr	r3, [pc, #356]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	4a58      	ldr	r2, [pc, #352]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f003 0308 	and.w	r3, r3, #8
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d005      	beq.n	8010a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010a88:	4b53      	ldr	r3, [pc, #332]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	4a52      	ldr	r2, [pc, #328]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010a94:	4b50      	ldr	r3, [pc, #320]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	494d      	ldr	r1, [pc, #308]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010aa2:	4313      	orrs	r3, r2
 8010aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f003 0301 	and.w	r3, r3, #1
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d044      	beq.n	8010b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d107      	bne.n	8010aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010aba:	4b47      	ldr	r3, [pc, #284]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d119      	bne.n	8010afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	e07f      	b.n	8010bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	2b02      	cmp	r3, #2
 8010ad0:	d003      	beq.n	8010ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010ad6:	2b03      	cmp	r3, #3
 8010ad8:	d107      	bne.n	8010aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010ada:	4b3f      	ldr	r3, [pc, #252]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d109      	bne.n	8010afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	e06f      	b.n	8010bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010aea:	4b3b      	ldr	r3, [pc, #236]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f003 0302 	and.w	r3, r3, #2
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d101      	bne.n	8010afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010af6:	2301      	movs	r3, #1
 8010af8:	e067      	b.n	8010bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010afa:	4b37      	ldr	r3, [pc, #220]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	f023 0203 	bic.w	r2, r3, #3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	4934      	ldr	r1, [pc, #208]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010b0c:	f7fd f816 	bl	800db3c <HAL_GetTick>
 8010b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010b12:	e00a      	b.n	8010b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010b14:	f7fd f812 	bl	800db3c <HAL_GetTick>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d901      	bls.n	8010b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010b26:	2303      	movs	r3, #3
 8010b28:	e04f      	b.n	8010bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010b2a:	4b2b      	ldr	r3, [pc, #172]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	f003 020c 	and.w	r2, r3, #12
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	009b      	lsls	r3, r3, #2
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d1eb      	bne.n	8010b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010b3c:	4b25      	ldr	r3, [pc, #148]	; (8010bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	f003 030f 	and.w	r3, r3, #15
 8010b44:	683a      	ldr	r2, [r7, #0]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d20c      	bcs.n	8010b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b4a:	4b22      	ldr	r3, [pc, #136]	; (8010bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8010b4c:	683a      	ldr	r2, [r7, #0]
 8010b4e:	b2d2      	uxtb	r2, r2
 8010b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010b52:	4b20      	ldr	r3, [pc, #128]	; (8010bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f003 030f 	and.w	r3, r3, #15
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d001      	beq.n	8010b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010b60:	2301      	movs	r3, #1
 8010b62:	e032      	b.n	8010bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f003 0304 	and.w	r3, r3, #4
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d008      	beq.n	8010b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010b70:	4b19      	ldr	r3, [pc, #100]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	4916      	ldr	r1, [pc, #88]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f003 0308 	and.w	r3, r3, #8
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d009      	beq.n	8010ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010b8e:	4b12      	ldr	r3, [pc, #72]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	691b      	ldr	r3, [r3, #16]
 8010b9a:	00db      	lsls	r3, r3, #3
 8010b9c:	490e      	ldr	r1, [pc, #56]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010ba2:	f000 f821 	bl	8010be8 <HAL_RCC_GetSysClockFreq>
 8010ba6:	4601      	mov	r1, r0
 8010ba8:	4b0b      	ldr	r3, [pc, #44]	; (8010bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	091b      	lsrs	r3, r3, #4
 8010bae:	f003 030f 	and.w	r3, r3, #15
 8010bb2:	4a0a      	ldr	r2, [pc, #40]	; (8010bdc <HAL_RCC_ClockConfig+0x1c0>)
 8010bb4:	5cd3      	ldrb	r3, [r2, r3]
 8010bb6:	fa21 f303 	lsr.w	r3, r1, r3
 8010bba:	4a09      	ldr	r2, [pc, #36]	; (8010be0 <HAL_RCC_ClockConfig+0x1c4>)
 8010bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010bbe:	4b09      	ldr	r3, [pc, #36]	; (8010be4 <HAL_RCC_ClockConfig+0x1c8>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7f6 f88c 	bl	8006ce0 <HAL_InitTick>

  return HAL_OK;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	40023c00 	.word	0x40023c00
 8010bd8:	40023800 	.word	0x40023800
 8010bdc:	0801c2c0 	.word	0x0801c2c0
 8010be0:	20000144 	.word	0x20000144
 8010be4:	20000148 	.word	0x20000148

08010be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bea:	b085      	sub	sp, #20
 8010bec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	607b      	str	r3, [r7, #4]
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	60fb      	str	r3, [r7, #12]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010bfe:	4b63      	ldr	r3, [pc, #396]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c00:	689b      	ldr	r3, [r3, #8]
 8010c02:	f003 030c 	and.w	r3, r3, #12
 8010c06:	2b04      	cmp	r3, #4
 8010c08:	d007      	beq.n	8010c1a <HAL_RCC_GetSysClockFreq+0x32>
 8010c0a:	2b08      	cmp	r3, #8
 8010c0c:	d008      	beq.n	8010c20 <HAL_RCC_GetSysClockFreq+0x38>
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	f040 80b4 	bne.w	8010d7c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010c14:	4b5e      	ldr	r3, [pc, #376]	; (8010d90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010c16:	60bb      	str	r3, [r7, #8]
       break;
 8010c18:	e0b3      	b.n	8010d82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010c1a:	4b5e      	ldr	r3, [pc, #376]	; (8010d94 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8010c1c:	60bb      	str	r3, [r7, #8]
      break;
 8010c1e:	e0b0      	b.n	8010d82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010c20:	4b5a      	ldr	r3, [pc, #360]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010c2a:	4b58      	ldr	r3, [pc, #352]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d04a      	beq.n	8010ccc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010c36:	4b55      	ldr	r3, [pc, #340]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	099b      	lsrs	r3, r3, #6
 8010c3c:	f04f 0400 	mov.w	r4, #0
 8010c40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010c44:	f04f 0200 	mov.w	r2, #0
 8010c48:	ea03 0501 	and.w	r5, r3, r1
 8010c4c:	ea04 0602 	and.w	r6, r4, r2
 8010c50:	4629      	mov	r1, r5
 8010c52:	4632      	mov	r2, r6
 8010c54:	f04f 0300 	mov.w	r3, #0
 8010c58:	f04f 0400 	mov.w	r4, #0
 8010c5c:	0154      	lsls	r4, r2, #5
 8010c5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010c62:	014b      	lsls	r3, r1, #5
 8010c64:	4619      	mov	r1, r3
 8010c66:	4622      	mov	r2, r4
 8010c68:	1b49      	subs	r1, r1, r5
 8010c6a:	eb62 0206 	sbc.w	r2, r2, r6
 8010c6e:	f04f 0300 	mov.w	r3, #0
 8010c72:	f04f 0400 	mov.w	r4, #0
 8010c76:	0194      	lsls	r4, r2, #6
 8010c78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010c7c:	018b      	lsls	r3, r1, #6
 8010c7e:	1a5b      	subs	r3, r3, r1
 8010c80:	eb64 0402 	sbc.w	r4, r4, r2
 8010c84:	f04f 0100 	mov.w	r1, #0
 8010c88:	f04f 0200 	mov.w	r2, #0
 8010c8c:	00e2      	lsls	r2, r4, #3
 8010c8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010c92:	00d9      	lsls	r1, r3, #3
 8010c94:	460b      	mov	r3, r1
 8010c96:	4614      	mov	r4, r2
 8010c98:	195b      	adds	r3, r3, r5
 8010c9a:	eb44 0406 	adc.w	r4, r4, r6
 8010c9e:	f04f 0100 	mov.w	r1, #0
 8010ca2:	f04f 0200 	mov.w	r2, #0
 8010ca6:	0262      	lsls	r2, r4, #9
 8010ca8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8010cac:	0259      	lsls	r1, r3, #9
 8010cae:	460b      	mov	r3, r1
 8010cb0:	4614      	mov	r4, r2
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	4621      	mov	r1, r4
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f04f 0400 	mov.w	r4, #0
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	4623      	mov	r3, r4
 8010cc0:	f7ef ffec 	bl	8000c9c <__aeabi_uldivmod>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	460c      	mov	r4, r1
 8010cc8:	60fb      	str	r3, [r7, #12]
 8010cca:	e049      	b.n	8010d60 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010ccc:	4b2f      	ldr	r3, [pc, #188]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	099b      	lsrs	r3, r3, #6
 8010cd2:	f04f 0400 	mov.w	r4, #0
 8010cd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010cda:	f04f 0200 	mov.w	r2, #0
 8010cde:	ea03 0501 	and.w	r5, r3, r1
 8010ce2:	ea04 0602 	and.w	r6, r4, r2
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	4632      	mov	r2, r6
 8010cea:	f04f 0300 	mov.w	r3, #0
 8010cee:	f04f 0400 	mov.w	r4, #0
 8010cf2:	0154      	lsls	r4, r2, #5
 8010cf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010cf8:	014b      	lsls	r3, r1, #5
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	4622      	mov	r2, r4
 8010cfe:	1b49      	subs	r1, r1, r5
 8010d00:	eb62 0206 	sbc.w	r2, r2, r6
 8010d04:	f04f 0300 	mov.w	r3, #0
 8010d08:	f04f 0400 	mov.w	r4, #0
 8010d0c:	0194      	lsls	r4, r2, #6
 8010d0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010d12:	018b      	lsls	r3, r1, #6
 8010d14:	1a5b      	subs	r3, r3, r1
 8010d16:	eb64 0402 	sbc.w	r4, r4, r2
 8010d1a:	f04f 0100 	mov.w	r1, #0
 8010d1e:	f04f 0200 	mov.w	r2, #0
 8010d22:	00e2      	lsls	r2, r4, #3
 8010d24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010d28:	00d9      	lsls	r1, r3, #3
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	4614      	mov	r4, r2
 8010d2e:	195b      	adds	r3, r3, r5
 8010d30:	eb44 0406 	adc.w	r4, r4, r6
 8010d34:	f04f 0100 	mov.w	r1, #0
 8010d38:	f04f 0200 	mov.w	r2, #0
 8010d3c:	02a2      	lsls	r2, r4, #10
 8010d3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8010d42:	0299      	lsls	r1, r3, #10
 8010d44:	460b      	mov	r3, r1
 8010d46:	4614      	mov	r4, r2
 8010d48:	4618      	mov	r0, r3
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f04f 0400 	mov.w	r4, #0
 8010d52:	461a      	mov	r2, r3
 8010d54:	4623      	mov	r3, r4
 8010d56:	f7ef ffa1 	bl	8000c9c <__aeabi_uldivmod>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	460c      	mov	r4, r1
 8010d5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010d60:	4b0a      	ldr	r3, [pc, #40]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	0c1b      	lsrs	r3, r3, #16
 8010d66:	f003 0303 	and.w	r3, r3, #3
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	005b      	lsls	r3, r3, #1
 8010d6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8010d70:	68fa      	ldr	r2, [r7, #12]
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d78:	60bb      	str	r3, [r7, #8]
      break;
 8010d7a:	e002      	b.n	8010d82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010d7c:	4b04      	ldr	r3, [pc, #16]	; (8010d90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010d7e:	60bb      	str	r3, [r7, #8]
      break;
 8010d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010d82:	68bb      	ldr	r3, [r7, #8]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3714      	adds	r7, #20
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d8c:	40023800 	.word	0x40023800
 8010d90:	00f42400 	.word	0x00f42400
 8010d94:	007a1200 	.word	0x007a1200

08010d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010d9c:	4b03      	ldr	r3, [pc, #12]	; (8010dac <HAL_RCC_GetHCLKFreq+0x14>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop
 8010dac:	20000144 	.word	0x20000144

08010db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010db4:	f7ff fff0 	bl	8010d98 <HAL_RCC_GetHCLKFreq>
 8010db8:	4601      	mov	r1, r0
 8010dba:	4b05      	ldr	r3, [pc, #20]	; (8010dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	0a9b      	lsrs	r3, r3, #10
 8010dc0:	f003 0307 	and.w	r3, r3, #7
 8010dc4:	4a03      	ldr	r2, [pc, #12]	; (8010dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010dc6:	5cd3      	ldrb	r3, [r2, r3]
 8010dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	40023800 	.word	0x40023800
 8010dd4:	0801c2d0 	.word	0x0801c2d0

08010dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010ddc:	f7ff ffdc 	bl	8010d98 <HAL_RCC_GetHCLKFreq>
 8010de0:	4601      	mov	r1, r0
 8010de2:	4b05      	ldr	r3, [pc, #20]	; (8010df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	0b5b      	lsrs	r3, r3, #13
 8010de8:	f003 0307 	and.w	r3, r3, #7
 8010dec:	4a03      	ldr	r2, [pc, #12]	; (8010dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8010dee:	5cd3      	ldrb	r3, [r2, r3]
 8010df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	40023800 	.word	0x40023800
 8010dfc:	0801c2d0 	.word	0x0801c2d0

08010e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	220f      	movs	r2, #15
 8010e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010e10:	4b12      	ldr	r3, [pc, #72]	; (8010e5c <HAL_RCC_GetClockConfig+0x5c>)
 8010e12:	689b      	ldr	r3, [r3, #8]
 8010e14:	f003 0203 	and.w	r2, r3, #3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010e1c:	4b0f      	ldr	r3, [pc, #60]	; (8010e5c <HAL_RCC_GetClockConfig+0x5c>)
 8010e1e:	689b      	ldr	r3, [r3, #8]
 8010e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010e28:	4b0c      	ldr	r3, [pc, #48]	; (8010e5c <HAL_RCC_GetClockConfig+0x5c>)
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010e34:	4b09      	ldr	r3, [pc, #36]	; (8010e5c <HAL_RCC_GetClockConfig+0x5c>)
 8010e36:	689b      	ldr	r3, [r3, #8]
 8010e38:	08db      	lsrs	r3, r3, #3
 8010e3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010e42:	4b07      	ldr	r3, [pc, #28]	; (8010e60 <HAL_RCC_GetClockConfig+0x60>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f003 020f 	and.w	r2, r3, #15
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	601a      	str	r2, [r3, #0]
}
 8010e4e:	bf00      	nop
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	40023800 	.word	0x40023800
 8010e60:	40023c00 	.word	0x40023c00

08010e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d101      	bne.n	8010e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010e72:	2301      	movs	r3, #1
 8010e74:	e056      	b.n	8010f24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d106      	bne.n	8010e96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f7f5 fe7b 	bl	8006b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2202      	movs	r2, #2
 8010e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010eac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	685a      	ldr	r2, [r3, #4]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	431a      	orrs	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	431a      	orrs	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	691b      	ldr	r3, [r3, #16]
 8010ec2:	431a      	orrs	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	695b      	ldr	r3, [r3, #20]
 8010ec8:	431a      	orrs	r2, r3
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	699b      	ldr	r3, [r3, #24]
 8010ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010ed2:	431a      	orrs	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	69db      	ldr	r3, [r3, #28]
 8010ed8:	431a      	orrs	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6a1b      	ldr	r3, [r3, #32]
 8010ede:	ea42 0103 	orr.w	r1, r2, r3
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	430a      	orrs	r2, r1
 8010eec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	699b      	ldr	r3, [r3, #24]
 8010ef2:	0c1b      	lsrs	r3, r3, #16
 8010ef4:	f003 0104 	and.w	r1, r3, #4
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	430a      	orrs	r2, r1
 8010f02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	69da      	ldr	r2, [r3, #28]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010f12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010f22:	2300      	movs	r3, #0
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b088      	sub	sp, #32
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	603b      	str	r3, [r7, #0]
 8010f38:	4613      	mov	r3, r2
 8010f3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d101      	bne.n	8010f4e <HAL_SPI_Transmit+0x22>
 8010f4a:	2302      	movs	r3, #2
 8010f4c:	e11e      	b.n	801118c <HAL_SPI_Transmit+0x260>
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2201      	movs	r2, #1
 8010f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010f56:	f7fc fdf1 	bl	800db3c <HAL_GetTick>
 8010f5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010f5c:	88fb      	ldrh	r3, [r7, #6]
 8010f5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d002      	beq.n	8010f72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010f70:	e103      	b.n	801117a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d002      	beq.n	8010f7e <HAL_SPI_Transmit+0x52>
 8010f78:	88fb      	ldrh	r3, [r7, #6]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d102      	bne.n	8010f84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010f82:	e0fa      	b.n	801117a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2203      	movs	r2, #3
 8010f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	68ba      	ldr	r2, [r7, #8]
 8010f96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	88fa      	ldrh	r2, [r7, #6]
 8010f9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	88fa      	ldrh	r2, [r7, #6]
 8010fa2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2200      	movs	r2, #0
 8010fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010fca:	d107      	bne.n	8010fdc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010fda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fe6:	2b40      	cmp	r3, #64	; 0x40
 8010fe8:	d007      	beq.n	8010ffa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010ff8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011002:	d14b      	bne.n	801109c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d002      	beq.n	8011012 <HAL_SPI_Transmit+0xe6>
 801100c:	8afb      	ldrh	r3, [r7, #22]
 801100e:	2b01      	cmp	r3, #1
 8011010:	d13e      	bne.n	8011090 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011016:	881a      	ldrh	r2, [r3, #0]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011022:	1c9a      	adds	r2, r3, #2
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801102c:	b29b      	uxth	r3, r3
 801102e:	3b01      	subs	r3, #1
 8011030:	b29a      	uxth	r2, r3
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011036:	e02b      	b.n	8011090 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	f003 0302 	and.w	r3, r3, #2
 8011042:	2b02      	cmp	r3, #2
 8011044:	d112      	bne.n	801106c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801104a:	881a      	ldrh	r2, [r3, #0]
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011056:	1c9a      	adds	r2, r3, #2
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011060:	b29b      	uxth	r3, r3
 8011062:	3b01      	subs	r3, #1
 8011064:	b29a      	uxth	r2, r3
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	86da      	strh	r2, [r3, #54]	; 0x36
 801106a:	e011      	b.n	8011090 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801106c:	f7fc fd66 	bl	800db3c <HAL_GetTick>
 8011070:	4602      	mov	r2, r0
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	1ad3      	subs	r3, r2, r3
 8011076:	683a      	ldr	r2, [r7, #0]
 8011078:	429a      	cmp	r2, r3
 801107a:	d803      	bhi.n	8011084 <HAL_SPI_Transmit+0x158>
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011082:	d102      	bne.n	801108a <HAL_SPI_Transmit+0x15e>
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801108a:	2303      	movs	r3, #3
 801108c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801108e:	e074      	b.n	801117a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011094:	b29b      	uxth	r3, r3
 8011096:	2b00      	cmp	r3, #0
 8011098:	d1ce      	bne.n	8011038 <HAL_SPI_Transmit+0x10c>
 801109a:	e04c      	b.n	8011136 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d002      	beq.n	80110aa <HAL_SPI_Transmit+0x17e>
 80110a4:	8afb      	ldrh	r3, [r7, #22]
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	d140      	bne.n	801112c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	330c      	adds	r3, #12
 80110b4:	7812      	ldrb	r2, [r2, #0]
 80110b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110bc:	1c5a      	adds	r2, r3, #1
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	3b01      	subs	r3, #1
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80110d0:	e02c      	b.n	801112c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	689b      	ldr	r3, [r3, #8]
 80110d8:	f003 0302 	and.w	r3, r3, #2
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d113      	bne.n	8011108 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	330c      	adds	r3, #12
 80110ea:	7812      	ldrb	r2, [r2, #0]
 80110ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110f2:	1c5a      	adds	r2, r3, #1
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	3b01      	subs	r3, #1
 8011100:	b29a      	uxth	r2, r3
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	86da      	strh	r2, [r3, #54]	; 0x36
 8011106:	e011      	b.n	801112c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011108:	f7fc fd18 	bl	800db3c <HAL_GetTick>
 801110c:	4602      	mov	r2, r0
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	429a      	cmp	r2, r3
 8011116:	d803      	bhi.n	8011120 <HAL_SPI_Transmit+0x1f4>
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801111e:	d102      	bne.n	8011126 <HAL_SPI_Transmit+0x1fa>
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d102      	bne.n	801112c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8011126:	2303      	movs	r3, #3
 8011128:	77fb      	strb	r3, [r7, #31]
          goto error;
 801112a:	e026      	b.n	801117a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011130:	b29b      	uxth	r3, r3
 8011132:	2b00      	cmp	r3, #0
 8011134:	d1cd      	bne.n	80110d2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011136:	69ba      	ldr	r2, [r7, #24]
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f000 fba4 	bl	8011888 <SPI_EndRxTxTransaction>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d002      	beq.n	801114c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2220      	movs	r2, #32
 801114a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	689b      	ldr	r3, [r3, #8]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d10a      	bne.n	801116a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011154:	2300      	movs	r3, #0
 8011156:	613b      	str	r3, [r7, #16]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	613b      	str	r3, [r7, #16]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	613b      	str	r3, [r7, #16]
 8011168:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801116e:	2b00      	cmp	r3, #0
 8011170:	d002      	beq.n	8011178 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	77fb      	strb	r3, [r7, #31]
 8011176:	e000      	b.n	801117a <HAL_SPI_Transmit+0x24e>
  }

error:
 8011178:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2201      	movs	r2, #1
 801117e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2200      	movs	r2, #0
 8011186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801118a:	7ffb      	ldrb	r3, [r7, #31]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3720      	adds	r7, #32
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af02      	add	r7, sp, #8
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	60b9      	str	r1, [r7, #8]
 801119e:	603b      	str	r3, [r7, #0]
 80111a0:	4613      	mov	r3, r2
 80111a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80111a4:	2300      	movs	r3, #0
 80111a6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80111b0:	d112      	bne.n	80111d8 <HAL_SPI_Receive+0x44>
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10e      	bne.n	80111d8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2204      	movs	r2, #4
 80111be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80111c2:	88fa      	ldrh	r2, [r7, #6]
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	9300      	str	r3, [sp, #0]
 80111c8:	4613      	mov	r3, r2
 80111ca:	68ba      	ldr	r2, [r7, #8]
 80111cc:	68b9      	ldr	r1, [r7, #8]
 80111ce:	68f8      	ldr	r0, [r7, #12]
 80111d0:	f000 f8e9 	bl	80113a6 <HAL_SPI_TransmitReceive>
 80111d4:	4603      	mov	r3, r0
 80111d6:	e0e2      	b.n	801139e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d101      	bne.n	80111e6 <HAL_SPI_Receive+0x52>
 80111e2:	2302      	movs	r3, #2
 80111e4:	e0db      	b.n	801139e <HAL_SPI_Receive+0x20a>
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2201      	movs	r2, #1
 80111ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80111ee:	f7fc fca5 	bl	800db3c <HAL_GetTick>
 80111f2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d002      	beq.n	8011206 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8011200:	2302      	movs	r3, #2
 8011202:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011204:	e0c2      	b.n	801138c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d002      	beq.n	8011212 <HAL_SPI_Receive+0x7e>
 801120c:	88fb      	ldrh	r3, [r7, #6]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d102      	bne.n	8011218 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011216:	e0b9      	b.n	801138c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2204      	movs	r2, #4
 801121c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2200      	movs	r2, #0
 8011224:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	68ba      	ldr	r2, [r7, #8]
 801122a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	88fa      	ldrh	r2, [r7, #6]
 8011230:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	88fa      	ldrh	r2, [r7, #6]
 8011236:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2200      	movs	r2, #0
 801123c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2200      	movs	r2, #0
 8011242:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2200      	movs	r2, #0
 8011248:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2200      	movs	r2, #0
 801124e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2200      	movs	r2, #0
 8011254:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	689b      	ldr	r3, [r3, #8]
 801125a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801125e:	d107      	bne.n	8011270 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801126e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801127a:	2b40      	cmp	r3, #64	; 0x40
 801127c:	d007      	beq.n	801128e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801128c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d162      	bne.n	801135c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011296:	e02e      	b.n	80112f6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	f003 0301 	and.w	r3, r3, #1
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d115      	bne.n	80112d2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f103 020c 	add.w	r2, r3, #12
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112b2:	7812      	ldrb	r2, [r2, #0]
 80112b4:	b2d2      	uxtb	r2, r2
 80112b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112bc:	1c5a      	adds	r2, r3, #1
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	3b01      	subs	r3, #1
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80112d0:	e011      	b.n	80112f6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112d2:	f7fc fc33 	bl	800db3c <HAL_GetTick>
 80112d6:	4602      	mov	r2, r0
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	683a      	ldr	r2, [r7, #0]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d803      	bhi.n	80112ea <HAL_SPI_Receive+0x156>
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112e8:	d102      	bne.n	80112f0 <HAL_SPI_Receive+0x15c>
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d102      	bne.n	80112f6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80112f0:	2303      	movs	r3, #3
 80112f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80112f4:	e04a      	b.n	801138c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d1cb      	bne.n	8011298 <HAL_SPI_Receive+0x104>
 8011300:	e031      	b.n	8011366 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	689b      	ldr	r3, [r3, #8]
 8011308:	f003 0301 	and.w	r3, r3, #1
 801130c:	2b01      	cmp	r3, #1
 801130e:	d113      	bne.n	8011338 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68da      	ldr	r2, [r3, #12]
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801131a:	b292      	uxth	r2, r2
 801131c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011322:	1c9a      	adds	r2, r3, #2
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801132c:	b29b      	uxth	r3, r3
 801132e:	3b01      	subs	r3, #1
 8011330:	b29a      	uxth	r2, r3
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011336:	e011      	b.n	801135c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011338:	f7fc fc00 	bl	800db3c <HAL_GetTick>
 801133c:	4602      	mov	r2, r0
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	1ad3      	subs	r3, r2, r3
 8011342:	683a      	ldr	r2, [r7, #0]
 8011344:	429a      	cmp	r2, r3
 8011346:	d803      	bhi.n	8011350 <HAL_SPI_Receive+0x1bc>
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801134e:	d102      	bne.n	8011356 <HAL_SPI_Receive+0x1c2>
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d102      	bne.n	801135c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8011356:	2303      	movs	r3, #3
 8011358:	75fb      	strb	r3, [r7, #23]
          goto error;
 801135a:	e017      	b.n	801138c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011360:	b29b      	uxth	r3, r3
 8011362:	2b00      	cmp	r3, #0
 8011364:	d1cd      	bne.n	8011302 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011366:	693a      	ldr	r2, [r7, #16]
 8011368:	6839      	ldr	r1, [r7, #0]
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	f000 fa27 	bl	80117be <SPI_EndRxTransaction>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d002      	beq.n	801137c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2220      	movs	r2, #32
 801137a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011380:	2b00      	cmp	r3, #0
 8011382:	d002      	beq.n	801138a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8011384:	2301      	movs	r3, #1
 8011386:	75fb      	strb	r3, [r7, #23]
 8011388:	e000      	b.n	801138c <HAL_SPI_Receive+0x1f8>
  }

error :
 801138a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2201      	movs	r2, #1
 8011390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2200      	movs	r2, #0
 8011398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801139c:	7dfb      	ldrb	r3, [r7, #23]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3718      	adds	r7, #24
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}

080113a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80113a6:	b580      	push	{r7, lr}
 80113a8:	b08c      	sub	sp, #48	; 0x30
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	60f8      	str	r0, [r7, #12]
 80113ae:	60b9      	str	r1, [r7, #8]
 80113b0:	607a      	str	r2, [r7, #4]
 80113b2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80113b4:	2301      	movs	r3, #1
 80113b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80113b8:	2300      	movs	r3, #0
 80113ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d101      	bne.n	80113cc <HAL_SPI_TransmitReceive+0x26>
 80113c8:	2302      	movs	r3, #2
 80113ca:	e18a      	b.n	80116e2 <HAL_SPI_TransmitReceive+0x33c>
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2201      	movs	r2, #1
 80113d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80113d4:	f7fc fbb2 	bl	800db3c <HAL_GetTick>
 80113d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80113ea:	887b      	ldrh	r3, [r7, #2]
 80113ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80113ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d00f      	beq.n	8011416 <HAL_SPI_TransmitReceive+0x70>
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80113fc:	d107      	bne.n	801140e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	689b      	ldr	r3, [r3, #8]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d103      	bne.n	801140e <HAL_SPI_TransmitReceive+0x68>
 8011406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801140a:	2b04      	cmp	r3, #4
 801140c:	d003      	beq.n	8011416 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801140e:	2302      	movs	r3, #2
 8011410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011414:	e15b      	b.n	80116ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d005      	beq.n	8011428 <HAL_SPI_TransmitReceive+0x82>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d002      	beq.n	8011428 <HAL_SPI_TransmitReceive+0x82>
 8011422:	887b      	ldrh	r3, [r7, #2]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d103      	bne.n	8011430 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8011428:	2301      	movs	r3, #1
 801142a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801142e:	e14e      	b.n	80116ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011436:	b2db      	uxtb	r3, r3
 8011438:	2b04      	cmp	r3, #4
 801143a:	d003      	beq.n	8011444 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2205      	movs	r2, #5
 8011440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2200      	movs	r2, #0
 8011448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	887a      	ldrh	r2, [r7, #2]
 8011454:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	887a      	ldrh	r2, [r7, #2]
 801145a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	68ba      	ldr	r2, [r7, #8]
 8011460:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	887a      	ldrh	r2, [r7, #2]
 8011466:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	887a      	ldrh	r2, [r7, #2]
 801146c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2200      	movs	r2, #0
 8011472:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2200      	movs	r2, #0
 8011478:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011484:	2b40      	cmp	r3, #64	; 0x40
 8011486:	d007      	beq.n	8011498 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114a0:	d178      	bne.n	8011594 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d002      	beq.n	80114b0 <HAL_SPI_TransmitReceive+0x10a>
 80114aa:	8b7b      	ldrh	r3, [r7, #26]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d166      	bne.n	801157e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114b4:	881a      	ldrh	r2, [r3, #0]
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114c0:	1c9a      	adds	r2, r3, #2
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	3b01      	subs	r3, #1
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80114d4:	e053      	b.n	801157e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	f003 0302 	and.w	r3, r3, #2
 80114e0:	2b02      	cmp	r3, #2
 80114e2:	d11b      	bne.n	801151c <HAL_SPI_TransmitReceive+0x176>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d016      	beq.n	801151c <HAL_SPI_TransmitReceive+0x176>
 80114ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d113      	bne.n	801151c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f8:	881a      	ldrh	r2, [r3, #0]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011504:	1c9a      	adds	r2, r3, #2
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801150e:	b29b      	uxth	r3, r3
 8011510:	3b01      	subs	r3, #1
 8011512:	b29a      	uxth	r2, r3
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011518:	2300      	movs	r3, #0
 801151a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	f003 0301 	and.w	r3, r3, #1
 8011526:	2b01      	cmp	r3, #1
 8011528:	d119      	bne.n	801155e <HAL_SPI_TransmitReceive+0x1b8>
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801152e:	b29b      	uxth	r3, r3
 8011530:	2b00      	cmp	r3, #0
 8011532:	d014      	beq.n	801155e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	68da      	ldr	r2, [r3, #12]
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801153e:	b292      	uxth	r2, r2
 8011540:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011546:	1c9a      	adds	r2, r3, #2
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011550:	b29b      	uxth	r3, r3
 8011552:	3b01      	subs	r3, #1
 8011554:	b29a      	uxth	r2, r3
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801155a:	2301      	movs	r3, #1
 801155c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801155e:	f7fc faed 	bl	800db3c <HAL_GetTick>
 8011562:	4602      	mov	r2, r0
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801156a:	429a      	cmp	r2, r3
 801156c:	d807      	bhi.n	801157e <HAL_SPI_TransmitReceive+0x1d8>
 801156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011574:	d003      	beq.n	801157e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8011576:	2303      	movs	r3, #3
 8011578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801157c:	e0a7      	b.n	80116ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011582:	b29b      	uxth	r3, r3
 8011584:	2b00      	cmp	r3, #0
 8011586:	d1a6      	bne.n	80114d6 <HAL_SPI_TransmitReceive+0x130>
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801158c:	b29b      	uxth	r3, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1a1      	bne.n	80114d6 <HAL_SPI_TransmitReceive+0x130>
 8011592:	e07c      	b.n	801168e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d002      	beq.n	80115a2 <HAL_SPI_TransmitReceive+0x1fc>
 801159c:	8b7b      	ldrh	r3, [r7, #26]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d16b      	bne.n	801167a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	330c      	adds	r3, #12
 80115ac:	7812      	ldrb	r2, [r2, #0]
 80115ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b4:	1c5a      	adds	r2, r3, #1
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115be:	b29b      	uxth	r3, r3
 80115c0:	3b01      	subs	r3, #1
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80115c8:	e057      	b.n	801167a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	689b      	ldr	r3, [r3, #8]
 80115d0:	f003 0302 	and.w	r3, r3, #2
 80115d4:	2b02      	cmp	r3, #2
 80115d6:	d11c      	bne.n	8011612 <HAL_SPI_TransmitReceive+0x26c>
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115dc:	b29b      	uxth	r3, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d017      	beq.n	8011612 <HAL_SPI_TransmitReceive+0x26c>
 80115e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d114      	bne.n	8011612 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	330c      	adds	r3, #12
 80115f2:	7812      	ldrb	r2, [r2, #0]
 80115f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115fa:	1c5a      	adds	r2, r3, #1
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011604:	b29b      	uxth	r3, r3
 8011606:	3b01      	subs	r3, #1
 8011608:	b29a      	uxth	r2, r3
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801160e:	2300      	movs	r3, #0
 8011610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	689b      	ldr	r3, [r3, #8]
 8011618:	f003 0301 	and.w	r3, r3, #1
 801161c:	2b01      	cmp	r3, #1
 801161e:	d119      	bne.n	8011654 <HAL_SPI_TransmitReceive+0x2ae>
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011624:	b29b      	uxth	r3, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d014      	beq.n	8011654 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	68da      	ldr	r2, [r3, #12]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011634:	b2d2      	uxtb	r2, r2
 8011636:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801163c:	1c5a      	adds	r2, r3, #1
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011646:	b29b      	uxth	r3, r3
 8011648:	3b01      	subs	r3, #1
 801164a:	b29a      	uxth	r2, r3
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011650:	2301      	movs	r3, #1
 8011652:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011654:	f7fc fa72 	bl	800db3c <HAL_GetTick>
 8011658:	4602      	mov	r2, r0
 801165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011660:	429a      	cmp	r2, r3
 8011662:	d803      	bhi.n	801166c <HAL_SPI_TransmitReceive+0x2c6>
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801166a:	d102      	bne.n	8011672 <HAL_SPI_TransmitReceive+0x2cc>
 801166c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166e:	2b00      	cmp	r3, #0
 8011670:	d103      	bne.n	801167a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011672:	2303      	movs	r3, #3
 8011674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011678:	e029      	b.n	80116ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801167e:	b29b      	uxth	r3, r3
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1a2      	bne.n	80115ca <HAL_SPI_TransmitReceive+0x224>
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011688:	b29b      	uxth	r3, r3
 801168a:	2b00      	cmp	r3, #0
 801168c:	d19d      	bne.n	80115ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011690:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f000 f8f8 	bl	8011888 <SPI_EndRxTxTransaction>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d006      	beq.n	80116ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801169e:	2301      	movs	r3, #1
 80116a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2220      	movs	r2, #32
 80116a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80116aa:	e010      	b.n	80116ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	689b      	ldr	r3, [r3, #8]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d10b      	bne.n	80116cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80116b4:	2300      	movs	r3, #0
 80116b6:	617b      	str	r3, [r7, #20]
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	617b      	str	r3, [r7, #20]
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	617b      	str	r3, [r7, #20]
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	e000      	b.n	80116ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80116cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2201      	movs	r2, #1
 80116d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2200      	movs	r2, #0
 80116da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80116de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3730      	adds	r7, #48	; 0x30
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80116ea:	b580      	push	{r7, lr}
 80116ec:	b084      	sub	sp, #16
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	60f8      	str	r0, [r7, #12]
 80116f2:	60b9      	str	r1, [r7, #8]
 80116f4:	603b      	str	r3, [r7, #0]
 80116f6:	4613      	mov	r3, r2
 80116f8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80116fa:	e04c      	b.n	8011796 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011702:	d048      	beq.n	8011796 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8011704:	f7fc fa1a 	bl	800db3c <HAL_GetTick>
 8011708:	4602      	mov	r2, r0
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	1ad3      	subs	r3, r2, r3
 801170e:	683a      	ldr	r2, [r7, #0]
 8011710:	429a      	cmp	r2, r3
 8011712:	d902      	bls.n	801171a <SPI_WaitFlagStateUntilTimeout+0x30>
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d13d      	bne.n	8011796 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	685a      	ldr	r2, [r3, #4]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011732:	d111      	bne.n	8011758 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801173c:	d004      	beq.n	8011748 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011746:	d107      	bne.n	8011758 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	681a      	ldr	r2, [r3, #0]
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801175c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011760:	d10f      	bne.n	8011782 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011770:	601a      	str	r2, [r3, #0]
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2201      	movs	r2, #1
 8011786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2200      	movs	r2, #0
 801178e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011792:	2303      	movs	r3, #3
 8011794:	e00f      	b.n	80117b6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	689a      	ldr	r2, [r3, #8]
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	4013      	ands	r3, r2
 80117a0:	68ba      	ldr	r2, [r7, #8]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	bf0c      	ite	eq
 80117a6:	2301      	moveq	r3, #1
 80117a8:	2300      	movne	r3, #0
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	461a      	mov	r2, r3
 80117ae:	79fb      	ldrb	r3, [r7, #7]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d1a3      	bne.n	80116fc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80117b4:	2300      	movs	r3, #0
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3710      	adds	r7, #16
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80117be:	b580      	push	{r7, lr}
 80117c0:	b086      	sub	sp, #24
 80117c2:	af02      	add	r7, sp, #8
 80117c4:	60f8      	str	r0, [r7, #12]
 80117c6:	60b9      	str	r1, [r7, #8]
 80117c8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80117d2:	d111      	bne.n	80117f8 <SPI_EndRxTransaction+0x3a>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	689b      	ldr	r3, [r3, #8]
 80117d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117dc:	d004      	beq.n	80117e8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117e6:	d107      	bne.n	80117f8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	681a      	ldr	r2, [r3, #0]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80117f6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011800:	d12a      	bne.n	8011858 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801180a:	d012      	beq.n	8011832 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	9300      	str	r3, [sp, #0]
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	2200      	movs	r2, #0
 8011814:	2180      	movs	r1, #128	; 0x80
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f7ff ff67 	bl	80116ea <SPI_WaitFlagStateUntilTimeout>
 801181c:	4603      	mov	r3, r0
 801181e:	2b00      	cmp	r3, #0
 8011820:	d02d      	beq.n	801187e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011826:	f043 0220 	orr.w	r2, r3, #32
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801182e:	2303      	movs	r3, #3
 8011830:	e026      	b.n	8011880 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	9300      	str	r3, [sp, #0]
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	2200      	movs	r2, #0
 801183a:	2101      	movs	r1, #1
 801183c:	68f8      	ldr	r0, [r7, #12]
 801183e:	f7ff ff54 	bl	80116ea <SPI_WaitFlagStateUntilTimeout>
 8011842:	4603      	mov	r3, r0
 8011844:	2b00      	cmp	r3, #0
 8011846:	d01a      	beq.n	801187e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801184c:	f043 0220 	orr.w	r2, r3, #32
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011854:	2303      	movs	r3, #3
 8011856:	e013      	b.n	8011880 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	9300      	str	r3, [sp, #0]
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	2200      	movs	r2, #0
 8011860:	2101      	movs	r1, #1
 8011862:	68f8      	ldr	r0, [r7, #12]
 8011864:	f7ff ff41 	bl	80116ea <SPI_WaitFlagStateUntilTimeout>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d007      	beq.n	801187e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011872:	f043 0220 	orr.w	r2, r3, #32
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801187a:	2303      	movs	r3, #3
 801187c:	e000      	b.n	8011880 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801187e:	2300      	movs	r3, #0
}
 8011880:	4618      	mov	r0, r3
 8011882:	3710      	adds	r7, #16
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b088      	sub	sp, #32
 801188c:	af02      	add	r7, sp, #8
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011894:	4b1b      	ldr	r3, [pc, #108]	; (8011904 <SPI_EndRxTxTransaction+0x7c>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a1b      	ldr	r2, [pc, #108]	; (8011908 <SPI_EndRxTxTransaction+0x80>)
 801189a:	fba2 2303 	umull	r2, r3, r2, r3
 801189e:	0d5b      	lsrs	r3, r3, #21
 80118a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80118a4:	fb02 f303 	mul.w	r3, r2, r3
 80118a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80118b2:	d112      	bne.n	80118da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	9300      	str	r3, [sp, #0]
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	2200      	movs	r2, #0
 80118bc:	2180      	movs	r1, #128	; 0x80
 80118be:	68f8      	ldr	r0, [r7, #12]
 80118c0:	f7ff ff13 	bl	80116ea <SPI_WaitFlagStateUntilTimeout>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d016      	beq.n	80118f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118ce:	f043 0220 	orr.w	r2, r3, #32
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80118d6:	2303      	movs	r3, #3
 80118d8:	e00f      	b.n	80118fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00a      	beq.n	80118f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	3b01      	subs	r3, #1
 80118e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118f0:	2b80      	cmp	r3, #128	; 0x80
 80118f2:	d0f2      	beq.n	80118da <SPI_EndRxTxTransaction+0x52>
 80118f4:	e000      	b.n	80118f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80118f6:	bf00      	nop
  }

  return HAL_OK;
 80118f8:	2300      	movs	r3, #0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3718      	adds	r7, #24
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	20000144 	.word	0x20000144
 8011908:	165e9f81 	.word	0x165e9f81

0801190c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d101      	bne.n	801191e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801191a:	2301      	movs	r3, #1
 801191c:	e01d      	b.n	801195a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011924:	b2db      	uxtb	r3, r3
 8011926:	2b00      	cmp	r3, #0
 8011928:	d106      	bne.n	8011938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7fb fd4c 	bl	800d3d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2202      	movs	r2, #2
 801193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	3304      	adds	r3, #4
 8011948:	4619      	mov	r1, r3
 801194a:	4610      	mov	r0, r2
 801194c:	f000 fd68 	bl	8012420 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2201      	movs	r2, #1
 8011954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}

08011962 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011962:	b480      	push	{r7}
 8011964:	b085      	sub	sp, #20
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2202      	movs	r2, #2
 801196e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	f003 0307 	and.w	r3, r3, #7
 801197c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2b06      	cmp	r3, #6
 8011982:	d007      	beq.n	8011994 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f042 0201 	orr.w	r2, r2, #1
 8011992:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2201      	movs	r2, #1
 8011998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801199c:	2300      	movs	r3, #0
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3714      	adds	r7, #20
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr

080119aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80119aa:	b480      	push	{r7}
 80119ac:	b085      	sub	sp, #20
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	68da      	ldr	r2, [r3, #12]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f042 0201 	orr.w	r2, r2, #1
 80119c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	f003 0307 	and.w	r3, r3, #7
 80119cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2b06      	cmp	r3, #6
 80119d2:	d007      	beq.n	80119e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	681a      	ldr	r2, [r3, #0]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f042 0201 	orr.w	r2, r2, #1
 80119e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80119e4:	2300      	movs	r3, #0
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3714      	adds	r7, #20
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr

080119f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b082      	sub	sp, #8
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d101      	bne.n	8011a04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011a00:	2301      	movs	r3, #1
 8011a02:	e01d      	b.n	8011a40 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d106      	bne.n	8011a1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f7fb fcb7 	bl	800d38c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2202      	movs	r2, #2
 8011a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	4619      	mov	r1, r3
 8011a30:	4610      	mov	r0, r2
 8011a32:	f000 fcf5 	bl	8012420 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2201      	movs	r2, #1
 8011a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011a3e:	2300      	movs	r3, #0
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2201      	movs	r2, #1
 8011a58:	6839      	ldr	r1, [r7, #0]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f000 ffca 	bl	80129f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a15      	ldr	r2, [pc, #84]	; (8011abc <HAL_TIM_PWM_Start+0x74>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d004      	beq.n	8011a74 <HAL_TIM_PWM_Start+0x2c>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4a14      	ldr	r2, [pc, #80]	; (8011ac0 <HAL_TIM_PWM_Start+0x78>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d101      	bne.n	8011a78 <HAL_TIM_PWM_Start+0x30>
 8011a74:	2301      	movs	r3, #1
 8011a76:	e000      	b.n	8011a7a <HAL_TIM_PWM_Start+0x32>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d007      	beq.n	8011a8e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	f003 0307 	and.w	r3, r3, #7
 8011a98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2b06      	cmp	r3, #6
 8011a9e:	d007      	beq.n	8011ab0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f042 0201 	orr.w	r2, r2, #1
 8011aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011ab0:	2300      	movs	r3, #0
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	40010000 	.word	0x40010000
 8011ac0:	40010400 	.word	0x40010400

08011ac4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	6839      	ldr	r1, [r7, #0]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f000 ff8c 	bl	80129f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	4a22      	ldr	r2, [pc, #136]	; (8011b6c <HAL_TIM_PWM_Stop+0xa8>)
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d004      	beq.n	8011af0 <HAL_TIM_PWM_Stop+0x2c>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	4a21      	ldr	r2, [pc, #132]	; (8011b70 <HAL_TIM_PWM_Stop+0xac>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d101      	bne.n	8011af4 <HAL_TIM_PWM_Stop+0x30>
 8011af0:	2301      	movs	r3, #1
 8011af2:	e000      	b.n	8011af6 <HAL_TIM_PWM_Stop+0x32>
 8011af4:	2300      	movs	r3, #0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d017      	beq.n	8011b2a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	6a1a      	ldr	r2, [r3, #32]
 8011b00:	f241 1311 	movw	r3, #4369	; 0x1111
 8011b04:	4013      	ands	r3, r2
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d10f      	bne.n	8011b2a <HAL_TIM_PWM_Stop+0x66>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	6a1a      	ldr	r2, [r3, #32]
 8011b10:	f240 4344 	movw	r3, #1092	; 0x444
 8011b14:	4013      	ands	r3, r2
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d107      	bne.n	8011b2a <HAL_TIM_PWM_Stop+0x66>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011b28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	6a1a      	ldr	r2, [r3, #32]
 8011b30:	f241 1311 	movw	r3, #4369	; 0x1111
 8011b34:	4013      	ands	r3, r2
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d10f      	bne.n	8011b5a <HAL_TIM_PWM_Stop+0x96>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	6a1a      	ldr	r2, [r3, #32]
 8011b40:	f240 4344 	movw	r3, #1092	; 0x444
 8011b44:	4013      	ands	r3, r2
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d107      	bne.n	8011b5a <HAL_TIM_PWM_Stop+0x96>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f022 0201 	bic.w	r2, r2, #1
 8011b58:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8011b62:	2300      	movs	r3, #0
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	40010000 	.word	0x40010000
 8011b70:	40010400 	.word	0x40010400

08011b74 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b086      	sub	sp, #24
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	607a      	str	r2, [r7, #4]
 8011b80:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	2b02      	cmp	r3, #2
 8011b8c:	d101      	bne.n	8011b92 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8011b8e:	2302      	movs	r3, #2
 8011b90:	e0f3      	b.n	8011d7a <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d10b      	bne.n	8011bb6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d104      	bne.n	8011bae <HAL_TIM_PWM_Start_DMA+0x3a>
 8011ba4:	887b      	ldrh	r3, [r7, #2]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d001      	beq.n	8011bae <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8011baa:	2301      	movs	r3, #1
 8011bac:	e0e5      	b.n	8011d7a <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2202      	movs	r2, #2
 8011bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	2b0c      	cmp	r3, #12
 8011bba:	f200 80ad 	bhi.w	8011d18 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8011bbe:	a201      	add	r2, pc, #4	; (adr r2, 8011bc4 <HAL_TIM_PWM_Start_DMA+0x50>)
 8011bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc4:	08011bf9 	.word	0x08011bf9
 8011bc8:	08011d19 	.word	0x08011d19
 8011bcc:	08011d19 	.word	0x08011d19
 8011bd0:	08011d19 	.word	0x08011d19
 8011bd4:	08011c41 	.word	0x08011c41
 8011bd8:	08011d19 	.word	0x08011d19
 8011bdc:	08011d19 	.word	0x08011d19
 8011be0:	08011d19 	.word	0x08011d19
 8011be4:	08011c89 	.word	0x08011c89
 8011be8:	08011d19 	.word	0x08011d19
 8011bec:	08011d19 	.word	0x08011d19
 8011bf0:	08011d19 	.word	0x08011d19
 8011bf4:	08011cd1 	.word	0x08011cd1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bfc:	4a61      	ldr	r2, [pc, #388]	; (8011d84 <HAL_TIM_PWM_Start_DMA+0x210>)
 8011bfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c04:	4a60      	ldr	r2, [pc, #384]	; (8011d88 <HAL_TIM_PWM_Start_DMA+0x214>)
 8011c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c0c:	4a5f      	ldr	r2, [pc, #380]	; (8011d8c <HAL_TIM_PWM_Start_DMA+0x218>)
 8011c0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011c14:	6879      	ldr	r1, [r7, #4]
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	3334      	adds	r3, #52	; 0x34
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	887b      	ldrh	r3, [r7, #2]
 8011c20:	f7fc fd3e 	bl	800e6a0 <HAL_DMA_Start_IT>
 8011c24:	4603      	mov	r3, r0
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d001      	beq.n	8011c2e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	e0a5      	b.n	8011d7a <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	68da      	ldr	r2, [r3, #12]
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011c3c:	60da      	str	r2, [r3, #12]
      break;
 8011c3e:	e06c      	b.n	8011d1a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c44:	4a4f      	ldr	r2, [pc, #316]	; (8011d84 <HAL_TIM_PWM_Start_DMA+0x210>)
 8011c46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c4c:	4a4e      	ldr	r2, [pc, #312]	; (8011d88 <HAL_TIM_PWM_Start_DMA+0x214>)
 8011c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c54:	4a4d      	ldr	r2, [pc, #308]	; (8011d8c <HAL_TIM_PWM_Start_DMA+0x218>)
 8011c56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8011c5c:	6879      	ldr	r1, [r7, #4]
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	3338      	adds	r3, #56	; 0x38
 8011c64:	461a      	mov	r2, r3
 8011c66:	887b      	ldrh	r3, [r7, #2]
 8011c68:	f7fc fd1a 	bl	800e6a0 <HAL_DMA_Start_IT>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d001      	beq.n	8011c76 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8011c72:	2301      	movs	r3, #1
 8011c74:	e081      	b.n	8011d7a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	68da      	ldr	r2, [r3, #12]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011c84:	60da      	str	r2, [r3, #12]
      break;
 8011c86:	e048      	b.n	8011d1a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c8c:	4a3d      	ldr	r2, [pc, #244]	; (8011d84 <HAL_TIM_PWM_Start_DMA+0x210>)
 8011c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c94:	4a3c      	ldr	r2, [pc, #240]	; (8011d88 <HAL_TIM_PWM_Start_DMA+0x214>)
 8011c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c9c:	4a3b      	ldr	r2, [pc, #236]	; (8011d8c <HAL_TIM_PWM_Start_DMA+0x218>)
 8011c9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011ca4:	6879      	ldr	r1, [r7, #4]
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	333c      	adds	r3, #60	; 0x3c
 8011cac:	461a      	mov	r2, r3
 8011cae:	887b      	ldrh	r3, [r7, #2]
 8011cb0:	f7fc fcf6 	bl	800e6a0 <HAL_DMA_Start_IT>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d001      	beq.n	8011cbe <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	e05d      	b.n	8011d7a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	68da      	ldr	r2, [r3, #12]
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011ccc:	60da      	str	r2, [r3, #12]
      break;
 8011cce:	e024      	b.n	8011d1a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cd4:	4a2b      	ldr	r2, [pc, #172]	; (8011d84 <HAL_TIM_PWM_Start_DMA+0x210>)
 8011cd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cdc:	4a2a      	ldr	r2, [pc, #168]	; (8011d88 <HAL_TIM_PWM_Start_DMA+0x214>)
 8011cde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ce4:	4a29      	ldr	r2, [pc, #164]	; (8011d8c <HAL_TIM_PWM_Start_DMA+0x218>)
 8011ce6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011cec:	6879      	ldr	r1, [r7, #4]
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	3340      	adds	r3, #64	; 0x40
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	887b      	ldrh	r3, [r7, #2]
 8011cf8:	f7fc fcd2 	bl	800e6a0 <HAL_DMA_Start_IT>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8011d02:	2301      	movs	r3, #1
 8011d04:	e039      	b.n	8011d7a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	68da      	ldr	r2, [r3, #12]
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011d14:	60da      	str	r2, [r3, #12]
      break;
 8011d16:	e000      	b.n	8011d1a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8011d18:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	2201      	movs	r2, #1
 8011d20:	68b9      	ldr	r1, [r7, #8]
 8011d22:	4618      	mov	r0, r3
 8011d24:	f000 fe66 	bl	80129f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a18      	ldr	r2, [pc, #96]	; (8011d90 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d004      	beq.n	8011d3c <HAL_TIM_PWM_Start_DMA+0x1c8>
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4a17      	ldr	r2, [pc, #92]	; (8011d94 <HAL_TIM_PWM_Start_DMA+0x220>)
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	d101      	bne.n	8011d40 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	e000      	b.n	8011d42 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8011d40:	2300      	movs	r3, #0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d007      	beq.n	8011d56 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	f003 0307 	and.w	r3, r3, #7
 8011d60:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	2b06      	cmp	r3, #6
 8011d66:	d007      	beq.n	8011d78 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f042 0201 	orr.w	r2, r2, #1
 8011d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011d78:	2300      	movs	r3, #0
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3718      	adds	r7, #24
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	0801233f 	.word	0x0801233f
 8011d88:	080123af 	.word	0x080123af
 8011d8c:	0801231b 	.word	0x0801231b
 8011d90:	40010000 	.word	0x40010000
 8011d94:	40010400 	.word	0x40010400

08011d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	691b      	ldr	r3, [r3, #16]
 8011da6:	f003 0302 	and.w	r3, r3, #2
 8011daa:	2b02      	cmp	r3, #2
 8011dac:	d122      	bne.n	8011df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	f003 0302 	and.w	r3, r3, #2
 8011db8:	2b02      	cmp	r3, #2
 8011dba:	d11b      	bne.n	8011df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f06f 0202 	mvn.w	r2, #2
 8011dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2201      	movs	r2, #1
 8011dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	699b      	ldr	r3, [r3, #24]
 8011dd2:	f003 0303 	and.w	r3, r3, #3
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d003      	beq.n	8011de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f000 fa6b 	bl	80122b6 <HAL_TIM_IC_CaptureCallback>
 8011de0:	e005      	b.n	8011dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 fa5d 	bl	80122a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f000 fa6e 	bl	80122ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2200      	movs	r2, #0
 8011df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	691b      	ldr	r3, [r3, #16]
 8011dfa:	f003 0304 	and.w	r3, r3, #4
 8011dfe:	2b04      	cmp	r3, #4
 8011e00:	d122      	bne.n	8011e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	f003 0304 	and.w	r3, r3, #4
 8011e0c:	2b04      	cmp	r3, #4
 8011e0e:	d11b      	bne.n	8011e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f06f 0204 	mvn.w	r2, #4
 8011e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2202      	movs	r2, #2
 8011e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	699b      	ldr	r3, [r3, #24]
 8011e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d003      	beq.n	8011e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f000 fa41 	bl	80122b6 <HAL_TIM_IC_CaptureCallback>
 8011e34:	e005      	b.n	8011e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 fa33 	bl	80122a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 fa44 	bl	80122ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2200      	movs	r2, #0
 8011e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	691b      	ldr	r3, [r3, #16]
 8011e4e:	f003 0308 	and.w	r3, r3, #8
 8011e52:	2b08      	cmp	r3, #8
 8011e54:	d122      	bne.n	8011e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	f003 0308 	and.w	r3, r3, #8
 8011e60:	2b08      	cmp	r3, #8
 8011e62:	d11b      	bne.n	8011e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f06f 0208 	mvn.w	r2, #8
 8011e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2204      	movs	r2, #4
 8011e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	69db      	ldr	r3, [r3, #28]
 8011e7a:	f003 0303 	and.w	r3, r3, #3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d003      	beq.n	8011e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 fa17 	bl	80122b6 <HAL_TIM_IC_CaptureCallback>
 8011e88:	e005      	b.n	8011e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 fa09 	bl	80122a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f000 fa1a 	bl	80122ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	f003 0310 	and.w	r3, r3, #16
 8011ea6:	2b10      	cmp	r3, #16
 8011ea8:	d122      	bne.n	8011ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	f003 0310 	and.w	r3, r3, #16
 8011eb4:	2b10      	cmp	r3, #16
 8011eb6:	d11b      	bne.n	8011ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f06f 0210 	mvn.w	r2, #16
 8011ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2208      	movs	r2, #8
 8011ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	69db      	ldr	r3, [r3, #28]
 8011ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d003      	beq.n	8011ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f000 f9ed 	bl	80122b6 <HAL_TIM_IC_CaptureCallback>
 8011edc:	e005      	b.n	8011eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f000 f9df 	bl	80122a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 f9f0 	bl	80122ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2200      	movs	r2, #0
 8011eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	f003 0301 	and.w	r3, r3, #1
 8011efa:	2b01      	cmp	r3, #1
 8011efc:	d10e      	bne.n	8011f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	f003 0301 	and.w	r3, r3, #1
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d107      	bne.n	8011f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	f06f 0201 	mvn.w	r2, #1
 8011f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7f4 fc06 	bl	8006728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	691b      	ldr	r3, [r3, #16]
 8011f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f26:	2b80      	cmp	r3, #128	; 0x80
 8011f28:	d10e      	bne.n	8011f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f34:	2b80      	cmp	r3, #128	; 0x80
 8011f36:	d107      	bne.n	8011f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 fe54 	bl	8012bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	691b      	ldr	r3, [r3, #16]
 8011f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f52:	2b40      	cmp	r3, #64	; 0x40
 8011f54:	d10e      	bne.n	8011f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f60:	2b40      	cmp	r3, #64	; 0x40
 8011f62:	d107      	bne.n	8011f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 f9bf 	bl	80122f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	691b      	ldr	r3, [r3, #16]
 8011f7a:	f003 0320 	and.w	r3, r3, #32
 8011f7e:	2b20      	cmp	r3, #32
 8011f80:	d10e      	bne.n	8011fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	f003 0320 	and.w	r3, r3, #32
 8011f8c:	2b20      	cmp	r3, #32
 8011f8e:	d107      	bne.n	8011fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	f06f 0220 	mvn.w	r2, #32
 8011f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f000 fe1e 	bl	8012bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011fa0:	bf00      	nop
 8011fa2:	3708      	adds	r7, #8
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	60b9      	str	r1, [r7, #8]
 8011fb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d101      	bne.n	8011fc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8011fbe:	2302      	movs	r3, #2
 8011fc0:	e0b4      	b.n	801212c <HAL_TIM_PWM_ConfigChannel+0x184>
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	2202      	movs	r2, #2
 8011fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2b0c      	cmp	r3, #12
 8011fd6:	f200 809f 	bhi.w	8012118 <HAL_TIM_PWM_ConfigChannel+0x170>
 8011fda:	a201      	add	r2, pc, #4	; (adr r2, 8011fe0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8011fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fe0:	08012015 	.word	0x08012015
 8011fe4:	08012119 	.word	0x08012119
 8011fe8:	08012119 	.word	0x08012119
 8011fec:	08012119 	.word	0x08012119
 8011ff0:	08012055 	.word	0x08012055
 8011ff4:	08012119 	.word	0x08012119
 8011ff8:	08012119 	.word	0x08012119
 8011ffc:	08012119 	.word	0x08012119
 8012000:	08012097 	.word	0x08012097
 8012004:	08012119 	.word	0x08012119
 8012008:	08012119 	.word	0x08012119
 801200c:	08012119 	.word	0x08012119
 8012010:	080120d7 	.word	0x080120d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	68b9      	ldr	r1, [r7, #8]
 801201a:	4618      	mov	r0, r3
 801201c:	f000 faa0 	bl	8012560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	699a      	ldr	r2, [r3, #24]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	f042 0208 	orr.w	r2, r2, #8
 801202e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	699a      	ldr	r2, [r3, #24]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f022 0204 	bic.w	r2, r2, #4
 801203e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	6999      	ldr	r1, [r3, #24]
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	691a      	ldr	r2, [r3, #16]
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	430a      	orrs	r2, r1
 8012050:	619a      	str	r2, [r3, #24]
      break;
 8012052:	e062      	b.n	801211a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68b9      	ldr	r1, [r7, #8]
 801205a:	4618      	mov	r0, r3
 801205c:	f000 faf0 	bl	8012640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	699a      	ldr	r2, [r3, #24]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801206e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	699a      	ldr	r2, [r3, #24]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801207e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	6999      	ldr	r1, [r3, #24]
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	691b      	ldr	r3, [r3, #16]
 801208a:	021a      	lsls	r2, r3, #8
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	430a      	orrs	r2, r1
 8012092:	619a      	str	r2, [r3, #24]
      break;
 8012094:	e041      	b.n	801211a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	68b9      	ldr	r1, [r7, #8]
 801209c:	4618      	mov	r0, r3
 801209e:	f000 fb45 	bl	801272c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	69da      	ldr	r2, [r3, #28]
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	f042 0208 	orr.w	r2, r2, #8
 80120b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	69da      	ldr	r2, [r3, #28]
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f022 0204 	bic.w	r2, r2, #4
 80120c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	69d9      	ldr	r1, [r3, #28]
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	691a      	ldr	r2, [r3, #16]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	430a      	orrs	r2, r1
 80120d2:	61da      	str	r2, [r3, #28]
      break;
 80120d4:	e021      	b.n	801211a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	68b9      	ldr	r1, [r7, #8]
 80120dc:	4618      	mov	r0, r3
 80120de:	f000 fb99 	bl	8012814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	69da      	ldr	r2, [r3, #28]
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80120f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	69da      	ldr	r2, [r3, #28]
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	69d9      	ldr	r1, [r3, #28]
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	691b      	ldr	r3, [r3, #16]
 801210c:	021a      	lsls	r2, r3, #8
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	430a      	orrs	r2, r1
 8012114:	61da      	str	r2, [r3, #28]
      break;
 8012116:	e000      	b.n	801211a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012118:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	2201      	movs	r2, #1
 801211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2200      	movs	r2, #0
 8012126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801212a:	2300      	movs	r3, #0
}
 801212c:	4618      	mov	r0, r3
 801212e:	3710      	adds	r7, #16
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012144:	2b01      	cmp	r3, #1
 8012146:	d101      	bne.n	801214c <HAL_TIM_ConfigClockSource+0x18>
 8012148:	2302      	movs	r3, #2
 801214a:	e0a6      	b.n	801229a <HAL_TIM_ConfigClockSource+0x166>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2201      	movs	r2, #1
 8012150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2202      	movs	r2, #2
 8012158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801216a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012172:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	68fa      	ldr	r2, [r7, #12]
 801217a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	2b40      	cmp	r3, #64	; 0x40
 8012182:	d067      	beq.n	8012254 <HAL_TIM_ConfigClockSource+0x120>
 8012184:	2b40      	cmp	r3, #64	; 0x40
 8012186:	d80b      	bhi.n	80121a0 <HAL_TIM_ConfigClockSource+0x6c>
 8012188:	2b10      	cmp	r3, #16
 801218a:	d073      	beq.n	8012274 <HAL_TIM_ConfigClockSource+0x140>
 801218c:	2b10      	cmp	r3, #16
 801218e:	d802      	bhi.n	8012196 <HAL_TIM_ConfigClockSource+0x62>
 8012190:	2b00      	cmp	r3, #0
 8012192:	d06f      	beq.n	8012274 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8012194:	e078      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012196:	2b20      	cmp	r3, #32
 8012198:	d06c      	beq.n	8012274 <HAL_TIM_ConfigClockSource+0x140>
 801219a:	2b30      	cmp	r3, #48	; 0x30
 801219c:	d06a      	beq.n	8012274 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801219e:	e073      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80121a0:	2b70      	cmp	r3, #112	; 0x70
 80121a2:	d00d      	beq.n	80121c0 <HAL_TIM_ConfigClockSource+0x8c>
 80121a4:	2b70      	cmp	r3, #112	; 0x70
 80121a6:	d804      	bhi.n	80121b2 <HAL_TIM_ConfigClockSource+0x7e>
 80121a8:	2b50      	cmp	r3, #80	; 0x50
 80121aa:	d033      	beq.n	8012214 <HAL_TIM_ConfigClockSource+0xe0>
 80121ac:	2b60      	cmp	r3, #96	; 0x60
 80121ae:	d041      	beq.n	8012234 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80121b0:	e06a      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80121b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121b6:	d066      	beq.n	8012286 <HAL_TIM_ConfigClockSource+0x152>
 80121b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121bc:	d017      	beq.n	80121ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80121be:	e063      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6818      	ldr	r0, [r3, #0]
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	6899      	ldr	r1, [r3, #8]
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	685a      	ldr	r2, [r3, #4]
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	f000 fbf0 	bl	80129b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80121e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	609a      	str	r2, [r3, #8]
      break;
 80121ec:	e04c      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6818      	ldr	r0, [r3, #0]
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	6899      	ldr	r1, [r3, #8]
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	685a      	ldr	r2, [r3, #4]
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	68db      	ldr	r3, [r3, #12]
 80121fe:	f000 fbd9 	bl	80129b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	689a      	ldr	r2, [r3, #8]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012210:	609a      	str	r2, [r3, #8]
      break;
 8012212:	e039      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6818      	ldr	r0, [r3, #0]
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	6859      	ldr	r1, [r3, #4]
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	68db      	ldr	r3, [r3, #12]
 8012220:	461a      	mov	r2, r3
 8012222:	f000 fb4d 	bl	80128c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2150      	movs	r1, #80	; 0x50
 801222c:	4618      	mov	r0, r3
 801222e:	f000 fba6 	bl	801297e <TIM_ITRx_SetConfig>
      break;
 8012232:	e029      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6818      	ldr	r0, [r3, #0]
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	6859      	ldr	r1, [r3, #4]
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	461a      	mov	r2, r3
 8012242:	f000 fb6c 	bl	801291e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2160      	movs	r1, #96	; 0x60
 801224c:	4618      	mov	r0, r3
 801224e:	f000 fb96 	bl	801297e <TIM_ITRx_SetConfig>
      break;
 8012252:	e019      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6818      	ldr	r0, [r3, #0]
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	6859      	ldr	r1, [r3, #4]
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	461a      	mov	r2, r3
 8012262:	f000 fb2d 	bl	80128c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2140      	movs	r1, #64	; 0x40
 801226c:	4618      	mov	r0, r3
 801226e:	f000 fb86 	bl	801297e <TIM_ITRx_SetConfig>
      break;
 8012272:	e009      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	4619      	mov	r1, r3
 801227e:	4610      	mov	r0, r2
 8012280:	f000 fb7d 	bl	801297e <TIM_ITRx_SetConfig>
      break;
 8012284:	e000      	b.n	8012288 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8012286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2201      	movs	r2, #1
 801228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2200      	movs	r2, #0
 8012294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012298:	2300      	movs	r3, #0
}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80122a2:	b480      	push	{r7}
 80122a4:	b083      	sub	sp, #12
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80122aa:	bf00      	nop
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80122b6:	b480      	push	{r7}
 80122b8:	b083      	sub	sp, #12
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80122be:	bf00      	nop
 80122c0:	370c      	adds	r7, #12
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr

080122ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80122ca:	b480      	push	{r7}
 80122cc:	b083      	sub	sp, #12
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80122d2:	bf00      	nop
 80122d4:	370c      	adds	r7, #12
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr

080122de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80122de:	b480      	push	{r7}
 80122e0:	b083      	sub	sp, #12
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80122e6:	bf00      	nop
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80122f2:	b480      	push	{r7}
 80122f4:	b083      	sub	sp, #12
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80122fa:	bf00      	nop
 80122fc:	370c      	adds	r7, #12
 80122fe:	46bd      	mov	sp, r7
 8012300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012304:	4770      	bx	lr

08012306 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8012306:	b480      	push	{r7}
 8012308:	b083      	sub	sp, #12
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801230e:	bf00      	nop
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801231a:	b580      	push	{r7, lr}
 801231c:	b084      	sub	sp, #16
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012326:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2201      	movs	r2, #1
 801232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8012330:	68f8      	ldr	r0, [r7, #12]
 8012332:	f7ff ffe8 	bl	8012306 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8012336:	bf00      	nop
 8012338:	3710      	adds	r7, #16
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}

0801233e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801233e:	b580      	push	{r7, lr}
 8012340:	b084      	sub	sp, #16
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801234a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2201      	movs	r2, #1
 8012350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012358:	687a      	ldr	r2, [r7, #4]
 801235a:	429a      	cmp	r2, r3
 801235c:	d103      	bne.n	8012366 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	2201      	movs	r2, #1
 8012362:	771a      	strb	r2, [r3, #28]
 8012364:	e019      	b.n	801239a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	429a      	cmp	r2, r3
 801236e:	d103      	bne.n	8012378 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2202      	movs	r2, #2
 8012374:	771a      	strb	r2, [r3, #28]
 8012376:	e010      	b.n	801239a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	429a      	cmp	r2, r3
 8012380:	d103      	bne.n	801238a <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	2204      	movs	r2, #4
 8012386:	771a      	strb	r2, [r3, #28]
 8012388:	e007      	b.n	801239a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801238e:	687a      	ldr	r2, [r7, #4]
 8012390:	429a      	cmp	r2, r3
 8012392:	d102      	bne.n	801239a <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	2208      	movs	r2, #8
 8012398:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801239a:	68f8      	ldr	r0, [r7, #12]
 801239c:	f7ff ff95 	bl	80122ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2200      	movs	r2, #0
 80123a4:	771a      	strb	r2, [r3, #28]
}
 80123a6:	bf00      	nop
 80123a8:	3710      	adds	r7, #16
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b084      	sub	sp, #16
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123ba:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2201      	movs	r2, #1
 80123c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d103      	bne.n	80123d6 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2201      	movs	r2, #1
 80123d2:	771a      	strb	r2, [r3, #28]
 80123d4:	e019      	b.n	801240a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d103      	bne.n	80123e8 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	2202      	movs	r2, #2
 80123e4:	771a      	strb	r2, [r3, #28]
 80123e6:	e010      	b.n	801240a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d103      	bne.n	80123fa <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	2204      	movs	r2, #4
 80123f6:	771a      	strb	r2, [r3, #28]
 80123f8:	e007      	b.n	801240a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	429a      	cmp	r2, r3
 8012402:	d102      	bne.n	801240a <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	2208      	movs	r2, #8
 8012408:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f7ff ff67 	bl	80122de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2200      	movs	r2, #0
 8012414:	771a      	strb	r2, [r3, #28]
}
 8012416:	bf00      	nop
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
	...

08012420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012420:	b480      	push	{r7}
 8012422:	b085      	sub	sp, #20
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4a40      	ldr	r2, [pc, #256]	; (8012534 <TIM_Base_SetConfig+0x114>)
 8012434:	4293      	cmp	r3, r2
 8012436:	d013      	beq.n	8012460 <TIM_Base_SetConfig+0x40>
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801243e:	d00f      	beq.n	8012460 <TIM_Base_SetConfig+0x40>
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	4a3d      	ldr	r2, [pc, #244]	; (8012538 <TIM_Base_SetConfig+0x118>)
 8012444:	4293      	cmp	r3, r2
 8012446:	d00b      	beq.n	8012460 <TIM_Base_SetConfig+0x40>
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4a3c      	ldr	r2, [pc, #240]	; (801253c <TIM_Base_SetConfig+0x11c>)
 801244c:	4293      	cmp	r3, r2
 801244e:	d007      	beq.n	8012460 <TIM_Base_SetConfig+0x40>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	4a3b      	ldr	r2, [pc, #236]	; (8012540 <TIM_Base_SetConfig+0x120>)
 8012454:	4293      	cmp	r3, r2
 8012456:	d003      	beq.n	8012460 <TIM_Base_SetConfig+0x40>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4a3a      	ldr	r2, [pc, #232]	; (8012544 <TIM_Base_SetConfig+0x124>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d108      	bne.n	8012472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	68fa      	ldr	r2, [r7, #12]
 801246e:	4313      	orrs	r3, r2
 8012470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	4a2f      	ldr	r2, [pc, #188]	; (8012534 <TIM_Base_SetConfig+0x114>)
 8012476:	4293      	cmp	r3, r2
 8012478:	d02b      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012480:	d027      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	4a2c      	ldr	r2, [pc, #176]	; (8012538 <TIM_Base_SetConfig+0x118>)
 8012486:	4293      	cmp	r3, r2
 8012488:	d023      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4a2b      	ldr	r2, [pc, #172]	; (801253c <TIM_Base_SetConfig+0x11c>)
 801248e:	4293      	cmp	r3, r2
 8012490:	d01f      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	4a2a      	ldr	r2, [pc, #168]	; (8012540 <TIM_Base_SetConfig+0x120>)
 8012496:	4293      	cmp	r3, r2
 8012498:	d01b      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	4a29      	ldr	r2, [pc, #164]	; (8012544 <TIM_Base_SetConfig+0x124>)
 801249e:	4293      	cmp	r3, r2
 80124a0:	d017      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4a28      	ldr	r2, [pc, #160]	; (8012548 <TIM_Base_SetConfig+0x128>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d013      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4a27      	ldr	r2, [pc, #156]	; (801254c <TIM_Base_SetConfig+0x12c>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d00f      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4a26      	ldr	r2, [pc, #152]	; (8012550 <TIM_Base_SetConfig+0x130>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d00b      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4a25      	ldr	r2, [pc, #148]	; (8012554 <TIM_Base_SetConfig+0x134>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d007      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a24      	ldr	r2, [pc, #144]	; (8012558 <TIM_Base_SetConfig+0x138>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d003      	beq.n	80124d2 <TIM_Base_SetConfig+0xb2>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4a23      	ldr	r2, [pc, #140]	; (801255c <TIM_Base_SetConfig+0x13c>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d108      	bne.n	80124e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80124d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	68fa      	ldr	r2, [r7, #12]
 80124e0:	4313      	orrs	r3, r2
 80124e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	695b      	ldr	r3, [r3, #20]
 80124ee:	4313      	orrs	r3, r2
 80124f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	68fa      	ldr	r2, [r7, #12]
 80124f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	689a      	ldr	r2, [r3, #8]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	4a0a      	ldr	r2, [pc, #40]	; (8012534 <TIM_Base_SetConfig+0x114>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d003      	beq.n	8012518 <TIM_Base_SetConfig+0xf8>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	4a0c      	ldr	r2, [pc, #48]	; (8012544 <TIM_Base_SetConfig+0x124>)
 8012514:	4293      	cmp	r3, r2
 8012516:	d103      	bne.n	8012520 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	691a      	ldr	r2, [r3, #16]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2201      	movs	r2, #1
 8012524:	615a      	str	r2, [r3, #20]
}
 8012526:	bf00      	nop
 8012528:	3714      	adds	r7, #20
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	40010000 	.word	0x40010000
 8012538:	40000400 	.word	0x40000400
 801253c:	40000800 	.word	0x40000800
 8012540:	40000c00 	.word	0x40000c00
 8012544:	40010400 	.word	0x40010400
 8012548:	40014000 	.word	0x40014000
 801254c:	40014400 	.word	0x40014400
 8012550:	40014800 	.word	0x40014800
 8012554:	40001800 	.word	0x40001800
 8012558:	40001c00 	.word	0x40001c00
 801255c:	40002000 	.word	0x40002000

08012560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012560:	b480      	push	{r7}
 8012562:	b087      	sub	sp, #28
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6a1b      	ldr	r3, [r3, #32]
 801256e:	f023 0201 	bic.w	r2, r3, #1
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a1b      	ldr	r3, [r3, #32]
 801257a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	699b      	ldr	r3, [r3, #24]
 8012586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801258e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f023 0303 	bic.w	r3, r3, #3
 8012596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	4313      	orrs	r3, r2
 80125a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	f023 0302 	bic.w	r3, r3, #2
 80125a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	689b      	ldr	r3, [r3, #8]
 80125ae:	697a      	ldr	r2, [r7, #20]
 80125b0:	4313      	orrs	r3, r2
 80125b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	4a20      	ldr	r2, [pc, #128]	; (8012638 <TIM_OC1_SetConfig+0xd8>)
 80125b8:	4293      	cmp	r3, r2
 80125ba:	d003      	beq.n	80125c4 <TIM_OC1_SetConfig+0x64>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4a1f      	ldr	r2, [pc, #124]	; (801263c <TIM_OC1_SetConfig+0xdc>)
 80125c0:	4293      	cmp	r3, r2
 80125c2:	d10c      	bne.n	80125de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	f023 0308 	bic.w	r3, r3, #8
 80125ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	68db      	ldr	r3, [r3, #12]
 80125d0:	697a      	ldr	r2, [r7, #20]
 80125d2:	4313      	orrs	r3, r2
 80125d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	f023 0304 	bic.w	r3, r3, #4
 80125dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a15      	ldr	r2, [pc, #84]	; (8012638 <TIM_OC1_SetConfig+0xd8>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d003      	beq.n	80125ee <TIM_OC1_SetConfig+0x8e>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4a14      	ldr	r2, [pc, #80]	; (801263c <TIM_OC1_SetConfig+0xdc>)
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d111      	bne.n	8012612 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80125fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	695b      	ldr	r3, [r3, #20]
 8012602:	693a      	ldr	r2, [r7, #16]
 8012604:	4313      	orrs	r3, r2
 8012606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	699b      	ldr	r3, [r3, #24]
 801260c:	693a      	ldr	r2, [r7, #16]
 801260e:	4313      	orrs	r3, r2
 8012610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	693a      	ldr	r2, [r7, #16]
 8012616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	68fa      	ldr	r2, [r7, #12]
 801261c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	685a      	ldr	r2, [r3, #4]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	697a      	ldr	r2, [r7, #20]
 801262a:	621a      	str	r2, [r3, #32]
}
 801262c:	bf00      	nop
 801262e:	371c      	adds	r7, #28
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr
 8012638:	40010000 	.word	0x40010000
 801263c:	40010400 	.word	0x40010400

08012640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012640:	b480      	push	{r7}
 8012642:	b087      	sub	sp, #28
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6a1b      	ldr	r3, [r3, #32]
 801264e:	f023 0210 	bic.w	r2, r3, #16
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6a1b      	ldr	r3, [r3, #32]
 801265a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	699b      	ldr	r3, [r3, #24]
 8012666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801266e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	021b      	lsls	r3, r3, #8
 801267e:	68fa      	ldr	r2, [r7, #12]
 8012680:	4313      	orrs	r3, r2
 8012682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	f023 0320 	bic.w	r3, r3, #32
 801268a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	689b      	ldr	r3, [r3, #8]
 8012690:	011b      	lsls	r3, r3, #4
 8012692:	697a      	ldr	r2, [r7, #20]
 8012694:	4313      	orrs	r3, r2
 8012696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	4a22      	ldr	r2, [pc, #136]	; (8012724 <TIM_OC2_SetConfig+0xe4>)
 801269c:	4293      	cmp	r3, r2
 801269e:	d003      	beq.n	80126a8 <TIM_OC2_SetConfig+0x68>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	4a21      	ldr	r2, [pc, #132]	; (8012728 <TIM_OC2_SetConfig+0xe8>)
 80126a4:	4293      	cmp	r3, r2
 80126a6:	d10d      	bne.n	80126c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80126ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	011b      	lsls	r3, r3, #4
 80126b6:	697a      	ldr	r2, [r7, #20]
 80126b8:	4313      	orrs	r3, r2
 80126ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	4a17      	ldr	r2, [pc, #92]	; (8012724 <TIM_OC2_SetConfig+0xe4>)
 80126c8:	4293      	cmp	r3, r2
 80126ca:	d003      	beq.n	80126d4 <TIM_OC2_SetConfig+0x94>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	4a16      	ldr	r2, [pc, #88]	; (8012728 <TIM_OC2_SetConfig+0xe8>)
 80126d0:	4293      	cmp	r3, r2
 80126d2:	d113      	bne.n	80126fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80126da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80126e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	695b      	ldr	r3, [r3, #20]
 80126e8:	009b      	lsls	r3, r3, #2
 80126ea:	693a      	ldr	r2, [r7, #16]
 80126ec:	4313      	orrs	r3, r2
 80126ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	699b      	ldr	r3, [r3, #24]
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	693a      	ldr	r2, [r7, #16]
 80126f8:	4313      	orrs	r3, r2
 80126fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	693a      	ldr	r2, [r7, #16]
 8012700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	68fa      	ldr	r2, [r7, #12]
 8012706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	685a      	ldr	r2, [r3, #4]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	697a      	ldr	r2, [r7, #20]
 8012714:	621a      	str	r2, [r3, #32]
}
 8012716:	bf00      	nop
 8012718:	371c      	adds	r7, #28
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr
 8012722:	bf00      	nop
 8012724:	40010000 	.word	0x40010000
 8012728:	40010400 	.word	0x40010400

0801272c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801272c:	b480      	push	{r7}
 801272e:	b087      	sub	sp, #28
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6a1b      	ldr	r3, [r3, #32]
 801273a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6a1b      	ldr	r3, [r3, #32]
 8012746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	69db      	ldr	r3, [r3, #28]
 8012752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801275a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f023 0303 	bic.w	r3, r3, #3
 8012762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	68fa      	ldr	r2, [r7, #12]
 801276a:	4313      	orrs	r3, r2
 801276c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	021b      	lsls	r3, r3, #8
 801277c:	697a      	ldr	r2, [r7, #20]
 801277e:	4313      	orrs	r3, r2
 8012780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4a21      	ldr	r2, [pc, #132]	; (801280c <TIM_OC3_SetConfig+0xe0>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d003      	beq.n	8012792 <TIM_OC3_SetConfig+0x66>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4a20      	ldr	r2, [pc, #128]	; (8012810 <TIM_OC3_SetConfig+0xe4>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d10d      	bne.n	80127ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	68db      	ldr	r3, [r3, #12]
 801279e:	021b      	lsls	r3, r3, #8
 80127a0:	697a      	ldr	r2, [r7, #20]
 80127a2:	4313      	orrs	r3, r2
 80127a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80127ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4a16      	ldr	r2, [pc, #88]	; (801280c <TIM_OC3_SetConfig+0xe0>)
 80127b2:	4293      	cmp	r3, r2
 80127b4:	d003      	beq.n	80127be <TIM_OC3_SetConfig+0x92>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	4a15      	ldr	r2, [pc, #84]	; (8012810 <TIM_OC3_SetConfig+0xe4>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d113      	bne.n	80127e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	695b      	ldr	r3, [r3, #20]
 80127d2:	011b      	lsls	r3, r3, #4
 80127d4:	693a      	ldr	r2, [r7, #16]
 80127d6:	4313      	orrs	r3, r2
 80127d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	699b      	ldr	r3, [r3, #24]
 80127de:	011b      	lsls	r3, r3, #4
 80127e0:	693a      	ldr	r2, [r7, #16]
 80127e2:	4313      	orrs	r3, r2
 80127e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	693a      	ldr	r2, [r7, #16]
 80127ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	68fa      	ldr	r2, [r7, #12]
 80127f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	685a      	ldr	r2, [r3, #4]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	697a      	ldr	r2, [r7, #20]
 80127fe:	621a      	str	r2, [r3, #32]
}
 8012800:	bf00      	nop
 8012802:	371c      	adds	r7, #28
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr
 801280c:	40010000 	.word	0x40010000
 8012810:	40010400 	.word	0x40010400

08012814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012814:	b480      	push	{r7}
 8012816:	b087      	sub	sp, #28
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6a1b      	ldr	r3, [r3, #32]
 8012822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6a1b      	ldr	r3, [r3, #32]
 801282e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	69db      	ldr	r3, [r3, #28]
 801283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801284a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	021b      	lsls	r3, r3, #8
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	4313      	orrs	r3, r2
 8012856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801285e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	031b      	lsls	r3, r3, #12
 8012866:	693a      	ldr	r2, [r7, #16]
 8012868:	4313      	orrs	r3, r2
 801286a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	4a12      	ldr	r2, [pc, #72]	; (80128b8 <TIM_OC4_SetConfig+0xa4>)
 8012870:	4293      	cmp	r3, r2
 8012872:	d003      	beq.n	801287c <TIM_OC4_SetConfig+0x68>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	4a11      	ldr	r2, [pc, #68]	; (80128bc <TIM_OC4_SetConfig+0xa8>)
 8012878:	4293      	cmp	r3, r2
 801287a:	d109      	bne.n	8012890 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	695b      	ldr	r3, [r3, #20]
 8012888:	019b      	lsls	r3, r3, #6
 801288a:	697a      	ldr	r2, [r7, #20]
 801288c:	4313      	orrs	r3, r2
 801288e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	697a      	ldr	r2, [r7, #20]
 8012894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	685a      	ldr	r2, [r3, #4]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	693a      	ldr	r2, [r7, #16]
 80128a8:	621a      	str	r2, [r3, #32]
}
 80128aa:	bf00      	nop
 80128ac:	371c      	adds	r7, #28
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop
 80128b8:	40010000 	.word	0x40010000
 80128bc:	40010400 	.word	0x40010400

080128c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b087      	sub	sp, #28
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	6a1b      	ldr	r3, [r3, #32]
 80128d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	6a1b      	ldr	r3, [r3, #32]
 80128d6:	f023 0201 	bic.w	r2, r3, #1
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	699b      	ldr	r3, [r3, #24]
 80128e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80128ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	011b      	lsls	r3, r3, #4
 80128f0:	693a      	ldr	r2, [r7, #16]
 80128f2:	4313      	orrs	r3, r2
 80128f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	f023 030a 	bic.w	r3, r3, #10
 80128fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80128fe:	697a      	ldr	r2, [r7, #20]
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	4313      	orrs	r3, r2
 8012904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	693a      	ldr	r2, [r7, #16]
 801290a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	697a      	ldr	r2, [r7, #20]
 8012910:	621a      	str	r2, [r3, #32]
}
 8012912:	bf00      	nop
 8012914:	371c      	adds	r7, #28
 8012916:	46bd      	mov	sp, r7
 8012918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291c:	4770      	bx	lr

0801291e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801291e:	b480      	push	{r7}
 8012920:	b087      	sub	sp, #28
 8012922:	af00      	add	r7, sp, #0
 8012924:	60f8      	str	r0, [r7, #12]
 8012926:	60b9      	str	r1, [r7, #8]
 8012928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	6a1b      	ldr	r3, [r3, #32]
 801292e:	f023 0210 	bic.w	r2, r3, #16
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	699b      	ldr	r3, [r3, #24]
 801293a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	6a1b      	ldr	r3, [r3, #32]
 8012940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	031b      	lsls	r3, r3, #12
 801294e:	697a      	ldr	r2, [r7, #20]
 8012950:	4313      	orrs	r3, r2
 8012952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801295a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	011b      	lsls	r3, r3, #4
 8012960:	693a      	ldr	r2, [r7, #16]
 8012962:	4313      	orrs	r3, r2
 8012964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	697a      	ldr	r2, [r7, #20]
 801296a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	693a      	ldr	r2, [r7, #16]
 8012970:	621a      	str	r2, [r3, #32]
}
 8012972:	bf00      	nop
 8012974:	371c      	adds	r7, #28
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr

0801297e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801297e:	b480      	push	{r7}
 8012980:	b085      	sub	sp, #20
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
 8012986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012996:	683a      	ldr	r2, [r7, #0]
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	4313      	orrs	r3, r2
 801299c:	f043 0307 	orr.w	r3, r3, #7
 80129a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	68fa      	ldr	r2, [r7, #12]
 80129a6:	609a      	str	r2, [r3, #8]
}
 80129a8:	bf00      	nop
 80129aa:	3714      	adds	r7, #20
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr

080129b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b087      	sub	sp, #28
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
 80129c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	689b      	ldr	r3, [r3, #8]
 80129c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80129ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	021a      	lsls	r2, r3, #8
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	431a      	orrs	r2, r3
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	4313      	orrs	r3, r2
 80129dc:	697a      	ldr	r2, [r7, #20]
 80129de:	4313      	orrs	r3, r2
 80129e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	697a      	ldr	r2, [r7, #20]
 80129e6:	609a      	str	r2, [r3, #8]
}
 80129e8:	bf00      	nop
 80129ea:	371c      	adds	r7, #28
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr

080129f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b087      	sub	sp, #28
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	60b9      	str	r1, [r7, #8]
 80129fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	f003 031f 	and.w	r3, r3, #31
 8012a06:	2201      	movs	r2, #1
 8012a08:	fa02 f303 	lsl.w	r3, r2, r3
 8012a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6a1a      	ldr	r2, [r3, #32]
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	43db      	mvns	r3, r3
 8012a16:	401a      	ands	r2, r3
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	6a1a      	ldr	r2, [r3, #32]
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	f003 031f 	and.w	r3, r3, #31
 8012a26:	6879      	ldr	r1, [r7, #4]
 8012a28:	fa01 f303 	lsl.w	r3, r1, r3
 8012a2c:	431a      	orrs	r2, r3
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	621a      	str	r2, [r3, #32]
}
 8012a32:	bf00      	nop
 8012a34:	371c      	adds	r7, #28
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr
	...

08012a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b085      	sub	sp, #20
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	d101      	bne.n	8012a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012a54:	2302      	movs	r3, #2
 8012a56:	e05a      	b.n	8012b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2202      	movs	r2, #2
 8012a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	689b      	ldr	r3, [r3, #8]
 8012a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	68fa      	ldr	r2, [r7, #12]
 8012a86:	4313      	orrs	r3, r2
 8012a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	68fa      	ldr	r2, [r7, #12]
 8012a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	4a21      	ldr	r2, [pc, #132]	; (8012b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012a98:	4293      	cmp	r3, r2
 8012a9a:	d022      	beq.n	8012ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012aa4:	d01d      	beq.n	8012ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	4a1d      	ldr	r2, [pc, #116]	; (8012b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d018      	beq.n	8012ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	4a1b      	ldr	r2, [pc, #108]	; (8012b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	d013      	beq.n	8012ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4a1a      	ldr	r2, [pc, #104]	; (8012b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	d00e      	beq.n	8012ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4a18      	ldr	r2, [pc, #96]	; (8012b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012aca:	4293      	cmp	r3, r2
 8012acc:	d009      	beq.n	8012ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	4a17      	ldr	r2, [pc, #92]	; (8012b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	d004      	beq.n	8012ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a15      	ldr	r2, [pc, #84]	; (8012b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d10c      	bne.n	8012afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	68ba      	ldr	r2, [r7, #8]
 8012af0:	4313      	orrs	r3, r2
 8012af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2201      	movs	r2, #1
 8012b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2200      	movs	r2, #0
 8012b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012b0c:	2300      	movs	r3, #0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3714      	adds	r7, #20
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	40010000 	.word	0x40010000
 8012b20:	40000400 	.word	0x40000400
 8012b24:	40000800 	.word	0x40000800
 8012b28:	40000c00 	.word	0x40000c00
 8012b2c:	40010400 	.word	0x40010400
 8012b30:	40014000 	.word	0x40014000
 8012b34:	40001800 	.word	0x40001800

08012b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b085      	sub	sp, #20
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012b42:	2300      	movs	r3, #0
 8012b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d101      	bne.n	8012b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012b50:	2302      	movs	r3, #2
 8012b52:	e03d      	b.n	8012bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2201      	movs	r2, #1
 8012b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	68db      	ldr	r3, [r3, #12]
 8012b66:	4313      	orrs	r3, r2
 8012b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	689b      	ldr	r3, [r3, #8]
 8012b74:	4313      	orrs	r3, r2
 8012b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	685b      	ldr	r3, [r3, #4]
 8012b82:	4313      	orrs	r3, r2
 8012b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	4313      	orrs	r3, r2
 8012b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	691b      	ldr	r3, [r3, #16]
 8012b9e:	4313      	orrs	r3, r2
 8012ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	695b      	ldr	r3, [r3, #20]
 8012bac:	4313      	orrs	r3, r2
 8012bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	69db      	ldr	r3, [r3, #28]
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012bce:	2300      	movs	r3, #0
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3714      	adds	r7, #20
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr

08012bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b083      	sub	sp, #12
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012be4:	bf00      	nop
 8012be6:	370c      	adds	r7, #12
 8012be8:	46bd      	mov	sp, r7
 8012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bee:	4770      	bx	lr

08012bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b083      	sub	sp, #12
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012bf8:	bf00      	nop
 8012bfa:	370c      	adds	r7, #12
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr

08012c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d101      	bne.n	8012c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012c12:	2301      	movs	r3, #1
 8012c14:	e03f      	b.n	8012c96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d106      	bne.n	8012c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7fa fd04 	bl	800d638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2224      	movs	r2, #36	; 0x24
 8012c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	68da      	ldr	r2, [r3, #12]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f000 fa69 	bl	8013120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	691a      	ldr	r2, [r3, #16]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	695a      	ldr	r2, [r3, #20]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	68da      	ldr	r2, [r3, #12]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2200      	movs	r2, #0
 8012c82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2220      	movs	r2, #32
 8012c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2220      	movs	r2, #32
 8012c90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8012c94:	2300      	movs	r3, #0
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3708      	adds	r7, #8
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
	...

08012ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b088      	sub	sp, #32
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	68db      	ldr	r3, [r3, #12]
 8012cb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	695b      	ldr	r3, [r3, #20]
 8012cbe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	f003 030f 	and.w	r3, r3, #15
 8012cce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d10d      	bne.n	8012cf2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	f003 0320 	and.w	r3, r3, #32
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d008      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x52>
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	f003 0320 	and.w	r3, r3, #32
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d003      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f000 f996 	bl	801301c <UART_Receive_IT>
      return;
 8012cf0:	e0d1      	b.n	8012e96 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f000 80b0 	beq.w	8012e5a <HAL_UART_IRQHandler+0x1ba>
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	f003 0301 	and.w	r3, r3, #1
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d105      	bne.n	8012d10 <HAL_UART_IRQHandler+0x70>
 8012d04:	69bb      	ldr	r3, [r7, #24]
 8012d06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	f000 80a5 	beq.w	8012e5a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	f003 0301 	and.w	r3, r3, #1
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d00a      	beq.n	8012d30 <HAL_UART_IRQHandler+0x90>
 8012d1a:	69bb      	ldr	r3, [r7, #24]
 8012d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d005      	beq.n	8012d30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d28:	f043 0201 	orr.w	r2, r3, #1
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	f003 0304 	and.w	r3, r3, #4
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d00a      	beq.n	8012d50 <HAL_UART_IRQHandler+0xb0>
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	f003 0301 	and.w	r3, r3, #1
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d005      	beq.n	8012d50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d48:	f043 0202 	orr.w	r2, r3, #2
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	f003 0302 	and.w	r3, r3, #2
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d00a      	beq.n	8012d70 <HAL_UART_IRQHandler+0xd0>
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	f003 0301 	and.w	r3, r3, #1
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d005      	beq.n	8012d70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d68:	f043 0204 	orr.w	r2, r3, #4
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8012d70:	69fb      	ldr	r3, [r7, #28]
 8012d72:	f003 0308 	and.w	r3, r3, #8
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00f      	beq.n	8012d9a <HAL_UART_IRQHandler+0xfa>
 8012d7a:	69bb      	ldr	r3, [r7, #24]
 8012d7c:	f003 0320 	and.w	r3, r3, #32
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d104      	bne.n	8012d8e <HAL_UART_IRQHandler+0xee>
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	f003 0301 	and.w	r3, r3, #1
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d005      	beq.n	8012d9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d92:	f043 0208 	orr.w	r2, r3, #8
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d078      	beq.n	8012e94 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	f003 0320 	and.w	r3, r3, #32
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d007      	beq.n	8012dbc <HAL_UART_IRQHandler+0x11c>
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	f003 0320 	and.w	r3, r3, #32
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d002      	beq.n	8012dbc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 f930 	bl	801301c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	695b      	ldr	r3, [r3, #20]
 8012dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012dc6:	2b40      	cmp	r3, #64	; 0x40
 8012dc8:	bf0c      	ite	eq
 8012dca:	2301      	moveq	r3, #1
 8012dcc:	2300      	movne	r3, #0
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012dd6:	f003 0308 	and.w	r3, r3, #8
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d102      	bne.n	8012de4 <HAL_UART_IRQHandler+0x144>
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d031      	beq.n	8012e48 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f000 f879 	bl	8012edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	695b      	ldr	r3, [r3, #20]
 8012df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012df4:	2b40      	cmp	r3, #64	; 0x40
 8012df6:	d123      	bne.n	8012e40 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	695a      	ldr	r2, [r3, #20]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e06:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d013      	beq.n	8012e38 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e14:	4a21      	ldr	r2, [pc, #132]	; (8012e9c <HAL_UART_IRQHandler+0x1fc>)
 8012e16:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7fb fc97 	bl	800e750 <HAL_DMA_Abort_IT>
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d016      	beq.n	8012e56 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012e32:	4610      	mov	r0, r2
 8012e34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e36:	e00e      	b.n	8012e56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f000 f845 	bl	8012ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e3e:	e00a      	b.n	8012e56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f000 f841 	bl	8012ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e46:	e006      	b.n	8012e56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 f83d 	bl	8012ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2200      	movs	r2, #0
 8012e52:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8012e54:	e01e      	b.n	8012e94 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e56:	bf00      	nop
    return;
 8012e58:	e01c      	b.n	8012e94 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d008      	beq.n	8012e76 <HAL_UART_IRQHandler+0x1d6>
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d003      	beq.n	8012e76 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f000 f866 	bl	8012f40 <UART_Transmit_IT>
    return;
 8012e74:	e00f      	b.n	8012e96 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012e76:	69fb      	ldr	r3, [r7, #28]
 8012e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d00a      	beq.n	8012e96 <HAL_UART_IRQHandler+0x1f6>
 8012e80:	69bb      	ldr	r3, [r7, #24]
 8012e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d005      	beq.n	8012e96 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f000 f8ae 	bl	8012fec <UART_EndTransmit_IT>
    return;
 8012e90:	bf00      	nop
 8012e92:	e000      	b.n	8012e96 <HAL_UART_IRQHandler+0x1f6>
    return;
 8012e94:	bf00      	nop
  }
}
 8012e96:	3720      	adds	r7, #32
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	08012f19 	.word	0x08012f19

08012ea0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012ea8:	bf00      	nop
 8012eaa:	370c      	adds	r7, #12
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8012ebc:	bf00      	nop
 8012ebe:	370c      	adds	r7, #12
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr

08012ec8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8012ed0:	bf00      	nop
 8012ed2:	370c      	adds	r7, #12
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b083      	sub	sp, #12
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68da      	ldr	r2, [r3, #12]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012ef2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	695a      	ldr	r2, [r3, #20]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f022 0201 	bic.w	r2, r2, #1
 8012f02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2220      	movs	r2, #32
 8012f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8012f0c:	bf00      	nop
 8012f0e:	370c      	adds	r7, #12
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr

08012f18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012f32:	68f8      	ldr	r0, [r7, #12]
 8012f34:	f7ff ffc8 	bl	8012ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012f38:	bf00      	nop
 8012f3a:	3710      	adds	r7, #16
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b085      	sub	sp, #20
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	2b21      	cmp	r3, #33	; 0x21
 8012f52:	d144      	bne.n	8012fde <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	689b      	ldr	r3, [r3, #8]
 8012f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f5c:	d11a      	bne.n	8012f94 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6a1b      	ldr	r3, [r3, #32]
 8012f62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	881b      	ldrh	r3, [r3, #0]
 8012f68:	461a      	mov	r2, r3
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012f72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	691b      	ldr	r3, [r3, #16]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d105      	bne.n	8012f88 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6a1b      	ldr	r3, [r3, #32]
 8012f80:	1c9a      	adds	r2, r3, #2
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	621a      	str	r2, [r3, #32]
 8012f86:	e00e      	b.n	8012fa6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6a1b      	ldr	r3, [r3, #32]
 8012f8c:	1c5a      	adds	r2, r3, #1
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	621a      	str	r2, [r3, #32]
 8012f92:	e008      	b.n	8012fa6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6a1b      	ldr	r3, [r3, #32]
 8012f98:	1c59      	adds	r1, r3, #1
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	6211      	str	r1, [r2, #32]
 8012f9e:	781a      	ldrb	r2, [r3, #0]
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	3b01      	subs	r3, #1
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d10f      	bne.n	8012fda <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	68da      	ldr	r2, [r3, #12]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	68da      	ldr	r2, [r3, #12]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012fd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	e000      	b.n	8012fe0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8012fde:	2302      	movs	r3, #2
  }
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3714      	adds	r7, #20
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fea:	4770      	bx	lr

08012fec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	68da      	ldr	r2, [r3, #12]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013002:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2220      	movs	r2, #32
 8013008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7ff ff47 	bl	8012ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8013012:	2300      	movs	r3, #0
}
 8013014:	4618      	mov	r0, r3
 8013016:	3708      	adds	r7, #8
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}

0801301c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b084      	sub	sp, #16
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801302a:	b2db      	uxtb	r3, r3
 801302c:	2b22      	cmp	r3, #34	; 0x22
 801302e:	d171      	bne.n	8013114 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	689b      	ldr	r3, [r3, #8]
 8013034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013038:	d123      	bne.n	8013082 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801303e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	691b      	ldr	r3, [r3, #16]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d10e      	bne.n	8013066 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	b29b      	uxth	r3, r3
 8013050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013054:	b29a      	uxth	r2, r3
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801305e:	1c9a      	adds	r2, r3, #2
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	629a      	str	r2, [r3, #40]	; 0x28
 8013064:	e029      	b.n	80130ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	b29b      	uxth	r3, r3
 801306e:	b2db      	uxtb	r3, r3
 8013070:	b29a      	uxth	r2, r3
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801307a:	1c5a      	adds	r2, r3, #1
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	629a      	str	r2, [r3, #40]	; 0x28
 8013080:	e01b      	b.n	80130ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	691b      	ldr	r3, [r3, #16]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d10a      	bne.n	80130a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	6858      	ldr	r0, [r3, #4]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013094:	1c59      	adds	r1, r3, #1
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	6291      	str	r1, [r2, #40]	; 0x28
 801309a:	b2c2      	uxtb	r2, r0
 801309c:	701a      	strb	r2, [r3, #0]
 801309e:	e00c      	b.n	80130ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	b2da      	uxtb	r2, r3
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130ac:	1c58      	adds	r0, r3, #1
 80130ae:	6879      	ldr	r1, [r7, #4]
 80130b0:	6288      	str	r0, [r1, #40]	; 0x28
 80130b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80130b6:	b2d2      	uxtb	r2, r2
 80130b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80130be:	b29b      	uxth	r3, r3
 80130c0:	3b01      	subs	r3, #1
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	4619      	mov	r1, r3
 80130c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d120      	bne.n	8013110 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	68da      	ldr	r2, [r3, #12]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f022 0220 	bic.w	r2, r2, #32
 80130dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	68da      	ldr	r2, [r3, #12]
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80130ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	695a      	ldr	r2, [r3, #20]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f022 0201 	bic.w	r2, r2, #1
 80130fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2220      	movs	r2, #32
 8013102:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f7ff fed4 	bl	8012eb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801310c:	2300      	movs	r3, #0
 801310e:	e002      	b.n	8013116 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8013110:	2300      	movs	r3, #0
 8013112:	e000      	b.n	8013116 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8013114:	2302      	movs	r3, #2
  }
}
 8013116:	4618      	mov	r0, r3
 8013118:	3710      	adds	r7, #16
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
	...

08013120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	b085      	sub	sp, #20
 8013126:	af00      	add	r7, sp, #0
 8013128:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	691b      	ldr	r3, [r3, #16]
 8013130:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	68da      	ldr	r2, [r3, #12]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	430a      	orrs	r2, r1
 801313e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	689a      	ldr	r2, [r3, #8]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	691b      	ldr	r3, [r3, #16]
 8013148:	431a      	orrs	r2, r3
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	695b      	ldr	r3, [r3, #20]
 801314e:	431a      	orrs	r2, r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	69db      	ldr	r3, [r3, #28]
 8013154:	4313      	orrs	r3, r2
 8013156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68db      	ldr	r3, [r3, #12]
 801315e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8013162:	f023 030c 	bic.w	r3, r3, #12
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	6812      	ldr	r2, [r2, #0]
 801316a:	68f9      	ldr	r1, [r7, #12]
 801316c:	430b      	orrs	r3, r1
 801316e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	695b      	ldr	r3, [r3, #20]
 8013176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	699a      	ldr	r2, [r3, #24]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	430a      	orrs	r2, r1
 8013184:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	69db      	ldr	r3, [r3, #28]
 801318a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801318e:	f040 818b 	bne.w	80134a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	4ac1      	ldr	r2, [pc, #772]	; (801349c <UART_SetConfig+0x37c>)
 8013198:	4293      	cmp	r3, r2
 801319a:	d005      	beq.n	80131a8 <UART_SetConfig+0x88>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4abf      	ldr	r2, [pc, #764]	; (80134a0 <UART_SetConfig+0x380>)
 80131a2:	4293      	cmp	r3, r2
 80131a4:	f040 80bd 	bne.w	8013322 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80131a8:	f7fd fe16 	bl	8010dd8 <HAL_RCC_GetPCLK2Freq>
 80131ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	461d      	mov	r5, r3
 80131b2:	f04f 0600 	mov.w	r6, #0
 80131b6:	46a8      	mov	r8, r5
 80131b8:	46b1      	mov	r9, r6
 80131ba:	eb18 0308 	adds.w	r3, r8, r8
 80131be:	eb49 0409 	adc.w	r4, r9, r9
 80131c2:	4698      	mov	r8, r3
 80131c4:	46a1      	mov	r9, r4
 80131c6:	eb18 0805 	adds.w	r8, r8, r5
 80131ca:	eb49 0906 	adc.w	r9, r9, r6
 80131ce:	f04f 0100 	mov.w	r1, #0
 80131d2:	f04f 0200 	mov.w	r2, #0
 80131d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80131da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80131de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80131e2:	4688      	mov	r8, r1
 80131e4:	4691      	mov	r9, r2
 80131e6:	eb18 0005 	adds.w	r0, r8, r5
 80131ea:	eb49 0106 	adc.w	r1, r9, r6
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	461d      	mov	r5, r3
 80131f4:	f04f 0600 	mov.w	r6, #0
 80131f8:	196b      	adds	r3, r5, r5
 80131fa:	eb46 0406 	adc.w	r4, r6, r6
 80131fe:	461a      	mov	r2, r3
 8013200:	4623      	mov	r3, r4
 8013202:	f7ed fd4b 	bl	8000c9c <__aeabi_uldivmod>
 8013206:	4603      	mov	r3, r0
 8013208:	460c      	mov	r4, r1
 801320a:	461a      	mov	r2, r3
 801320c:	4ba5      	ldr	r3, [pc, #660]	; (80134a4 <UART_SetConfig+0x384>)
 801320e:	fba3 2302 	umull	r2, r3, r3, r2
 8013212:	095b      	lsrs	r3, r3, #5
 8013214:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	461d      	mov	r5, r3
 801321c:	f04f 0600 	mov.w	r6, #0
 8013220:	46a9      	mov	r9, r5
 8013222:	46b2      	mov	sl, r6
 8013224:	eb19 0309 	adds.w	r3, r9, r9
 8013228:	eb4a 040a 	adc.w	r4, sl, sl
 801322c:	4699      	mov	r9, r3
 801322e:	46a2      	mov	sl, r4
 8013230:	eb19 0905 	adds.w	r9, r9, r5
 8013234:	eb4a 0a06 	adc.w	sl, sl, r6
 8013238:	f04f 0100 	mov.w	r1, #0
 801323c:	f04f 0200 	mov.w	r2, #0
 8013240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013244:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013248:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801324c:	4689      	mov	r9, r1
 801324e:	4692      	mov	sl, r2
 8013250:	eb19 0005 	adds.w	r0, r9, r5
 8013254:	eb4a 0106 	adc.w	r1, sl, r6
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	461d      	mov	r5, r3
 801325e:	f04f 0600 	mov.w	r6, #0
 8013262:	196b      	adds	r3, r5, r5
 8013264:	eb46 0406 	adc.w	r4, r6, r6
 8013268:	461a      	mov	r2, r3
 801326a:	4623      	mov	r3, r4
 801326c:	f7ed fd16 	bl	8000c9c <__aeabi_uldivmod>
 8013270:	4603      	mov	r3, r0
 8013272:	460c      	mov	r4, r1
 8013274:	461a      	mov	r2, r3
 8013276:	4b8b      	ldr	r3, [pc, #556]	; (80134a4 <UART_SetConfig+0x384>)
 8013278:	fba3 1302 	umull	r1, r3, r3, r2
 801327c:	095b      	lsrs	r3, r3, #5
 801327e:	2164      	movs	r1, #100	; 0x64
 8013280:	fb01 f303 	mul.w	r3, r1, r3
 8013284:	1ad3      	subs	r3, r2, r3
 8013286:	00db      	lsls	r3, r3, #3
 8013288:	3332      	adds	r3, #50	; 0x32
 801328a:	4a86      	ldr	r2, [pc, #536]	; (80134a4 <UART_SetConfig+0x384>)
 801328c:	fba2 2303 	umull	r2, r3, r2, r3
 8013290:	095b      	lsrs	r3, r3, #5
 8013292:	005b      	lsls	r3, r3, #1
 8013294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013298:	4498      	add	r8, r3
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	461d      	mov	r5, r3
 801329e:	f04f 0600 	mov.w	r6, #0
 80132a2:	46a9      	mov	r9, r5
 80132a4:	46b2      	mov	sl, r6
 80132a6:	eb19 0309 	adds.w	r3, r9, r9
 80132aa:	eb4a 040a 	adc.w	r4, sl, sl
 80132ae:	4699      	mov	r9, r3
 80132b0:	46a2      	mov	sl, r4
 80132b2:	eb19 0905 	adds.w	r9, r9, r5
 80132b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80132ba:	f04f 0100 	mov.w	r1, #0
 80132be:	f04f 0200 	mov.w	r2, #0
 80132c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80132c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80132ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80132ce:	4689      	mov	r9, r1
 80132d0:	4692      	mov	sl, r2
 80132d2:	eb19 0005 	adds.w	r0, r9, r5
 80132d6:	eb4a 0106 	adc.w	r1, sl, r6
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	461d      	mov	r5, r3
 80132e0:	f04f 0600 	mov.w	r6, #0
 80132e4:	196b      	adds	r3, r5, r5
 80132e6:	eb46 0406 	adc.w	r4, r6, r6
 80132ea:	461a      	mov	r2, r3
 80132ec:	4623      	mov	r3, r4
 80132ee:	f7ed fcd5 	bl	8000c9c <__aeabi_uldivmod>
 80132f2:	4603      	mov	r3, r0
 80132f4:	460c      	mov	r4, r1
 80132f6:	461a      	mov	r2, r3
 80132f8:	4b6a      	ldr	r3, [pc, #424]	; (80134a4 <UART_SetConfig+0x384>)
 80132fa:	fba3 1302 	umull	r1, r3, r3, r2
 80132fe:	095b      	lsrs	r3, r3, #5
 8013300:	2164      	movs	r1, #100	; 0x64
 8013302:	fb01 f303 	mul.w	r3, r1, r3
 8013306:	1ad3      	subs	r3, r2, r3
 8013308:	00db      	lsls	r3, r3, #3
 801330a:	3332      	adds	r3, #50	; 0x32
 801330c:	4a65      	ldr	r2, [pc, #404]	; (80134a4 <UART_SetConfig+0x384>)
 801330e:	fba2 2303 	umull	r2, r3, r2, r3
 8013312:	095b      	lsrs	r3, r3, #5
 8013314:	f003 0207 	and.w	r2, r3, #7
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	4442      	add	r2, r8
 801331e:	609a      	str	r2, [r3, #8]
 8013320:	e26f      	b.n	8013802 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013322:	f7fd fd45 	bl	8010db0 <HAL_RCC_GetPCLK1Freq>
 8013326:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	461d      	mov	r5, r3
 801332c:	f04f 0600 	mov.w	r6, #0
 8013330:	46a8      	mov	r8, r5
 8013332:	46b1      	mov	r9, r6
 8013334:	eb18 0308 	adds.w	r3, r8, r8
 8013338:	eb49 0409 	adc.w	r4, r9, r9
 801333c:	4698      	mov	r8, r3
 801333e:	46a1      	mov	r9, r4
 8013340:	eb18 0805 	adds.w	r8, r8, r5
 8013344:	eb49 0906 	adc.w	r9, r9, r6
 8013348:	f04f 0100 	mov.w	r1, #0
 801334c:	f04f 0200 	mov.w	r2, #0
 8013350:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013354:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013358:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801335c:	4688      	mov	r8, r1
 801335e:	4691      	mov	r9, r2
 8013360:	eb18 0005 	adds.w	r0, r8, r5
 8013364:	eb49 0106 	adc.w	r1, r9, r6
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	461d      	mov	r5, r3
 801336e:	f04f 0600 	mov.w	r6, #0
 8013372:	196b      	adds	r3, r5, r5
 8013374:	eb46 0406 	adc.w	r4, r6, r6
 8013378:	461a      	mov	r2, r3
 801337a:	4623      	mov	r3, r4
 801337c:	f7ed fc8e 	bl	8000c9c <__aeabi_uldivmod>
 8013380:	4603      	mov	r3, r0
 8013382:	460c      	mov	r4, r1
 8013384:	461a      	mov	r2, r3
 8013386:	4b47      	ldr	r3, [pc, #284]	; (80134a4 <UART_SetConfig+0x384>)
 8013388:	fba3 2302 	umull	r2, r3, r3, r2
 801338c:	095b      	lsrs	r3, r3, #5
 801338e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	461d      	mov	r5, r3
 8013396:	f04f 0600 	mov.w	r6, #0
 801339a:	46a9      	mov	r9, r5
 801339c:	46b2      	mov	sl, r6
 801339e:	eb19 0309 	adds.w	r3, r9, r9
 80133a2:	eb4a 040a 	adc.w	r4, sl, sl
 80133a6:	4699      	mov	r9, r3
 80133a8:	46a2      	mov	sl, r4
 80133aa:	eb19 0905 	adds.w	r9, r9, r5
 80133ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80133b2:	f04f 0100 	mov.w	r1, #0
 80133b6:	f04f 0200 	mov.w	r2, #0
 80133ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80133be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80133c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80133c6:	4689      	mov	r9, r1
 80133c8:	4692      	mov	sl, r2
 80133ca:	eb19 0005 	adds.w	r0, r9, r5
 80133ce:	eb4a 0106 	adc.w	r1, sl, r6
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	461d      	mov	r5, r3
 80133d8:	f04f 0600 	mov.w	r6, #0
 80133dc:	196b      	adds	r3, r5, r5
 80133de:	eb46 0406 	adc.w	r4, r6, r6
 80133e2:	461a      	mov	r2, r3
 80133e4:	4623      	mov	r3, r4
 80133e6:	f7ed fc59 	bl	8000c9c <__aeabi_uldivmod>
 80133ea:	4603      	mov	r3, r0
 80133ec:	460c      	mov	r4, r1
 80133ee:	461a      	mov	r2, r3
 80133f0:	4b2c      	ldr	r3, [pc, #176]	; (80134a4 <UART_SetConfig+0x384>)
 80133f2:	fba3 1302 	umull	r1, r3, r3, r2
 80133f6:	095b      	lsrs	r3, r3, #5
 80133f8:	2164      	movs	r1, #100	; 0x64
 80133fa:	fb01 f303 	mul.w	r3, r1, r3
 80133fe:	1ad3      	subs	r3, r2, r3
 8013400:	00db      	lsls	r3, r3, #3
 8013402:	3332      	adds	r3, #50	; 0x32
 8013404:	4a27      	ldr	r2, [pc, #156]	; (80134a4 <UART_SetConfig+0x384>)
 8013406:	fba2 2303 	umull	r2, r3, r2, r3
 801340a:	095b      	lsrs	r3, r3, #5
 801340c:	005b      	lsls	r3, r3, #1
 801340e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013412:	4498      	add	r8, r3
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	461d      	mov	r5, r3
 8013418:	f04f 0600 	mov.w	r6, #0
 801341c:	46a9      	mov	r9, r5
 801341e:	46b2      	mov	sl, r6
 8013420:	eb19 0309 	adds.w	r3, r9, r9
 8013424:	eb4a 040a 	adc.w	r4, sl, sl
 8013428:	4699      	mov	r9, r3
 801342a:	46a2      	mov	sl, r4
 801342c:	eb19 0905 	adds.w	r9, r9, r5
 8013430:	eb4a 0a06 	adc.w	sl, sl, r6
 8013434:	f04f 0100 	mov.w	r1, #0
 8013438:	f04f 0200 	mov.w	r2, #0
 801343c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013440:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013444:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013448:	4689      	mov	r9, r1
 801344a:	4692      	mov	sl, r2
 801344c:	eb19 0005 	adds.w	r0, r9, r5
 8013450:	eb4a 0106 	adc.w	r1, sl, r6
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	685b      	ldr	r3, [r3, #4]
 8013458:	461d      	mov	r5, r3
 801345a:	f04f 0600 	mov.w	r6, #0
 801345e:	196b      	adds	r3, r5, r5
 8013460:	eb46 0406 	adc.w	r4, r6, r6
 8013464:	461a      	mov	r2, r3
 8013466:	4623      	mov	r3, r4
 8013468:	f7ed fc18 	bl	8000c9c <__aeabi_uldivmod>
 801346c:	4603      	mov	r3, r0
 801346e:	460c      	mov	r4, r1
 8013470:	461a      	mov	r2, r3
 8013472:	4b0c      	ldr	r3, [pc, #48]	; (80134a4 <UART_SetConfig+0x384>)
 8013474:	fba3 1302 	umull	r1, r3, r3, r2
 8013478:	095b      	lsrs	r3, r3, #5
 801347a:	2164      	movs	r1, #100	; 0x64
 801347c:	fb01 f303 	mul.w	r3, r1, r3
 8013480:	1ad3      	subs	r3, r2, r3
 8013482:	00db      	lsls	r3, r3, #3
 8013484:	3332      	adds	r3, #50	; 0x32
 8013486:	4a07      	ldr	r2, [pc, #28]	; (80134a4 <UART_SetConfig+0x384>)
 8013488:	fba2 2303 	umull	r2, r3, r2, r3
 801348c:	095b      	lsrs	r3, r3, #5
 801348e:	f003 0207 	and.w	r2, r3, #7
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	4442      	add	r2, r8
 8013498:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801349a:	e1b2      	b.n	8013802 <UART_SetConfig+0x6e2>
 801349c:	40011000 	.word	0x40011000
 80134a0:	40011400 	.word	0x40011400
 80134a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4ad7      	ldr	r2, [pc, #860]	; (801380c <UART_SetConfig+0x6ec>)
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d005      	beq.n	80134be <UART_SetConfig+0x39e>
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	4ad6      	ldr	r2, [pc, #856]	; (8013810 <UART_SetConfig+0x6f0>)
 80134b8:	4293      	cmp	r3, r2
 80134ba:	f040 80d1 	bne.w	8013660 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80134be:	f7fd fc8b 	bl	8010dd8 <HAL_RCC_GetPCLK2Freq>
 80134c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	469a      	mov	sl, r3
 80134c8:	f04f 0b00 	mov.w	fp, #0
 80134cc:	46d0      	mov	r8, sl
 80134ce:	46d9      	mov	r9, fp
 80134d0:	eb18 0308 	adds.w	r3, r8, r8
 80134d4:	eb49 0409 	adc.w	r4, r9, r9
 80134d8:	4698      	mov	r8, r3
 80134da:	46a1      	mov	r9, r4
 80134dc:	eb18 080a 	adds.w	r8, r8, sl
 80134e0:	eb49 090b 	adc.w	r9, r9, fp
 80134e4:	f04f 0100 	mov.w	r1, #0
 80134e8:	f04f 0200 	mov.w	r2, #0
 80134ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80134f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80134f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80134f8:	4688      	mov	r8, r1
 80134fa:	4691      	mov	r9, r2
 80134fc:	eb1a 0508 	adds.w	r5, sl, r8
 8013500:	eb4b 0609 	adc.w	r6, fp, r9
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	4619      	mov	r1, r3
 801350a:	f04f 0200 	mov.w	r2, #0
 801350e:	f04f 0300 	mov.w	r3, #0
 8013512:	f04f 0400 	mov.w	r4, #0
 8013516:	0094      	lsls	r4, r2, #2
 8013518:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801351c:	008b      	lsls	r3, r1, #2
 801351e:	461a      	mov	r2, r3
 8013520:	4623      	mov	r3, r4
 8013522:	4628      	mov	r0, r5
 8013524:	4631      	mov	r1, r6
 8013526:	f7ed fbb9 	bl	8000c9c <__aeabi_uldivmod>
 801352a:	4603      	mov	r3, r0
 801352c:	460c      	mov	r4, r1
 801352e:	461a      	mov	r2, r3
 8013530:	4bb8      	ldr	r3, [pc, #736]	; (8013814 <UART_SetConfig+0x6f4>)
 8013532:	fba3 2302 	umull	r2, r3, r3, r2
 8013536:	095b      	lsrs	r3, r3, #5
 8013538:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	469b      	mov	fp, r3
 8013540:	f04f 0c00 	mov.w	ip, #0
 8013544:	46d9      	mov	r9, fp
 8013546:	46e2      	mov	sl, ip
 8013548:	eb19 0309 	adds.w	r3, r9, r9
 801354c:	eb4a 040a 	adc.w	r4, sl, sl
 8013550:	4699      	mov	r9, r3
 8013552:	46a2      	mov	sl, r4
 8013554:	eb19 090b 	adds.w	r9, r9, fp
 8013558:	eb4a 0a0c 	adc.w	sl, sl, ip
 801355c:	f04f 0100 	mov.w	r1, #0
 8013560:	f04f 0200 	mov.w	r2, #0
 8013564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013568:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801356c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013570:	4689      	mov	r9, r1
 8013572:	4692      	mov	sl, r2
 8013574:	eb1b 0509 	adds.w	r5, fp, r9
 8013578:	eb4c 060a 	adc.w	r6, ip, sl
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	4619      	mov	r1, r3
 8013582:	f04f 0200 	mov.w	r2, #0
 8013586:	f04f 0300 	mov.w	r3, #0
 801358a:	f04f 0400 	mov.w	r4, #0
 801358e:	0094      	lsls	r4, r2, #2
 8013590:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013594:	008b      	lsls	r3, r1, #2
 8013596:	461a      	mov	r2, r3
 8013598:	4623      	mov	r3, r4
 801359a:	4628      	mov	r0, r5
 801359c:	4631      	mov	r1, r6
 801359e:	f7ed fb7d 	bl	8000c9c <__aeabi_uldivmod>
 80135a2:	4603      	mov	r3, r0
 80135a4:	460c      	mov	r4, r1
 80135a6:	461a      	mov	r2, r3
 80135a8:	4b9a      	ldr	r3, [pc, #616]	; (8013814 <UART_SetConfig+0x6f4>)
 80135aa:	fba3 1302 	umull	r1, r3, r3, r2
 80135ae:	095b      	lsrs	r3, r3, #5
 80135b0:	2164      	movs	r1, #100	; 0x64
 80135b2:	fb01 f303 	mul.w	r3, r1, r3
 80135b6:	1ad3      	subs	r3, r2, r3
 80135b8:	011b      	lsls	r3, r3, #4
 80135ba:	3332      	adds	r3, #50	; 0x32
 80135bc:	4a95      	ldr	r2, [pc, #596]	; (8013814 <UART_SetConfig+0x6f4>)
 80135be:	fba2 2303 	umull	r2, r3, r2, r3
 80135c2:	095b      	lsrs	r3, r3, #5
 80135c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80135c8:	4498      	add	r8, r3
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	469b      	mov	fp, r3
 80135ce:	f04f 0c00 	mov.w	ip, #0
 80135d2:	46d9      	mov	r9, fp
 80135d4:	46e2      	mov	sl, ip
 80135d6:	eb19 0309 	adds.w	r3, r9, r9
 80135da:	eb4a 040a 	adc.w	r4, sl, sl
 80135de:	4699      	mov	r9, r3
 80135e0:	46a2      	mov	sl, r4
 80135e2:	eb19 090b 	adds.w	r9, r9, fp
 80135e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80135ea:	f04f 0100 	mov.w	r1, #0
 80135ee:	f04f 0200 	mov.w	r2, #0
 80135f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80135f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80135fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80135fe:	4689      	mov	r9, r1
 8013600:	4692      	mov	sl, r2
 8013602:	eb1b 0509 	adds.w	r5, fp, r9
 8013606:	eb4c 060a 	adc.w	r6, ip, sl
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	4619      	mov	r1, r3
 8013610:	f04f 0200 	mov.w	r2, #0
 8013614:	f04f 0300 	mov.w	r3, #0
 8013618:	f04f 0400 	mov.w	r4, #0
 801361c:	0094      	lsls	r4, r2, #2
 801361e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013622:	008b      	lsls	r3, r1, #2
 8013624:	461a      	mov	r2, r3
 8013626:	4623      	mov	r3, r4
 8013628:	4628      	mov	r0, r5
 801362a:	4631      	mov	r1, r6
 801362c:	f7ed fb36 	bl	8000c9c <__aeabi_uldivmod>
 8013630:	4603      	mov	r3, r0
 8013632:	460c      	mov	r4, r1
 8013634:	461a      	mov	r2, r3
 8013636:	4b77      	ldr	r3, [pc, #476]	; (8013814 <UART_SetConfig+0x6f4>)
 8013638:	fba3 1302 	umull	r1, r3, r3, r2
 801363c:	095b      	lsrs	r3, r3, #5
 801363e:	2164      	movs	r1, #100	; 0x64
 8013640:	fb01 f303 	mul.w	r3, r1, r3
 8013644:	1ad3      	subs	r3, r2, r3
 8013646:	011b      	lsls	r3, r3, #4
 8013648:	3332      	adds	r3, #50	; 0x32
 801364a:	4a72      	ldr	r2, [pc, #456]	; (8013814 <UART_SetConfig+0x6f4>)
 801364c:	fba2 2303 	umull	r2, r3, r2, r3
 8013650:	095b      	lsrs	r3, r3, #5
 8013652:	f003 020f 	and.w	r2, r3, #15
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	4442      	add	r2, r8
 801365c:	609a      	str	r2, [r3, #8]
 801365e:	e0d0      	b.n	8013802 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8013660:	f7fd fba6 	bl	8010db0 <HAL_RCC_GetPCLK1Freq>
 8013664:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	469a      	mov	sl, r3
 801366a:	f04f 0b00 	mov.w	fp, #0
 801366e:	46d0      	mov	r8, sl
 8013670:	46d9      	mov	r9, fp
 8013672:	eb18 0308 	adds.w	r3, r8, r8
 8013676:	eb49 0409 	adc.w	r4, r9, r9
 801367a:	4698      	mov	r8, r3
 801367c:	46a1      	mov	r9, r4
 801367e:	eb18 080a 	adds.w	r8, r8, sl
 8013682:	eb49 090b 	adc.w	r9, r9, fp
 8013686:	f04f 0100 	mov.w	r1, #0
 801368a:	f04f 0200 	mov.w	r2, #0
 801368e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013692:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013696:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801369a:	4688      	mov	r8, r1
 801369c:	4691      	mov	r9, r2
 801369e:	eb1a 0508 	adds.w	r5, sl, r8
 80136a2:	eb4b 0609 	adc.w	r6, fp, r9
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	4619      	mov	r1, r3
 80136ac:	f04f 0200 	mov.w	r2, #0
 80136b0:	f04f 0300 	mov.w	r3, #0
 80136b4:	f04f 0400 	mov.w	r4, #0
 80136b8:	0094      	lsls	r4, r2, #2
 80136ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80136be:	008b      	lsls	r3, r1, #2
 80136c0:	461a      	mov	r2, r3
 80136c2:	4623      	mov	r3, r4
 80136c4:	4628      	mov	r0, r5
 80136c6:	4631      	mov	r1, r6
 80136c8:	f7ed fae8 	bl	8000c9c <__aeabi_uldivmod>
 80136cc:	4603      	mov	r3, r0
 80136ce:	460c      	mov	r4, r1
 80136d0:	461a      	mov	r2, r3
 80136d2:	4b50      	ldr	r3, [pc, #320]	; (8013814 <UART_SetConfig+0x6f4>)
 80136d4:	fba3 2302 	umull	r2, r3, r3, r2
 80136d8:	095b      	lsrs	r3, r3, #5
 80136da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	469b      	mov	fp, r3
 80136e2:	f04f 0c00 	mov.w	ip, #0
 80136e6:	46d9      	mov	r9, fp
 80136e8:	46e2      	mov	sl, ip
 80136ea:	eb19 0309 	adds.w	r3, r9, r9
 80136ee:	eb4a 040a 	adc.w	r4, sl, sl
 80136f2:	4699      	mov	r9, r3
 80136f4:	46a2      	mov	sl, r4
 80136f6:	eb19 090b 	adds.w	r9, r9, fp
 80136fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80136fe:	f04f 0100 	mov.w	r1, #0
 8013702:	f04f 0200 	mov.w	r2, #0
 8013706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801370a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801370e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013712:	4689      	mov	r9, r1
 8013714:	4692      	mov	sl, r2
 8013716:	eb1b 0509 	adds.w	r5, fp, r9
 801371a:	eb4c 060a 	adc.w	r6, ip, sl
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	4619      	mov	r1, r3
 8013724:	f04f 0200 	mov.w	r2, #0
 8013728:	f04f 0300 	mov.w	r3, #0
 801372c:	f04f 0400 	mov.w	r4, #0
 8013730:	0094      	lsls	r4, r2, #2
 8013732:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013736:	008b      	lsls	r3, r1, #2
 8013738:	461a      	mov	r2, r3
 801373a:	4623      	mov	r3, r4
 801373c:	4628      	mov	r0, r5
 801373e:	4631      	mov	r1, r6
 8013740:	f7ed faac 	bl	8000c9c <__aeabi_uldivmod>
 8013744:	4603      	mov	r3, r0
 8013746:	460c      	mov	r4, r1
 8013748:	461a      	mov	r2, r3
 801374a:	4b32      	ldr	r3, [pc, #200]	; (8013814 <UART_SetConfig+0x6f4>)
 801374c:	fba3 1302 	umull	r1, r3, r3, r2
 8013750:	095b      	lsrs	r3, r3, #5
 8013752:	2164      	movs	r1, #100	; 0x64
 8013754:	fb01 f303 	mul.w	r3, r1, r3
 8013758:	1ad3      	subs	r3, r2, r3
 801375a:	011b      	lsls	r3, r3, #4
 801375c:	3332      	adds	r3, #50	; 0x32
 801375e:	4a2d      	ldr	r2, [pc, #180]	; (8013814 <UART_SetConfig+0x6f4>)
 8013760:	fba2 2303 	umull	r2, r3, r2, r3
 8013764:	095b      	lsrs	r3, r3, #5
 8013766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801376a:	4498      	add	r8, r3
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	469b      	mov	fp, r3
 8013770:	f04f 0c00 	mov.w	ip, #0
 8013774:	46d9      	mov	r9, fp
 8013776:	46e2      	mov	sl, ip
 8013778:	eb19 0309 	adds.w	r3, r9, r9
 801377c:	eb4a 040a 	adc.w	r4, sl, sl
 8013780:	4699      	mov	r9, r3
 8013782:	46a2      	mov	sl, r4
 8013784:	eb19 090b 	adds.w	r9, r9, fp
 8013788:	eb4a 0a0c 	adc.w	sl, sl, ip
 801378c:	f04f 0100 	mov.w	r1, #0
 8013790:	f04f 0200 	mov.w	r2, #0
 8013794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013798:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801379c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80137a0:	4689      	mov	r9, r1
 80137a2:	4692      	mov	sl, r2
 80137a4:	eb1b 0509 	adds.w	r5, fp, r9
 80137a8:	eb4c 060a 	adc.w	r6, ip, sl
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	685b      	ldr	r3, [r3, #4]
 80137b0:	4619      	mov	r1, r3
 80137b2:	f04f 0200 	mov.w	r2, #0
 80137b6:	f04f 0300 	mov.w	r3, #0
 80137ba:	f04f 0400 	mov.w	r4, #0
 80137be:	0094      	lsls	r4, r2, #2
 80137c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80137c4:	008b      	lsls	r3, r1, #2
 80137c6:	461a      	mov	r2, r3
 80137c8:	4623      	mov	r3, r4
 80137ca:	4628      	mov	r0, r5
 80137cc:	4631      	mov	r1, r6
 80137ce:	f7ed fa65 	bl	8000c9c <__aeabi_uldivmod>
 80137d2:	4603      	mov	r3, r0
 80137d4:	460c      	mov	r4, r1
 80137d6:	461a      	mov	r2, r3
 80137d8:	4b0e      	ldr	r3, [pc, #56]	; (8013814 <UART_SetConfig+0x6f4>)
 80137da:	fba3 1302 	umull	r1, r3, r3, r2
 80137de:	095b      	lsrs	r3, r3, #5
 80137e0:	2164      	movs	r1, #100	; 0x64
 80137e2:	fb01 f303 	mul.w	r3, r1, r3
 80137e6:	1ad3      	subs	r3, r2, r3
 80137e8:	011b      	lsls	r3, r3, #4
 80137ea:	3332      	adds	r3, #50	; 0x32
 80137ec:	4a09      	ldr	r2, [pc, #36]	; (8013814 <UART_SetConfig+0x6f4>)
 80137ee:	fba2 2303 	umull	r2, r3, r2, r3
 80137f2:	095b      	lsrs	r3, r3, #5
 80137f4:	f003 020f 	and.w	r2, r3, #15
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	4442      	add	r2, r8
 80137fe:	609a      	str	r2, [r3, #8]
}
 8013800:	e7ff      	b.n	8013802 <UART_SetConfig+0x6e2>
 8013802:	bf00      	nop
 8013804:	3714      	adds	r7, #20
 8013806:	46bd      	mov	sp, r7
 8013808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380c:	40011000 	.word	0x40011000
 8013810:	40011400 	.word	0x40011400
 8013814:	51eb851f 	.word	0x51eb851f

08013818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013818:	b084      	sub	sp, #16
 801381a:	b580      	push	{r7, lr}
 801381c:	b084      	sub	sp, #16
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
 8013822:	f107 001c 	add.w	r0, r7, #28
 8013826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382c:	2b01      	cmp	r3, #1
 801382e:	d122      	bne.n	8013876 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8013844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	68db      	ldr	r3, [r3, #12]
 8013850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801385a:	2b01      	cmp	r3, #1
 801385c:	d105      	bne.n	801386a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	68db      	ldr	r3, [r3, #12]
 8013862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 fa4e 	bl	8013d0c <USB_CoreReset>
 8013870:	4603      	mov	r3, r0
 8013872:	73fb      	strb	r3, [r7, #15]
 8013874:	e01a      	b.n	80138ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f000 fa42 	bl	8013d0c <USB_CoreReset>
 8013888:	4603      	mov	r3, r0
 801388a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801388c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801388e:	2b00      	cmp	r3, #0
 8013890:	d106      	bne.n	80138a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	639a      	str	r2, [r3, #56]	; 0x38
 801389e:	e005      	b.n	80138ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80138ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ae:	2b01      	cmp	r3, #1
 80138b0:	d10b      	bne.n	80138ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	689b      	ldr	r3, [r3, #8]
 80138b6:	f043 0206 	orr.w	r2, r3, #6
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	689b      	ldr	r3, [r3, #8]
 80138c2:	f043 0220 	orr.w	r2, r3, #32
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80138ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3710      	adds	r7, #16
 80138d0:	46bd      	mov	sp, r7
 80138d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80138d6:	b004      	add	sp, #16
 80138d8:	4770      	bx	lr

080138da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80138da:	b480      	push	{r7}
 80138dc:	b083      	sub	sp, #12
 80138de:	af00      	add	r7, sp, #0
 80138e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	689b      	ldr	r3, [r3, #8]
 80138e6:	f023 0201 	bic.w	r2, r3, #1
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80138ee:	2300      	movs	r3, #0
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	370c      	adds	r7, #12
 80138f4:	46bd      	mov	sp, r7
 80138f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fa:	4770      	bx	lr

080138fc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	460b      	mov	r3, r1
 8013906:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013914:	78fb      	ldrb	r3, [r7, #3]
 8013916:	2b01      	cmp	r3, #1
 8013918:	d106      	bne.n	8013928 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	60da      	str	r2, [r3, #12]
 8013926:	e00b      	b.n	8013940 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8013928:	78fb      	ldrb	r3, [r7, #3]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d106      	bne.n	801393c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	68db      	ldr	r3, [r3, #12]
 8013932:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	60da      	str	r2, [r3, #12]
 801393a:	e001      	b.n	8013940 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801393c:	2301      	movs	r3, #1
 801393e:	e003      	b.n	8013948 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8013940:	2032      	movs	r0, #50	; 0x32
 8013942:	f7fa f907 	bl	800db54 <HAL_Delay>

  return HAL_OK;
 8013946:	2300      	movs	r3, #0
}
 8013948:	4618      	mov	r0, r3
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013950:	b084      	sub	sp, #16
 8013952:	b580      	push	{r7, lr}
 8013954:	b086      	sub	sp, #24
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801395e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013962:	2300      	movs	r3, #0
 8013964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801396a:	2300      	movs	r3, #0
 801396c:	613b      	str	r3, [r7, #16]
 801396e:	e009      	b.n	8013984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	3340      	adds	r3, #64	; 0x40
 8013976:	009b      	lsls	r3, r3, #2
 8013978:	4413      	add	r3, r2
 801397a:	2200      	movs	r2, #0
 801397c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	3301      	adds	r3, #1
 8013982:	613b      	str	r3, [r7, #16]
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	2b0e      	cmp	r3, #14
 8013988:	d9f2      	bls.n	8013970 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801398a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801398c:	2b00      	cmp	r3, #0
 801398e:	d11c      	bne.n	80139ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801399e:	f043 0302 	orr.w	r3, r3, #2
 80139a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	639a      	str	r2, [r3, #56]	; 0x38
 80139c8:	e00b      	b.n	80139e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80139e8:	461a      	mov	r2, r3
 80139ea:	2300      	movs	r3, #0
 80139ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139f4:	4619      	mov	r1, r3
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139fc:	461a      	mov	r2, r3
 80139fe:	680b      	ldr	r3, [r1, #0]
 8013a00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d10c      	bne.n	8013a22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d104      	bne.n	8013a18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013a0e:	2100      	movs	r1, #0
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f000 f949 	bl	8013ca8 <USB_SetDevSpeed>
 8013a16:	e008      	b.n	8013a2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013a18:	2101      	movs	r1, #1
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f000 f944 	bl	8013ca8 <USB_SetDevSpeed>
 8013a20:	e003      	b.n	8013a2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013a22:	2103      	movs	r1, #3
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f000 f93f 	bl	8013ca8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013a2a:	2110      	movs	r1, #16
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f000 f8f3 	bl	8013c18 <USB_FlushTxFifo>
 8013a32:	4603      	mov	r3, r0
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d001      	beq.n	8013a3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f000 f911 	bl	8013c64 <USB_FlushRxFifo>
 8013a42:	4603      	mov	r3, r0
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d001      	beq.n	8013a4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8013a48:	2301      	movs	r3, #1
 8013a4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a52:	461a      	mov	r2, r3
 8013a54:	2300      	movs	r3, #0
 8013a56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a5e:	461a      	mov	r2, r3
 8013a60:	2300      	movs	r3, #0
 8013a62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013a70:	2300      	movs	r3, #0
 8013a72:	613b      	str	r3, [r7, #16]
 8013a74:	e043      	b.n	8013afe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	015a      	lsls	r2, r3, #5
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	4413      	add	r3, r2
 8013a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a8c:	d118      	bne.n	8013ac0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d10a      	bne.n	8013aaa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	015a      	lsls	r2, r3, #5
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013aa6:	6013      	str	r3, [r2, #0]
 8013aa8:	e013      	b.n	8013ad2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013aaa:	693b      	ldr	r3, [r7, #16]
 8013aac:	015a      	lsls	r2, r3, #5
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013abc:	6013      	str	r3, [r2, #0]
 8013abe:	e008      	b.n	8013ad2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	015a      	lsls	r2, r3, #5
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	4413      	add	r3, r2
 8013ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013acc:	461a      	mov	r2, r3
 8013ace:	2300      	movs	r3, #0
 8013ad0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	015a      	lsls	r2, r3, #5
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	4413      	add	r3, r2
 8013ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ade:	461a      	mov	r2, r3
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	015a      	lsls	r2, r3, #5
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	4413      	add	r3, r2
 8013aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013af0:	461a      	mov	r2, r3
 8013af2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013af6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	3301      	adds	r3, #1
 8013afc:	613b      	str	r3, [r7, #16]
 8013afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b00:	693a      	ldr	r2, [r7, #16]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d3b7      	bcc.n	8013a76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013b06:	2300      	movs	r3, #0
 8013b08:	613b      	str	r3, [r7, #16]
 8013b0a:	e043      	b.n	8013b94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	015a      	lsls	r2, r3, #5
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	4413      	add	r3, r2
 8013b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b22:	d118      	bne.n	8013b56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d10a      	bne.n	8013b40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	015a      	lsls	r2, r3, #5
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	4413      	add	r3, r2
 8013b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b36:	461a      	mov	r2, r3
 8013b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013b3c:	6013      	str	r3, [r2, #0]
 8013b3e:	e013      	b.n	8013b68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	015a      	lsls	r2, r3, #5
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	4413      	add	r3, r2
 8013b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013b52:	6013      	str	r3, [r2, #0]
 8013b54:	e008      	b.n	8013b68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	015a      	lsls	r2, r3, #5
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	4413      	add	r3, r2
 8013b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b62:	461a      	mov	r2, r3
 8013b64:	2300      	movs	r3, #0
 8013b66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	015a      	lsls	r2, r3, #5
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	4413      	add	r3, r2
 8013b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b74:	461a      	mov	r2, r3
 8013b76:	2300      	movs	r3, #0
 8013b78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	015a      	lsls	r2, r3, #5
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	4413      	add	r3, r2
 8013b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b86:	461a      	mov	r2, r3
 8013b88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013b8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	3301      	adds	r3, #1
 8013b92:	613b      	str	r3, [r7, #16]
 8013b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b96:	693a      	ldr	r2, [r7, #16]
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d3b7      	bcc.n	8013b0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ba2:	691b      	ldr	r3, [r3, #16]
 8013ba4:	68fa      	ldr	r2, [r7, #12]
 8013ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013bae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013bbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d105      	bne.n	8013bd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	699b      	ldr	r3, [r3, #24]
 8013bc8:	f043 0210 	orr.w	r2, r3, #16
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	699a      	ldr	r2, [r3, #24]
 8013bd4:	4b0f      	ldr	r3, [pc, #60]	; (8013c14 <USB_DevInit+0x2c4>)
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d005      	beq.n	8013bee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	699b      	ldr	r3, [r3, #24]
 8013be6:	f043 0208 	orr.w	r2, r3, #8
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d107      	bne.n	8013c04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	699b      	ldr	r3, [r3, #24]
 8013bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013bfc:	f043 0304 	orr.w	r3, r3, #4
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3718      	adds	r7, #24
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013c10:	b004      	add	sp, #16
 8013c12:	4770      	bx	lr
 8013c14:	803c3800 	.word	0x803c3800

08013c18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013c18:	b480      	push	{r7}
 8013c1a:	b085      	sub	sp, #20
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8013c22:	2300      	movs	r3, #0
 8013c24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	019b      	lsls	r3, r3, #6
 8013c2a:	f043 0220 	orr.w	r2, r3, #32
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	3301      	adds	r3, #1
 8013c36:	60fb      	str	r3, [r7, #12]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	4a09      	ldr	r2, [pc, #36]	; (8013c60 <USB_FlushTxFifo+0x48>)
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	d901      	bls.n	8013c44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8013c40:	2303      	movs	r3, #3
 8013c42:	e006      	b.n	8013c52 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	691b      	ldr	r3, [r3, #16]
 8013c48:	f003 0320 	and.w	r3, r3, #32
 8013c4c:	2b20      	cmp	r3, #32
 8013c4e:	d0f0      	beq.n	8013c32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8013c50:	2300      	movs	r3, #0
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3714      	adds	r7, #20
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr
 8013c5e:	bf00      	nop
 8013c60:	00030d40 	.word	0x00030d40

08013c64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b085      	sub	sp, #20
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2210      	movs	r2, #16
 8013c74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	60fb      	str	r3, [r7, #12]
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	4a09      	ldr	r2, [pc, #36]	; (8013ca4 <USB_FlushRxFifo+0x40>)
 8013c80:	4293      	cmp	r3, r2
 8013c82:	d901      	bls.n	8013c88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8013c84:	2303      	movs	r3, #3
 8013c86:	e006      	b.n	8013c96 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	691b      	ldr	r3, [r3, #16]
 8013c8c:	f003 0310 	and.w	r3, r3, #16
 8013c90:	2b10      	cmp	r3, #16
 8013c92:	d0f0      	beq.n	8013c76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013c94:	2300      	movs	r3, #0
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3714      	adds	r7, #20
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca0:	4770      	bx	lr
 8013ca2:	bf00      	nop
 8013ca4:	00030d40 	.word	0x00030d40

08013ca8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b085      	sub	sp, #20
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	460b      	mov	r3, r1
 8013cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	78fb      	ldrb	r3, [r7, #3]
 8013cc2:	68f9      	ldr	r1, [r7, #12]
 8013cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013cc8:	4313      	orrs	r3, r2
 8013cca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013ccc:	2300      	movs	r3, #0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3714      	adds	r7, #20
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd8:	4770      	bx	lr

08013cda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013cda:	b580      	push	{r7, lr}
 8013cdc:	b084      	sub	sp, #16
 8013cde:	af00      	add	r7, sp, #0
 8013ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	68fa      	ldr	r2, [r7, #12]
 8013cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cf4:	f043 0302 	orr.w	r3, r3, #2
 8013cf8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8013cfa:	2003      	movs	r0, #3
 8013cfc:	f7f9 ff2a 	bl	800db54 <HAL_Delay>

  return HAL_OK;
 8013d00:	2300      	movs	r3, #0
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
	...

08013d0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b085      	sub	sp, #20
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013d14:	2300      	movs	r3, #0
 8013d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	60fb      	str	r3, [r7, #12]
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	4a13      	ldr	r2, [pc, #76]	; (8013d70 <USB_CoreReset+0x64>)
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d901      	bls.n	8013d2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013d26:	2303      	movs	r3, #3
 8013d28:	e01b      	b.n	8013d62 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	691b      	ldr	r3, [r3, #16]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	daf2      	bge.n	8013d18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013d32:	2300      	movs	r3, #0
 8013d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	691b      	ldr	r3, [r3, #16]
 8013d3a:	f043 0201 	orr.w	r2, r3, #1
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	3301      	adds	r3, #1
 8013d46:	60fb      	str	r3, [r7, #12]
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	4a09      	ldr	r2, [pc, #36]	; (8013d70 <USB_CoreReset+0x64>)
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	d901      	bls.n	8013d54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013d50:	2303      	movs	r3, #3
 8013d52:	e006      	b.n	8013d62 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	691b      	ldr	r3, [r3, #16]
 8013d58:	f003 0301 	and.w	r3, r3, #1
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	d0f0      	beq.n	8013d42 <USB_CoreReset+0x36>

  return HAL_OK;
 8013d60:	2300      	movs	r3, #0
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3714      	adds	r7, #20
 8013d66:	46bd      	mov	sp, r7
 8013d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6c:	4770      	bx	lr
 8013d6e:	bf00      	nop
 8013d70:	00030d40 	.word	0x00030d40

08013d74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013d74:	b480      	push	{r7}
 8013d76:	b085      	sub	sp, #20
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013d86:	2b84      	cmp	r3, #132	; 0x84
 8013d88:	d005      	beq.n	8013d96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013d8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	4413      	add	r3, r2
 8013d92:	3303      	adds	r3, #3
 8013d94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013d96:	68fb      	ldr	r3, [r7, #12]
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3714      	adds	r7, #20
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr

08013da4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013da8:	f000 fada 	bl	8014360 <vTaskStartScheduler>
  
  return osOK;
 8013dac:	2300      	movs	r3, #0
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	bd80      	pop	{r7, pc}

08013db2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013db4:	b089      	sub	sp, #36	; 0x24
 8013db6:	af04      	add	r7, sp, #16
 8013db8:	6078      	str	r0, [r7, #4]
 8013dba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	695b      	ldr	r3, [r3, #20]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d020      	beq.n	8013e06 <osThreadCreate+0x54>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	699b      	ldr	r3, [r3, #24]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d01c      	beq.n	8013e06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	685c      	ldr	r4, [r3, #4]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681d      	ldr	r5, [r3, #0]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	691e      	ldr	r6, [r3, #16]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7ff ffc8 	bl	8013d74 <makeFreeRtosPriority>
 8013de4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	695b      	ldr	r3, [r3, #20]
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013dee:	9202      	str	r2, [sp, #8]
 8013df0:	9301      	str	r3, [sp, #4]
 8013df2:	9100      	str	r1, [sp, #0]
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	4632      	mov	r2, r6
 8013df8:	4629      	mov	r1, r5
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f000 f8ed 	bl	8013fda <xTaskCreateStatic>
 8013e00:	4603      	mov	r3, r0
 8013e02:	60fb      	str	r3, [r7, #12]
 8013e04:	e01c      	b.n	8013e40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	685c      	ldr	r4, [r3, #4]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013e12:	b29e      	uxth	r6, r3
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7ff ffaa 	bl	8013d74 <makeFreeRtosPriority>
 8013e20:	4602      	mov	r2, r0
 8013e22:	f107 030c 	add.w	r3, r7, #12
 8013e26:	9301      	str	r3, [sp, #4]
 8013e28:	9200      	str	r2, [sp, #0]
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	4632      	mov	r2, r6
 8013e2e:	4629      	mov	r1, r5
 8013e30:	4620      	mov	r0, r4
 8013e32:	f000 f92c 	bl	801408e <xTaskCreate>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d001      	beq.n	8013e40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	e000      	b.n	8013e42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013e40:	68fb      	ldr	r3, [r7, #12]
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3714      	adds	r7, #20
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b084      	sub	sp, #16
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d001      	beq.n	8013e60 <osDelay+0x16>
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	e000      	b.n	8013e62 <osDelay+0x18>
 8013e60:	2301      	movs	r3, #1
 8013e62:	4618      	mov	r0, r3
 8013e64:	f000 fa48 	bl	80142f8 <vTaskDelay>
  
  return osOK;
 8013e68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3710      	adds	r7, #16
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}

08013e72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013e72:	b480      	push	{r7}
 8013e74:	b083      	sub	sp, #12
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f103 0208 	add.w	r2, r3, #8
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f103 0208 	add.w	r2, r3, #8
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f103 0208 	add.w	r2, r3, #8
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013ea6:	bf00      	nop
 8013ea8:	370c      	adds	r7, #12
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb0:	4770      	bx	lr

08013eb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013eb2:	b480      	push	{r7}
 8013eb4:	b083      	sub	sp, #12
 8013eb6:	af00      	add	r7, sp, #0
 8013eb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013ec0:	bf00      	nop
 8013ec2:	370c      	adds	r7, #12
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr

08013ecc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b085      	sub	sp, #20
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	68fa      	ldr	r2, [r7, #12]
 8013ee0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	689a      	ldr	r2, [r3, #8]
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	689b      	ldr	r3, [r3, #8]
 8013eee:	683a      	ldr	r2, [r7, #0]
 8013ef0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	683a      	ldr	r2, [r7, #0]
 8013ef6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	1c5a      	adds	r2, r3, #1
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	601a      	str	r2, [r3, #0]
}
 8013f08:	bf00      	nop
 8013f0a:	3714      	adds	r7, #20
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013f14:	b480      	push	{r7}
 8013f16:	b085      	sub	sp, #20
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f2a:	d103      	bne.n	8013f34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	691b      	ldr	r3, [r3, #16]
 8013f30:	60fb      	str	r3, [r7, #12]
 8013f32:	e00c      	b.n	8013f4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	3308      	adds	r3, #8
 8013f38:	60fb      	str	r3, [r7, #12]
 8013f3a:	e002      	b.n	8013f42 <vListInsert+0x2e>
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	60fb      	str	r3, [r7, #12]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	68ba      	ldr	r2, [r7, #8]
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d2f6      	bcs.n	8013f3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	685a      	ldr	r2, [r3, #4]
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	683a      	ldr	r2, [r7, #0]
 8013f5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	68fa      	ldr	r2, [r7, #12]
 8013f62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	683a      	ldr	r2, [r7, #0]
 8013f68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	687a      	ldr	r2, [r7, #4]
 8013f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	1c5a      	adds	r2, r3, #1
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	601a      	str	r2, [r3, #0]
}
 8013f7a:	bf00      	nop
 8013f7c:	3714      	adds	r7, #20
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	4770      	bx	lr

08013f86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013f86:	b480      	push	{r7}
 8013f88:	b085      	sub	sp, #20
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	691b      	ldr	r3, [r3, #16]
 8013f92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	687a      	ldr	r2, [r7, #4]
 8013f9a:	6892      	ldr	r2, [r2, #8]
 8013f9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	689b      	ldr	r3, [r3, #8]
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	6852      	ldr	r2, [r2, #4]
 8013fa6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d103      	bne.n	8013fba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	689a      	ldr	r2, [r3, #8]
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	1e5a      	subs	r2, r3, #1
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3714      	adds	r7, #20
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr

08013fda <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b08e      	sub	sp, #56	; 0x38
 8013fde:	af04      	add	r7, sp, #16
 8013fe0:	60f8      	str	r0, [r7, #12]
 8013fe2:	60b9      	str	r1, [r7, #8]
 8013fe4:	607a      	str	r2, [r7, #4]
 8013fe6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d109      	bne.n	8014002 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff2:	f383 8811 	msr	BASEPRI, r3
 8013ff6:	f3bf 8f6f 	isb	sy
 8013ffa:	f3bf 8f4f 	dsb	sy
 8013ffe:	623b      	str	r3, [r7, #32]
 8014000:	e7fe      	b.n	8014000 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8014002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014004:	2b00      	cmp	r3, #0
 8014006:	d109      	bne.n	801401c <xTaskCreateStatic+0x42>
 8014008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801400c:	f383 8811 	msr	BASEPRI, r3
 8014010:	f3bf 8f6f 	isb	sy
 8014014:	f3bf 8f4f 	dsb	sy
 8014018:	61fb      	str	r3, [r7, #28]
 801401a:	e7fe      	b.n	801401a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801401c:	2354      	movs	r3, #84	; 0x54
 801401e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014020:	693b      	ldr	r3, [r7, #16]
 8014022:	2b54      	cmp	r3, #84	; 0x54
 8014024:	d009      	beq.n	801403a <xTaskCreateStatic+0x60>
 8014026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402a:	f383 8811 	msr	BASEPRI, r3
 801402e:	f3bf 8f6f 	isb	sy
 8014032:	f3bf 8f4f 	dsb	sy
 8014036:	61bb      	str	r3, [r7, #24]
 8014038:	e7fe      	b.n	8014038 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801403a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801403e:	2b00      	cmp	r3, #0
 8014040:	d01e      	beq.n	8014080 <xTaskCreateStatic+0xa6>
 8014042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014044:	2b00      	cmp	r3, #0
 8014046:	d01b      	beq.n	8014080 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014050:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014054:	2202      	movs	r2, #2
 8014056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801405a:	2300      	movs	r3, #0
 801405c:	9303      	str	r3, [sp, #12]
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014060:	9302      	str	r3, [sp, #8]
 8014062:	f107 0314 	add.w	r3, r7, #20
 8014066:	9301      	str	r3, [sp, #4]
 8014068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	68b9      	ldr	r1, [r7, #8]
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f000 f850 	bl	8014118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801407a:	f000 f8d3 	bl	8014224 <prvAddNewTaskToReadyList>
 801407e:	e001      	b.n	8014084 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8014080:	2300      	movs	r3, #0
 8014082:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014084:	697b      	ldr	r3, [r7, #20]
	}
 8014086:	4618      	mov	r0, r3
 8014088:	3728      	adds	r7, #40	; 0x28
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}

0801408e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801408e:	b580      	push	{r7, lr}
 8014090:	b08c      	sub	sp, #48	; 0x30
 8014092:	af04      	add	r7, sp, #16
 8014094:	60f8      	str	r0, [r7, #12]
 8014096:	60b9      	str	r1, [r7, #8]
 8014098:	603b      	str	r3, [r7, #0]
 801409a:	4613      	mov	r3, r2
 801409c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801409e:	88fb      	ldrh	r3, [r7, #6]
 80140a0:	009b      	lsls	r3, r3, #2
 80140a2:	4618      	mov	r0, r3
 80140a4:	f000 feae 	bl	8014e04 <pvPortMalloc>
 80140a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d00e      	beq.n	80140ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80140b0:	2054      	movs	r0, #84	; 0x54
 80140b2:	f000 fea7 	bl	8014e04 <pvPortMalloc>
 80140b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d003      	beq.n	80140c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	697a      	ldr	r2, [r7, #20]
 80140c2:	631a      	str	r2, [r3, #48]	; 0x30
 80140c4:	e005      	b.n	80140d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80140c6:	6978      	ldr	r0, [r7, #20]
 80140c8:	f000 ff5e 	bl	8014f88 <vPortFree>
 80140cc:	e001      	b.n	80140d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80140ce:	2300      	movs	r3, #0
 80140d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d017      	beq.n	8014108 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80140d8:	69fb      	ldr	r3, [r7, #28]
 80140da:	2200      	movs	r2, #0
 80140dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80140e0:	88fa      	ldrh	r2, [r7, #6]
 80140e2:	2300      	movs	r3, #0
 80140e4:	9303      	str	r3, [sp, #12]
 80140e6:	69fb      	ldr	r3, [r7, #28]
 80140e8:	9302      	str	r3, [sp, #8]
 80140ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ec:	9301      	str	r3, [sp, #4]
 80140ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	68b9      	ldr	r1, [r7, #8]
 80140f6:	68f8      	ldr	r0, [r7, #12]
 80140f8:	f000 f80e 	bl	8014118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80140fc:	69f8      	ldr	r0, [r7, #28]
 80140fe:	f000 f891 	bl	8014224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014102:	2301      	movs	r3, #1
 8014104:	61bb      	str	r3, [r7, #24]
 8014106:	e002      	b.n	801410e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801410c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801410e:	69bb      	ldr	r3, [r7, #24]
	}
 8014110:	4618      	mov	r0, r3
 8014112:	3720      	adds	r7, #32
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b088      	sub	sp, #32
 801411c:	af00      	add	r7, sp, #0
 801411e:	60f8      	str	r0, [r7, #12]
 8014120:	60b9      	str	r1, [r7, #8]
 8014122:	607a      	str	r2, [r7, #4]
 8014124:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014130:	3b01      	subs	r3, #1
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	4413      	add	r3, r2
 8014136:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	f023 0307 	bic.w	r3, r3, #7
 801413e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014140:	69bb      	ldr	r3, [r7, #24]
 8014142:	f003 0307 	and.w	r3, r3, #7
 8014146:	2b00      	cmp	r3, #0
 8014148:	d009      	beq.n	801415e <prvInitialiseNewTask+0x46>
 801414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801414e:	f383 8811 	msr	BASEPRI, r3
 8014152:	f3bf 8f6f 	isb	sy
 8014156:	f3bf 8f4f 	dsb	sy
 801415a:	617b      	str	r3, [r7, #20]
 801415c:	e7fe      	b.n	801415c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d01f      	beq.n	80141a4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014164:	2300      	movs	r3, #0
 8014166:	61fb      	str	r3, [r7, #28]
 8014168:	e012      	b.n	8014190 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801416a:	68ba      	ldr	r2, [r7, #8]
 801416c:	69fb      	ldr	r3, [r7, #28]
 801416e:	4413      	add	r3, r2
 8014170:	7819      	ldrb	r1, [r3, #0]
 8014172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014174:	69fb      	ldr	r3, [r7, #28]
 8014176:	4413      	add	r3, r2
 8014178:	3334      	adds	r3, #52	; 0x34
 801417a:	460a      	mov	r2, r1
 801417c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801417e:	68ba      	ldr	r2, [r7, #8]
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	4413      	add	r3, r2
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d006      	beq.n	8014198 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	3301      	adds	r3, #1
 801418e:	61fb      	str	r3, [r7, #28]
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	2b0f      	cmp	r3, #15
 8014194:	d9e9      	bls.n	801416a <prvInitialiseNewTask+0x52>
 8014196:	e000      	b.n	801419a <prvInitialiseNewTask+0x82>
			{
				break;
 8014198:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801419c:	2200      	movs	r2, #0
 801419e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80141a2:	e003      	b.n	80141ac <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80141a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a6:	2200      	movs	r2, #0
 80141a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80141ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ae:	2b06      	cmp	r3, #6
 80141b0:	d901      	bls.n	80141b6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80141b2:	2306      	movs	r3, #6
 80141b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80141b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80141bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80141c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c4:	2200      	movs	r2, #0
 80141c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80141c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ca:	3304      	adds	r3, #4
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7ff fe70 	bl	8013eb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80141d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d4:	3318      	adds	r3, #24
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7ff fe6b 	bl	8013eb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80141dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e4:	f1c3 0207 	rsb	r2, r3, #7
 80141e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80141ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80141f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f4:	2200      	movs	r2, #0
 80141f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80141f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fa:	2200      	movs	r2, #0
 80141fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	68f9      	ldr	r1, [r7, #12]
 8014204:	69b8      	ldr	r0, [r7, #24]
 8014206:	f000 fbfd 	bl	8014a04 <pxPortInitialiseStack>
 801420a:	4602      	mov	r2, r0
 801420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801420e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014212:	2b00      	cmp	r3, #0
 8014214:	d002      	beq.n	801421c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801421a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801421c:	bf00      	nop
 801421e:	3720      	adds	r7, #32
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801422c:	f000 fd0e 	bl	8014c4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014230:	4b2a      	ldr	r3, [pc, #168]	; (80142dc <prvAddNewTaskToReadyList+0xb8>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	3301      	adds	r3, #1
 8014236:	4a29      	ldr	r2, [pc, #164]	; (80142dc <prvAddNewTaskToReadyList+0xb8>)
 8014238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801423a:	4b29      	ldr	r3, [pc, #164]	; (80142e0 <prvAddNewTaskToReadyList+0xbc>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d109      	bne.n	8014256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014242:	4a27      	ldr	r2, [pc, #156]	; (80142e0 <prvAddNewTaskToReadyList+0xbc>)
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014248:	4b24      	ldr	r3, [pc, #144]	; (80142dc <prvAddNewTaskToReadyList+0xb8>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b01      	cmp	r3, #1
 801424e:	d110      	bne.n	8014272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014250:	f000 fab8 	bl	80147c4 <prvInitialiseTaskLists>
 8014254:	e00d      	b.n	8014272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014256:	4b23      	ldr	r3, [pc, #140]	; (80142e4 <prvAddNewTaskToReadyList+0xc0>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d109      	bne.n	8014272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801425e:	4b20      	ldr	r3, [pc, #128]	; (80142e0 <prvAddNewTaskToReadyList+0xbc>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014268:	429a      	cmp	r2, r3
 801426a:	d802      	bhi.n	8014272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801426c:	4a1c      	ldr	r2, [pc, #112]	; (80142e0 <prvAddNewTaskToReadyList+0xbc>)
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014272:	4b1d      	ldr	r3, [pc, #116]	; (80142e8 <prvAddNewTaskToReadyList+0xc4>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	3301      	adds	r3, #1
 8014278:	4a1b      	ldr	r2, [pc, #108]	; (80142e8 <prvAddNewTaskToReadyList+0xc4>)
 801427a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014280:	2201      	movs	r2, #1
 8014282:	409a      	lsls	r2, r3
 8014284:	4b19      	ldr	r3, [pc, #100]	; (80142ec <prvAddNewTaskToReadyList+0xc8>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	4313      	orrs	r3, r2
 801428a:	4a18      	ldr	r2, [pc, #96]	; (80142ec <prvAddNewTaskToReadyList+0xc8>)
 801428c:	6013      	str	r3, [r2, #0]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014292:	4613      	mov	r3, r2
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	4413      	add	r3, r2
 8014298:	009b      	lsls	r3, r3, #2
 801429a:	4a15      	ldr	r2, [pc, #84]	; (80142f0 <prvAddNewTaskToReadyList+0xcc>)
 801429c:	441a      	add	r2, r3
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	3304      	adds	r3, #4
 80142a2:	4619      	mov	r1, r3
 80142a4:	4610      	mov	r0, r2
 80142a6:	f7ff fe11 	bl	8013ecc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80142aa:	f000 fcfd 	bl	8014ca8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80142ae:	4b0d      	ldr	r3, [pc, #52]	; (80142e4 <prvAddNewTaskToReadyList+0xc0>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d00e      	beq.n	80142d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80142b6:	4b0a      	ldr	r3, [pc, #40]	; (80142e0 <prvAddNewTaskToReadyList+0xbc>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d207      	bcs.n	80142d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80142c4:	4b0b      	ldr	r3, [pc, #44]	; (80142f4 <prvAddNewTaskToReadyList+0xd0>)
 80142c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142ca:	601a      	str	r2, [r3, #0]
 80142cc:	f3bf 8f4f 	dsb	sy
 80142d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142d4:	bf00      	nop
 80142d6:	3708      	adds	r7, #8
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	20000c08 	.word	0x20000c08
 80142e0:	20000b08 	.word	0x20000b08
 80142e4:	20000c14 	.word	0x20000c14
 80142e8:	20000c24 	.word	0x20000c24
 80142ec:	20000c10 	.word	0x20000c10
 80142f0:	20000b0c 	.word	0x20000b0c
 80142f4:	e000ed04 	.word	0xe000ed04

080142f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b084      	sub	sp, #16
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014300:	2300      	movs	r3, #0
 8014302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d016      	beq.n	8014338 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801430a:	4b13      	ldr	r3, [pc, #76]	; (8014358 <vTaskDelay+0x60>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d009      	beq.n	8014326 <vTaskDelay+0x2e>
 8014312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014316:	f383 8811 	msr	BASEPRI, r3
 801431a:	f3bf 8f6f 	isb	sy
 801431e:	f3bf 8f4f 	dsb	sy
 8014322:	60bb      	str	r3, [r7, #8]
 8014324:	e7fe      	b.n	8014324 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8014326:	f000 f879 	bl	801441c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801432a:	2100      	movs	r1, #0
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f000 fb03 	bl	8014938 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014332:	f000 f881 	bl	8014438 <xTaskResumeAll>
 8014336:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d107      	bne.n	801434e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801433e:	4b07      	ldr	r3, [pc, #28]	; (801435c <vTaskDelay+0x64>)
 8014340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014344:	601a      	str	r2, [r3, #0]
 8014346:	f3bf 8f4f 	dsb	sy
 801434a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801434e:	bf00      	nop
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
 8014356:	bf00      	nop
 8014358:	20000c30 	.word	0x20000c30
 801435c:	e000ed04 	.word	0xe000ed04

08014360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b08a      	sub	sp, #40	; 0x28
 8014364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014366:	2300      	movs	r3, #0
 8014368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801436a:	2300      	movs	r3, #0
 801436c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801436e:	463a      	mov	r2, r7
 8014370:	1d39      	adds	r1, r7, #4
 8014372:	f107 0308 	add.w	r3, r7, #8
 8014376:	4618      	mov	r0, r3
 8014378:	f7ef fdb2 	bl	8003ee0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801437c:	6839      	ldr	r1, [r7, #0]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	68ba      	ldr	r2, [r7, #8]
 8014382:	9202      	str	r2, [sp, #8]
 8014384:	9301      	str	r3, [sp, #4]
 8014386:	2300      	movs	r3, #0
 8014388:	9300      	str	r3, [sp, #0]
 801438a:	2300      	movs	r3, #0
 801438c:	460a      	mov	r2, r1
 801438e:	491d      	ldr	r1, [pc, #116]	; (8014404 <vTaskStartScheduler+0xa4>)
 8014390:	481d      	ldr	r0, [pc, #116]	; (8014408 <vTaskStartScheduler+0xa8>)
 8014392:	f7ff fe22 	bl	8013fda <xTaskCreateStatic>
 8014396:	4602      	mov	r2, r0
 8014398:	4b1c      	ldr	r3, [pc, #112]	; (801440c <vTaskStartScheduler+0xac>)
 801439a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801439c:	4b1b      	ldr	r3, [pc, #108]	; (801440c <vTaskStartScheduler+0xac>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d002      	beq.n	80143aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80143a4:	2301      	movs	r3, #1
 80143a6:	617b      	str	r3, [r7, #20]
 80143a8:	e001      	b.n	80143ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80143aa:	2300      	movs	r3, #0
 80143ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d115      	bne.n	80143e0 <vTaskStartScheduler+0x80>
 80143b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b8:	f383 8811 	msr	BASEPRI, r3
 80143bc:	f3bf 8f6f 	isb	sy
 80143c0:	f3bf 8f4f 	dsb	sy
 80143c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80143c6:	4b12      	ldr	r3, [pc, #72]	; (8014410 <vTaskStartScheduler+0xb0>)
 80143c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80143ce:	4b11      	ldr	r3, [pc, #68]	; (8014414 <vTaskStartScheduler+0xb4>)
 80143d0:	2201      	movs	r2, #1
 80143d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80143d4:	4b10      	ldr	r3, [pc, #64]	; (8014418 <vTaskStartScheduler+0xb8>)
 80143d6:	2200      	movs	r2, #0
 80143d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80143da:	f000 fb99 	bl	8014b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80143de:	e00d      	b.n	80143fc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143e6:	d109      	bne.n	80143fc <vTaskStartScheduler+0x9c>
 80143e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ec:	f383 8811 	msr	BASEPRI, r3
 80143f0:	f3bf 8f6f 	isb	sy
 80143f4:	f3bf 8f4f 	dsb	sy
 80143f8:	60fb      	str	r3, [r7, #12]
 80143fa:	e7fe      	b.n	80143fa <vTaskStartScheduler+0x9a>
}
 80143fc:	bf00      	nop
 80143fe:	3718      	adds	r7, #24
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	0801c26c 	.word	0x0801c26c
 8014408:	08014795 	.word	0x08014795
 801440c:	20000c2c 	.word	0x20000c2c
 8014410:	20000c28 	.word	0x20000c28
 8014414:	20000c14 	.word	0x20000c14
 8014418:	20000c0c 	.word	0x20000c0c

0801441c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801441c:	b480      	push	{r7}
 801441e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014420:	4b04      	ldr	r3, [pc, #16]	; (8014434 <vTaskSuspendAll+0x18>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	3301      	adds	r3, #1
 8014426:	4a03      	ldr	r2, [pc, #12]	; (8014434 <vTaskSuspendAll+0x18>)
 8014428:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801442a:	bf00      	nop
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr
 8014434:	20000c30 	.word	0x20000c30

08014438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b084      	sub	sp, #16
 801443c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801443e:	2300      	movs	r3, #0
 8014440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014442:	2300      	movs	r3, #0
 8014444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014446:	4b41      	ldr	r3, [pc, #260]	; (801454c <xTaskResumeAll+0x114>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d109      	bne.n	8014462 <xTaskResumeAll+0x2a>
 801444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014452:	f383 8811 	msr	BASEPRI, r3
 8014456:	f3bf 8f6f 	isb	sy
 801445a:	f3bf 8f4f 	dsb	sy
 801445e:	603b      	str	r3, [r7, #0]
 8014460:	e7fe      	b.n	8014460 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014462:	f000 fbf3 	bl	8014c4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014466:	4b39      	ldr	r3, [pc, #228]	; (801454c <xTaskResumeAll+0x114>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	3b01      	subs	r3, #1
 801446c:	4a37      	ldr	r2, [pc, #220]	; (801454c <xTaskResumeAll+0x114>)
 801446e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014470:	4b36      	ldr	r3, [pc, #216]	; (801454c <xTaskResumeAll+0x114>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d161      	bne.n	801453c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014478:	4b35      	ldr	r3, [pc, #212]	; (8014550 <xTaskResumeAll+0x118>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d05d      	beq.n	801453c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014480:	e02e      	b.n	80144e0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014482:	4b34      	ldr	r3, [pc, #208]	; (8014554 <xTaskResumeAll+0x11c>)
 8014484:	68db      	ldr	r3, [r3, #12]
 8014486:	68db      	ldr	r3, [r3, #12]
 8014488:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	3318      	adds	r3, #24
 801448e:	4618      	mov	r0, r3
 8014490:	f7ff fd79 	bl	8013f86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	3304      	adds	r3, #4
 8014498:	4618      	mov	r0, r3
 801449a:	f7ff fd74 	bl	8013f86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144a2:	2201      	movs	r2, #1
 80144a4:	409a      	lsls	r2, r3
 80144a6:	4b2c      	ldr	r3, [pc, #176]	; (8014558 <xTaskResumeAll+0x120>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	4313      	orrs	r3, r2
 80144ac:	4a2a      	ldr	r2, [pc, #168]	; (8014558 <xTaskResumeAll+0x120>)
 80144ae:	6013      	str	r3, [r2, #0]
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144b4:	4613      	mov	r3, r2
 80144b6:	009b      	lsls	r3, r3, #2
 80144b8:	4413      	add	r3, r2
 80144ba:	009b      	lsls	r3, r3, #2
 80144bc:	4a27      	ldr	r2, [pc, #156]	; (801455c <xTaskResumeAll+0x124>)
 80144be:	441a      	add	r2, r3
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	3304      	adds	r3, #4
 80144c4:	4619      	mov	r1, r3
 80144c6:	4610      	mov	r0, r2
 80144c8:	f7ff fd00 	bl	8013ecc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144d0:	4b23      	ldr	r3, [pc, #140]	; (8014560 <xTaskResumeAll+0x128>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144d6:	429a      	cmp	r2, r3
 80144d8:	d302      	bcc.n	80144e0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80144da:	4b22      	ldr	r3, [pc, #136]	; (8014564 <xTaskResumeAll+0x12c>)
 80144dc:	2201      	movs	r2, #1
 80144de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80144e0:	4b1c      	ldr	r3, [pc, #112]	; (8014554 <xTaskResumeAll+0x11c>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d1cc      	bne.n	8014482 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d001      	beq.n	80144f2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80144ee:	f000 fa03 	bl	80148f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80144f2:	4b1d      	ldr	r3, [pc, #116]	; (8014568 <xTaskResumeAll+0x130>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d010      	beq.n	8014520 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80144fe:	f000 f837 	bl	8014570 <xTaskIncrementTick>
 8014502:	4603      	mov	r3, r0
 8014504:	2b00      	cmp	r3, #0
 8014506:	d002      	beq.n	801450e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8014508:	4b16      	ldr	r3, [pc, #88]	; (8014564 <xTaskResumeAll+0x12c>)
 801450a:	2201      	movs	r2, #1
 801450c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	3b01      	subs	r3, #1
 8014512:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d1f1      	bne.n	80144fe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 801451a:	4b13      	ldr	r3, [pc, #76]	; (8014568 <xTaskResumeAll+0x130>)
 801451c:	2200      	movs	r2, #0
 801451e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014520:	4b10      	ldr	r3, [pc, #64]	; (8014564 <xTaskResumeAll+0x12c>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d009      	beq.n	801453c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014528:	2301      	movs	r3, #1
 801452a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801452c:	4b0f      	ldr	r3, [pc, #60]	; (801456c <xTaskResumeAll+0x134>)
 801452e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014532:	601a      	str	r2, [r3, #0]
 8014534:	f3bf 8f4f 	dsb	sy
 8014538:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801453c:	f000 fbb4 	bl	8014ca8 <vPortExitCritical>

	return xAlreadyYielded;
 8014540:	68bb      	ldr	r3, [r7, #8]
}
 8014542:	4618      	mov	r0, r3
 8014544:	3710      	adds	r7, #16
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	20000c30 	.word	0x20000c30
 8014550:	20000c08 	.word	0x20000c08
 8014554:	20000bc8 	.word	0x20000bc8
 8014558:	20000c10 	.word	0x20000c10
 801455c:	20000b0c 	.word	0x20000b0c
 8014560:	20000b08 	.word	0x20000b08
 8014564:	20000c1c 	.word	0x20000c1c
 8014568:	20000c18 	.word	0x20000c18
 801456c:	e000ed04 	.word	0xe000ed04

08014570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014576:	2300      	movs	r3, #0
 8014578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801457a:	4b4e      	ldr	r3, [pc, #312]	; (80146b4 <xTaskIncrementTick+0x144>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	2b00      	cmp	r3, #0
 8014580:	f040 8087 	bne.w	8014692 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014584:	4b4c      	ldr	r3, [pc, #304]	; (80146b8 <xTaskIncrementTick+0x148>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	3301      	adds	r3, #1
 801458a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801458c:	4a4a      	ldr	r2, [pc, #296]	; (80146b8 <xTaskIncrementTick+0x148>)
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d11f      	bne.n	80145d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8014598:	4b48      	ldr	r3, [pc, #288]	; (80146bc <xTaskIncrementTick+0x14c>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d009      	beq.n	80145b6 <xTaskIncrementTick+0x46>
 80145a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145a6:	f383 8811 	msr	BASEPRI, r3
 80145aa:	f3bf 8f6f 	isb	sy
 80145ae:	f3bf 8f4f 	dsb	sy
 80145b2:	603b      	str	r3, [r7, #0]
 80145b4:	e7fe      	b.n	80145b4 <xTaskIncrementTick+0x44>
 80145b6:	4b41      	ldr	r3, [pc, #260]	; (80146bc <xTaskIncrementTick+0x14c>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	60fb      	str	r3, [r7, #12]
 80145bc:	4b40      	ldr	r3, [pc, #256]	; (80146c0 <xTaskIncrementTick+0x150>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4a3e      	ldr	r2, [pc, #248]	; (80146bc <xTaskIncrementTick+0x14c>)
 80145c2:	6013      	str	r3, [r2, #0]
 80145c4:	4a3e      	ldr	r2, [pc, #248]	; (80146c0 <xTaskIncrementTick+0x150>)
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	6013      	str	r3, [r2, #0]
 80145ca:	4b3e      	ldr	r3, [pc, #248]	; (80146c4 <xTaskIncrementTick+0x154>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	3301      	adds	r3, #1
 80145d0:	4a3c      	ldr	r2, [pc, #240]	; (80146c4 <xTaskIncrementTick+0x154>)
 80145d2:	6013      	str	r3, [r2, #0]
 80145d4:	f000 f990 	bl	80148f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80145d8:	4b3b      	ldr	r3, [pc, #236]	; (80146c8 <xTaskIncrementTick+0x158>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	693a      	ldr	r2, [r7, #16]
 80145de:	429a      	cmp	r2, r3
 80145e0:	d348      	bcc.n	8014674 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145e2:	4b36      	ldr	r3, [pc, #216]	; (80146bc <xTaskIncrementTick+0x14c>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d104      	bne.n	80145f6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145ec:	4b36      	ldr	r3, [pc, #216]	; (80146c8 <xTaskIncrementTick+0x158>)
 80145ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145f2:	601a      	str	r2, [r3, #0]
					break;
 80145f4:	e03e      	b.n	8014674 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145f6:	4b31      	ldr	r3, [pc, #196]	; (80146bc <xTaskIncrementTick+0x14c>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	68db      	ldr	r3, [r3, #12]
 80145fc:	68db      	ldr	r3, [r3, #12]
 80145fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014606:	693a      	ldr	r2, [r7, #16]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	429a      	cmp	r2, r3
 801460c:	d203      	bcs.n	8014616 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801460e:	4a2e      	ldr	r2, [pc, #184]	; (80146c8 <xTaskIncrementTick+0x158>)
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014614:	e02e      	b.n	8014674 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	3304      	adds	r3, #4
 801461a:	4618      	mov	r0, r3
 801461c:	f7ff fcb3 	bl	8013f86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014624:	2b00      	cmp	r3, #0
 8014626:	d004      	beq.n	8014632 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	3318      	adds	r3, #24
 801462c:	4618      	mov	r0, r3
 801462e:	f7ff fcaa 	bl	8013f86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014636:	2201      	movs	r2, #1
 8014638:	409a      	lsls	r2, r3
 801463a:	4b24      	ldr	r3, [pc, #144]	; (80146cc <xTaskIncrementTick+0x15c>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	4313      	orrs	r3, r2
 8014640:	4a22      	ldr	r2, [pc, #136]	; (80146cc <xTaskIncrementTick+0x15c>)
 8014642:	6013      	str	r3, [r2, #0]
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014648:	4613      	mov	r3, r2
 801464a:	009b      	lsls	r3, r3, #2
 801464c:	4413      	add	r3, r2
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	4a1f      	ldr	r2, [pc, #124]	; (80146d0 <xTaskIncrementTick+0x160>)
 8014652:	441a      	add	r2, r3
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	3304      	adds	r3, #4
 8014658:	4619      	mov	r1, r3
 801465a:	4610      	mov	r0, r2
 801465c:	f7ff fc36 	bl	8013ecc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014664:	4b1b      	ldr	r3, [pc, #108]	; (80146d4 <xTaskIncrementTick+0x164>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801466a:	429a      	cmp	r2, r3
 801466c:	d3b9      	bcc.n	80145e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801466e:	2301      	movs	r3, #1
 8014670:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014672:	e7b6      	b.n	80145e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014674:	4b17      	ldr	r3, [pc, #92]	; (80146d4 <xTaskIncrementTick+0x164>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801467a:	4915      	ldr	r1, [pc, #84]	; (80146d0 <xTaskIncrementTick+0x160>)
 801467c:	4613      	mov	r3, r2
 801467e:	009b      	lsls	r3, r3, #2
 8014680:	4413      	add	r3, r2
 8014682:	009b      	lsls	r3, r3, #2
 8014684:	440b      	add	r3, r1
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	2b01      	cmp	r3, #1
 801468a:	d907      	bls.n	801469c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801468c:	2301      	movs	r3, #1
 801468e:	617b      	str	r3, [r7, #20]
 8014690:	e004      	b.n	801469c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014692:	4b11      	ldr	r3, [pc, #68]	; (80146d8 <xTaskIncrementTick+0x168>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	3301      	adds	r3, #1
 8014698:	4a0f      	ldr	r2, [pc, #60]	; (80146d8 <xTaskIncrementTick+0x168>)
 801469a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801469c:	4b0f      	ldr	r3, [pc, #60]	; (80146dc <xTaskIncrementTick+0x16c>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d001      	beq.n	80146a8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80146a4:	2301      	movs	r3, #1
 80146a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80146a8:	697b      	ldr	r3, [r7, #20]
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3718      	adds	r7, #24
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	20000c30 	.word	0x20000c30
 80146b8:	20000c0c 	.word	0x20000c0c
 80146bc:	20000bc0 	.word	0x20000bc0
 80146c0:	20000bc4 	.word	0x20000bc4
 80146c4:	20000c20 	.word	0x20000c20
 80146c8:	20000c28 	.word	0x20000c28
 80146cc:	20000c10 	.word	0x20000c10
 80146d0:	20000b0c 	.word	0x20000b0c
 80146d4:	20000b08 	.word	0x20000b08
 80146d8:	20000c18 	.word	0x20000c18
 80146dc:	20000c1c 	.word	0x20000c1c

080146e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80146e0:	b480      	push	{r7}
 80146e2:	b087      	sub	sp, #28
 80146e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80146e6:	4b26      	ldr	r3, [pc, #152]	; (8014780 <vTaskSwitchContext+0xa0>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d003      	beq.n	80146f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80146ee:	4b25      	ldr	r3, [pc, #148]	; (8014784 <vTaskSwitchContext+0xa4>)
 80146f0:	2201      	movs	r2, #1
 80146f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80146f4:	e03e      	b.n	8014774 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80146f6:	4b23      	ldr	r3, [pc, #140]	; (8014784 <vTaskSwitchContext+0xa4>)
 80146f8:	2200      	movs	r2, #0
 80146fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146fc:	4b22      	ldr	r3, [pc, #136]	; (8014788 <vTaskSwitchContext+0xa8>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	fab3 f383 	clz	r3, r3
 8014708:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801470a:	7afb      	ldrb	r3, [r7, #11]
 801470c:	f1c3 031f 	rsb	r3, r3, #31
 8014710:	617b      	str	r3, [r7, #20]
 8014712:	491e      	ldr	r1, [pc, #120]	; (801478c <vTaskSwitchContext+0xac>)
 8014714:	697a      	ldr	r2, [r7, #20]
 8014716:	4613      	mov	r3, r2
 8014718:	009b      	lsls	r3, r3, #2
 801471a:	4413      	add	r3, r2
 801471c:	009b      	lsls	r3, r3, #2
 801471e:	440b      	add	r3, r1
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d109      	bne.n	801473a <vTaskSwitchContext+0x5a>
	__asm volatile
 8014726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801472a:	f383 8811 	msr	BASEPRI, r3
 801472e:	f3bf 8f6f 	isb	sy
 8014732:	f3bf 8f4f 	dsb	sy
 8014736:	607b      	str	r3, [r7, #4]
 8014738:	e7fe      	b.n	8014738 <vTaskSwitchContext+0x58>
 801473a:	697a      	ldr	r2, [r7, #20]
 801473c:	4613      	mov	r3, r2
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	4413      	add	r3, r2
 8014742:	009b      	lsls	r3, r3, #2
 8014744:	4a11      	ldr	r2, [pc, #68]	; (801478c <vTaskSwitchContext+0xac>)
 8014746:	4413      	add	r3, r2
 8014748:	613b      	str	r3, [r7, #16]
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	685b      	ldr	r3, [r3, #4]
 801474e:	685a      	ldr	r2, [r3, #4]
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	605a      	str	r2, [r3, #4]
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	685a      	ldr	r2, [r3, #4]
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	3308      	adds	r3, #8
 801475c:	429a      	cmp	r2, r3
 801475e:	d104      	bne.n	801476a <vTaskSwitchContext+0x8a>
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	685a      	ldr	r2, [r3, #4]
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	605a      	str	r2, [r3, #4]
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	4a07      	ldr	r2, [pc, #28]	; (8014790 <vTaskSwitchContext+0xb0>)
 8014772:	6013      	str	r3, [r2, #0]
}
 8014774:	bf00      	nop
 8014776:	371c      	adds	r7, #28
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	20000c30 	.word	0x20000c30
 8014784:	20000c1c 	.word	0x20000c1c
 8014788:	20000c10 	.word	0x20000c10
 801478c:	20000b0c 	.word	0x20000b0c
 8014790:	20000b08 	.word	0x20000b08

08014794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801479c:	f000 f852 	bl	8014844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80147a0:	4b06      	ldr	r3, [pc, #24]	; (80147bc <prvIdleTask+0x28>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d9f9      	bls.n	801479c <prvIdleTask+0x8>
			{
				taskYIELD();
 80147a8:	4b05      	ldr	r3, [pc, #20]	; (80147c0 <prvIdleTask+0x2c>)
 80147aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147ae:	601a      	str	r2, [r3, #0]
 80147b0:	f3bf 8f4f 	dsb	sy
 80147b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80147b8:	e7f0      	b.n	801479c <prvIdleTask+0x8>
 80147ba:	bf00      	nop
 80147bc:	20000b0c 	.word	0x20000b0c
 80147c0:	e000ed04 	.word	0xe000ed04

080147c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80147ca:	2300      	movs	r3, #0
 80147cc:	607b      	str	r3, [r7, #4]
 80147ce:	e00c      	b.n	80147ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80147d0:	687a      	ldr	r2, [r7, #4]
 80147d2:	4613      	mov	r3, r2
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	4413      	add	r3, r2
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	4a12      	ldr	r2, [pc, #72]	; (8014824 <prvInitialiseTaskLists+0x60>)
 80147dc:	4413      	add	r3, r2
 80147de:	4618      	mov	r0, r3
 80147e0:	f7ff fb47 	bl	8013e72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	3301      	adds	r3, #1
 80147e8:	607b      	str	r3, [r7, #4]
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2b06      	cmp	r3, #6
 80147ee:	d9ef      	bls.n	80147d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80147f0:	480d      	ldr	r0, [pc, #52]	; (8014828 <prvInitialiseTaskLists+0x64>)
 80147f2:	f7ff fb3e 	bl	8013e72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80147f6:	480d      	ldr	r0, [pc, #52]	; (801482c <prvInitialiseTaskLists+0x68>)
 80147f8:	f7ff fb3b 	bl	8013e72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80147fc:	480c      	ldr	r0, [pc, #48]	; (8014830 <prvInitialiseTaskLists+0x6c>)
 80147fe:	f7ff fb38 	bl	8013e72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014802:	480c      	ldr	r0, [pc, #48]	; (8014834 <prvInitialiseTaskLists+0x70>)
 8014804:	f7ff fb35 	bl	8013e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014808:	480b      	ldr	r0, [pc, #44]	; (8014838 <prvInitialiseTaskLists+0x74>)
 801480a:	f7ff fb32 	bl	8013e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801480e:	4b0b      	ldr	r3, [pc, #44]	; (801483c <prvInitialiseTaskLists+0x78>)
 8014810:	4a05      	ldr	r2, [pc, #20]	; (8014828 <prvInitialiseTaskLists+0x64>)
 8014812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014814:	4b0a      	ldr	r3, [pc, #40]	; (8014840 <prvInitialiseTaskLists+0x7c>)
 8014816:	4a05      	ldr	r2, [pc, #20]	; (801482c <prvInitialiseTaskLists+0x68>)
 8014818:	601a      	str	r2, [r3, #0]
}
 801481a:	bf00      	nop
 801481c:	3708      	adds	r7, #8
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	20000b0c 	.word	0x20000b0c
 8014828:	20000b98 	.word	0x20000b98
 801482c:	20000bac 	.word	0x20000bac
 8014830:	20000bc8 	.word	0x20000bc8
 8014834:	20000bdc 	.word	0x20000bdc
 8014838:	20000bf4 	.word	0x20000bf4
 801483c:	20000bc0 	.word	0x20000bc0
 8014840:	20000bc4 	.word	0x20000bc4

08014844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801484a:	e019      	b.n	8014880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801484c:	f000 f9fe 	bl	8014c4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014850:	4b0f      	ldr	r3, [pc, #60]	; (8014890 <prvCheckTasksWaitingTermination+0x4c>)
 8014852:	68db      	ldr	r3, [r3, #12]
 8014854:	68db      	ldr	r3, [r3, #12]
 8014856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	3304      	adds	r3, #4
 801485c:	4618      	mov	r0, r3
 801485e:	f7ff fb92 	bl	8013f86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014862:	4b0c      	ldr	r3, [pc, #48]	; (8014894 <prvCheckTasksWaitingTermination+0x50>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	3b01      	subs	r3, #1
 8014868:	4a0a      	ldr	r2, [pc, #40]	; (8014894 <prvCheckTasksWaitingTermination+0x50>)
 801486a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801486c:	4b0a      	ldr	r3, [pc, #40]	; (8014898 <prvCheckTasksWaitingTermination+0x54>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	3b01      	subs	r3, #1
 8014872:	4a09      	ldr	r2, [pc, #36]	; (8014898 <prvCheckTasksWaitingTermination+0x54>)
 8014874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014876:	f000 fa17 	bl	8014ca8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f000 f80e 	bl	801489c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014880:	4b05      	ldr	r3, [pc, #20]	; (8014898 <prvCheckTasksWaitingTermination+0x54>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1e1      	bne.n	801484c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014888:	bf00      	nop
 801488a:	3708      	adds	r7, #8
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	20000bdc 	.word	0x20000bdc
 8014894:	20000c08 	.word	0x20000c08
 8014898:	20000bf0 	.word	0x20000bf0

0801489c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801489c:	b580      	push	{r7, lr}
 801489e:	b084      	sub	sp, #16
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d108      	bne.n	80148c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148b2:	4618      	mov	r0, r3
 80148b4:	f000 fb68 	bl	8014f88 <vPortFree>
				vPortFree( pxTCB );
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f000 fb65 	bl	8014f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80148be:	e017      	b.n	80148f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80148c6:	2b01      	cmp	r3, #1
 80148c8:	d103      	bne.n	80148d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 fb5c 	bl	8014f88 <vPortFree>
	}
 80148d0:	e00e      	b.n	80148f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80148d8:	2b02      	cmp	r3, #2
 80148da:	d009      	beq.n	80148f0 <prvDeleteTCB+0x54>
 80148dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e0:	f383 8811 	msr	BASEPRI, r3
 80148e4:	f3bf 8f6f 	isb	sy
 80148e8:	f3bf 8f4f 	dsb	sy
 80148ec:	60fb      	str	r3, [r7, #12]
 80148ee:	e7fe      	b.n	80148ee <prvDeleteTCB+0x52>
	}
 80148f0:	bf00      	nop
 80148f2:	3710      	adds	r7, #16
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80148fe:	4b0c      	ldr	r3, [pc, #48]	; (8014930 <prvResetNextTaskUnblockTime+0x38>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d104      	bne.n	8014912 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014908:	4b0a      	ldr	r3, [pc, #40]	; (8014934 <prvResetNextTaskUnblockTime+0x3c>)
 801490a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801490e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014910:	e008      	b.n	8014924 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014912:	4b07      	ldr	r3, [pc, #28]	; (8014930 <prvResetNextTaskUnblockTime+0x38>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	4a04      	ldr	r2, [pc, #16]	; (8014934 <prvResetNextTaskUnblockTime+0x3c>)
 8014922:	6013      	str	r3, [r2, #0]
}
 8014924:	bf00      	nop
 8014926:	370c      	adds	r7, #12
 8014928:	46bd      	mov	sp, r7
 801492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492e:	4770      	bx	lr
 8014930:	20000bc0 	.word	0x20000bc0
 8014934:	20000c28 	.word	0x20000c28

08014938 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014942:	4b29      	ldr	r3, [pc, #164]	; (80149e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014948:	4b28      	ldr	r3, [pc, #160]	; (80149ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	3304      	adds	r3, #4
 801494e:	4618      	mov	r0, r3
 8014950:	f7ff fb19 	bl	8013f86 <uxListRemove>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10b      	bne.n	8014972 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801495a:	4b24      	ldr	r3, [pc, #144]	; (80149ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014960:	2201      	movs	r2, #1
 8014962:	fa02 f303 	lsl.w	r3, r2, r3
 8014966:	43da      	mvns	r2, r3
 8014968:	4b21      	ldr	r3, [pc, #132]	; (80149f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	4013      	ands	r3, r2
 801496e:	4a20      	ldr	r2, [pc, #128]	; (80149f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014970:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014978:	d10a      	bne.n	8014990 <prvAddCurrentTaskToDelayedList+0x58>
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d007      	beq.n	8014990 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014980:	4b1a      	ldr	r3, [pc, #104]	; (80149ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	3304      	adds	r3, #4
 8014986:	4619      	mov	r1, r3
 8014988:	481a      	ldr	r0, [pc, #104]	; (80149f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801498a:	f7ff fa9f 	bl	8013ecc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801498e:	e026      	b.n	80149de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014990:	68fa      	ldr	r2, [r7, #12]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	4413      	add	r3, r2
 8014996:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014998:	4b14      	ldr	r3, [pc, #80]	; (80149ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	68ba      	ldr	r2, [r7, #8]
 801499e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80149a0:	68ba      	ldr	r2, [r7, #8]
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d209      	bcs.n	80149bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149a8:	4b13      	ldr	r3, [pc, #76]	; (80149f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	4b0f      	ldr	r3, [pc, #60]	; (80149ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	3304      	adds	r3, #4
 80149b2:	4619      	mov	r1, r3
 80149b4:	4610      	mov	r0, r2
 80149b6:	f7ff faad 	bl	8013f14 <vListInsert>
}
 80149ba:	e010      	b.n	80149de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149bc:	4b0f      	ldr	r3, [pc, #60]	; (80149fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	4b0a      	ldr	r3, [pc, #40]	; (80149ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	3304      	adds	r3, #4
 80149c6:	4619      	mov	r1, r3
 80149c8:	4610      	mov	r0, r2
 80149ca:	f7ff faa3 	bl	8013f14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80149ce:	4b0c      	ldr	r3, [pc, #48]	; (8014a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	68ba      	ldr	r2, [r7, #8]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d202      	bcs.n	80149de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80149d8:	4a09      	ldr	r2, [pc, #36]	; (8014a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	6013      	str	r3, [r2, #0]
}
 80149de:	bf00      	nop
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	20000c0c 	.word	0x20000c0c
 80149ec:	20000b08 	.word	0x20000b08
 80149f0:	20000c10 	.word	0x20000c10
 80149f4:	20000bf4 	.word	0x20000bf4
 80149f8:	20000bc4 	.word	0x20000bc4
 80149fc:	20000bc0 	.word	0x20000bc0
 8014a00:	20000c28 	.word	0x20000c28

08014a04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a04:	b480      	push	{r7}
 8014a06:	b085      	sub	sp, #20
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	3b04      	subs	r3, #4
 8014a14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	3b04      	subs	r3, #4
 8014a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	f023 0201 	bic.w	r2, r3, #1
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	3b04      	subs	r3, #4
 8014a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014a34:	4a0c      	ldr	r2, [pc, #48]	; (8014a68 <pxPortInitialiseStack+0x64>)
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	3b14      	subs	r3, #20
 8014a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	3b04      	subs	r3, #4
 8014a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	f06f 0202 	mvn.w	r2, #2
 8014a52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	3b20      	subs	r3, #32
 8014a58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3714      	adds	r7, #20
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr
 8014a68:	08014a6d 	.word	0x08014a6d

08014a6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b085      	sub	sp, #20
 8014a70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014a72:	2300      	movs	r3, #0
 8014a74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014a76:	4b11      	ldr	r3, [pc, #68]	; (8014abc <prvTaskExitError+0x50>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a7e:	d009      	beq.n	8014a94 <prvTaskExitError+0x28>
 8014a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a84:	f383 8811 	msr	BASEPRI, r3
 8014a88:	f3bf 8f6f 	isb	sy
 8014a8c:	f3bf 8f4f 	dsb	sy
 8014a90:	60fb      	str	r3, [r7, #12]
 8014a92:	e7fe      	b.n	8014a92 <prvTaskExitError+0x26>
 8014a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a98:	f383 8811 	msr	BASEPRI, r3
 8014a9c:	f3bf 8f6f 	isb	sy
 8014aa0:	f3bf 8f4f 	dsb	sy
 8014aa4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014aa6:	bf00      	nop
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d0fc      	beq.n	8014aa8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014aae:	bf00      	nop
 8014ab0:	3714      	adds	r7, #20
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab8:	4770      	bx	lr
 8014aba:	bf00      	nop
 8014abc:	20000150 	.word	0x20000150

08014ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014ac0:	4b07      	ldr	r3, [pc, #28]	; (8014ae0 <pxCurrentTCBConst2>)
 8014ac2:	6819      	ldr	r1, [r3, #0]
 8014ac4:	6808      	ldr	r0, [r1, #0]
 8014ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aca:	f380 8809 	msr	PSP, r0
 8014ace:	f3bf 8f6f 	isb	sy
 8014ad2:	f04f 0000 	mov.w	r0, #0
 8014ad6:	f380 8811 	msr	BASEPRI, r0
 8014ada:	4770      	bx	lr
 8014adc:	f3af 8000 	nop.w

08014ae0 <pxCurrentTCBConst2>:
 8014ae0:	20000b08 	.word	0x20000b08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014ae4:	bf00      	nop
 8014ae6:	bf00      	nop

08014ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014ae8:	4808      	ldr	r0, [pc, #32]	; (8014b0c <prvPortStartFirstTask+0x24>)
 8014aea:	6800      	ldr	r0, [r0, #0]
 8014aec:	6800      	ldr	r0, [r0, #0]
 8014aee:	f380 8808 	msr	MSP, r0
 8014af2:	f04f 0000 	mov.w	r0, #0
 8014af6:	f380 8814 	msr	CONTROL, r0
 8014afa:	b662      	cpsie	i
 8014afc:	b661      	cpsie	f
 8014afe:	f3bf 8f4f 	dsb	sy
 8014b02:	f3bf 8f6f 	isb	sy
 8014b06:	df00      	svc	0
 8014b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014b0a:	bf00      	nop
 8014b0c:	e000ed08 	.word	0xe000ed08

08014b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014b16:	4b44      	ldr	r3, [pc, #272]	; (8014c28 <xPortStartScheduler+0x118>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	4a44      	ldr	r2, [pc, #272]	; (8014c2c <xPortStartScheduler+0x11c>)
 8014b1c:	4293      	cmp	r3, r2
 8014b1e:	d109      	bne.n	8014b34 <xPortStartScheduler+0x24>
 8014b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b24:	f383 8811 	msr	BASEPRI, r3
 8014b28:	f3bf 8f6f 	isb	sy
 8014b2c:	f3bf 8f4f 	dsb	sy
 8014b30:	613b      	str	r3, [r7, #16]
 8014b32:	e7fe      	b.n	8014b32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014b34:	4b3c      	ldr	r3, [pc, #240]	; (8014c28 <xPortStartScheduler+0x118>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	4a3d      	ldr	r2, [pc, #244]	; (8014c30 <xPortStartScheduler+0x120>)
 8014b3a:	4293      	cmp	r3, r2
 8014b3c:	d109      	bne.n	8014b52 <xPortStartScheduler+0x42>
 8014b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b42:	f383 8811 	msr	BASEPRI, r3
 8014b46:	f3bf 8f6f 	isb	sy
 8014b4a:	f3bf 8f4f 	dsb	sy
 8014b4e:	60fb      	str	r3, [r7, #12]
 8014b50:	e7fe      	b.n	8014b50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014b52:	4b38      	ldr	r3, [pc, #224]	; (8014c34 <xPortStartScheduler+0x124>)
 8014b54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	b2db      	uxtb	r3, r3
 8014b5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	22ff      	movs	r2, #255	; 0xff
 8014b62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	b2db      	uxtb	r3, r3
 8014b6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014b6c:	78fb      	ldrb	r3, [r7, #3]
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014b74:	b2da      	uxtb	r2, r3
 8014b76:	4b30      	ldr	r3, [pc, #192]	; (8014c38 <xPortStartScheduler+0x128>)
 8014b78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014b7a:	4b30      	ldr	r3, [pc, #192]	; (8014c3c <xPortStartScheduler+0x12c>)
 8014b7c:	2207      	movs	r2, #7
 8014b7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b80:	e009      	b.n	8014b96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014b82:	4b2e      	ldr	r3, [pc, #184]	; (8014c3c <xPortStartScheduler+0x12c>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	3b01      	subs	r3, #1
 8014b88:	4a2c      	ldr	r2, [pc, #176]	; (8014c3c <xPortStartScheduler+0x12c>)
 8014b8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014b8c:	78fb      	ldrb	r3, [r7, #3]
 8014b8e:	b2db      	uxtb	r3, r3
 8014b90:	005b      	lsls	r3, r3, #1
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b96:	78fb      	ldrb	r3, [r7, #3]
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b9e:	2b80      	cmp	r3, #128	; 0x80
 8014ba0:	d0ef      	beq.n	8014b82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014ba2:	4b26      	ldr	r3, [pc, #152]	; (8014c3c <xPortStartScheduler+0x12c>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	f1c3 0307 	rsb	r3, r3, #7
 8014baa:	2b04      	cmp	r3, #4
 8014bac:	d009      	beq.n	8014bc2 <xPortStartScheduler+0xb2>
 8014bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb2:	f383 8811 	msr	BASEPRI, r3
 8014bb6:	f3bf 8f6f 	isb	sy
 8014bba:	f3bf 8f4f 	dsb	sy
 8014bbe:	60bb      	str	r3, [r7, #8]
 8014bc0:	e7fe      	b.n	8014bc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014bc2:	4b1e      	ldr	r3, [pc, #120]	; (8014c3c <xPortStartScheduler+0x12c>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	021b      	lsls	r3, r3, #8
 8014bc8:	4a1c      	ldr	r2, [pc, #112]	; (8014c3c <xPortStartScheduler+0x12c>)
 8014bca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014bcc:	4b1b      	ldr	r3, [pc, #108]	; (8014c3c <xPortStartScheduler+0x12c>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014bd4:	4a19      	ldr	r2, [pc, #100]	; (8014c3c <xPortStartScheduler+0x12c>)
 8014bd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	b2da      	uxtb	r2, r3
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014be0:	4b17      	ldr	r3, [pc, #92]	; (8014c40 <xPortStartScheduler+0x130>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4a16      	ldr	r2, [pc, #88]	; (8014c40 <xPortStartScheduler+0x130>)
 8014be6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014bea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014bec:	4b14      	ldr	r3, [pc, #80]	; (8014c40 <xPortStartScheduler+0x130>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	4a13      	ldr	r2, [pc, #76]	; (8014c40 <xPortStartScheduler+0x130>)
 8014bf2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014bf6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014bf8:	f000 f8d6 	bl	8014da8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014bfc:	4b11      	ldr	r3, [pc, #68]	; (8014c44 <xPortStartScheduler+0x134>)
 8014bfe:	2200      	movs	r2, #0
 8014c00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014c02:	f000 f8f5 	bl	8014df0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c06:	4b10      	ldr	r3, [pc, #64]	; (8014c48 <xPortStartScheduler+0x138>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4a0f      	ldr	r2, [pc, #60]	; (8014c48 <xPortStartScheduler+0x138>)
 8014c0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014c10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c12:	f7ff ff69 	bl	8014ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014c16:	f7ff fd63 	bl	80146e0 <vTaskSwitchContext>
	prvTaskExitError();
 8014c1a:	f7ff ff27 	bl	8014a6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c1e:	2300      	movs	r3, #0
}
 8014c20:	4618      	mov	r0, r3
 8014c22:	3718      	adds	r7, #24
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}
 8014c28:	e000ed00 	.word	0xe000ed00
 8014c2c:	410fc271 	.word	0x410fc271
 8014c30:	410fc270 	.word	0x410fc270
 8014c34:	e000e400 	.word	0xe000e400
 8014c38:	20000c34 	.word	0x20000c34
 8014c3c:	20000c38 	.word	0x20000c38
 8014c40:	e000ed20 	.word	0xe000ed20
 8014c44:	20000150 	.word	0x20000150
 8014c48:	e000ef34 	.word	0xe000ef34

08014c4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b083      	sub	sp, #12
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c56:	f383 8811 	msr	BASEPRI, r3
 8014c5a:	f3bf 8f6f 	isb	sy
 8014c5e:	f3bf 8f4f 	dsb	sy
 8014c62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014c64:	4b0e      	ldr	r3, [pc, #56]	; (8014ca0 <vPortEnterCritical+0x54>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	3301      	adds	r3, #1
 8014c6a:	4a0d      	ldr	r2, [pc, #52]	; (8014ca0 <vPortEnterCritical+0x54>)
 8014c6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014c6e:	4b0c      	ldr	r3, [pc, #48]	; (8014ca0 <vPortEnterCritical+0x54>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	d10e      	bne.n	8014c94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014c76:	4b0b      	ldr	r3, [pc, #44]	; (8014ca4 <vPortEnterCritical+0x58>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	b2db      	uxtb	r3, r3
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d009      	beq.n	8014c94 <vPortEnterCritical+0x48>
 8014c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c84:	f383 8811 	msr	BASEPRI, r3
 8014c88:	f3bf 8f6f 	isb	sy
 8014c8c:	f3bf 8f4f 	dsb	sy
 8014c90:	603b      	str	r3, [r7, #0]
 8014c92:	e7fe      	b.n	8014c92 <vPortEnterCritical+0x46>
	}
}
 8014c94:	bf00      	nop
 8014c96:	370c      	adds	r7, #12
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	20000150 	.word	0x20000150
 8014ca4:	e000ed04 	.word	0xe000ed04

08014ca8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014cae:	4b11      	ldr	r3, [pc, #68]	; (8014cf4 <vPortExitCritical+0x4c>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d109      	bne.n	8014cca <vPortExitCritical+0x22>
 8014cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cba:	f383 8811 	msr	BASEPRI, r3
 8014cbe:	f3bf 8f6f 	isb	sy
 8014cc2:	f3bf 8f4f 	dsb	sy
 8014cc6:	607b      	str	r3, [r7, #4]
 8014cc8:	e7fe      	b.n	8014cc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014cca:	4b0a      	ldr	r3, [pc, #40]	; (8014cf4 <vPortExitCritical+0x4c>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	3b01      	subs	r3, #1
 8014cd0:	4a08      	ldr	r2, [pc, #32]	; (8014cf4 <vPortExitCritical+0x4c>)
 8014cd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014cd4:	4b07      	ldr	r3, [pc, #28]	; (8014cf4 <vPortExitCritical+0x4c>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d104      	bne.n	8014ce6 <vPortExitCritical+0x3e>
 8014cdc:	2300      	movs	r3, #0
 8014cde:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014ce6:	bf00      	nop
 8014ce8:	370c      	adds	r7, #12
 8014cea:	46bd      	mov	sp, r7
 8014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf0:	4770      	bx	lr
 8014cf2:	bf00      	nop
 8014cf4:	20000150 	.word	0x20000150
	...

08014d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d00:	f3ef 8009 	mrs	r0, PSP
 8014d04:	f3bf 8f6f 	isb	sy
 8014d08:	4b15      	ldr	r3, [pc, #84]	; (8014d60 <pxCurrentTCBConst>)
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	f01e 0f10 	tst.w	lr, #16
 8014d10:	bf08      	it	eq
 8014d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1a:	6010      	str	r0, [r2, #0]
 8014d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014d24:	f380 8811 	msr	BASEPRI, r0
 8014d28:	f3bf 8f4f 	dsb	sy
 8014d2c:	f3bf 8f6f 	isb	sy
 8014d30:	f7ff fcd6 	bl	80146e0 <vTaskSwitchContext>
 8014d34:	f04f 0000 	mov.w	r0, #0
 8014d38:	f380 8811 	msr	BASEPRI, r0
 8014d3c:	bc09      	pop	{r0, r3}
 8014d3e:	6819      	ldr	r1, [r3, #0]
 8014d40:	6808      	ldr	r0, [r1, #0]
 8014d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d46:	f01e 0f10 	tst.w	lr, #16
 8014d4a:	bf08      	it	eq
 8014d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014d50:	f380 8809 	msr	PSP, r0
 8014d54:	f3bf 8f6f 	isb	sy
 8014d58:	4770      	bx	lr
 8014d5a:	bf00      	nop
 8014d5c:	f3af 8000 	nop.w

08014d60 <pxCurrentTCBConst>:
 8014d60:	20000b08 	.word	0x20000b08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014d64:	bf00      	nop
 8014d66:	bf00      	nop

08014d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8014d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014d80:	f7ff fbf6 	bl	8014570 <xTaskIncrementTick>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d003      	beq.n	8014d92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014d8a:	4b06      	ldr	r3, [pc, #24]	; (8014da4 <SysTick_Handler+0x3c>)
 8014d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d90:	601a      	str	r2, [r3, #0]
 8014d92:	2300      	movs	r3, #0
 8014d94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014d9c:	bf00      	nop
 8014d9e:	3708      	adds	r7, #8
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	e000ed04 	.word	0xe000ed04

08014da8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014da8:	b480      	push	{r7}
 8014daa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014dac:	4b0b      	ldr	r3, [pc, #44]	; (8014ddc <vPortSetupTimerInterrupt+0x34>)
 8014dae:	2200      	movs	r2, #0
 8014db0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014db2:	4b0b      	ldr	r3, [pc, #44]	; (8014de0 <vPortSetupTimerInterrupt+0x38>)
 8014db4:	2200      	movs	r2, #0
 8014db6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014db8:	4b0a      	ldr	r3, [pc, #40]	; (8014de4 <vPortSetupTimerInterrupt+0x3c>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	4a0a      	ldr	r2, [pc, #40]	; (8014de8 <vPortSetupTimerInterrupt+0x40>)
 8014dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8014dc2:	099b      	lsrs	r3, r3, #6
 8014dc4:	4a09      	ldr	r2, [pc, #36]	; (8014dec <vPortSetupTimerInterrupt+0x44>)
 8014dc6:	3b01      	subs	r3, #1
 8014dc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014dca:	4b04      	ldr	r3, [pc, #16]	; (8014ddc <vPortSetupTimerInterrupt+0x34>)
 8014dcc:	2207      	movs	r2, #7
 8014dce:	601a      	str	r2, [r3, #0]
}
 8014dd0:	bf00      	nop
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd8:	4770      	bx	lr
 8014dda:	bf00      	nop
 8014ddc:	e000e010 	.word	0xe000e010
 8014de0:	e000e018 	.word	0xe000e018
 8014de4:	20000144 	.word	0x20000144
 8014de8:	10624dd3 	.word	0x10624dd3
 8014dec:	e000e014 	.word	0xe000e014

08014df0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014df0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014e00 <vPortEnableVFP+0x10>
 8014df4:	6801      	ldr	r1, [r0, #0]
 8014df6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014dfa:	6001      	str	r1, [r0, #0]
 8014dfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014dfe:	bf00      	nop
 8014e00:	e000ed88 	.word	0xe000ed88

08014e04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b08a      	sub	sp, #40	; 0x28
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014e10:	f7ff fb04 	bl	801441c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014e14:	4b57      	ldr	r3, [pc, #348]	; (8014f74 <pvPortMalloc+0x170>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d101      	bne.n	8014e20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014e1c:	f000 f90c 	bl	8015038 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014e20:	4b55      	ldr	r3, [pc, #340]	; (8014f78 <pvPortMalloc+0x174>)
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	4013      	ands	r3, r2
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	f040 808c 	bne.w	8014f46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d01c      	beq.n	8014e6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014e34:	2208      	movs	r2, #8
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	4413      	add	r3, r2
 8014e3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f003 0307 	and.w	r3, r3, #7
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d013      	beq.n	8014e6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f023 0307 	bic.w	r3, r3, #7
 8014e4c:	3308      	adds	r3, #8
 8014e4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f003 0307 	and.w	r3, r3, #7
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d009      	beq.n	8014e6e <pvPortMalloc+0x6a>
	__asm volatile
 8014e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e5e:	f383 8811 	msr	BASEPRI, r3
 8014e62:	f3bf 8f6f 	isb	sy
 8014e66:	f3bf 8f4f 	dsb	sy
 8014e6a:	617b      	str	r3, [r7, #20]
 8014e6c:	e7fe      	b.n	8014e6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d068      	beq.n	8014f46 <pvPortMalloc+0x142>
 8014e74:	4b41      	ldr	r3, [pc, #260]	; (8014f7c <pvPortMalloc+0x178>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d863      	bhi.n	8014f46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014e7e:	4b40      	ldr	r3, [pc, #256]	; (8014f80 <pvPortMalloc+0x17c>)
 8014e80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014e82:	4b3f      	ldr	r3, [pc, #252]	; (8014f80 <pvPortMalloc+0x17c>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e88:	e004      	b.n	8014e94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d903      	bls.n	8014ea6 <pvPortMalloc+0xa2>
 8014e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d1f1      	bne.n	8014e8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014ea6:	4b33      	ldr	r3, [pc, #204]	; (8014f74 <pvPortMalloc+0x170>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d04a      	beq.n	8014f46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014eb0:	6a3b      	ldr	r3, [r7, #32]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	2208      	movs	r2, #8
 8014eb6:	4413      	add	r3, r2
 8014eb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	6a3b      	ldr	r3, [r7, #32]
 8014ec0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec4:	685a      	ldr	r2, [r3, #4]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	1ad2      	subs	r2, r2, r3
 8014eca:	2308      	movs	r3, #8
 8014ecc:	005b      	lsls	r3, r3, #1
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d91e      	bls.n	8014f10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	4413      	add	r3, r2
 8014ed8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014eda:	69bb      	ldr	r3, [r7, #24]
 8014edc:	f003 0307 	and.w	r3, r3, #7
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d009      	beq.n	8014ef8 <pvPortMalloc+0xf4>
 8014ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee8:	f383 8811 	msr	BASEPRI, r3
 8014eec:	f3bf 8f6f 	isb	sy
 8014ef0:	f3bf 8f4f 	dsb	sy
 8014ef4:	613b      	str	r3, [r7, #16]
 8014ef6:	e7fe      	b.n	8014ef6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efa:	685a      	ldr	r2, [r3, #4]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	1ad2      	subs	r2, r2, r3
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014f0a:	69b8      	ldr	r0, [r7, #24]
 8014f0c:	f000 f8f6 	bl	80150fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014f10:	4b1a      	ldr	r3, [pc, #104]	; (8014f7c <pvPortMalloc+0x178>)
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	1ad3      	subs	r3, r2, r3
 8014f1a:	4a18      	ldr	r2, [pc, #96]	; (8014f7c <pvPortMalloc+0x178>)
 8014f1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014f1e:	4b17      	ldr	r3, [pc, #92]	; (8014f7c <pvPortMalloc+0x178>)
 8014f20:	681a      	ldr	r2, [r3, #0]
 8014f22:	4b18      	ldr	r3, [pc, #96]	; (8014f84 <pvPortMalloc+0x180>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d203      	bcs.n	8014f32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014f2a:	4b14      	ldr	r3, [pc, #80]	; (8014f7c <pvPortMalloc+0x178>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	4a15      	ldr	r2, [pc, #84]	; (8014f84 <pvPortMalloc+0x180>)
 8014f30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f34:	685a      	ldr	r2, [r3, #4]
 8014f36:	4b10      	ldr	r3, [pc, #64]	; (8014f78 <pvPortMalloc+0x174>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	431a      	orrs	r2, r3
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f42:	2200      	movs	r2, #0
 8014f44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014f46:	f7ff fa77 	bl	8014438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f4a:	69fb      	ldr	r3, [r7, #28]
 8014f4c:	f003 0307 	and.w	r3, r3, #7
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d009      	beq.n	8014f68 <pvPortMalloc+0x164>
 8014f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f58:	f383 8811 	msr	BASEPRI, r3
 8014f5c:	f3bf 8f6f 	isb	sy
 8014f60:	f3bf 8f4f 	dsb	sy
 8014f64:	60fb      	str	r3, [r7, #12]
 8014f66:	e7fe      	b.n	8014f66 <pvPortMalloc+0x162>
	return pvReturn;
 8014f68:	69fb      	ldr	r3, [r7, #28]
}
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	3728      	adds	r7, #40	; 0x28
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	20004844 	.word	0x20004844
 8014f78:	20004850 	.word	0x20004850
 8014f7c:	20004848 	.word	0x20004848
 8014f80:	2000483c 	.word	0x2000483c
 8014f84:	2000484c 	.word	0x2000484c

08014f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b086      	sub	sp, #24
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d046      	beq.n	8015028 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014f9a:	2308      	movs	r3, #8
 8014f9c:	425b      	negs	r3, r3
 8014f9e:	697a      	ldr	r2, [r7, #20]
 8014fa0:	4413      	add	r3, r2
 8014fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	685a      	ldr	r2, [r3, #4]
 8014fac:	4b20      	ldr	r3, [pc, #128]	; (8015030 <vPortFree+0xa8>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	4013      	ands	r3, r2
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d109      	bne.n	8014fca <vPortFree+0x42>
 8014fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fba:	f383 8811 	msr	BASEPRI, r3
 8014fbe:	f3bf 8f6f 	isb	sy
 8014fc2:	f3bf 8f4f 	dsb	sy
 8014fc6:	60fb      	str	r3, [r7, #12]
 8014fc8:	e7fe      	b.n	8014fc8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d009      	beq.n	8014fe6 <vPortFree+0x5e>
 8014fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd6:	f383 8811 	msr	BASEPRI, r3
 8014fda:	f3bf 8f6f 	isb	sy
 8014fde:	f3bf 8f4f 	dsb	sy
 8014fe2:	60bb      	str	r3, [r7, #8]
 8014fe4:	e7fe      	b.n	8014fe4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	685a      	ldr	r2, [r3, #4]
 8014fea:	4b11      	ldr	r3, [pc, #68]	; (8015030 <vPortFree+0xa8>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	4013      	ands	r3, r2
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d019      	beq.n	8015028 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d115      	bne.n	8015028 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	685a      	ldr	r2, [r3, #4]
 8015000:	4b0b      	ldr	r3, [pc, #44]	; (8015030 <vPortFree+0xa8>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	43db      	mvns	r3, r3
 8015006:	401a      	ands	r2, r3
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801500c:	f7ff fa06 	bl	801441c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	685a      	ldr	r2, [r3, #4]
 8015014:	4b07      	ldr	r3, [pc, #28]	; (8015034 <vPortFree+0xac>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	4413      	add	r3, r2
 801501a:	4a06      	ldr	r2, [pc, #24]	; (8015034 <vPortFree+0xac>)
 801501c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801501e:	6938      	ldr	r0, [r7, #16]
 8015020:	f000 f86c 	bl	80150fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015024:	f7ff fa08 	bl	8014438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015028:	bf00      	nop
 801502a:	3718      	adds	r7, #24
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}
 8015030:	20004850 	.word	0x20004850
 8015034:	20004848 	.word	0x20004848

08015038 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015038:	b480      	push	{r7}
 801503a:	b085      	sub	sp, #20
 801503c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801503e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015042:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015044:	4b27      	ldr	r3, [pc, #156]	; (80150e4 <prvHeapInit+0xac>)
 8015046:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	f003 0307 	and.w	r3, r3, #7
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00c      	beq.n	801506c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	3307      	adds	r3, #7
 8015056:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f023 0307 	bic.w	r3, r3, #7
 801505e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015060:	68ba      	ldr	r2, [r7, #8]
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	1ad3      	subs	r3, r2, r3
 8015066:	4a1f      	ldr	r2, [pc, #124]	; (80150e4 <prvHeapInit+0xac>)
 8015068:	4413      	add	r3, r2
 801506a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015070:	4a1d      	ldr	r2, [pc, #116]	; (80150e8 <prvHeapInit+0xb0>)
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015076:	4b1c      	ldr	r3, [pc, #112]	; (80150e8 <prvHeapInit+0xb0>)
 8015078:	2200      	movs	r2, #0
 801507a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	68ba      	ldr	r2, [r7, #8]
 8015080:	4413      	add	r3, r2
 8015082:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015084:	2208      	movs	r2, #8
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	1a9b      	subs	r3, r3, r2
 801508a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f023 0307 	bic.w	r3, r3, #7
 8015092:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	4a15      	ldr	r2, [pc, #84]	; (80150ec <prvHeapInit+0xb4>)
 8015098:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801509a:	4b14      	ldr	r3, [pc, #80]	; (80150ec <prvHeapInit+0xb4>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	2200      	movs	r2, #0
 80150a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80150a2:	4b12      	ldr	r3, [pc, #72]	; (80150ec <prvHeapInit+0xb4>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	2200      	movs	r2, #0
 80150a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	68fa      	ldr	r2, [r7, #12]
 80150b2:	1ad2      	subs	r2, r2, r3
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80150b8:	4b0c      	ldr	r3, [pc, #48]	; (80150ec <prvHeapInit+0xb4>)
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	685b      	ldr	r3, [r3, #4]
 80150c4:	4a0a      	ldr	r2, [pc, #40]	; (80150f0 <prvHeapInit+0xb8>)
 80150c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	685b      	ldr	r3, [r3, #4]
 80150cc:	4a09      	ldr	r2, [pc, #36]	; (80150f4 <prvHeapInit+0xbc>)
 80150ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80150d0:	4b09      	ldr	r3, [pc, #36]	; (80150f8 <prvHeapInit+0xc0>)
 80150d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80150d6:	601a      	str	r2, [r3, #0]
}
 80150d8:	bf00      	nop
 80150da:	3714      	adds	r7, #20
 80150dc:	46bd      	mov	sp, r7
 80150de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e2:	4770      	bx	lr
 80150e4:	20000c3c 	.word	0x20000c3c
 80150e8:	2000483c 	.word	0x2000483c
 80150ec:	20004844 	.word	0x20004844
 80150f0:	2000484c 	.word	0x2000484c
 80150f4:	20004848 	.word	0x20004848
 80150f8:	20004850 	.word	0x20004850

080150fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80150fc:	b480      	push	{r7}
 80150fe:	b085      	sub	sp, #20
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015104:	4b28      	ldr	r3, [pc, #160]	; (80151a8 <prvInsertBlockIntoFreeList+0xac>)
 8015106:	60fb      	str	r3, [r7, #12]
 8015108:	e002      	b.n	8015110 <prvInsertBlockIntoFreeList+0x14>
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	60fb      	str	r3, [r7, #12]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	687a      	ldr	r2, [r7, #4]
 8015116:	429a      	cmp	r2, r3
 8015118:	d8f7      	bhi.n	801510a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	68ba      	ldr	r2, [r7, #8]
 8015124:	4413      	add	r3, r2
 8015126:	687a      	ldr	r2, [r7, #4]
 8015128:	429a      	cmp	r2, r3
 801512a:	d108      	bne.n	801513e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	685a      	ldr	r2, [r3, #4]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	441a      	add	r2, r3
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	68ba      	ldr	r2, [r7, #8]
 8015148:	441a      	add	r2, r3
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	429a      	cmp	r2, r3
 8015150:	d118      	bne.n	8015184 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	4b15      	ldr	r3, [pc, #84]	; (80151ac <prvInsertBlockIntoFreeList+0xb0>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	429a      	cmp	r2, r3
 801515c:	d00d      	beq.n	801517a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	685a      	ldr	r2, [r3, #4]
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	441a      	add	r2, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	601a      	str	r2, [r3, #0]
 8015178:	e008      	b.n	801518c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801517a:	4b0c      	ldr	r3, [pc, #48]	; (80151ac <prvInsertBlockIntoFreeList+0xb0>)
 801517c:	681a      	ldr	r2, [r3, #0]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	601a      	str	r2, [r3, #0]
 8015182:	e003      	b.n	801518c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	681a      	ldr	r2, [r3, #0]
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801518c:	68fa      	ldr	r2, [r7, #12]
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	429a      	cmp	r2, r3
 8015192:	d002      	beq.n	801519a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	687a      	ldr	r2, [r7, #4]
 8015198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801519a:	bf00      	nop
 801519c:	3714      	adds	r7, #20
 801519e:	46bd      	mov	sp, r7
 80151a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a4:	4770      	bx	lr
 80151a6:	bf00      	nop
 80151a8:	2000483c 	.word	0x2000483c
 80151ac:	20004844 	.word	0x20004844

080151b0 <__errno>:
 80151b0:	4b01      	ldr	r3, [pc, #4]	; (80151b8 <__errno+0x8>)
 80151b2:	6818      	ldr	r0, [r3, #0]
 80151b4:	4770      	bx	lr
 80151b6:	bf00      	nop
 80151b8:	20000154 	.word	0x20000154

080151bc <fiprintf>:
 80151bc:	b40e      	push	{r1, r2, r3}
 80151be:	b503      	push	{r0, r1, lr}
 80151c0:	4601      	mov	r1, r0
 80151c2:	ab03      	add	r3, sp, #12
 80151c4:	4805      	ldr	r0, [pc, #20]	; (80151dc <fiprintf+0x20>)
 80151c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ca:	6800      	ldr	r0, [r0, #0]
 80151cc:	9301      	str	r3, [sp, #4]
 80151ce:	f000 fafd 	bl	80157cc <_vfiprintf_r>
 80151d2:	b002      	add	sp, #8
 80151d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80151d8:	b003      	add	sp, #12
 80151da:	4770      	bx	lr
 80151dc:	20000154 	.word	0x20000154

080151e0 <__libc_init_array>:
 80151e0:	b570      	push	{r4, r5, r6, lr}
 80151e2:	4e0d      	ldr	r6, [pc, #52]	; (8015218 <__libc_init_array+0x38>)
 80151e4:	4c0d      	ldr	r4, [pc, #52]	; (801521c <__libc_init_array+0x3c>)
 80151e6:	1ba4      	subs	r4, r4, r6
 80151e8:	10a4      	asrs	r4, r4, #2
 80151ea:	2500      	movs	r5, #0
 80151ec:	42a5      	cmp	r5, r4
 80151ee:	d109      	bne.n	8015204 <__libc_init_array+0x24>
 80151f0:	4e0b      	ldr	r6, [pc, #44]	; (8015220 <__libc_init_array+0x40>)
 80151f2:	4c0c      	ldr	r4, [pc, #48]	; (8015224 <__libc_init_array+0x44>)
 80151f4:	f006 ffea 	bl	801c1cc <_init>
 80151f8:	1ba4      	subs	r4, r4, r6
 80151fa:	10a4      	asrs	r4, r4, #2
 80151fc:	2500      	movs	r5, #0
 80151fe:	42a5      	cmp	r5, r4
 8015200:	d105      	bne.n	801520e <__libc_init_array+0x2e>
 8015202:	bd70      	pop	{r4, r5, r6, pc}
 8015204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015208:	4798      	blx	r3
 801520a:	3501      	adds	r5, #1
 801520c:	e7ee      	b.n	80151ec <__libc_init_array+0xc>
 801520e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015212:	4798      	blx	r3
 8015214:	3501      	adds	r5, #1
 8015216:	e7f2      	b.n	80151fe <__libc_init_array+0x1e>
 8015218:	0801c930 	.word	0x0801c930
 801521c:	0801c930 	.word	0x0801c930
 8015220:	0801c930 	.word	0x0801c930
 8015224:	0801c934 	.word	0x0801c934

08015228 <memcpy>:
 8015228:	b510      	push	{r4, lr}
 801522a:	1e43      	subs	r3, r0, #1
 801522c:	440a      	add	r2, r1
 801522e:	4291      	cmp	r1, r2
 8015230:	d100      	bne.n	8015234 <memcpy+0xc>
 8015232:	bd10      	pop	{r4, pc}
 8015234:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015238:	f803 4f01 	strb.w	r4, [r3, #1]!
 801523c:	e7f7      	b.n	801522e <memcpy+0x6>

0801523e <memset>:
 801523e:	4402      	add	r2, r0
 8015240:	4603      	mov	r3, r0
 8015242:	4293      	cmp	r3, r2
 8015244:	d100      	bne.n	8015248 <memset+0xa>
 8015246:	4770      	bx	lr
 8015248:	f803 1b01 	strb.w	r1, [r3], #1
 801524c:	e7f9      	b.n	8015242 <memset+0x4>
	...

08015250 <validate_structure>:
 8015250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015252:	6801      	ldr	r1, [r0, #0]
 8015254:	293b      	cmp	r1, #59	; 0x3b
 8015256:	4604      	mov	r4, r0
 8015258:	d911      	bls.n	801527e <validate_structure+0x2e>
 801525a:	223c      	movs	r2, #60	; 0x3c
 801525c:	4668      	mov	r0, sp
 801525e:	f001 fb15 	bl	801688c <div>
 8015262:	9a01      	ldr	r2, [sp, #4]
 8015264:	6863      	ldr	r3, [r4, #4]
 8015266:	9900      	ldr	r1, [sp, #0]
 8015268:	2a00      	cmp	r2, #0
 801526a:	440b      	add	r3, r1
 801526c:	6063      	str	r3, [r4, #4]
 801526e:	bfbb      	ittet	lt
 8015270:	323c      	addlt	r2, #60	; 0x3c
 8015272:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8015276:	6022      	strge	r2, [r4, #0]
 8015278:	6022      	strlt	r2, [r4, #0]
 801527a:	bfb8      	it	lt
 801527c:	6063      	strlt	r3, [r4, #4]
 801527e:	6861      	ldr	r1, [r4, #4]
 8015280:	293b      	cmp	r1, #59	; 0x3b
 8015282:	d911      	bls.n	80152a8 <validate_structure+0x58>
 8015284:	223c      	movs	r2, #60	; 0x3c
 8015286:	4668      	mov	r0, sp
 8015288:	f001 fb00 	bl	801688c <div>
 801528c:	9a01      	ldr	r2, [sp, #4]
 801528e:	68a3      	ldr	r3, [r4, #8]
 8015290:	9900      	ldr	r1, [sp, #0]
 8015292:	2a00      	cmp	r2, #0
 8015294:	440b      	add	r3, r1
 8015296:	60a3      	str	r3, [r4, #8]
 8015298:	bfbb      	ittet	lt
 801529a:	323c      	addlt	r2, #60	; 0x3c
 801529c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80152a0:	6062      	strge	r2, [r4, #4]
 80152a2:	6062      	strlt	r2, [r4, #4]
 80152a4:	bfb8      	it	lt
 80152a6:	60a3      	strlt	r3, [r4, #8]
 80152a8:	68a1      	ldr	r1, [r4, #8]
 80152aa:	2917      	cmp	r1, #23
 80152ac:	d911      	bls.n	80152d2 <validate_structure+0x82>
 80152ae:	2218      	movs	r2, #24
 80152b0:	4668      	mov	r0, sp
 80152b2:	f001 faeb 	bl	801688c <div>
 80152b6:	9a01      	ldr	r2, [sp, #4]
 80152b8:	68e3      	ldr	r3, [r4, #12]
 80152ba:	9900      	ldr	r1, [sp, #0]
 80152bc:	2a00      	cmp	r2, #0
 80152be:	440b      	add	r3, r1
 80152c0:	60e3      	str	r3, [r4, #12]
 80152c2:	bfbb      	ittet	lt
 80152c4:	3218      	addlt	r2, #24
 80152c6:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80152ca:	60a2      	strge	r2, [r4, #8]
 80152cc:	60a2      	strlt	r2, [r4, #8]
 80152ce:	bfb8      	it	lt
 80152d0:	60e3      	strlt	r3, [r4, #12]
 80152d2:	6921      	ldr	r1, [r4, #16]
 80152d4:	290b      	cmp	r1, #11
 80152d6:	d911      	bls.n	80152fc <validate_structure+0xac>
 80152d8:	220c      	movs	r2, #12
 80152da:	4668      	mov	r0, sp
 80152dc:	f001 fad6 	bl	801688c <div>
 80152e0:	9a01      	ldr	r2, [sp, #4]
 80152e2:	6963      	ldr	r3, [r4, #20]
 80152e4:	9900      	ldr	r1, [sp, #0]
 80152e6:	2a00      	cmp	r2, #0
 80152e8:	440b      	add	r3, r1
 80152ea:	6163      	str	r3, [r4, #20]
 80152ec:	bfbb      	ittet	lt
 80152ee:	320c      	addlt	r2, #12
 80152f0:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80152f4:	6122      	strge	r2, [r4, #16]
 80152f6:	6122      	strlt	r2, [r4, #16]
 80152f8:	bfb8      	it	lt
 80152fa:	6163      	strlt	r3, [r4, #20]
 80152fc:	6963      	ldr	r3, [r4, #20]
 80152fe:	0799      	lsls	r1, r3, #30
 8015300:	d120      	bne.n	8015344 <validate_structure+0xf4>
 8015302:	2164      	movs	r1, #100	; 0x64
 8015304:	fb93 f2f1 	sdiv	r2, r3, r1
 8015308:	fb01 3212 	mls	r2, r1, r2, r3
 801530c:	b9e2      	cbnz	r2, 8015348 <validate_structure+0xf8>
 801530e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8015312:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8015316:	fb93 f2f1 	sdiv	r2, r3, r1
 801531a:	fb01 3312 	mls	r3, r1, r2, r3
 801531e:	2b00      	cmp	r3, #0
 8015320:	bf14      	ite	ne
 8015322:	231c      	movne	r3, #28
 8015324:	231d      	moveq	r3, #29
 8015326:	68e2      	ldr	r2, [r4, #12]
 8015328:	2a00      	cmp	r2, #0
 801532a:	dc0f      	bgt.n	801534c <validate_structure+0xfc>
 801532c:	4f34      	ldr	r7, [pc, #208]	; (8015400 <validate_structure+0x1b0>)
 801532e:	260b      	movs	r6, #11
 8015330:	2064      	movs	r0, #100	; 0x64
 8015332:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8015336:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801533a:	f1bc 0f00 	cmp.w	ip, #0
 801533e:	dd14      	ble.n	801536a <validate_structure+0x11a>
 8015340:	b003      	add	sp, #12
 8015342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015344:	231c      	movs	r3, #28
 8015346:	e7ee      	b.n	8015326 <validate_structure+0xd6>
 8015348:	231d      	movs	r3, #29
 801534a:	e7ec      	b.n	8015326 <validate_structure+0xd6>
 801534c:	4f2c      	ldr	r7, [pc, #176]	; (8015400 <validate_structure+0x1b0>)
 801534e:	f04f 0c00 	mov.w	ip, #0
 8015352:	2564      	movs	r5, #100	; 0x64
 8015354:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8015358:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801535c:	2a01      	cmp	r2, #1
 801535e:	d02f      	beq.n	80153c0 <validate_structure+0x170>
 8015360:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8015364:	4281      	cmp	r1, r0
 8015366:	dc2e      	bgt.n	80153c6 <validate_structure+0x176>
 8015368:	e7ea      	b.n	8015340 <validate_structure+0xf0>
 801536a:	6921      	ldr	r1, [r4, #16]
 801536c:	3901      	subs	r1, #1
 801536e:	6121      	str	r1, [r4, #16]
 8015370:	3101      	adds	r1, #1
 8015372:	d114      	bne.n	801539e <validate_structure+0x14e>
 8015374:	6963      	ldr	r3, [r4, #20]
 8015376:	1e59      	subs	r1, r3, #1
 8015378:	078a      	lsls	r2, r1, #30
 801537a:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801537e:	d117      	bne.n	80153b0 <validate_structure+0x160>
 8015380:	fb91 f2f0 	sdiv	r2, r1, r0
 8015384:	fb00 1112 	mls	r1, r0, r2, r1
 8015388:	b9a1      	cbnz	r1, 80153b4 <validate_structure+0x164>
 801538a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801538e:	fb93 f2f5 	sdiv	r2, r3, r5
 8015392:	fb05 3312 	mls	r3, r5, r2, r3
 8015396:	2b00      	cmp	r3, #0
 8015398:	bf14      	ite	ne
 801539a:	231c      	movne	r3, #28
 801539c:	231d      	moveq	r3, #29
 801539e:	6922      	ldr	r2, [r4, #16]
 80153a0:	2a01      	cmp	r2, #1
 80153a2:	bf14      	ite	ne
 80153a4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80153a8:	461a      	moveq	r2, r3
 80153aa:	4462      	add	r2, ip
 80153ac:	60e2      	str	r2, [r4, #12]
 80153ae:	e7c2      	b.n	8015336 <validate_structure+0xe6>
 80153b0:	231c      	movs	r3, #28
 80153b2:	e7f4      	b.n	801539e <validate_structure+0x14e>
 80153b4:	231d      	movs	r3, #29
 80153b6:	e7f2      	b.n	801539e <validate_structure+0x14e>
 80153b8:	231c      	movs	r3, #28
 80153ba:	e7cd      	b.n	8015358 <validate_structure+0x108>
 80153bc:	231d      	movs	r3, #29
 80153be:	e7cb      	b.n	8015358 <validate_structure+0x108>
 80153c0:	428b      	cmp	r3, r1
 80153c2:	dabd      	bge.n	8015340 <validate_structure+0xf0>
 80153c4:	4618      	mov	r0, r3
 80153c6:	3201      	adds	r2, #1
 80153c8:	1a09      	subs	r1, r1, r0
 80153ca:	2a0c      	cmp	r2, #12
 80153cc:	60e1      	str	r1, [r4, #12]
 80153ce:	6122      	str	r2, [r4, #16]
 80153d0:	d1c2      	bne.n	8015358 <validate_structure+0x108>
 80153d2:	6963      	ldr	r3, [r4, #20]
 80153d4:	1c5a      	adds	r2, r3, #1
 80153d6:	0791      	lsls	r1, r2, #30
 80153d8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80153dc:	d1ec      	bne.n	80153b8 <validate_structure+0x168>
 80153de:	fb92 f1f5 	sdiv	r1, r2, r5
 80153e2:	fb05 2211 	mls	r2, r5, r1, r2
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	d1e8      	bne.n	80153bc <validate_structure+0x16c>
 80153ea:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80153ee:	fb93 f2f6 	sdiv	r2, r3, r6
 80153f2:	fb06 3312 	mls	r3, r6, r2, r3
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	bf14      	ite	ne
 80153fa:	231c      	movne	r3, #28
 80153fc:	231d      	moveq	r3, #29
 80153fe:	e7ab      	b.n	8015358 <validate_structure+0x108>
 8015400:	0801c2e4 	.word	0x0801c2e4

08015404 <mktime>:
 8015404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015408:	b089      	sub	sp, #36	; 0x24
 801540a:	4606      	mov	r6, r0
 801540c:	f002 fa56 	bl	80178bc <__gettzinfo>
 8015410:	4680      	mov	r8, r0
 8015412:	4630      	mov	r0, r6
 8015414:	f7ff ff1c 	bl	8015250 <validate_structure>
 8015418:	e9d6 3000 	ldrd	r3, r0, [r6]
 801541c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8015420:	fb0a 3a00 	mla	sl, sl, r0, r3
 8015424:	68b0      	ldr	r0, [r6, #8]
 8015426:	4abe      	ldr	r2, [pc, #760]	; (8015720 <mktime+0x31c>)
 8015428:	6975      	ldr	r5, [r6, #20]
 801542a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801542e:	fb03 aa00 	mla	sl, r3, r0, sl
 8015432:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8015436:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801543a:	3c01      	subs	r4, #1
 801543c:	2b01      	cmp	r3, #1
 801543e:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8015442:	4414      	add	r4, r2
 8015444:	dd11      	ble.n	801546a <mktime+0x66>
 8015446:	07a9      	lsls	r1, r5, #30
 8015448:	d10f      	bne.n	801546a <mktime+0x66>
 801544a:	2264      	movs	r2, #100	; 0x64
 801544c:	fb95 f3f2 	sdiv	r3, r5, r2
 8015450:	fb02 5313 	mls	r3, r2, r3, r5
 8015454:	b943      	cbnz	r3, 8015468 <mktime+0x64>
 8015456:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801545a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801545e:	fb91 f3f2 	sdiv	r3, r1, r2
 8015462:	fb02 1313 	mls	r3, r2, r3, r1
 8015466:	b903      	cbnz	r3, 801546a <mktime+0x66>
 8015468:	3401      	adds	r4, #1
 801546a:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 801546e:	3310      	adds	r3, #16
 8015470:	f644 6220 	movw	r2, #20000	; 0x4e20
 8015474:	4293      	cmp	r3, r2
 8015476:	61f4      	str	r4, [r6, #28]
 8015478:	f200 8179 	bhi.w	801576e <mktime+0x36a>
 801547c:	2d46      	cmp	r5, #70	; 0x46
 801547e:	f340 8084 	ble.w	801558a <mktime+0x186>
 8015482:	2346      	movs	r3, #70	; 0x46
 8015484:	f240 176d 	movw	r7, #365	; 0x16d
 8015488:	2164      	movs	r1, #100	; 0x64
 801548a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801548e:	079a      	lsls	r2, r3, #30
 8015490:	d175      	bne.n	801557e <mktime+0x17a>
 8015492:	fb93 f2f1 	sdiv	r2, r3, r1
 8015496:	fb01 3212 	mls	r2, r1, r2, r3
 801549a:	2a00      	cmp	r2, #0
 801549c:	d172      	bne.n	8015584 <mktime+0x180>
 801549e:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80154a2:	fb9c f2f0 	sdiv	r2, ip, r0
 80154a6:	fb00 c212 	mls	r2, r0, r2, ip
 80154aa:	2a00      	cmp	r2, #0
 80154ac:	bf14      	ite	ne
 80154ae:	463a      	movne	r2, r7
 80154b0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80154b4:	3301      	adds	r3, #1
 80154b6:	429d      	cmp	r5, r3
 80154b8:	4414      	add	r4, r2
 80154ba:	d1e8      	bne.n	801548e <mktime+0x8a>
 80154bc:	4b99      	ldr	r3, [pc, #612]	; (8015724 <mktime+0x320>)
 80154be:	4363      	muls	r3, r4
 80154c0:	eb1a 0103 	adds.w	r1, sl, r3
 80154c4:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 80154c8:	e9cd 1200 	strd	r1, r2, [sp]
 80154cc:	f000 ff98 	bl	8016400 <__tz_lock>
 80154d0:	f000 ff98 	bl	8016404 <_tzset_unlocked>
 80154d4:	4b94      	ldr	r3, [pc, #592]	; (8015728 <mktime+0x324>)
 80154d6:	f8d3 9000 	ldr.w	r9, [r3]
 80154da:	f1b9 0f00 	cmp.w	r9, #0
 80154de:	d045      	beq.n	801556c <mktime+0x168>
 80154e0:	f8d6 9020 	ldr.w	r9, [r6, #32]
 80154e4:	6970      	ldr	r0, [r6, #20]
 80154e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80154ea:	464f      	mov	r7, r9
 80154ec:	2f01      	cmp	r7, #1
 80154ee:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80154f2:	bfa8      	it	ge
 80154f4:	2701      	movge	r7, #1
 80154f6:	4283      	cmp	r3, r0
 80154f8:	f040 8089 	bne.w	801560e <mktime+0x20a>
 80154fc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8015500:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8015504:	460a      	mov	r2, r1
 8015506:	17cb      	asrs	r3, r1, #31
 8015508:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801550c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8015510:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015514:	1a12      	subs	r2, r2, r0
 8015516:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 801551a:	4692      	mov	sl, r2
 801551c:	469b      	mov	fp, r3
 801551e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015522:	4552      	cmp	r2, sl
 8015524:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8015528:	e9cd ab02 	strd	sl, fp, [sp, #8]
 801552c:	da76      	bge.n	801561c <mktime+0x218>
 801552e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8015532:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015536:	ebb2 0a0a 	subs.w	sl, r2, sl
 801553a:	eb63 0b0b 	sbc.w	fp, r3, fp
 801553e:	f8d8 3000 	ldr.w	r3, [r8]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d079      	beq.n	801563a <mktime+0x236>
 8015546:	e9dd 2300 	ldrd	r2, r3, [sp]
 801554a:	4552      	cmp	r2, sl
 801554c:	eb73 030b 	sbcs.w	r3, r3, fp
 8015550:	db07      	blt.n	8015562 <mktime+0x15e>
 8015552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015556:	e9dd ab00 	ldrd	sl, fp, [sp]
 801555a:	4592      	cmp	sl, r2
 801555c:	eb7b 0303 	sbcs.w	r3, fp, r3
 8015560:	db71      	blt.n	8015646 <mktime+0x242>
 8015562:	f1b9 0f00 	cmp.w	r9, #0
 8015566:	f04f 0900 	mov.w	r9, #0
 801556a:	da71      	bge.n	8015650 <mktime+0x24c>
 801556c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8015570:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8015574:	eb1a 0a03 	adds.w	sl, sl, r3
 8015578:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801557c:	e0b4      	b.n	80156e8 <mktime+0x2e4>
 801557e:	f240 126d 	movw	r2, #365	; 0x16d
 8015582:	e797      	b.n	80154b4 <mktime+0xb0>
 8015584:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015588:	e794      	b.n	80154b4 <mktime+0xb0>
 801558a:	d097      	beq.n	80154bc <mktime+0xb8>
 801558c:	2345      	movs	r3, #69	; 0x45
 801558e:	f240 176d 	movw	r7, #365	; 0x16d
 8015592:	2164      	movs	r1, #100	; 0x64
 8015594:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8015598:	e012      	b.n	80155c0 <mktime+0x1bc>
 801559a:	bb62      	cbnz	r2, 80155f6 <mktime+0x1f2>
 801559c:	fb93 f2f1 	sdiv	r2, r3, r1
 80155a0:	fb01 3212 	mls	r2, r1, r2, r3
 80155a4:	bb52      	cbnz	r2, 80155fc <mktime+0x1f8>
 80155a6:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80155aa:	fb9c f2f0 	sdiv	r2, ip, r0
 80155ae:	fb00 c212 	mls	r2, r0, r2, ip
 80155b2:	2a00      	cmp	r2, #0
 80155b4:	bf14      	ite	ne
 80155b6:	463a      	movne	r2, r7
 80155b8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80155bc:	1aa4      	subs	r4, r4, r2
 80155be:	3b01      	subs	r3, #1
 80155c0:	429d      	cmp	r5, r3
 80155c2:	f003 0203 	and.w	r2, r3, #3
 80155c6:	dbe8      	blt.n	801559a <mktime+0x196>
 80155c8:	b9da      	cbnz	r2, 8015602 <mktime+0x1fe>
 80155ca:	2264      	movs	r2, #100	; 0x64
 80155cc:	fb95 f3f2 	sdiv	r3, r5, r2
 80155d0:	fb02 5313 	mls	r3, r2, r3, r5
 80155d4:	b9c3      	cbnz	r3, 8015608 <mktime+0x204>
 80155d6:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 80155da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80155de:	fb91 f3f2 	sdiv	r3, r1, r2
 80155e2:	fb02 1313 	mls	r3, r2, r3, r1
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	f240 136d 	movw	r3, #365	; 0x16d
 80155ec:	bf08      	it	eq
 80155ee:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80155f2:	1ae4      	subs	r4, r4, r3
 80155f4:	e762      	b.n	80154bc <mktime+0xb8>
 80155f6:	f240 126d 	movw	r2, #365	; 0x16d
 80155fa:	e7df      	b.n	80155bc <mktime+0x1b8>
 80155fc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015600:	e7dc      	b.n	80155bc <mktime+0x1b8>
 8015602:	f240 136d 	movw	r3, #365	; 0x16d
 8015606:	e7f4      	b.n	80155f2 <mktime+0x1ee>
 8015608:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801560c:	e7f1      	b.n	80155f2 <mktime+0x1ee>
 801560e:	f000 fe4f 	bl	80162b0 <__tzcalc_limits>
 8015612:	2800      	cmp	r0, #0
 8015614:	f47f af72 	bne.w	80154fc <mktime+0xf8>
 8015618:	46b9      	mov	r9, r7
 801561a:	e057      	b.n	80156cc <mktime+0x2c8>
 801561c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015620:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015624:	ebb2 020a 	subs.w	r2, r2, sl
 8015628:	eb63 030b 	sbc.w	r3, r3, fp
 801562c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8015630:	4592      	cmp	sl, r2
 8015632:	eb7b 0303 	sbcs.w	r3, fp, r3
 8015636:	dbef      	blt.n	8015618 <mktime+0x214>
 8015638:	e779      	b.n	801552e <mktime+0x12a>
 801563a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801563e:	4552      	cmp	r2, sl
 8015640:	eb73 030b 	sbcs.w	r3, r3, fp
 8015644:	db85      	blt.n	8015552 <mktime+0x14e>
 8015646:	f1b9 0f00 	cmp.w	r9, #0
 801564a:	db43      	blt.n	80156d4 <mktime+0x2d0>
 801564c:	f04f 0901 	mov.w	r9, #1
 8015650:	ea87 0709 	eor.w	r7, r7, r9
 8015654:	2f01      	cmp	r7, #1
 8015656:	d139      	bne.n	80156cc <mktime+0x2c8>
 8015658:	1a40      	subs	r0, r0, r1
 801565a:	f1b9 0f00 	cmp.w	r9, #0
 801565e:	d100      	bne.n	8015662 <mktime+0x25e>
 8015660:	4240      	negs	r0, r0
 8015662:	6833      	ldr	r3, [r6, #0]
 8015664:	4403      	add	r3, r0
 8015666:	6033      	str	r3, [r6, #0]
 8015668:	e9dd 2300 	ldrd	r2, r3, [sp]
 801566c:	1812      	adds	r2, r2, r0
 801566e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8015672:	e9cd 2300 	strd	r2, r3, [sp]
 8015676:	4630      	mov	r0, r6
 8015678:	68f2      	ldr	r2, [r6, #12]
 801567a:	9202      	str	r2, [sp, #8]
 801567c:	f7ff fde8 	bl	8015250 <validate_structure>
 8015680:	68f3      	ldr	r3, [r6, #12]
 8015682:	9a02      	ldr	r2, [sp, #8]
 8015684:	1a9b      	subs	r3, r3, r2
 8015686:	d021      	beq.n	80156cc <mktime+0x2c8>
 8015688:	2b01      	cmp	r3, #1
 801568a:	dc40      	bgt.n	801570e <mktime+0x30a>
 801568c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015690:	bfa8      	it	ge
 8015692:	461f      	movge	r7, r3
 8015694:	69f3      	ldr	r3, [r6, #28]
 8015696:	443c      	add	r4, r7
 8015698:	18ff      	adds	r7, r7, r3
 801569a:	d547      	bpl.n	801572c <mktime+0x328>
 801569c:	1e6a      	subs	r2, r5, #1
 801569e:	0791      	lsls	r1, r2, #30
 80156a0:	d138      	bne.n	8015714 <mktime+0x310>
 80156a2:	2164      	movs	r1, #100	; 0x64
 80156a4:	fb92 f3f1 	sdiv	r3, r2, r1
 80156a8:	fb01 2313 	mls	r3, r1, r3, r2
 80156ac:	bbab      	cbnz	r3, 801571a <mktime+0x316>
 80156ae:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 80156b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80156b6:	fb95 f3f2 	sdiv	r3, r5, r2
 80156ba:	fb02 5513 	mls	r5, r2, r3, r5
 80156be:	2d00      	cmp	r5, #0
 80156c0:	f240 136d 	movw	r3, #365	; 0x16d
 80156c4:	bf18      	it	ne
 80156c6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80156ca:	61f3      	str	r3, [r6, #28]
 80156cc:	f1b9 0f01 	cmp.w	r9, #1
 80156d0:	f47f af4c 	bne.w	801556c <mktime+0x168>
 80156d4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80156d8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 80156dc:	eb1a 0a03 	adds.w	sl, sl, r3
 80156e0:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80156e4:	f04f 0901 	mov.w	r9, #1
 80156e8:	f000 fe8b 	bl	8016402 <__tz_unlock>
 80156ec:	3404      	adds	r4, #4
 80156ee:	2307      	movs	r3, #7
 80156f0:	fb94 f3f3 	sdiv	r3, r4, r3
 80156f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80156f8:	1ae4      	subs	r4, r4, r3
 80156fa:	bf48      	it	mi
 80156fc:	3407      	addmi	r4, #7
 80156fe:	f8c6 9020 	str.w	r9, [r6, #32]
 8015702:	61b4      	str	r4, [r6, #24]
 8015704:	4650      	mov	r0, sl
 8015706:	4659      	mov	r1, fp
 8015708:	b009      	add	sp, #36	; 0x24
 801570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015712:	e7bf      	b.n	8015694 <mktime+0x290>
 8015714:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8015718:	e7d7      	b.n	80156ca <mktime+0x2c6>
 801571a:	f240 136d 	movw	r3, #365	; 0x16d
 801571e:	e7d4      	b.n	80156ca <mktime+0x2c6>
 8015720:	0801c314 	.word	0x0801c314
 8015724:	00015180 	.word	0x00015180
 8015728:	20004870 	.word	0x20004870
 801572c:	07ab      	lsls	r3, r5, #30
 801572e:	d118      	bne.n	8015762 <mktime+0x35e>
 8015730:	2264      	movs	r2, #100	; 0x64
 8015732:	fb95 f3f2 	sdiv	r3, r5, r2
 8015736:	fb02 5313 	mls	r3, r2, r3, r5
 801573a:	b9ab      	cbnz	r3, 8015768 <mktime+0x364>
 801573c:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8015740:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015744:	fb95 f3f2 	sdiv	r3, r5, r2
 8015748:	fb02 5513 	mls	r5, r2, r3, r5
 801574c:	2d00      	cmp	r5, #0
 801574e:	f240 136d 	movw	r3, #365	; 0x16d
 8015752:	bf08      	it	eq
 8015754:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8015758:	429f      	cmp	r7, r3
 801575a:	bfa8      	it	ge
 801575c:	1aff      	subge	r7, r7, r3
 801575e:	61f7      	str	r7, [r6, #28]
 8015760:	e7b4      	b.n	80156cc <mktime+0x2c8>
 8015762:	f240 136d 	movw	r3, #365	; 0x16d
 8015766:	e7f7      	b.n	8015758 <mktime+0x354>
 8015768:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801576c:	e7f4      	b.n	8015758 <mktime+0x354>
 801576e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015772:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8015776:	e7c5      	b.n	8015704 <mktime+0x300>

08015778 <__sfputc_r>:
 8015778:	6893      	ldr	r3, [r2, #8]
 801577a:	3b01      	subs	r3, #1
 801577c:	2b00      	cmp	r3, #0
 801577e:	b410      	push	{r4}
 8015780:	6093      	str	r3, [r2, #8]
 8015782:	da08      	bge.n	8015796 <__sfputc_r+0x1e>
 8015784:	6994      	ldr	r4, [r2, #24]
 8015786:	42a3      	cmp	r3, r4
 8015788:	db01      	blt.n	801578e <__sfputc_r+0x16>
 801578a:	290a      	cmp	r1, #10
 801578c:	d103      	bne.n	8015796 <__sfputc_r+0x1e>
 801578e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015792:	f000 bfbb 	b.w	801670c <__swbuf_r>
 8015796:	6813      	ldr	r3, [r2, #0]
 8015798:	1c58      	adds	r0, r3, #1
 801579a:	6010      	str	r0, [r2, #0]
 801579c:	7019      	strb	r1, [r3, #0]
 801579e:	4608      	mov	r0, r1
 80157a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157a4:	4770      	bx	lr

080157a6 <__sfputs_r>:
 80157a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157a8:	4606      	mov	r6, r0
 80157aa:	460f      	mov	r7, r1
 80157ac:	4614      	mov	r4, r2
 80157ae:	18d5      	adds	r5, r2, r3
 80157b0:	42ac      	cmp	r4, r5
 80157b2:	d101      	bne.n	80157b8 <__sfputs_r+0x12>
 80157b4:	2000      	movs	r0, #0
 80157b6:	e007      	b.n	80157c8 <__sfputs_r+0x22>
 80157b8:	463a      	mov	r2, r7
 80157ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157be:	4630      	mov	r0, r6
 80157c0:	f7ff ffda 	bl	8015778 <__sfputc_r>
 80157c4:	1c43      	adds	r3, r0, #1
 80157c6:	d1f3      	bne.n	80157b0 <__sfputs_r+0xa>
 80157c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157cc <_vfiprintf_r>:
 80157cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d0:	460c      	mov	r4, r1
 80157d2:	b09d      	sub	sp, #116	; 0x74
 80157d4:	4617      	mov	r7, r2
 80157d6:	461d      	mov	r5, r3
 80157d8:	4606      	mov	r6, r0
 80157da:	b118      	cbz	r0, 80157e4 <_vfiprintf_r+0x18>
 80157dc:	6983      	ldr	r3, [r0, #24]
 80157de:	b90b      	cbnz	r3, 80157e4 <_vfiprintf_r+0x18>
 80157e0:	f001 ff9e 	bl	8017720 <__sinit>
 80157e4:	4b7c      	ldr	r3, [pc, #496]	; (80159d8 <_vfiprintf_r+0x20c>)
 80157e6:	429c      	cmp	r4, r3
 80157e8:	d158      	bne.n	801589c <_vfiprintf_r+0xd0>
 80157ea:	6874      	ldr	r4, [r6, #4]
 80157ec:	89a3      	ldrh	r3, [r4, #12]
 80157ee:	0718      	lsls	r0, r3, #28
 80157f0:	d55e      	bpl.n	80158b0 <_vfiprintf_r+0xe4>
 80157f2:	6923      	ldr	r3, [r4, #16]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d05b      	beq.n	80158b0 <_vfiprintf_r+0xe4>
 80157f8:	2300      	movs	r3, #0
 80157fa:	9309      	str	r3, [sp, #36]	; 0x24
 80157fc:	2320      	movs	r3, #32
 80157fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015802:	2330      	movs	r3, #48	; 0x30
 8015804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015808:	9503      	str	r5, [sp, #12]
 801580a:	f04f 0b01 	mov.w	fp, #1
 801580e:	46b8      	mov	r8, r7
 8015810:	4645      	mov	r5, r8
 8015812:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015816:	b10b      	cbz	r3, 801581c <_vfiprintf_r+0x50>
 8015818:	2b25      	cmp	r3, #37	; 0x25
 801581a:	d154      	bne.n	80158c6 <_vfiprintf_r+0xfa>
 801581c:	ebb8 0a07 	subs.w	sl, r8, r7
 8015820:	d00b      	beq.n	801583a <_vfiprintf_r+0x6e>
 8015822:	4653      	mov	r3, sl
 8015824:	463a      	mov	r2, r7
 8015826:	4621      	mov	r1, r4
 8015828:	4630      	mov	r0, r6
 801582a:	f7ff ffbc 	bl	80157a6 <__sfputs_r>
 801582e:	3001      	adds	r0, #1
 8015830:	f000 80c2 	beq.w	80159b8 <_vfiprintf_r+0x1ec>
 8015834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015836:	4453      	add	r3, sl
 8015838:	9309      	str	r3, [sp, #36]	; 0x24
 801583a:	f898 3000 	ldrb.w	r3, [r8]
 801583e:	2b00      	cmp	r3, #0
 8015840:	f000 80ba 	beq.w	80159b8 <_vfiprintf_r+0x1ec>
 8015844:	2300      	movs	r3, #0
 8015846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801584a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801584e:	9304      	str	r3, [sp, #16]
 8015850:	9307      	str	r3, [sp, #28]
 8015852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015856:	931a      	str	r3, [sp, #104]	; 0x68
 8015858:	46a8      	mov	r8, r5
 801585a:	2205      	movs	r2, #5
 801585c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015860:	485e      	ldr	r0, [pc, #376]	; (80159dc <_vfiprintf_r+0x210>)
 8015862:	f7ea fcbd 	bl	80001e0 <memchr>
 8015866:	9b04      	ldr	r3, [sp, #16]
 8015868:	bb78      	cbnz	r0, 80158ca <_vfiprintf_r+0xfe>
 801586a:	06d9      	lsls	r1, r3, #27
 801586c:	bf44      	itt	mi
 801586e:	2220      	movmi	r2, #32
 8015870:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015874:	071a      	lsls	r2, r3, #28
 8015876:	bf44      	itt	mi
 8015878:	222b      	movmi	r2, #43	; 0x2b
 801587a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801587e:	782a      	ldrb	r2, [r5, #0]
 8015880:	2a2a      	cmp	r2, #42	; 0x2a
 8015882:	d02a      	beq.n	80158da <_vfiprintf_r+0x10e>
 8015884:	9a07      	ldr	r2, [sp, #28]
 8015886:	46a8      	mov	r8, r5
 8015888:	2000      	movs	r0, #0
 801588a:	250a      	movs	r5, #10
 801588c:	4641      	mov	r1, r8
 801588e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015892:	3b30      	subs	r3, #48	; 0x30
 8015894:	2b09      	cmp	r3, #9
 8015896:	d969      	bls.n	801596c <_vfiprintf_r+0x1a0>
 8015898:	b360      	cbz	r0, 80158f4 <_vfiprintf_r+0x128>
 801589a:	e024      	b.n	80158e6 <_vfiprintf_r+0x11a>
 801589c:	4b50      	ldr	r3, [pc, #320]	; (80159e0 <_vfiprintf_r+0x214>)
 801589e:	429c      	cmp	r4, r3
 80158a0:	d101      	bne.n	80158a6 <_vfiprintf_r+0xda>
 80158a2:	68b4      	ldr	r4, [r6, #8]
 80158a4:	e7a2      	b.n	80157ec <_vfiprintf_r+0x20>
 80158a6:	4b4f      	ldr	r3, [pc, #316]	; (80159e4 <_vfiprintf_r+0x218>)
 80158a8:	429c      	cmp	r4, r3
 80158aa:	bf08      	it	eq
 80158ac:	68f4      	ldreq	r4, [r6, #12]
 80158ae:	e79d      	b.n	80157ec <_vfiprintf_r+0x20>
 80158b0:	4621      	mov	r1, r4
 80158b2:	4630      	mov	r0, r6
 80158b4:	f000 ff7c 	bl	80167b0 <__swsetup_r>
 80158b8:	2800      	cmp	r0, #0
 80158ba:	d09d      	beq.n	80157f8 <_vfiprintf_r+0x2c>
 80158bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158c0:	b01d      	add	sp, #116	; 0x74
 80158c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c6:	46a8      	mov	r8, r5
 80158c8:	e7a2      	b.n	8015810 <_vfiprintf_r+0x44>
 80158ca:	4a44      	ldr	r2, [pc, #272]	; (80159dc <_vfiprintf_r+0x210>)
 80158cc:	1a80      	subs	r0, r0, r2
 80158ce:	fa0b f000 	lsl.w	r0, fp, r0
 80158d2:	4318      	orrs	r0, r3
 80158d4:	9004      	str	r0, [sp, #16]
 80158d6:	4645      	mov	r5, r8
 80158d8:	e7be      	b.n	8015858 <_vfiprintf_r+0x8c>
 80158da:	9a03      	ldr	r2, [sp, #12]
 80158dc:	1d11      	adds	r1, r2, #4
 80158de:	6812      	ldr	r2, [r2, #0]
 80158e0:	9103      	str	r1, [sp, #12]
 80158e2:	2a00      	cmp	r2, #0
 80158e4:	db01      	blt.n	80158ea <_vfiprintf_r+0x11e>
 80158e6:	9207      	str	r2, [sp, #28]
 80158e8:	e004      	b.n	80158f4 <_vfiprintf_r+0x128>
 80158ea:	4252      	negs	r2, r2
 80158ec:	f043 0302 	orr.w	r3, r3, #2
 80158f0:	9207      	str	r2, [sp, #28]
 80158f2:	9304      	str	r3, [sp, #16]
 80158f4:	f898 3000 	ldrb.w	r3, [r8]
 80158f8:	2b2e      	cmp	r3, #46	; 0x2e
 80158fa:	d10e      	bne.n	801591a <_vfiprintf_r+0x14e>
 80158fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015900:	2b2a      	cmp	r3, #42	; 0x2a
 8015902:	d138      	bne.n	8015976 <_vfiprintf_r+0x1aa>
 8015904:	9b03      	ldr	r3, [sp, #12]
 8015906:	1d1a      	adds	r2, r3, #4
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	9203      	str	r2, [sp, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	bfb8      	it	lt
 8015910:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015914:	f108 0802 	add.w	r8, r8, #2
 8015918:	9305      	str	r3, [sp, #20]
 801591a:	4d33      	ldr	r5, [pc, #204]	; (80159e8 <_vfiprintf_r+0x21c>)
 801591c:	f898 1000 	ldrb.w	r1, [r8]
 8015920:	2203      	movs	r2, #3
 8015922:	4628      	mov	r0, r5
 8015924:	f7ea fc5c 	bl	80001e0 <memchr>
 8015928:	b140      	cbz	r0, 801593c <_vfiprintf_r+0x170>
 801592a:	2340      	movs	r3, #64	; 0x40
 801592c:	1b40      	subs	r0, r0, r5
 801592e:	fa03 f000 	lsl.w	r0, r3, r0
 8015932:	9b04      	ldr	r3, [sp, #16]
 8015934:	4303      	orrs	r3, r0
 8015936:	f108 0801 	add.w	r8, r8, #1
 801593a:	9304      	str	r3, [sp, #16]
 801593c:	f898 1000 	ldrb.w	r1, [r8]
 8015940:	482a      	ldr	r0, [pc, #168]	; (80159ec <_vfiprintf_r+0x220>)
 8015942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015946:	2206      	movs	r2, #6
 8015948:	f108 0701 	add.w	r7, r8, #1
 801594c:	f7ea fc48 	bl	80001e0 <memchr>
 8015950:	2800      	cmp	r0, #0
 8015952:	d037      	beq.n	80159c4 <_vfiprintf_r+0x1f8>
 8015954:	4b26      	ldr	r3, [pc, #152]	; (80159f0 <_vfiprintf_r+0x224>)
 8015956:	bb1b      	cbnz	r3, 80159a0 <_vfiprintf_r+0x1d4>
 8015958:	9b03      	ldr	r3, [sp, #12]
 801595a:	3307      	adds	r3, #7
 801595c:	f023 0307 	bic.w	r3, r3, #7
 8015960:	3308      	adds	r3, #8
 8015962:	9303      	str	r3, [sp, #12]
 8015964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015966:	444b      	add	r3, r9
 8015968:	9309      	str	r3, [sp, #36]	; 0x24
 801596a:	e750      	b.n	801580e <_vfiprintf_r+0x42>
 801596c:	fb05 3202 	mla	r2, r5, r2, r3
 8015970:	2001      	movs	r0, #1
 8015972:	4688      	mov	r8, r1
 8015974:	e78a      	b.n	801588c <_vfiprintf_r+0xc0>
 8015976:	2300      	movs	r3, #0
 8015978:	f108 0801 	add.w	r8, r8, #1
 801597c:	9305      	str	r3, [sp, #20]
 801597e:	4619      	mov	r1, r3
 8015980:	250a      	movs	r5, #10
 8015982:	4640      	mov	r0, r8
 8015984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015988:	3a30      	subs	r2, #48	; 0x30
 801598a:	2a09      	cmp	r2, #9
 801598c:	d903      	bls.n	8015996 <_vfiprintf_r+0x1ca>
 801598e:	2b00      	cmp	r3, #0
 8015990:	d0c3      	beq.n	801591a <_vfiprintf_r+0x14e>
 8015992:	9105      	str	r1, [sp, #20]
 8015994:	e7c1      	b.n	801591a <_vfiprintf_r+0x14e>
 8015996:	fb05 2101 	mla	r1, r5, r1, r2
 801599a:	2301      	movs	r3, #1
 801599c:	4680      	mov	r8, r0
 801599e:	e7f0      	b.n	8015982 <_vfiprintf_r+0x1b6>
 80159a0:	ab03      	add	r3, sp, #12
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	4622      	mov	r2, r4
 80159a6:	4b13      	ldr	r3, [pc, #76]	; (80159f4 <_vfiprintf_r+0x228>)
 80159a8:	a904      	add	r1, sp, #16
 80159aa:	4630      	mov	r0, r6
 80159ac:	f000 f8b8 	bl	8015b20 <_printf_float>
 80159b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80159b4:	4681      	mov	r9, r0
 80159b6:	d1d5      	bne.n	8015964 <_vfiprintf_r+0x198>
 80159b8:	89a3      	ldrh	r3, [r4, #12]
 80159ba:	065b      	lsls	r3, r3, #25
 80159bc:	f53f af7e 	bmi.w	80158bc <_vfiprintf_r+0xf0>
 80159c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159c2:	e77d      	b.n	80158c0 <_vfiprintf_r+0xf4>
 80159c4:	ab03      	add	r3, sp, #12
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	4622      	mov	r2, r4
 80159ca:	4b0a      	ldr	r3, [pc, #40]	; (80159f4 <_vfiprintf_r+0x228>)
 80159cc:	a904      	add	r1, sp, #16
 80159ce:	4630      	mov	r0, r6
 80159d0:	f000 fb5c 	bl	801608c <_printf_i>
 80159d4:	e7ec      	b.n	80159b0 <_vfiprintf_r+0x1e4>
 80159d6:	bf00      	nop
 80159d8:	0801c3f0 	.word	0x0801c3f0
 80159dc:	0801c344 	.word	0x0801c344
 80159e0:	0801c410 	.word	0x0801c410
 80159e4:	0801c3d0 	.word	0x0801c3d0
 80159e8:	0801c34a 	.word	0x0801c34a
 80159ec:	0801c34e 	.word	0x0801c34e
 80159f0:	08015b21 	.word	0x08015b21
 80159f4:	080157a7 	.word	0x080157a7

080159f8 <__cvt>:
 80159f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159fc:	ec55 4b10 	vmov	r4, r5, d0
 8015a00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015a02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015a06:	2d00      	cmp	r5, #0
 8015a08:	460e      	mov	r6, r1
 8015a0a:	4691      	mov	r9, r2
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	bfb8      	it	lt
 8015a10:	4622      	movlt	r2, r4
 8015a12:	462b      	mov	r3, r5
 8015a14:	f027 0720 	bic.w	r7, r7, #32
 8015a18:	bfbb      	ittet	lt
 8015a1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015a1e:	461d      	movlt	r5, r3
 8015a20:	2300      	movge	r3, #0
 8015a22:	232d      	movlt	r3, #45	; 0x2d
 8015a24:	bfb8      	it	lt
 8015a26:	4614      	movlt	r4, r2
 8015a28:	2f46      	cmp	r7, #70	; 0x46
 8015a2a:	700b      	strb	r3, [r1, #0]
 8015a2c:	d004      	beq.n	8015a38 <__cvt+0x40>
 8015a2e:	2f45      	cmp	r7, #69	; 0x45
 8015a30:	d100      	bne.n	8015a34 <__cvt+0x3c>
 8015a32:	3601      	adds	r6, #1
 8015a34:	2102      	movs	r1, #2
 8015a36:	e000      	b.n	8015a3a <__cvt+0x42>
 8015a38:	2103      	movs	r1, #3
 8015a3a:	ab03      	add	r3, sp, #12
 8015a3c:	9301      	str	r3, [sp, #4]
 8015a3e:	ab02      	add	r3, sp, #8
 8015a40:	9300      	str	r3, [sp, #0]
 8015a42:	4632      	mov	r2, r6
 8015a44:	4653      	mov	r3, sl
 8015a46:	ec45 4b10 	vmov	d0, r4, r5
 8015a4a:	f000 ffc1 	bl	80169d0 <_dtoa_r>
 8015a4e:	2f47      	cmp	r7, #71	; 0x47
 8015a50:	4680      	mov	r8, r0
 8015a52:	d102      	bne.n	8015a5a <__cvt+0x62>
 8015a54:	f019 0f01 	tst.w	r9, #1
 8015a58:	d026      	beq.n	8015aa8 <__cvt+0xb0>
 8015a5a:	2f46      	cmp	r7, #70	; 0x46
 8015a5c:	eb08 0906 	add.w	r9, r8, r6
 8015a60:	d111      	bne.n	8015a86 <__cvt+0x8e>
 8015a62:	f898 3000 	ldrb.w	r3, [r8]
 8015a66:	2b30      	cmp	r3, #48	; 0x30
 8015a68:	d10a      	bne.n	8015a80 <__cvt+0x88>
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	4620      	mov	r0, r4
 8015a70:	4629      	mov	r1, r5
 8015a72:	f7eb f833 	bl	8000adc <__aeabi_dcmpeq>
 8015a76:	b918      	cbnz	r0, 8015a80 <__cvt+0x88>
 8015a78:	f1c6 0601 	rsb	r6, r6, #1
 8015a7c:	f8ca 6000 	str.w	r6, [sl]
 8015a80:	f8da 3000 	ldr.w	r3, [sl]
 8015a84:	4499      	add	r9, r3
 8015a86:	2200      	movs	r2, #0
 8015a88:	2300      	movs	r3, #0
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	4629      	mov	r1, r5
 8015a8e:	f7eb f825 	bl	8000adc <__aeabi_dcmpeq>
 8015a92:	b938      	cbnz	r0, 8015aa4 <__cvt+0xac>
 8015a94:	2230      	movs	r2, #48	; 0x30
 8015a96:	9b03      	ldr	r3, [sp, #12]
 8015a98:	454b      	cmp	r3, r9
 8015a9a:	d205      	bcs.n	8015aa8 <__cvt+0xb0>
 8015a9c:	1c59      	adds	r1, r3, #1
 8015a9e:	9103      	str	r1, [sp, #12]
 8015aa0:	701a      	strb	r2, [r3, #0]
 8015aa2:	e7f8      	b.n	8015a96 <__cvt+0x9e>
 8015aa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8015aa8:	9b03      	ldr	r3, [sp, #12]
 8015aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015aac:	eba3 0308 	sub.w	r3, r3, r8
 8015ab0:	4640      	mov	r0, r8
 8015ab2:	6013      	str	r3, [r2, #0]
 8015ab4:	b004      	add	sp, #16
 8015ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015aba <__exponent>:
 8015aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015abc:	2900      	cmp	r1, #0
 8015abe:	4604      	mov	r4, r0
 8015ac0:	bfba      	itte	lt
 8015ac2:	4249      	neglt	r1, r1
 8015ac4:	232d      	movlt	r3, #45	; 0x2d
 8015ac6:	232b      	movge	r3, #43	; 0x2b
 8015ac8:	2909      	cmp	r1, #9
 8015aca:	f804 2b02 	strb.w	r2, [r4], #2
 8015ace:	7043      	strb	r3, [r0, #1]
 8015ad0:	dd20      	ble.n	8015b14 <__exponent+0x5a>
 8015ad2:	f10d 0307 	add.w	r3, sp, #7
 8015ad6:	461f      	mov	r7, r3
 8015ad8:	260a      	movs	r6, #10
 8015ada:	fb91 f5f6 	sdiv	r5, r1, r6
 8015ade:	fb06 1115 	mls	r1, r6, r5, r1
 8015ae2:	3130      	adds	r1, #48	; 0x30
 8015ae4:	2d09      	cmp	r5, #9
 8015ae6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015aea:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8015aee:	4629      	mov	r1, r5
 8015af0:	dc09      	bgt.n	8015b06 <__exponent+0x4c>
 8015af2:	3130      	adds	r1, #48	; 0x30
 8015af4:	3b02      	subs	r3, #2
 8015af6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015afa:	42bb      	cmp	r3, r7
 8015afc:	4622      	mov	r2, r4
 8015afe:	d304      	bcc.n	8015b0a <__exponent+0x50>
 8015b00:	1a10      	subs	r0, r2, r0
 8015b02:	b003      	add	sp, #12
 8015b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b06:	4613      	mov	r3, r2
 8015b08:	e7e7      	b.n	8015ada <__exponent+0x20>
 8015b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b0e:	f804 2b01 	strb.w	r2, [r4], #1
 8015b12:	e7f2      	b.n	8015afa <__exponent+0x40>
 8015b14:	2330      	movs	r3, #48	; 0x30
 8015b16:	4419      	add	r1, r3
 8015b18:	7083      	strb	r3, [r0, #2]
 8015b1a:	1d02      	adds	r2, r0, #4
 8015b1c:	70c1      	strb	r1, [r0, #3]
 8015b1e:	e7ef      	b.n	8015b00 <__exponent+0x46>

08015b20 <_printf_float>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	b08d      	sub	sp, #52	; 0x34
 8015b26:	460c      	mov	r4, r1
 8015b28:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015b2c:	4616      	mov	r6, r2
 8015b2e:	461f      	mov	r7, r3
 8015b30:	4605      	mov	r5, r0
 8015b32:	f001 fec7 	bl	80178c4 <_localeconv_r>
 8015b36:	6803      	ldr	r3, [r0, #0]
 8015b38:	9304      	str	r3, [sp, #16]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7ea fb48 	bl	80001d0 <strlen>
 8015b40:	2300      	movs	r3, #0
 8015b42:	930a      	str	r3, [sp, #40]	; 0x28
 8015b44:	f8d8 3000 	ldr.w	r3, [r8]
 8015b48:	9005      	str	r0, [sp, #20]
 8015b4a:	3307      	adds	r3, #7
 8015b4c:	f023 0307 	bic.w	r3, r3, #7
 8015b50:	f103 0208 	add.w	r2, r3, #8
 8015b54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015b58:	f8d4 b000 	ldr.w	fp, [r4]
 8015b5c:	f8c8 2000 	str.w	r2, [r8]
 8015b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015b68:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015b6c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015b70:	9307      	str	r3, [sp, #28]
 8015b72:	f8cd 8018 	str.w	r8, [sp, #24]
 8015b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b7a:	4ba7      	ldr	r3, [pc, #668]	; (8015e18 <_printf_float+0x2f8>)
 8015b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b80:	f7ea ffde 	bl	8000b40 <__aeabi_dcmpun>
 8015b84:	bb70      	cbnz	r0, 8015be4 <_printf_float+0xc4>
 8015b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b8a:	4ba3      	ldr	r3, [pc, #652]	; (8015e18 <_printf_float+0x2f8>)
 8015b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b90:	f7ea ffb8 	bl	8000b04 <__aeabi_dcmple>
 8015b94:	bb30      	cbnz	r0, 8015be4 <_printf_float+0xc4>
 8015b96:	2200      	movs	r2, #0
 8015b98:	2300      	movs	r3, #0
 8015b9a:	4640      	mov	r0, r8
 8015b9c:	4649      	mov	r1, r9
 8015b9e:	f7ea ffa7 	bl	8000af0 <__aeabi_dcmplt>
 8015ba2:	b110      	cbz	r0, 8015baa <_printf_float+0x8a>
 8015ba4:	232d      	movs	r3, #45	; 0x2d
 8015ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015baa:	4a9c      	ldr	r2, [pc, #624]	; (8015e1c <_printf_float+0x2fc>)
 8015bac:	4b9c      	ldr	r3, [pc, #624]	; (8015e20 <_printf_float+0x300>)
 8015bae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015bb2:	bf8c      	ite	hi
 8015bb4:	4690      	movhi	r8, r2
 8015bb6:	4698      	movls	r8, r3
 8015bb8:	2303      	movs	r3, #3
 8015bba:	f02b 0204 	bic.w	r2, fp, #4
 8015bbe:	6123      	str	r3, [r4, #16]
 8015bc0:	6022      	str	r2, [r4, #0]
 8015bc2:	f04f 0900 	mov.w	r9, #0
 8015bc6:	9700      	str	r7, [sp, #0]
 8015bc8:	4633      	mov	r3, r6
 8015bca:	aa0b      	add	r2, sp, #44	; 0x2c
 8015bcc:	4621      	mov	r1, r4
 8015bce:	4628      	mov	r0, r5
 8015bd0:	f000 f9e6 	bl	8015fa0 <_printf_common>
 8015bd4:	3001      	adds	r0, #1
 8015bd6:	f040 808d 	bne.w	8015cf4 <_printf_float+0x1d4>
 8015bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bde:	b00d      	add	sp, #52	; 0x34
 8015be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be4:	4642      	mov	r2, r8
 8015be6:	464b      	mov	r3, r9
 8015be8:	4640      	mov	r0, r8
 8015bea:	4649      	mov	r1, r9
 8015bec:	f7ea ffa8 	bl	8000b40 <__aeabi_dcmpun>
 8015bf0:	b110      	cbz	r0, 8015bf8 <_printf_float+0xd8>
 8015bf2:	4a8c      	ldr	r2, [pc, #560]	; (8015e24 <_printf_float+0x304>)
 8015bf4:	4b8c      	ldr	r3, [pc, #560]	; (8015e28 <_printf_float+0x308>)
 8015bf6:	e7da      	b.n	8015bae <_printf_float+0x8e>
 8015bf8:	6861      	ldr	r1, [r4, #4]
 8015bfa:	1c4b      	adds	r3, r1, #1
 8015bfc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015c00:	a80a      	add	r0, sp, #40	; 0x28
 8015c02:	d13e      	bne.n	8015c82 <_printf_float+0x162>
 8015c04:	2306      	movs	r3, #6
 8015c06:	6063      	str	r3, [r4, #4]
 8015c08:	2300      	movs	r3, #0
 8015c0a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015c0e:	ab09      	add	r3, sp, #36	; 0x24
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	ec49 8b10 	vmov	d0, r8, r9
 8015c16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015c1a:	6022      	str	r2, [r4, #0]
 8015c1c:	f8cd a004 	str.w	sl, [sp, #4]
 8015c20:	6861      	ldr	r1, [r4, #4]
 8015c22:	4628      	mov	r0, r5
 8015c24:	f7ff fee8 	bl	80159f8 <__cvt>
 8015c28:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015c2c:	2b47      	cmp	r3, #71	; 0x47
 8015c2e:	4680      	mov	r8, r0
 8015c30:	d109      	bne.n	8015c46 <_printf_float+0x126>
 8015c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c34:	1cd8      	adds	r0, r3, #3
 8015c36:	db02      	blt.n	8015c3e <_printf_float+0x11e>
 8015c38:	6862      	ldr	r2, [r4, #4]
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	dd47      	ble.n	8015cce <_printf_float+0x1ae>
 8015c3e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015c42:	fa5f fa8a 	uxtb.w	sl, sl
 8015c46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c4c:	d824      	bhi.n	8015c98 <_printf_float+0x178>
 8015c4e:	3901      	subs	r1, #1
 8015c50:	4652      	mov	r2, sl
 8015c52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015c56:	9109      	str	r1, [sp, #36]	; 0x24
 8015c58:	f7ff ff2f 	bl	8015aba <__exponent>
 8015c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c5e:	1813      	adds	r3, r2, r0
 8015c60:	2a01      	cmp	r2, #1
 8015c62:	4681      	mov	r9, r0
 8015c64:	6123      	str	r3, [r4, #16]
 8015c66:	dc02      	bgt.n	8015c6e <_printf_float+0x14e>
 8015c68:	6822      	ldr	r2, [r4, #0]
 8015c6a:	07d1      	lsls	r1, r2, #31
 8015c6c:	d501      	bpl.n	8015c72 <_printf_float+0x152>
 8015c6e:	3301      	adds	r3, #1
 8015c70:	6123      	str	r3, [r4, #16]
 8015c72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d0a5      	beq.n	8015bc6 <_printf_float+0xa6>
 8015c7a:	232d      	movs	r3, #45	; 0x2d
 8015c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c80:	e7a1      	b.n	8015bc6 <_printf_float+0xa6>
 8015c82:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015c86:	f000 8177 	beq.w	8015f78 <_printf_float+0x458>
 8015c8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015c8e:	d1bb      	bne.n	8015c08 <_printf_float+0xe8>
 8015c90:	2900      	cmp	r1, #0
 8015c92:	d1b9      	bne.n	8015c08 <_printf_float+0xe8>
 8015c94:	2301      	movs	r3, #1
 8015c96:	e7b6      	b.n	8015c06 <_printf_float+0xe6>
 8015c98:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015c9c:	d119      	bne.n	8015cd2 <_printf_float+0x1b2>
 8015c9e:	2900      	cmp	r1, #0
 8015ca0:	6863      	ldr	r3, [r4, #4]
 8015ca2:	dd0c      	ble.n	8015cbe <_printf_float+0x19e>
 8015ca4:	6121      	str	r1, [r4, #16]
 8015ca6:	b913      	cbnz	r3, 8015cae <_printf_float+0x18e>
 8015ca8:	6822      	ldr	r2, [r4, #0]
 8015caa:	07d2      	lsls	r2, r2, #31
 8015cac:	d502      	bpl.n	8015cb4 <_printf_float+0x194>
 8015cae:	3301      	adds	r3, #1
 8015cb0:	440b      	add	r3, r1
 8015cb2:	6123      	str	r3, [r4, #16]
 8015cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cb6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015cb8:	f04f 0900 	mov.w	r9, #0
 8015cbc:	e7d9      	b.n	8015c72 <_printf_float+0x152>
 8015cbe:	b913      	cbnz	r3, 8015cc6 <_printf_float+0x1a6>
 8015cc0:	6822      	ldr	r2, [r4, #0]
 8015cc2:	07d0      	lsls	r0, r2, #31
 8015cc4:	d501      	bpl.n	8015cca <_printf_float+0x1aa>
 8015cc6:	3302      	adds	r3, #2
 8015cc8:	e7f3      	b.n	8015cb2 <_printf_float+0x192>
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e7f1      	b.n	8015cb2 <_printf_float+0x192>
 8015cce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015cd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015cd6:	4293      	cmp	r3, r2
 8015cd8:	db05      	blt.n	8015ce6 <_printf_float+0x1c6>
 8015cda:	6822      	ldr	r2, [r4, #0]
 8015cdc:	6123      	str	r3, [r4, #16]
 8015cde:	07d1      	lsls	r1, r2, #31
 8015ce0:	d5e8      	bpl.n	8015cb4 <_printf_float+0x194>
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	e7e5      	b.n	8015cb2 <_printf_float+0x192>
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	bfd4      	ite	le
 8015cea:	f1c3 0302 	rsble	r3, r3, #2
 8015cee:	2301      	movgt	r3, #1
 8015cf0:	4413      	add	r3, r2
 8015cf2:	e7de      	b.n	8015cb2 <_printf_float+0x192>
 8015cf4:	6823      	ldr	r3, [r4, #0]
 8015cf6:	055a      	lsls	r2, r3, #21
 8015cf8:	d407      	bmi.n	8015d0a <_printf_float+0x1ea>
 8015cfa:	6923      	ldr	r3, [r4, #16]
 8015cfc:	4642      	mov	r2, r8
 8015cfe:	4631      	mov	r1, r6
 8015d00:	4628      	mov	r0, r5
 8015d02:	47b8      	blx	r7
 8015d04:	3001      	adds	r0, #1
 8015d06:	d12b      	bne.n	8015d60 <_printf_float+0x240>
 8015d08:	e767      	b.n	8015bda <_printf_float+0xba>
 8015d0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015d0e:	f240 80dc 	bls.w	8015eca <_printf_float+0x3aa>
 8015d12:	2200      	movs	r2, #0
 8015d14:	2300      	movs	r3, #0
 8015d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d1a:	f7ea fedf 	bl	8000adc <__aeabi_dcmpeq>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	d033      	beq.n	8015d8a <_printf_float+0x26a>
 8015d22:	2301      	movs	r3, #1
 8015d24:	4a41      	ldr	r2, [pc, #260]	; (8015e2c <_printf_float+0x30c>)
 8015d26:	4631      	mov	r1, r6
 8015d28:	4628      	mov	r0, r5
 8015d2a:	47b8      	blx	r7
 8015d2c:	3001      	adds	r0, #1
 8015d2e:	f43f af54 	beq.w	8015bda <_printf_float+0xba>
 8015d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d36:	429a      	cmp	r2, r3
 8015d38:	db02      	blt.n	8015d40 <_printf_float+0x220>
 8015d3a:	6823      	ldr	r3, [r4, #0]
 8015d3c:	07d8      	lsls	r0, r3, #31
 8015d3e:	d50f      	bpl.n	8015d60 <_printf_float+0x240>
 8015d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d44:	4631      	mov	r1, r6
 8015d46:	4628      	mov	r0, r5
 8015d48:	47b8      	blx	r7
 8015d4a:	3001      	adds	r0, #1
 8015d4c:	f43f af45 	beq.w	8015bda <_printf_float+0xba>
 8015d50:	f04f 0800 	mov.w	r8, #0
 8015d54:	f104 091a 	add.w	r9, r4, #26
 8015d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d5a:	3b01      	subs	r3, #1
 8015d5c:	4543      	cmp	r3, r8
 8015d5e:	dc09      	bgt.n	8015d74 <_printf_float+0x254>
 8015d60:	6823      	ldr	r3, [r4, #0]
 8015d62:	079b      	lsls	r3, r3, #30
 8015d64:	f100 8103 	bmi.w	8015f6e <_printf_float+0x44e>
 8015d68:	68e0      	ldr	r0, [r4, #12]
 8015d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d6c:	4298      	cmp	r0, r3
 8015d6e:	bfb8      	it	lt
 8015d70:	4618      	movlt	r0, r3
 8015d72:	e734      	b.n	8015bde <_printf_float+0xbe>
 8015d74:	2301      	movs	r3, #1
 8015d76:	464a      	mov	r2, r9
 8015d78:	4631      	mov	r1, r6
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	47b8      	blx	r7
 8015d7e:	3001      	adds	r0, #1
 8015d80:	f43f af2b 	beq.w	8015bda <_printf_float+0xba>
 8015d84:	f108 0801 	add.w	r8, r8, #1
 8015d88:	e7e6      	b.n	8015d58 <_printf_float+0x238>
 8015d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	dc2b      	bgt.n	8015de8 <_printf_float+0x2c8>
 8015d90:	2301      	movs	r3, #1
 8015d92:	4a26      	ldr	r2, [pc, #152]	; (8015e2c <_printf_float+0x30c>)
 8015d94:	4631      	mov	r1, r6
 8015d96:	4628      	mov	r0, r5
 8015d98:	47b8      	blx	r7
 8015d9a:	3001      	adds	r0, #1
 8015d9c:	f43f af1d 	beq.w	8015bda <_printf_float+0xba>
 8015da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015da2:	b923      	cbnz	r3, 8015dae <_printf_float+0x28e>
 8015da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015da6:	b913      	cbnz	r3, 8015dae <_printf_float+0x28e>
 8015da8:	6823      	ldr	r3, [r4, #0]
 8015daa:	07d9      	lsls	r1, r3, #31
 8015dac:	d5d8      	bpl.n	8015d60 <_printf_float+0x240>
 8015dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015db2:	4631      	mov	r1, r6
 8015db4:	4628      	mov	r0, r5
 8015db6:	47b8      	blx	r7
 8015db8:	3001      	adds	r0, #1
 8015dba:	f43f af0e 	beq.w	8015bda <_printf_float+0xba>
 8015dbe:	f04f 0900 	mov.w	r9, #0
 8015dc2:	f104 0a1a 	add.w	sl, r4, #26
 8015dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dc8:	425b      	negs	r3, r3
 8015dca:	454b      	cmp	r3, r9
 8015dcc:	dc01      	bgt.n	8015dd2 <_printf_float+0x2b2>
 8015dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dd0:	e794      	b.n	8015cfc <_printf_float+0x1dc>
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	4652      	mov	r2, sl
 8015dd6:	4631      	mov	r1, r6
 8015dd8:	4628      	mov	r0, r5
 8015dda:	47b8      	blx	r7
 8015ddc:	3001      	adds	r0, #1
 8015dde:	f43f aefc 	beq.w	8015bda <_printf_float+0xba>
 8015de2:	f109 0901 	add.w	r9, r9, #1
 8015de6:	e7ee      	b.n	8015dc6 <_printf_float+0x2a6>
 8015de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015dec:	429a      	cmp	r2, r3
 8015dee:	bfa8      	it	ge
 8015df0:	461a      	movge	r2, r3
 8015df2:	2a00      	cmp	r2, #0
 8015df4:	4691      	mov	r9, r2
 8015df6:	dd07      	ble.n	8015e08 <_printf_float+0x2e8>
 8015df8:	4613      	mov	r3, r2
 8015dfa:	4631      	mov	r1, r6
 8015dfc:	4642      	mov	r2, r8
 8015dfe:	4628      	mov	r0, r5
 8015e00:	47b8      	blx	r7
 8015e02:	3001      	adds	r0, #1
 8015e04:	f43f aee9 	beq.w	8015bda <_printf_float+0xba>
 8015e08:	f104 031a 	add.w	r3, r4, #26
 8015e0c:	f04f 0b00 	mov.w	fp, #0
 8015e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015e14:	9306      	str	r3, [sp, #24]
 8015e16:	e015      	b.n	8015e44 <_printf_float+0x324>
 8015e18:	7fefffff 	.word	0x7fefffff
 8015e1c:	0801c359 	.word	0x0801c359
 8015e20:	0801c355 	.word	0x0801c355
 8015e24:	0801c361 	.word	0x0801c361
 8015e28:	0801c35d 	.word	0x0801c35d
 8015e2c:	0801c5ac 	.word	0x0801c5ac
 8015e30:	2301      	movs	r3, #1
 8015e32:	9a06      	ldr	r2, [sp, #24]
 8015e34:	4631      	mov	r1, r6
 8015e36:	4628      	mov	r0, r5
 8015e38:	47b8      	blx	r7
 8015e3a:	3001      	adds	r0, #1
 8015e3c:	f43f aecd 	beq.w	8015bda <_printf_float+0xba>
 8015e40:	f10b 0b01 	add.w	fp, fp, #1
 8015e44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015e48:	ebaa 0309 	sub.w	r3, sl, r9
 8015e4c:	455b      	cmp	r3, fp
 8015e4e:	dcef      	bgt.n	8015e30 <_printf_float+0x310>
 8015e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e54:	429a      	cmp	r2, r3
 8015e56:	44d0      	add	r8, sl
 8015e58:	db15      	blt.n	8015e86 <_printf_float+0x366>
 8015e5a:	6823      	ldr	r3, [r4, #0]
 8015e5c:	07da      	lsls	r2, r3, #31
 8015e5e:	d412      	bmi.n	8015e86 <_printf_float+0x366>
 8015e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e64:	eba3 020a 	sub.w	r2, r3, sl
 8015e68:	eba3 0a01 	sub.w	sl, r3, r1
 8015e6c:	4592      	cmp	sl, r2
 8015e6e:	bfa8      	it	ge
 8015e70:	4692      	movge	sl, r2
 8015e72:	f1ba 0f00 	cmp.w	sl, #0
 8015e76:	dc0e      	bgt.n	8015e96 <_printf_float+0x376>
 8015e78:	f04f 0800 	mov.w	r8, #0
 8015e7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e80:	f104 091a 	add.w	r9, r4, #26
 8015e84:	e019      	b.n	8015eba <_printf_float+0x39a>
 8015e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	47b8      	blx	r7
 8015e90:	3001      	adds	r0, #1
 8015e92:	d1e5      	bne.n	8015e60 <_printf_float+0x340>
 8015e94:	e6a1      	b.n	8015bda <_printf_float+0xba>
 8015e96:	4653      	mov	r3, sl
 8015e98:	4642      	mov	r2, r8
 8015e9a:	4631      	mov	r1, r6
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	47b8      	blx	r7
 8015ea0:	3001      	adds	r0, #1
 8015ea2:	d1e9      	bne.n	8015e78 <_printf_float+0x358>
 8015ea4:	e699      	b.n	8015bda <_printf_float+0xba>
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	464a      	mov	r2, r9
 8015eaa:	4631      	mov	r1, r6
 8015eac:	4628      	mov	r0, r5
 8015eae:	47b8      	blx	r7
 8015eb0:	3001      	adds	r0, #1
 8015eb2:	f43f ae92 	beq.w	8015bda <_printf_float+0xba>
 8015eb6:	f108 0801 	add.w	r8, r8, #1
 8015eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ebe:	1a9b      	subs	r3, r3, r2
 8015ec0:	eba3 030a 	sub.w	r3, r3, sl
 8015ec4:	4543      	cmp	r3, r8
 8015ec6:	dcee      	bgt.n	8015ea6 <_printf_float+0x386>
 8015ec8:	e74a      	b.n	8015d60 <_printf_float+0x240>
 8015eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ecc:	2a01      	cmp	r2, #1
 8015ece:	dc01      	bgt.n	8015ed4 <_printf_float+0x3b4>
 8015ed0:	07db      	lsls	r3, r3, #31
 8015ed2:	d53a      	bpl.n	8015f4a <_printf_float+0x42a>
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	4642      	mov	r2, r8
 8015ed8:	4631      	mov	r1, r6
 8015eda:	4628      	mov	r0, r5
 8015edc:	47b8      	blx	r7
 8015ede:	3001      	adds	r0, #1
 8015ee0:	f43f ae7b 	beq.w	8015bda <_printf_float+0xba>
 8015ee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ee8:	4631      	mov	r1, r6
 8015eea:	4628      	mov	r0, r5
 8015eec:	47b8      	blx	r7
 8015eee:	3001      	adds	r0, #1
 8015ef0:	f108 0801 	add.w	r8, r8, #1
 8015ef4:	f43f ae71 	beq.w	8015bda <_printf_float+0xba>
 8015ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015efa:	2200      	movs	r2, #0
 8015efc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8015f00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f04:	2300      	movs	r3, #0
 8015f06:	f7ea fde9 	bl	8000adc <__aeabi_dcmpeq>
 8015f0a:	b9c8      	cbnz	r0, 8015f40 <_printf_float+0x420>
 8015f0c:	4653      	mov	r3, sl
 8015f0e:	4642      	mov	r2, r8
 8015f10:	4631      	mov	r1, r6
 8015f12:	4628      	mov	r0, r5
 8015f14:	47b8      	blx	r7
 8015f16:	3001      	adds	r0, #1
 8015f18:	d10e      	bne.n	8015f38 <_printf_float+0x418>
 8015f1a:	e65e      	b.n	8015bda <_printf_float+0xba>
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	4652      	mov	r2, sl
 8015f20:	4631      	mov	r1, r6
 8015f22:	4628      	mov	r0, r5
 8015f24:	47b8      	blx	r7
 8015f26:	3001      	adds	r0, #1
 8015f28:	f43f ae57 	beq.w	8015bda <_printf_float+0xba>
 8015f2c:	f108 0801 	add.w	r8, r8, #1
 8015f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f32:	3b01      	subs	r3, #1
 8015f34:	4543      	cmp	r3, r8
 8015f36:	dcf1      	bgt.n	8015f1c <_printf_float+0x3fc>
 8015f38:	464b      	mov	r3, r9
 8015f3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015f3e:	e6de      	b.n	8015cfe <_printf_float+0x1de>
 8015f40:	f04f 0800 	mov.w	r8, #0
 8015f44:	f104 0a1a 	add.w	sl, r4, #26
 8015f48:	e7f2      	b.n	8015f30 <_printf_float+0x410>
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	e7df      	b.n	8015f0e <_printf_float+0x3ee>
 8015f4e:	2301      	movs	r3, #1
 8015f50:	464a      	mov	r2, r9
 8015f52:	4631      	mov	r1, r6
 8015f54:	4628      	mov	r0, r5
 8015f56:	47b8      	blx	r7
 8015f58:	3001      	adds	r0, #1
 8015f5a:	f43f ae3e 	beq.w	8015bda <_printf_float+0xba>
 8015f5e:	f108 0801 	add.w	r8, r8, #1
 8015f62:	68e3      	ldr	r3, [r4, #12]
 8015f64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f66:	1a9b      	subs	r3, r3, r2
 8015f68:	4543      	cmp	r3, r8
 8015f6a:	dcf0      	bgt.n	8015f4e <_printf_float+0x42e>
 8015f6c:	e6fc      	b.n	8015d68 <_printf_float+0x248>
 8015f6e:	f04f 0800 	mov.w	r8, #0
 8015f72:	f104 0919 	add.w	r9, r4, #25
 8015f76:	e7f4      	b.n	8015f62 <_printf_float+0x442>
 8015f78:	2900      	cmp	r1, #0
 8015f7a:	f43f ae8b 	beq.w	8015c94 <_printf_float+0x174>
 8015f7e:	2300      	movs	r3, #0
 8015f80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015f84:	ab09      	add	r3, sp, #36	; 0x24
 8015f86:	9300      	str	r3, [sp, #0]
 8015f88:	ec49 8b10 	vmov	d0, r8, r9
 8015f8c:	6022      	str	r2, [r4, #0]
 8015f8e:	f8cd a004 	str.w	sl, [sp, #4]
 8015f92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015f96:	4628      	mov	r0, r5
 8015f98:	f7ff fd2e 	bl	80159f8 <__cvt>
 8015f9c:	4680      	mov	r8, r0
 8015f9e:	e648      	b.n	8015c32 <_printf_float+0x112>

08015fa0 <_printf_common>:
 8015fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fa4:	4691      	mov	r9, r2
 8015fa6:	461f      	mov	r7, r3
 8015fa8:	688a      	ldr	r2, [r1, #8]
 8015faa:	690b      	ldr	r3, [r1, #16]
 8015fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015fb0:	4293      	cmp	r3, r2
 8015fb2:	bfb8      	it	lt
 8015fb4:	4613      	movlt	r3, r2
 8015fb6:	f8c9 3000 	str.w	r3, [r9]
 8015fba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015fbe:	4606      	mov	r6, r0
 8015fc0:	460c      	mov	r4, r1
 8015fc2:	b112      	cbz	r2, 8015fca <_printf_common+0x2a>
 8015fc4:	3301      	adds	r3, #1
 8015fc6:	f8c9 3000 	str.w	r3, [r9]
 8015fca:	6823      	ldr	r3, [r4, #0]
 8015fcc:	0699      	lsls	r1, r3, #26
 8015fce:	bf42      	ittt	mi
 8015fd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015fd4:	3302      	addmi	r3, #2
 8015fd6:	f8c9 3000 	strmi.w	r3, [r9]
 8015fda:	6825      	ldr	r5, [r4, #0]
 8015fdc:	f015 0506 	ands.w	r5, r5, #6
 8015fe0:	d107      	bne.n	8015ff2 <_printf_common+0x52>
 8015fe2:	f104 0a19 	add.w	sl, r4, #25
 8015fe6:	68e3      	ldr	r3, [r4, #12]
 8015fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8015fec:	1a9b      	subs	r3, r3, r2
 8015fee:	42ab      	cmp	r3, r5
 8015ff0:	dc28      	bgt.n	8016044 <_printf_common+0xa4>
 8015ff2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015ff6:	6822      	ldr	r2, [r4, #0]
 8015ff8:	3300      	adds	r3, #0
 8015ffa:	bf18      	it	ne
 8015ffc:	2301      	movne	r3, #1
 8015ffe:	0692      	lsls	r2, r2, #26
 8016000:	d42d      	bmi.n	801605e <_printf_common+0xbe>
 8016002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016006:	4639      	mov	r1, r7
 8016008:	4630      	mov	r0, r6
 801600a:	47c0      	blx	r8
 801600c:	3001      	adds	r0, #1
 801600e:	d020      	beq.n	8016052 <_printf_common+0xb2>
 8016010:	6823      	ldr	r3, [r4, #0]
 8016012:	68e5      	ldr	r5, [r4, #12]
 8016014:	f8d9 2000 	ldr.w	r2, [r9]
 8016018:	f003 0306 	and.w	r3, r3, #6
 801601c:	2b04      	cmp	r3, #4
 801601e:	bf08      	it	eq
 8016020:	1aad      	subeq	r5, r5, r2
 8016022:	68a3      	ldr	r3, [r4, #8]
 8016024:	6922      	ldr	r2, [r4, #16]
 8016026:	bf0c      	ite	eq
 8016028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801602c:	2500      	movne	r5, #0
 801602e:	4293      	cmp	r3, r2
 8016030:	bfc4      	itt	gt
 8016032:	1a9b      	subgt	r3, r3, r2
 8016034:	18ed      	addgt	r5, r5, r3
 8016036:	f04f 0900 	mov.w	r9, #0
 801603a:	341a      	adds	r4, #26
 801603c:	454d      	cmp	r5, r9
 801603e:	d11a      	bne.n	8016076 <_printf_common+0xd6>
 8016040:	2000      	movs	r0, #0
 8016042:	e008      	b.n	8016056 <_printf_common+0xb6>
 8016044:	2301      	movs	r3, #1
 8016046:	4652      	mov	r2, sl
 8016048:	4639      	mov	r1, r7
 801604a:	4630      	mov	r0, r6
 801604c:	47c0      	blx	r8
 801604e:	3001      	adds	r0, #1
 8016050:	d103      	bne.n	801605a <_printf_common+0xba>
 8016052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801605a:	3501      	adds	r5, #1
 801605c:	e7c3      	b.n	8015fe6 <_printf_common+0x46>
 801605e:	18e1      	adds	r1, r4, r3
 8016060:	1c5a      	adds	r2, r3, #1
 8016062:	2030      	movs	r0, #48	; 0x30
 8016064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016068:	4422      	add	r2, r4
 801606a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801606e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016072:	3302      	adds	r3, #2
 8016074:	e7c5      	b.n	8016002 <_printf_common+0x62>
 8016076:	2301      	movs	r3, #1
 8016078:	4622      	mov	r2, r4
 801607a:	4639      	mov	r1, r7
 801607c:	4630      	mov	r0, r6
 801607e:	47c0      	blx	r8
 8016080:	3001      	adds	r0, #1
 8016082:	d0e6      	beq.n	8016052 <_printf_common+0xb2>
 8016084:	f109 0901 	add.w	r9, r9, #1
 8016088:	e7d8      	b.n	801603c <_printf_common+0x9c>
	...

0801608c <_printf_i>:
 801608c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016090:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016094:	460c      	mov	r4, r1
 8016096:	7e09      	ldrb	r1, [r1, #24]
 8016098:	b085      	sub	sp, #20
 801609a:	296e      	cmp	r1, #110	; 0x6e
 801609c:	4617      	mov	r7, r2
 801609e:	4606      	mov	r6, r0
 80160a0:	4698      	mov	r8, r3
 80160a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160a4:	f000 80b3 	beq.w	801620e <_printf_i+0x182>
 80160a8:	d822      	bhi.n	80160f0 <_printf_i+0x64>
 80160aa:	2963      	cmp	r1, #99	; 0x63
 80160ac:	d036      	beq.n	801611c <_printf_i+0x90>
 80160ae:	d80a      	bhi.n	80160c6 <_printf_i+0x3a>
 80160b0:	2900      	cmp	r1, #0
 80160b2:	f000 80b9 	beq.w	8016228 <_printf_i+0x19c>
 80160b6:	2958      	cmp	r1, #88	; 0x58
 80160b8:	f000 8083 	beq.w	80161c2 <_printf_i+0x136>
 80160bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80160c4:	e032      	b.n	801612c <_printf_i+0xa0>
 80160c6:	2964      	cmp	r1, #100	; 0x64
 80160c8:	d001      	beq.n	80160ce <_printf_i+0x42>
 80160ca:	2969      	cmp	r1, #105	; 0x69
 80160cc:	d1f6      	bne.n	80160bc <_printf_i+0x30>
 80160ce:	6820      	ldr	r0, [r4, #0]
 80160d0:	6813      	ldr	r3, [r2, #0]
 80160d2:	0605      	lsls	r5, r0, #24
 80160d4:	f103 0104 	add.w	r1, r3, #4
 80160d8:	d52a      	bpl.n	8016130 <_printf_i+0xa4>
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	6011      	str	r1, [r2, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	da03      	bge.n	80160ea <_printf_i+0x5e>
 80160e2:	222d      	movs	r2, #45	; 0x2d
 80160e4:	425b      	negs	r3, r3
 80160e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80160ea:	486f      	ldr	r0, [pc, #444]	; (80162a8 <_printf_i+0x21c>)
 80160ec:	220a      	movs	r2, #10
 80160ee:	e039      	b.n	8016164 <_printf_i+0xd8>
 80160f0:	2973      	cmp	r1, #115	; 0x73
 80160f2:	f000 809d 	beq.w	8016230 <_printf_i+0x1a4>
 80160f6:	d808      	bhi.n	801610a <_printf_i+0x7e>
 80160f8:	296f      	cmp	r1, #111	; 0x6f
 80160fa:	d020      	beq.n	801613e <_printf_i+0xb2>
 80160fc:	2970      	cmp	r1, #112	; 0x70
 80160fe:	d1dd      	bne.n	80160bc <_printf_i+0x30>
 8016100:	6823      	ldr	r3, [r4, #0]
 8016102:	f043 0320 	orr.w	r3, r3, #32
 8016106:	6023      	str	r3, [r4, #0]
 8016108:	e003      	b.n	8016112 <_printf_i+0x86>
 801610a:	2975      	cmp	r1, #117	; 0x75
 801610c:	d017      	beq.n	801613e <_printf_i+0xb2>
 801610e:	2978      	cmp	r1, #120	; 0x78
 8016110:	d1d4      	bne.n	80160bc <_printf_i+0x30>
 8016112:	2378      	movs	r3, #120	; 0x78
 8016114:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016118:	4864      	ldr	r0, [pc, #400]	; (80162ac <_printf_i+0x220>)
 801611a:	e055      	b.n	80161c8 <_printf_i+0x13c>
 801611c:	6813      	ldr	r3, [r2, #0]
 801611e:	1d19      	adds	r1, r3, #4
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	6011      	str	r1, [r2, #0]
 8016124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801612c:	2301      	movs	r3, #1
 801612e:	e08c      	b.n	801624a <_printf_i+0x1be>
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	6011      	str	r1, [r2, #0]
 8016134:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016138:	bf18      	it	ne
 801613a:	b21b      	sxthne	r3, r3
 801613c:	e7cf      	b.n	80160de <_printf_i+0x52>
 801613e:	6813      	ldr	r3, [r2, #0]
 8016140:	6825      	ldr	r5, [r4, #0]
 8016142:	1d18      	adds	r0, r3, #4
 8016144:	6010      	str	r0, [r2, #0]
 8016146:	0628      	lsls	r0, r5, #24
 8016148:	d501      	bpl.n	801614e <_printf_i+0xc2>
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	e002      	b.n	8016154 <_printf_i+0xc8>
 801614e:	0668      	lsls	r0, r5, #25
 8016150:	d5fb      	bpl.n	801614a <_printf_i+0xbe>
 8016152:	881b      	ldrh	r3, [r3, #0]
 8016154:	4854      	ldr	r0, [pc, #336]	; (80162a8 <_printf_i+0x21c>)
 8016156:	296f      	cmp	r1, #111	; 0x6f
 8016158:	bf14      	ite	ne
 801615a:	220a      	movne	r2, #10
 801615c:	2208      	moveq	r2, #8
 801615e:	2100      	movs	r1, #0
 8016160:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016164:	6865      	ldr	r5, [r4, #4]
 8016166:	60a5      	str	r5, [r4, #8]
 8016168:	2d00      	cmp	r5, #0
 801616a:	f2c0 8095 	blt.w	8016298 <_printf_i+0x20c>
 801616e:	6821      	ldr	r1, [r4, #0]
 8016170:	f021 0104 	bic.w	r1, r1, #4
 8016174:	6021      	str	r1, [r4, #0]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d13d      	bne.n	80161f6 <_printf_i+0x16a>
 801617a:	2d00      	cmp	r5, #0
 801617c:	f040 808e 	bne.w	801629c <_printf_i+0x210>
 8016180:	4665      	mov	r5, ip
 8016182:	2a08      	cmp	r2, #8
 8016184:	d10b      	bne.n	801619e <_printf_i+0x112>
 8016186:	6823      	ldr	r3, [r4, #0]
 8016188:	07db      	lsls	r3, r3, #31
 801618a:	d508      	bpl.n	801619e <_printf_i+0x112>
 801618c:	6923      	ldr	r3, [r4, #16]
 801618e:	6862      	ldr	r2, [r4, #4]
 8016190:	429a      	cmp	r2, r3
 8016192:	bfde      	ittt	le
 8016194:	2330      	movle	r3, #48	; 0x30
 8016196:	f805 3c01 	strble.w	r3, [r5, #-1]
 801619a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801619e:	ebac 0305 	sub.w	r3, ip, r5
 80161a2:	6123      	str	r3, [r4, #16]
 80161a4:	f8cd 8000 	str.w	r8, [sp]
 80161a8:	463b      	mov	r3, r7
 80161aa:	aa03      	add	r2, sp, #12
 80161ac:	4621      	mov	r1, r4
 80161ae:	4630      	mov	r0, r6
 80161b0:	f7ff fef6 	bl	8015fa0 <_printf_common>
 80161b4:	3001      	adds	r0, #1
 80161b6:	d14d      	bne.n	8016254 <_printf_i+0x1c8>
 80161b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161bc:	b005      	add	sp, #20
 80161be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161c2:	4839      	ldr	r0, [pc, #228]	; (80162a8 <_printf_i+0x21c>)
 80161c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80161c8:	6813      	ldr	r3, [r2, #0]
 80161ca:	6821      	ldr	r1, [r4, #0]
 80161cc:	1d1d      	adds	r5, r3, #4
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	6015      	str	r5, [r2, #0]
 80161d2:	060a      	lsls	r2, r1, #24
 80161d4:	d50b      	bpl.n	80161ee <_printf_i+0x162>
 80161d6:	07ca      	lsls	r2, r1, #31
 80161d8:	bf44      	itt	mi
 80161da:	f041 0120 	orrmi.w	r1, r1, #32
 80161de:	6021      	strmi	r1, [r4, #0]
 80161e0:	b91b      	cbnz	r3, 80161ea <_printf_i+0x15e>
 80161e2:	6822      	ldr	r2, [r4, #0]
 80161e4:	f022 0220 	bic.w	r2, r2, #32
 80161e8:	6022      	str	r2, [r4, #0]
 80161ea:	2210      	movs	r2, #16
 80161ec:	e7b7      	b.n	801615e <_printf_i+0xd2>
 80161ee:	064d      	lsls	r5, r1, #25
 80161f0:	bf48      	it	mi
 80161f2:	b29b      	uxthmi	r3, r3
 80161f4:	e7ef      	b.n	80161d6 <_printf_i+0x14a>
 80161f6:	4665      	mov	r5, ip
 80161f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80161fc:	fb02 3311 	mls	r3, r2, r1, r3
 8016200:	5cc3      	ldrb	r3, [r0, r3]
 8016202:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016206:	460b      	mov	r3, r1
 8016208:	2900      	cmp	r1, #0
 801620a:	d1f5      	bne.n	80161f8 <_printf_i+0x16c>
 801620c:	e7b9      	b.n	8016182 <_printf_i+0xf6>
 801620e:	6813      	ldr	r3, [r2, #0]
 8016210:	6825      	ldr	r5, [r4, #0]
 8016212:	6961      	ldr	r1, [r4, #20]
 8016214:	1d18      	adds	r0, r3, #4
 8016216:	6010      	str	r0, [r2, #0]
 8016218:	0628      	lsls	r0, r5, #24
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	d501      	bpl.n	8016222 <_printf_i+0x196>
 801621e:	6019      	str	r1, [r3, #0]
 8016220:	e002      	b.n	8016228 <_printf_i+0x19c>
 8016222:	066a      	lsls	r2, r5, #25
 8016224:	d5fb      	bpl.n	801621e <_printf_i+0x192>
 8016226:	8019      	strh	r1, [r3, #0]
 8016228:	2300      	movs	r3, #0
 801622a:	6123      	str	r3, [r4, #16]
 801622c:	4665      	mov	r5, ip
 801622e:	e7b9      	b.n	80161a4 <_printf_i+0x118>
 8016230:	6813      	ldr	r3, [r2, #0]
 8016232:	1d19      	adds	r1, r3, #4
 8016234:	6011      	str	r1, [r2, #0]
 8016236:	681d      	ldr	r5, [r3, #0]
 8016238:	6862      	ldr	r2, [r4, #4]
 801623a:	2100      	movs	r1, #0
 801623c:	4628      	mov	r0, r5
 801623e:	f7e9 ffcf 	bl	80001e0 <memchr>
 8016242:	b108      	cbz	r0, 8016248 <_printf_i+0x1bc>
 8016244:	1b40      	subs	r0, r0, r5
 8016246:	6060      	str	r0, [r4, #4]
 8016248:	6863      	ldr	r3, [r4, #4]
 801624a:	6123      	str	r3, [r4, #16]
 801624c:	2300      	movs	r3, #0
 801624e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016252:	e7a7      	b.n	80161a4 <_printf_i+0x118>
 8016254:	6923      	ldr	r3, [r4, #16]
 8016256:	462a      	mov	r2, r5
 8016258:	4639      	mov	r1, r7
 801625a:	4630      	mov	r0, r6
 801625c:	47c0      	blx	r8
 801625e:	3001      	adds	r0, #1
 8016260:	d0aa      	beq.n	80161b8 <_printf_i+0x12c>
 8016262:	6823      	ldr	r3, [r4, #0]
 8016264:	079b      	lsls	r3, r3, #30
 8016266:	d413      	bmi.n	8016290 <_printf_i+0x204>
 8016268:	68e0      	ldr	r0, [r4, #12]
 801626a:	9b03      	ldr	r3, [sp, #12]
 801626c:	4298      	cmp	r0, r3
 801626e:	bfb8      	it	lt
 8016270:	4618      	movlt	r0, r3
 8016272:	e7a3      	b.n	80161bc <_printf_i+0x130>
 8016274:	2301      	movs	r3, #1
 8016276:	464a      	mov	r2, r9
 8016278:	4639      	mov	r1, r7
 801627a:	4630      	mov	r0, r6
 801627c:	47c0      	blx	r8
 801627e:	3001      	adds	r0, #1
 8016280:	d09a      	beq.n	80161b8 <_printf_i+0x12c>
 8016282:	3501      	adds	r5, #1
 8016284:	68e3      	ldr	r3, [r4, #12]
 8016286:	9a03      	ldr	r2, [sp, #12]
 8016288:	1a9b      	subs	r3, r3, r2
 801628a:	42ab      	cmp	r3, r5
 801628c:	dcf2      	bgt.n	8016274 <_printf_i+0x1e8>
 801628e:	e7eb      	b.n	8016268 <_printf_i+0x1dc>
 8016290:	2500      	movs	r5, #0
 8016292:	f104 0919 	add.w	r9, r4, #25
 8016296:	e7f5      	b.n	8016284 <_printf_i+0x1f8>
 8016298:	2b00      	cmp	r3, #0
 801629a:	d1ac      	bne.n	80161f6 <_printf_i+0x16a>
 801629c:	7803      	ldrb	r3, [r0, #0]
 801629e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80162a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162a6:	e76c      	b.n	8016182 <_printf_i+0xf6>
 80162a8:	0801c365 	.word	0x0801c365
 80162ac:	0801c376 	.word	0x0801c376

080162b0 <__tzcalc_limits>:
 80162b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	4680      	mov	r8, r0
 80162b6:	f001 fb01 	bl	80178bc <__gettzinfo>
 80162ba:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80162be:	4598      	cmp	r8, r3
 80162c0:	f340 8098 	ble.w	80163f4 <__tzcalc_limits+0x144>
 80162c4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80162c8:	4443      	add	r3, r8
 80162ca:	109b      	asrs	r3, r3, #2
 80162cc:	f240 126d 	movw	r2, #365	; 0x16d
 80162d0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80162d4:	fb02 3505 	mla	r5, r2, r5, r3
 80162d8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80162dc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80162e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80162e4:	441d      	add	r5, r3
 80162e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80162ea:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80162ee:	fb98 f7f3 	sdiv	r7, r8, r3
 80162f2:	fb03 8717 	mls	r7, r3, r7, r8
 80162f6:	4442      	add	r2, r8
 80162f8:	fab7 fc87 	clz	ip, r7
 80162fc:	fb92 f2f3 	sdiv	r2, r2, r3
 8016300:	f008 0303 	and.w	r3, r8, #3
 8016304:	4415      	add	r5, r2
 8016306:	2264      	movs	r2, #100	; 0x64
 8016308:	f8c0 8004 	str.w	r8, [r0, #4]
 801630c:	fb98 f6f2 	sdiv	r6, r8, r2
 8016310:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016314:	fb02 8616 	mls	r6, r2, r6, r8
 8016318:	4604      	mov	r4, r0
 801631a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	f04f 0e07 	mov.w	lr, #7
 8016324:	7a22      	ldrb	r2, [r4, #8]
 8016326:	6963      	ldr	r3, [r4, #20]
 8016328:	2a4a      	cmp	r2, #74	; 0x4a
 801632a:	d128      	bne.n	801637e <__tzcalc_limits+0xce>
 801632c:	9900      	ldr	r1, [sp, #0]
 801632e:	18ea      	adds	r2, r5, r3
 8016330:	b901      	cbnz	r1, 8016334 <__tzcalc_limits+0x84>
 8016332:	b906      	cbnz	r6, 8016336 <__tzcalc_limits+0x86>
 8016334:	bb0f      	cbnz	r7, 801637a <__tzcalc_limits+0xca>
 8016336:	2b3b      	cmp	r3, #59	; 0x3b
 8016338:	bfd4      	ite	le
 801633a:	2300      	movle	r3, #0
 801633c:	2301      	movgt	r3, #1
 801633e:	4413      	add	r3, r2
 8016340:	1e5a      	subs	r2, r3, #1
 8016342:	69a3      	ldr	r3, [r4, #24]
 8016344:	492c      	ldr	r1, [pc, #176]	; (80163f8 <__tzcalc_limits+0x148>)
 8016346:	fb01 3202 	mla	r2, r1, r2, r3
 801634a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801634c:	4413      	add	r3, r2
 801634e:	461a      	mov	r2, r3
 8016350:	17db      	asrs	r3, r3, #31
 8016352:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016356:	3428      	adds	r4, #40	; 0x28
 8016358:	45a3      	cmp	fp, r4
 801635a:	d1e3      	bne.n	8016324 <__tzcalc_limits+0x74>
 801635c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8016360:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8016364:	4294      	cmp	r4, r2
 8016366:	eb75 0303 	sbcs.w	r3, r5, r3
 801636a:	bfb4      	ite	lt
 801636c:	2301      	movlt	r3, #1
 801636e:	2300      	movge	r3, #0
 8016370:	6003      	str	r3, [r0, #0]
 8016372:	2001      	movs	r0, #1
 8016374:	b003      	add	sp, #12
 8016376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801637a:	2300      	movs	r3, #0
 801637c:	e7df      	b.n	801633e <__tzcalc_limits+0x8e>
 801637e:	2a44      	cmp	r2, #68	; 0x44
 8016380:	d101      	bne.n	8016386 <__tzcalc_limits+0xd6>
 8016382:	18ea      	adds	r2, r5, r3
 8016384:	e7dd      	b.n	8016342 <__tzcalc_limits+0x92>
 8016386:	9a00      	ldr	r2, [sp, #0]
 8016388:	bb72      	cbnz	r2, 80163e8 <__tzcalc_limits+0x138>
 801638a:	2e00      	cmp	r6, #0
 801638c:	bf0c      	ite	eq
 801638e:	46e1      	moveq	r9, ip
 8016390:	f04f 0901 	movne.w	r9, #1
 8016394:	2230      	movs	r2, #48	; 0x30
 8016396:	fb02 f909 	mul.w	r9, r2, r9
 801639a:	68e2      	ldr	r2, [r4, #12]
 801639c:	9201      	str	r2, [sp, #4]
 801639e:	f04f 0800 	mov.w	r8, #0
 80163a2:	462a      	mov	r2, r5
 80163a4:	f108 0801 	add.w	r8, r8, #1
 80163a8:	4914      	ldr	r1, [pc, #80]	; (80163fc <__tzcalc_limits+0x14c>)
 80163aa:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 80163ae:	448a      	add	sl, r1
 80163b0:	9901      	ldr	r1, [sp, #4]
 80163b2:	f85a ac04 	ldr.w	sl, [sl, #-4]
 80163b6:	4541      	cmp	r1, r8
 80163b8:	dc18      	bgt.n	80163ec <__tzcalc_limits+0x13c>
 80163ba:	f102 0804 	add.w	r8, r2, #4
 80163be:	fb98 f9fe 	sdiv	r9, r8, lr
 80163c2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80163c6:	eba8 0909 	sub.w	r9, r8, r9
 80163ca:	ebb3 0909 	subs.w	r9, r3, r9
 80163ce:	6923      	ldr	r3, [r4, #16]
 80163d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80163d4:	bf48      	it	mi
 80163d6:	f109 0907 	addmi.w	r9, r9, #7
 80163da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80163de:	444b      	add	r3, r9
 80163e0:	4553      	cmp	r3, sl
 80163e2:	da05      	bge.n	80163f0 <__tzcalc_limits+0x140>
 80163e4:	441a      	add	r2, r3
 80163e6:	e7ac      	b.n	8016342 <__tzcalc_limits+0x92>
 80163e8:	46e1      	mov	r9, ip
 80163ea:	e7d3      	b.n	8016394 <__tzcalc_limits+0xe4>
 80163ec:	4452      	add	r2, sl
 80163ee:	e7d9      	b.n	80163a4 <__tzcalc_limits+0xf4>
 80163f0:	3b07      	subs	r3, #7
 80163f2:	e7f5      	b.n	80163e0 <__tzcalc_limits+0x130>
 80163f4:	2000      	movs	r0, #0
 80163f6:	e7bd      	b.n	8016374 <__tzcalc_limits+0xc4>
 80163f8:	00015180 	.word	0x00015180
 80163fc:	0801c430 	.word	0x0801c430

08016400 <__tz_lock>:
 8016400:	4770      	bx	lr

08016402 <__tz_unlock>:
 8016402:	4770      	bx	lr

08016404 <_tzset_unlocked>:
 8016404:	4b01      	ldr	r3, [pc, #4]	; (801640c <_tzset_unlocked+0x8>)
 8016406:	6818      	ldr	r0, [r3, #0]
 8016408:	f000 b802 	b.w	8016410 <_tzset_unlocked_r>
 801640c:	20000154 	.word	0x20000154

08016410 <_tzset_unlocked_r>:
 8016410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016414:	b08d      	sub	sp, #52	; 0x34
 8016416:	4607      	mov	r7, r0
 8016418:	f001 fa50 	bl	80178bc <__gettzinfo>
 801641c:	49af      	ldr	r1, [pc, #700]	; (80166dc <_tzset_unlocked_r+0x2cc>)
 801641e:	4eb0      	ldr	r6, [pc, #704]	; (80166e0 <_tzset_unlocked_r+0x2d0>)
 8016420:	4605      	mov	r5, r0
 8016422:	4638      	mov	r0, r7
 8016424:	f001 fa42 	bl	80178ac <_getenv_r>
 8016428:	4604      	mov	r4, r0
 801642a:	b970      	cbnz	r0, 801644a <_tzset_unlocked_r+0x3a>
 801642c:	4bad      	ldr	r3, [pc, #692]	; (80166e4 <_tzset_unlocked_r+0x2d4>)
 801642e:	4aae      	ldr	r2, [pc, #696]	; (80166e8 <_tzset_unlocked_r+0x2d8>)
 8016430:	6018      	str	r0, [r3, #0]
 8016432:	4bae      	ldr	r3, [pc, #696]	; (80166ec <_tzset_unlocked_r+0x2dc>)
 8016434:	6018      	str	r0, [r3, #0]
 8016436:	4bae      	ldr	r3, [pc, #696]	; (80166f0 <_tzset_unlocked_r+0x2e0>)
 8016438:	6830      	ldr	r0, [r6, #0]
 801643a:	e9c3 2200 	strd	r2, r2, [r3]
 801643e:	f001 fabb 	bl	80179b8 <free>
 8016442:	6034      	str	r4, [r6, #0]
 8016444:	b00d      	add	sp, #52	; 0x34
 8016446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801644a:	6831      	ldr	r1, [r6, #0]
 801644c:	2900      	cmp	r1, #0
 801644e:	d15f      	bne.n	8016510 <_tzset_unlocked_r+0x100>
 8016450:	6830      	ldr	r0, [r6, #0]
 8016452:	f001 fab1 	bl	80179b8 <free>
 8016456:	4620      	mov	r0, r4
 8016458:	f7e9 feba 	bl	80001d0 <strlen>
 801645c:	1c41      	adds	r1, r0, #1
 801645e:	4638      	mov	r0, r7
 8016460:	f001 fdea 	bl	8018038 <_malloc_r>
 8016464:	6030      	str	r0, [r6, #0]
 8016466:	2800      	cmp	r0, #0
 8016468:	d157      	bne.n	801651a <_tzset_unlocked_r+0x10a>
 801646a:	7823      	ldrb	r3, [r4, #0]
 801646c:	4aa1      	ldr	r2, [pc, #644]	; (80166f4 <_tzset_unlocked_r+0x2e4>)
 801646e:	49a2      	ldr	r1, [pc, #648]	; (80166f8 <_tzset_unlocked_r+0x2e8>)
 8016470:	2b3a      	cmp	r3, #58	; 0x3a
 8016472:	bf08      	it	eq
 8016474:	3401      	addeq	r4, #1
 8016476:	ae0a      	add	r6, sp, #40	; 0x28
 8016478:	4633      	mov	r3, r6
 801647a:	4620      	mov	r0, r4
 801647c:	f001 fe6c 	bl	8018158 <siscanf>
 8016480:	2800      	cmp	r0, #0
 8016482:	dddf      	ble.n	8016444 <_tzset_unlocked_r+0x34>
 8016484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016486:	18e7      	adds	r7, r4, r3
 8016488:	5ce3      	ldrb	r3, [r4, r3]
 801648a:	2b2d      	cmp	r3, #45	; 0x2d
 801648c:	d149      	bne.n	8016522 <_tzset_unlocked_r+0x112>
 801648e:	3701      	adds	r7, #1
 8016490:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016494:	f10d 0a20 	add.w	sl, sp, #32
 8016498:	f10d 0b1e 	add.w	fp, sp, #30
 801649c:	f04f 0800 	mov.w	r8, #0
 80164a0:	9603      	str	r6, [sp, #12]
 80164a2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80164a6:	f8cd b000 	str.w	fp, [sp]
 80164aa:	4633      	mov	r3, r6
 80164ac:	aa07      	add	r2, sp, #28
 80164ae:	4993      	ldr	r1, [pc, #588]	; (80166fc <_tzset_unlocked_r+0x2ec>)
 80164b0:	f8ad 801e 	strh.w	r8, [sp, #30]
 80164b4:	4638      	mov	r0, r7
 80164b6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80164ba:	f001 fe4d 	bl	8018158 <siscanf>
 80164be:	4540      	cmp	r0, r8
 80164c0:	ddc0      	ble.n	8016444 <_tzset_unlocked_r+0x34>
 80164c2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80164c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80164ca:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8016708 <_tzset_unlocked_r+0x2f8>
 80164ce:	213c      	movs	r1, #60	; 0x3c
 80164d0:	fb01 2203 	mla	r2, r1, r3, r2
 80164d4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80164d8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80164dc:	fb01 2303 	mla	r3, r1, r3, r2
 80164e0:	435c      	muls	r4, r3
 80164e2:	62ac      	str	r4, [r5, #40]	; 0x28
 80164e4:	4c82      	ldr	r4, [pc, #520]	; (80166f0 <_tzset_unlocked_r+0x2e0>)
 80164e6:	4b83      	ldr	r3, [pc, #524]	; (80166f4 <_tzset_unlocked_r+0x2e4>)
 80164e8:	6023      	str	r3, [r4, #0]
 80164ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ec:	4982      	ldr	r1, [pc, #520]	; (80166f8 <_tzset_unlocked_r+0x2e8>)
 80164ee:	441f      	add	r7, r3
 80164f0:	464a      	mov	r2, r9
 80164f2:	4633      	mov	r3, r6
 80164f4:	4638      	mov	r0, r7
 80164f6:	f001 fe2f 	bl	8018158 <siscanf>
 80164fa:	4540      	cmp	r0, r8
 80164fc:	dc16      	bgt.n	801652c <_tzset_unlocked_r+0x11c>
 80164fe:	6823      	ldr	r3, [r4, #0]
 8016500:	6063      	str	r3, [r4, #4]
 8016502:	4b78      	ldr	r3, [pc, #480]	; (80166e4 <_tzset_unlocked_r+0x2d4>)
 8016504:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8016506:	601a      	str	r2, [r3, #0]
 8016508:	4b78      	ldr	r3, [pc, #480]	; (80166ec <_tzset_unlocked_r+0x2dc>)
 801650a:	f8c3 8000 	str.w	r8, [r3]
 801650e:	e799      	b.n	8016444 <_tzset_unlocked_r+0x34>
 8016510:	f7e9 feb6 	bl	8000280 <strcmp>
 8016514:	2800      	cmp	r0, #0
 8016516:	d095      	beq.n	8016444 <_tzset_unlocked_r+0x34>
 8016518:	e79a      	b.n	8016450 <_tzset_unlocked_r+0x40>
 801651a:	4621      	mov	r1, r4
 801651c:	f001 fe8b 	bl	8018236 <strcpy>
 8016520:	e7a3      	b.n	801646a <_tzset_unlocked_r+0x5a>
 8016522:	2b2b      	cmp	r3, #43	; 0x2b
 8016524:	bf08      	it	eq
 8016526:	3701      	addeq	r7, #1
 8016528:	2401      	movs	r4, #1
 801652a:	e7b3      	b.n	8016494 <_tzset_unlocked_r+0x84>
 801652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801652e:	f8c4 9004 	str.w	r9, [r4, #4]
 8016532:	18fc      	adds	r4, r7, r3
 8016534:	5cfb      	ldrb	r3, [r7, r3]
 8016536:	2b2d      	cmp	r3, #45	; 0x2d
 8016538:	f040 808b 	bne.w	8016652 <_tzset_unlocked_r+0x242>
 801653c:	3401      	adds	r4, #1
 801653e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016542:	2300      	movs	r3, #0
 8016544:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016548:	f8ad 301e 	strh.w	r3, [sp, #30]
 801654c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016550:	930a      	str	r3, [sp, #40]	; 0x28
 8016552:	e9cd a602 	strd	sl, r6, [sp, #8]
 8016556:	e9cd b600 	strd	fp, r6, [sp]
 801655a:	4633      	mov	r3, r6
 801655c:	aa07      	add	r2, sp, #28
 801655e:	4967      	ldr	r1, [pc, #412]	; (80166fc <_tzset_unlocked_r+0x2ec>)
 8016560:	4620      	mov	r0, r4
 8016562:	f001 fdf9 	bl	8018158 <siscanf>
 8016566:	2800      	cmp	r0, #0
 8016568:	dc78      	bgt.n	801665c <_tzset_unlocked_r+0x24c>
 801656a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801656c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8016570:	652b      	str	r3, [r5, #80]	; 0x50
 8016572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016574:	462f      	mov	r7, r5
 8016576:	441c      	add	r4, r3
 8016578:	f04f 0900 	mov.w	r9, #0
 801657c:	7823      	ldrb	r3, [r4, #0]
 801657e:	2b2c      	cmp	r3, #44	; 0x2c
 8016580:	bf08      	it	eq
 8016582:	3401      	addeq	r4, #1
 8016584:	f894 8000 	ldrb.w	r8, [r4]
 8016588:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801658c:	d179      	bne.n	8016682 <_tzset_unlocked_r+0x272>
 801658e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8016592:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8016596:	ab09      	add	r3, sp, #36	; 0x24
 8016598:	9300      	str	r3, [sp, #0]
 801659a:	9603      	str	r6, [sp, #12]
 801659c:	4633      	mov	r3, r6
 801659e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80165a2:	4957      	ldr	r1, [pc, #348]	; (8016700 <_tzset_unlocked_r+0x2f0>)
 80165a4:	4620      	mov	r0, r4
 80165a6:	f001 fdd7 	bl	8018158 <siscanf>
 80165aa:	2803      	cmp	r0, #3
 80165ac:	f47f af4a 	bne.w	8016444 <_tzset_unlocked_r+0x34>
 80165b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80165b4:	1e4b      	subs	r3, r1, #1
 80165b6:	2b0b      	cmp	r3, #11
 80165b8:	f63f af44 	bhi.w	8016444 <_tzset_unlocked_r+0x34>
 80165bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80165c0:	1e53      	subs	r3, r2, #1
 80165c2:	2b04      	cmp	r3, #4
 80165c4:	f63f af3e 	bhi.w	8016444 <_tzset_unlocked_r+0x34>
 80165c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80165cc:	2b06      	cmp	r3, #6
 80165ce:	f63f af39 	bhi.w	8016444 <_tzset_unlocked_r+0x34>
 80165d2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80165d6:	f887 8008 	strb.w	r8, [r7, #8]
 80165da:	617b      	str	r3, [r7, #20]
 80165dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165de:	eb04 0803 	add.w	r8, r4, r3
 80165e2:	2302      	movs	r3, #2
 80165e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80165e8:	2300      	movs	r3, #0
 80165ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 80165ee:	f8ad 3020 	strh.w	r3, [sp, #32]
 80165f2:	930a      	str	r3, [sp, #40]	; 0x28
 80165f4:	f898 3000 	ldrb.w	r3, [r8]
 80165f8:	2b2f      	cmp	r3, #47	; 0x2f
 80165fa:	d109      	bne.n	8016610 <_tzset_unlocked_r+0x200>
 80165fc:	e9cd a602 	strd	sl, r6, [sp, #8]
 8016600:	e9cd b600 	strd	fp, r6, [sp]
 8016604:	4633      	mov	r3, r6
 8016606:	aa07      	add	r2, sp, #28
 8016608:	493e      	ldr	r1, [pc, #248]	; (8016704 <_tzset_unlocked_r+0x2f4>)
 801660a:	4640      	mov	r0, r8
 801660c:	f001 fda4 	bl	8018158 <siscanf>
 8016610:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016614:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8016618:	213c      	movs	r1, #60	; 0x3c
 801661a:	fb01 2203 	mla	r2, r1, r3, r2
 801661e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8016622:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016626:	fb01 2303 	mla	r3, r1, r3, r2
 801662a:	61bb      	str	r3, [r7, #24]
 801662c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801662e:	3728      	adds	r7, #40	; 0x28
 8016630:	4444      	add	r4, r8
 8016632:	f1b9 0f00 	cmp.w	r9, #0
 8016636:	d021      	beq.n	801667c <_tzset_unlocked_r+0x26c>
 8016638:	6868      	ldr	r0, [r5, #4]
 801663a:	f7ff fe39 	bl	80162b0 <__tzcalc_limits>
 801663e:	4b29      	ldr	r3, [pc, #164]	; (80166e4 <_tzset_unlocked_r+0x2d4>)
 8016640:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8016642:	601a      	str	r2, [r3, #0]
 8016644:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8016646:	1a9b      	subs	r3, r3, r2
 8016648:	4a28      	ldr	r2, [pc, #160]	; (80166ec <_tzset_unlocked_r+0x2dc>)
 801664a:	bf18      	it	ne
 801664c:	2301      	movne	r3, #1
 801664e:	6013      	str	r3, [r2, #0]
 8016650:	e6f8      	b.n	8016444 <_tzset_unlocked_r+0x34>
 8016652:	2b2b      	cmp	r3, #43	; 0x2b
 8016654:	bf08      	it	eq
 8016656:	3401      	addeq	r4, #1
 8016658:	2701      	movs	r7, #1
 801665a:	e772      	b.n	8016542 <_tzset_unlocked_r+0x132>
 801665c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016660:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8016664:	213c      	movs	r1, #60	; 0x3c
 8016666:	fb01 2203 	mla	r2, r1, r3, r2
 801666a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801666e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016672:	fb01 2303 	mla	r3, r1, r3, r2
 8016676:	435f      	muls	r7, r3
 8016678:	652f      	str	r7, [r5, #80]	; 0x50
 801667a:	e77a      	b.n	8016572 <_tzset_unlocked_r+0x162>
 801667c:	f04f 0901 	mov.w	r9, #1
 8016680:	e77c      	b.n	801657c <_tzset_unlocked_r+0x16c>
 8016682:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8016686:	bf06      	itte	eq
 8016688:	3401      	addeq	r4, #1
 801668a:	4643      	moveq	r3, r8
 801668c:	2344      	movne	r3, #68	; 0x44
 801668e:	220a      	movs	r2, #10
 8016690:	a90b      	add	r1, sp, #44	; 0x2c
 8016692:	4620      	mov	r0, r4
 8016694:	9305      	str	r3, [sp, #20]
 8016696:	f001 fe75 	bl	8018384 <strtoul>
 801669a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801669e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80166a2:	45a0      	cmp	r8, r4
 80166a4:	9b05      	ldr	r3, [sp, #20]
 80166a6:	d114      	bne.n	80166d2 <_tzset_unlocked_r+0x2c2>
 80166a8:	234d      	movs	r3, #77	; 0x4d
 80166aa:	f1b9 0f00 	cmp.w	r9, #0
 80166ae:	d107      	bne.n	80166c0 <_tzset_unlocked_r+0x2b0>
 80166b0:	722b      	strb	r3, [r5, #8]
 80166b2:	2103      	movs	r1, #3
 80166b4:	2302      	movs	r3, #2
 80166b6:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80166ba:	f8c5 9014 	str.w	r9, [r5, #20]
 80166be:	e790      	b.n	80165e2 <_tzset_unlocked_r+0x1d2>
 80166c0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80166c4:	220b      	movs	r2, #11
 80166c6:	2301      	movs	r3, #1
 80166c8:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80166cc:	2300      	movs	r3, #0
 80166ce:	63eb      	str	r3, [r5, #60]	; 0x3c
 80166d0:	e787      	b.n	80165e2 <_tzset_unlocked_r+0x1d2>
 80166d2:	b280      	uxth	r0, r0
 80166d4:	723b      	strb	r3, [r7, #8]
 80166d6:	6178      	str	r0, [r7, #20]
 80166d8:	e783      	b.n	80165e2 <_tzset_unlocked_r+0x1d2>
 80166da:	bf00      	nop
 80166dc:	0801c387 	.word	0x0801c387
 80166e0:	2000486c 	.word	0x2000486c
 80166e4:	20004874 	.word	0x20004874
 80166e8:	0801c38a 	.word	0x0801c38a
 80166ec:	20004870 	.word	0x20004870
 80166f0:	200001b8 	.word	0x200001b8
 80166f4:	2000485f 	.word	0x2000485f
 80166f8:	0801c38e 	.word	0x0801c38e
 80166fc:	0801c3b1 	.word	0x0801c3b1
 8016700:	0801c39d 	.word	0x0801c39d
 8016704:	0801c3b0 	.word	0x0801c3b0
 8016708:	20004854 	.word	0x20004854

0801670c <__swbuf_r>:
 801670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801670e:	460e      	mov	r6, r1
 8016710:	4614      	mov	r4, r2
 8016712:	4605      	mov	r5, r0
 8016714:	b118      	cbz	r0, 801671e <__swbuf_r+0x12>
 8016716:	6983      	ldr	r3, [r0, #24]
 8016718:	b90b      	cbnz	r3, 801671e <__swbuf_r+0x12>
 801671a:	f001 f801 	bl	8017720 <__sinit>
 801671e:	4b21      	ldr	r3, [pc, #132]	; (80167a4 <__swbuf_r+0x98>)
 8016720:	429c      	cmp	r4, r3
 8016722:	d12a      	bne.n	801677a <__swbuf_r+0x6e>
 8016724:	686c      	ldr	r4, [r5, #4]
 8016726:	69a3      	ldr	r3, [r4, #24]
 8016728:	60a3      	str	r3, [r4, #8]
 801672a:	89a3      	ldrh	r3, [r4, #12]
 801672c:	071a      	lsls	r2, r3, #28
 801672e:	d52e      	bpl.n	801678e <__swbuf_r+0x82>
 8016730:	6923      	ldr	r3, [r4, #16]
 8016732:	b363      	cbz	r3, 801678e <__swbuf_r+0x82>
 8016734:	6923      	ldr	r3, [r4, #16]
 8016736:	6820      	ldr	r0, [r4, #0]
 8016738:	1ac0      	subs	r0, r0, r3
 801673a:	6963      	ldr	r3, [r4, #20]
 801673c:	b2f6      	uxtb	r6, r6
 801673e:	4283      	cmp	r3, r0
 8016740:	4637      	mov	r7, r6
 8016742:	dc04      	bgt.n	801674e <__swbuf_r+0x42>
 8016744:	4621      	mov	r1, r4
 8016746:	4628      	mov	r0, r5
 8016748:	f000 ff80 	bl	801764c <_fflush_r>
 801674c:	bb28      	cbnz	r0, 801679a <__swbuf_r+0x8e>
 801674e:	68a3      	ldr	r3, [r4, #8]
 8016750:	3b01      	subs	r3, #1
 8016752:	60a3      	str	r3, [r4, #8]
 8016754:	6823      	ldr	r3, [r4, #0]
 8016756:	1c5a      	adds	r2, r3, #1
 8016758:	6022      	str	r2, [r4, #0]
 801675a:	701e      	strb	r6, [r3, #0]
 801675c:	6963      	ldr	r3, [r4, #20]
 801675e:	3001      	adds	r0, #1
 8016760:	4283      	cmp	r3, r0
 8016762:	d004      	beq.n	801676e <__swbuf_r+0x62>
 8016764:	89a3      	ldrh	r3, [r4, #12]
 8016766:	07db      	lsls	r3, r3, #31
 8016768:	d519      	bpl.n	801679e <__swbuf_r+0x92>
 801676a:	2e0a      	cmp	r6, #10
 801676c:	d117      	bne.n	801679e <__swbuf_r+0x92>
 801676e:	4621      	mov	r1, r4
 8016770:	4628      	mov	r0, r5
 8016772:	f000 ff6b 	bl	801764c <_fflush_r>
 8016776:	b190      	cbz	r0, 801679e <__swbuf_r+0x92>
 8016778:	e00f      	b.n	801679a <__swbuf_r+0x8e>
 801677a:	4b0b      	ldr	r3, [pc, #44]	; (80167a8 <__swbuf_r+0x9c>)
 801677c:	429c      	cmp	r4, r3
 801677e:	d101      	bne.n	8016784 <__swbuf_r+0x78>
 8016780:	68ac      	ldr	r4, [r5, #8]
 8016782:	e7d0      	b.n	8016726 <__swbuf_r+0x1a>
 8016784:	4b09      	ldr	r3, [pc, #36]	; (80167ac <__swbuf_r+0xa0>)
 8016786:	429c      	cmp	r4, r3
 8016788:	bf08      	it	eq
 801678a:	68ec      	ldreq	r4, [r5, #12]
 801678c:	e7cb      	b.n	8016726 <__swbuf_r+0x1a>
 801678e:	4621      	mov	r1, r4
 8016790:	4628      	mov	r0, r5
 8016792:	f000 f80d 	bl	80167b0 <__swsetup_r>
 8016796:	2800      	cmp	r0, #0
 8016798:	d0cc      	beq.n	8016734 <__swbuf_r+0x28>
 801679a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801679e:	4638      	mov	r0, r7
 80167a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167a2:	bf00      	nop
 80167a4:	0801c3f0 	.word	0x0801c3f0
 80167a8:	0801c410 	.word	0x0801c410
 80167ac:	0801c3d0 	.word	0x0801c3d0

080167b0 <__swsetup_r>:
 80167b0:	4b32      	ldr	r3, [pc, #200]	; (801687c <__swsetup_r+0xcc>)
 80167b2:	b570      	push	{r4, r5, r6, lr}
 80167b4:	681d      	ldr	r5, [r3, #0]
 80167b6:	4606      	mov	r6, r0
 80167b8:	460c      	mov	r4, r1
 80167ba:	b125      	cbz	r5, 80167c6 <__swsetup_r+0x16>
 80167bc:	69ab      	ldr	r3, [r5, #24]
 80167be:	b913      	cbnz	r3, 80167c6 <__swsetup_r+0x16>
 80167c0:	4628      	mov	r0, r5
 80167c2:	f000 ffad 	bl	8017720 <__sinit>
 80167c6:	4b2e      	ldr	r3, [pc, #184]	; (8016880 <__swsetup_r+0xd0>)
 80167c8:	429c      	cmp	r4, r3
 80167ca:	d10f      	bne.n	80167ec <__swsetup_r+0x3c>
 80167cc:	686c      	ldr	r4, [r5, #4]
 80167ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167d2:	b29a      	uxth	r2, r3
 80167d4:	0715      	lsls	r5, r2, #28
 80167d6:	d42c      	bmi.n	8016832 <__swsetup_r+0x82>
 80167d8:	06d0      	lsls	r0, r2, #27
 80167da:	d411      	bmi.n	8016800 <__swsetup_r+0x50>
 80167dc:	2209      	movs	r2, #9
 80167de:	6032      	str	r2, [r6, #0]
 80167e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167e4:	81a3      	strh	r3, [r4, #12]
 80167e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167ea:	e03e      	b.n	801686a <__swsetup_r+0xba>
 80167ec:	4b25      	ldr	r3, [pc, #148]	; (8016884 <__swsetup_r+0xd4>)
 80167ee:	429c      	cmp	r4, r3
 80167f0:	d101      	bne.n	80167f6 <__swsetup_r+0x46>
 80167f2:	68ac      	ldr	r4, [r5, #8]
 80167f4:	e7eb      	b.n	80167ce <__swsetup_r+0x1e>
 80167f6:	4b24      	ldr	r3, [pc, #144]	; (8016888 <__swsetup_r+0xd8>)
 80167f8:	429c      	cmp	r4, r3
 80167fa:	bf08      	it	eq
 80167fc:	68ec      	ldreq	r4, [r5, #12]
 80167fe:	e7e6      	b.n	80167ce <__swsetup_r+0x1e>
 8016800:	0751      	lsls	r1, r2, #29
 8016802:	d512      	bpl.n	801682a <__swsetup_r+0x7a>
 8016804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016806:	b141      	cbz	r1, 801681a <__swsetup_r+0x6a>
 8016808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801680c:	4299      	cmp	r1, r3
 801680e:	d002      	beq.n	8016816 <__swsetup_r+0x66>
 8016810:	4630      	mov	r0, r6
 8016812:	f001 fbc3 	bl	8017f9c <_free_r>
 8016816:	2300      	movs	r3, #0
 8016818:	6363      	str	r3, [r4, #52]	; 0x34
 801681a:	89a3      	ldrh	r3, [r4, #12]
 801681c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016820:	81a3      	strh	r3, [r4, #12]
 8016822:	2300      	movs	r3, #0
 8016824:	6063      	str	r3, [r4, #4]
 8016826:	6923      	ldr	r3, [r4, #16]
 8016828:	6023      	str	r3, [r4, #0]
 801682a:	89a3      	ldrh	r3, [r4, #12]
 801682c:	f043 0308 	orr.w	r3, r3, #8
 8016830:	81a3      	strh	r3, [r4, #12]
 8016832:	6923      	ldr	r3, [r4, #16]
 8016834:	b94b      	cbnz	r3, 801684a <__swsetup_r+0x9a>
 8016836:	89a3      	ldrh	r3, [r4, #12]
 8016838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801683c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016840:	d003      	beq.n	801684a <__swsetup_r+0x9a>
 8016842:	4621      	mov	r1, r4
 8016844:	4630      	mov	r0, r6
 8016846:	f001 f86f 	bl	8017928 <__smakebuf_r>
 801684a:	89a2      	ldrh	r2, [r4, #12]
 801684c:	f012 0301 	ands.w	r3, r2, #1
 8016850:	d00c      	beq.n	801686c <__swsetup_r+0xbc>
 8016852:	2300      	movs	r3, #0
 8016854:	60a3      	str	r3, [r4, #8]
 8016856:	6963      	ldr	r3, [r4, #20]
 8016858:	425b      	negs	r3, r3
 801685a:	61a3      	str	r3, [r4, #24]
 801685c:	6923      	ldr	r3, [r4, #16]
 801685e:	b953      	cbnz	r3, 8016876 <__swsetup_r+0xc6>
 8016860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016864:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016868:	d1ba      	bne.n	80167e0 <__swsetup_r+0x30>
 801686a:	bd70      	pop	{r4, r5, r6, pc}
 801686c:	0792      	lsls	r2, r2, #30
 801686e:	bf58      	it	pl
 8016870:	6963      	ldrpl	r3, [r4, #20]
 8016872:	60a3      	str	r3, [r4, #8]
 8016874:	e7f2      	b.n	801685c <__swsetup_r+0xac>
 8016876:	2000      	movs	r0, #0
 8016878:	e7f7      	b.n	801686a <__swsetup_r+0xba>
 801687a:	bf00      	nop
 801687c:	20000154 	.word	0x20000154
 8016880:	0801c3f0 	.word	0x0801c3f0
 8016884:	0801c410 	.word	0x0801c410
 8016888:	0801c3d0 	.word	0x0801c3d0

0801688c <div>:
 801688c:	2900      	cmp	r1, #0
 801688e:	b510      	push	{r4, lr}
 8016890:	fb91 f4f2 	sdiv	r4, r1, r2
 8016894:	fb02 1314 	mls	r3, r2, r4, r1
 8016898:	db06      	blt.n	80168a8 <div+0x1c>
 801689a:	2b00      	cmp	r3, #0
 801689c:	da01      	bge.n	80168a2 <div+0x16>
 801689e:	3401      	adds	r4, #1
 80168a0:	1a9b      	subs	r3, r3, r2
 80168a2:	e9c0 4300 	strd	r4, r3, [r0]
 80168a6:	bd10      	pop	{r4, pc}
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	bfc4      	itt	gt
 80168ac:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80168b0:	189b      	addgt	r3, r3, r2
 80168b2:	e7f6      	b.n	80168a2 <div+0x16>

080168b4 <quorem>:
 80168b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b8:	6903      	ldr	r3, [r0, #16]
 80168ba:	690c      	ldr	r4, [r1, #16]
 80168bc:	42a3      	cmp	r3, r4
 80168be:	4680      	mov	r8, r0
 80168c0:	f2c0 8082 	blt.w	80169c8 <quorem+0x114>
 80168c4:	3c01      	subs	r4, #1
 80168c6:	f101 0714 	add.w	r7, r1, #20
 80168ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80168ce:	f100 0614 	add.w	r6, r0, #20
 80168d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80168d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80168da:	eb06 030c 	add.w	r3, r6, ip
 80168de:	3501      	adds	r5, #1
 80168e0:	eb07 090c 	add.w	r9, r7, ip
 80168e4:	9301      	str	r3, [sp, #4]
 80168e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80168ea:	b395      	cbz	r5, 8016952 <quorem+0x9e>
 80168ec:	f04f 0a00 	mov.w	sl, #0
 80168f0:	4638      	mov	r0, r7
 80168f2:	46b6      	mov	lr, r6
 80168f4:	46d3      	mov	fp, sl
 80168f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80168fa:	b293      	uxth	r3, r2
 80168fc:	fb05 a303 	mla	r3, r5, r3, sl
 8016900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016904:	b29b      	uxth	r3, r3
 8016906:	ebab 0303 	sub.w	r3, fp, r3
 801690a:	0c12      	lsrs	r2, r2, #16
 801690c:	f8de b000 	ldr.w	fp, [lr]
 8016910:	fb05 a202 	mla	r2, r5, r2, sl
 8016914:	fa13 f38b 	uxtah	r3, r3, fp
 8016918:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801691c:	fa1f fb82 	uxth.w	fp, r2
 8016920:	f8de 2000 	ldr.w	r2, [lr]
 8016924:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801692c:	b29b      	uxth	r3, r3
 801692e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016932:	4581      	cmp	r9, r0
 8016934:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016938:	f84e 3b04 	str.w	r3, [lr], #4
 801693c:	d2db      	bcs.n	80168f6 <quorem+0x42>
 801693e:	f856 300c 	ldr.w	r3, [r6, ip]
 8016942:	b933      	cbnz	r3, 8016952 <quorem+0x9e>
 8016944:	9b01      	ldr	r3, [sp, #4]
 8016946:	3b04      	subs	r3, #4
 8016948:	429e      	cmp	r6, r3
 801694a:	461a      	mov	r2, r3
 801694c:	d330      	bcc.n	80169b0 <quorem+0xfc>
 801694e:	f8c8 4010 	str.w	r4, [r8, #16]
 8016952:	4640      	mov	r0, r8
 8016954:	f001 fa4e 	bl	8017df4 <__mcmp>
 8016958:	2800      	cmp	r0, #0
 801695a:	db25      	blt.n	80169a8 <quorem+0xf4>
 801695c:	3501      	adds	r5, #1
 801695e:	4630      	mov	r0, r6
 8016960:	f04f 0c00 	mov.w	ip, #0
 8016964:	f857 2b04 	ldr.w	r2, [r7], #4
 8016968:	f8d0 e000 	ldr.w	lr, [r0]
 801696c:	b293      	uxth	r3, r2
 801696e:	ebac 0303 	sub.w	r3, ip, r3
 8016972:	0c12      	lsrs	r2, r2, #16
 8016974:	fa13 f38e 	uxtah	r3, r3, lr
 8016978:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801697c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016980:	b29b      	uxth	r3, r3
 8016982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016986:	45b9      	cmp	r9, r7
 8016988:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801698c:	f840 3b04 	str.w	r3, [r0], #4
 8016990:	d2e8      	bcs.n	8016964 <quorem+0xb0>
 8016992:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016996:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801699a:	b92a      	cbnz	r2, 80169a8 <quorem+0xf4>
 801699c:	3b04      	subs	r3, #4
 801699e:	429e      	cmp	r6, r3
 80169a0:	461a      	mov	r2, r3
 80169a2:	d30b      	bcc.n	80169bc <quorem+0x108>
 80169a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80169a8:	4628      	mov	r0, r5
 80169aa:	b003      	add	sp, #12
 80169ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169b0:	6812      	ldr	r2, [r2, #0]
 80169b2:	3b04      	subs	r3, #4
 80169b4:	2a00      	cmp	r2, #0
 80169b6:	d1ca      	bne.n	801694e <quorem+0x9a>
 80169b8:	3c01      	subs	r4, #1
 80169ba:	e7c5      	b.n	8016948 <quorem+0x94>
 80169bc:	6812      	ldr	r2, [r2, #0]
 80169be:	3b04      	subs	r3, #4
 80169c0:	2a00      	cmp	r2, #0
 80169c2:	d1ef      	bne.n	80169a4 <quorem+0xf0>
 80169c4:	3c01      	subs	r4, #1
 80169c6:	e7ea      	b.n	801699e <quorem+0xea>
 80169c8:	2000      	movs	r0, #0
 80169ca:	e7ee      	b.n	80169aa <quorem+0xf6>
 80169cc:	0000      	movs	r0, r0
	...

080169d0 <_dtoa_r>:
 80169d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d4:	ec57 6b10 	vmov	r6, r7, d0
 80169d8:	b097      	sub	sp, #92	; 0x5c
 80169da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80169dc:	9106      	str	r1, [sp, #24]
 80169de:	4604      	mov	r4, r0
 80169e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80169e2:	9312      	str	r3, [sp, #72]	; 0x48
 80169e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80169e8:	e9cd 6700 	strd	r6, r7, [sp]
 80169ec:	b93d      	cbnz	r5, 80169fe <_dtoa_r+0x2e>
 80169ee:	2010      	movs	r0, #16
 80169f0:	f000 ffda 	bl	80179a8 <malloc>
 80169f4:	6260      	str	r0, [r4, #36]	; 0x24
 80169f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80169fa:	6005      	str	r5, [r0, #0]
 80169fc:	60c5      	str	r5, [r0, #12]
 80169fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a00:	6819      	ldr	r1, [r3, #0]
 8016a02:	b151      	cbz	r1, 8016a1a <_dtoa_r+0x4a>
 8016a04:	685a      	ldr	r2, [r3, #4]
 8016a06:	604a      	str	r2, [r1, #4]
 8016a08:	2301      	movs	r3, #1
 8016a0a:	4093      	lsls	r3, r2
 8016a0c:	608b      	str	r3, [r1, #8]
 8016a0e:	4620      	mov	r0, r4
 8016a10:	f001 f80e 	bl	8017a30 <_Bfree>
 8016a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a16:	2200      	movs	r2, #0
 8016a18:	601a      	str	r2, [r3, #0]
 8016a1a:	1e3b      	subs	r3, r7, #0
 8016a1c:	bfbb      	ittet	lt
 8016a1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016a22:	9301      	strlt	r3, [sp, #4]
 8016a24:	2300      	movge	r3, #0
 8016a26:	2201      	movlt	r2, #1
 8016a28:	bfac      	ite	ge
 8016a2a:	f8c8 3000 	strge.w	r3, [r8]
 8016a2e:	f8c8 2000 	strlt.w	r2, [r8]
 8016a32:	4baf      	ldr	r3, [pc, #700]	; (8016cf0 <_dtoa_r+0x320>)
 8016a34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016a38:	ea33 0308 	bics.w	r3, r3, r8
 8016a3c:	d114      	bne.n	8016a68 <_dtoa_r+0x98>
 8016a3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a40:	f242 730f 	movw	r3, #9999	; 0x270f
 8016a44:	6013      	str	r3, [r2, #0]
 8016a46:	9b00      	ldr	r3, [sp, #0]
 8016a48:	b923      	cbnz	r3, 8016a54 <_dtoa_r+0x84>
 8016a4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	f000 8542 	beq.w	80174d8 <_dtoa_r+0xb08>
 8016a54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016d04 <_dtoa_r+0x334>
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	f000 8544 	beq.w	80174e8 <_dtoa_r+0xb18>
 8016a60:	f10b 0303 	add.w	r3, fp, #3
 8016a64:	f000 bd3e 	b.w	80174e4 <_dtoa_r+0xb14>
 8016a68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	2300      	movs	r3, #0
 8016a70:	4630      	mov	r0, r6
 8016a72:	4639      	mov	r1, r7
 8016a74:	f7ea f832 	bl	8000adc <__aeabi_dcmpeq>
 8016a78:	4681      	mov	r9, r0
 8016a7a:	b168      	cbz	r0, 8016a98 <_dtoa_r+0xc8>
 8016a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a7e:	2301      	movs	r3, #1
 8016a80:	6013      	str	r3, [r2, #0]
 8016a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	f000 8524 	beq.w	80174d2 <_dtoa_r+0xb02>
 8016a8a:	4b9a      	ldr	r3, [pc, #616]	; (8016cf4 <_dtoa_r+0x324>)
 8016a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a8e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8016a92:	6013      	str	r3, [r2, #0]
 8016a94:	f000 bd28 	b.w	80174e8 <_dtoa_r+0xb18>
 8016a98:	aa14      	add	r2, sp, #80	; 0x50
 8016a9a:	a915      	add	r1, sp, #84	; 0x54
 8016a9c:	ec47 6b10 	vmov	d0, r6, r7
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f001 fa1e 	bl	8017ee2 <__d2b>
 8016aa6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016aaa:	9004      	str	r0, [sp, #16]
 8016aac:	2d00      	cmp	r5, #0
 8016aae:	d07c      	beq.n	8016baa <_dtoa_r+0x1da>
 8016ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ab4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016ab8:	46b2      	mov	sl, r6
 8016aba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016ac2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	4b8b      	ldr	r3, [pc, #556]	; (8016cf8 <_dtoa_r+0x328>)
 8016aca:	4650      	mov	r0, sl
 8016acc:	4659      	mov	r1, fp
 8016ace:	f7e9 fbe5 	bl	800029c <__aeabi_dsub>
 8016ad2:	a381      	add	r3, pc, #516	; (adr r3, 8016cd8 <_dtoa_r+0x308>)
 8016ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad8:	f7e9 fd98 	bl	800060c <__aeabi_dmul>
 8016adc:	a380      	add	r3, pc, #512	; (adr r3, 8016ce0 <_dtoa_r+0x310>)
 8016ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae2:	f7e9 fbdd 	bl	80002a0 <__adddf3>
 8016ae6:	4606      	mov	r6, r0
 8016ae8:	4628      	mov	r0, r5
 8016aea:	460f      	mov	r7, r1
 8016aec:	f7e9 fd24 	bl	8000538 <__aeabi_i2d>
 8016af0:	a37d      	add	r3, pc, #500	; (adr r3, 8016ce8 <_dtoa_r+0x318>)
 8016af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af6:	f7e9 fd89 	bl	800060c <__aeabi_dmul>
 8016afa:	4602      	mov	r2, r0
 8016afc:	460b      	mov	r3, r1
 8016afe:	4630      	mov	r0, r6
 8016b00:	4639      	mov	r1, r7
 8016b02:	f7e9 fbcd 	bl	80002a0 <__adddf3>
 8016b06:	4606      	mov	r6, r0
 8016b08:	460f      	mov	r7, r1
 8016b0a:	f7ea f82f 	bl	8000b6c <__aeabi_d2iz>
 8016b0e:	2200      	movs	r2, #0
 8016b10:	4682      	mov	sl, r0
 8016b12:	2300      	movs	r3, #0
 8016b14:	4630      	mov	r0, r6
 8016b16:	4639      	mov	r1, r7
 8016b18:	f7e9 ffea 	bl	8000af0 <__aeabi_dcmplt>
 8016b1c:	b148      	cbz	r0, 8016b32 <_dtoa_r+0x162>
 8016b1e:	4650      	mov	r0, sl
 8016b20:	f7e9 fd0a 	bl	8000538 <__aeabi_i2d>
 8016b24:	4632      	mov	r2, r6
 8016b26:	463b      	mov	r3, r7
 8016b28:	f7e9 ffd8 	bl	8000adc <__aeabi_dcmpeq>
 8016b2c:	b908      	cbnz	r0, 8016b32 <_dtoa_r+0x162>
 8016b2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016b32:	f1ba 0f16 	cmp.w	sl, #22
 8016b36:	d859      	bhi.n	8016bec <_dtoa_r+0x21c>
 8016b38:	4970      	ldr	r1, [pc, #448]	; (8016cfc <_dtoa_r+0x32c>)
 8016b3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b46:	f7e9 fff1 	bl	8000b2c <__aeabi_dcmpgt>
 8016b4a:	2800      	cmp	r0, #0
 8016b4c:	d050      	beq.n	8016bf0 <_dtoa_r+0x220>
 8016b4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016b52:	2300      	movs	r3, #0
 8016b54:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b58:	1b5d      	subs	r5, r3, r5
 8016b5a:	f1b5 0801 	subs.w	r8, r5, #1
 8016b5e:	bf49      	itett	mi
 8016b60:	f1c5 0301 	rsbmi	r3, r5, #1
 8016b64:	2300      	movpl	r3, #0
 8016b66:	9305      	strmi	r3, [sp, #20]
 8016b68:	f04f 0800 	movmi.w	r8, #0
 8016b6c:	bf58      	it	pl
 8016b6e:	9305      	strpl	r3, [sp, #20]
 8016b70:	f1ba 0f00 	cmp.w	sl, #0
 8016b74:	db3e      	blt.n	8016bf4 <_dtoa_r+0x224>
 8016b76:	2300      	movs	r3, #0
 8016b78:	44d0      	add	r8, sl
 8016b7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016b7e:	9307      	str	r3, [sp, #28]
 8016b80:	9b06      	ldr	r3, [sp, #24]
 8016b82:	2b09      	cmp	r3, #9
 8016b84:	f200 8090 	bhi.w	8016ca8 <_dtoa_r+0x2d8>
 8016b88:	2b05      	cmp	r3, #5
 8016b8a:	bfc4      	itt	gt
 8016b8c:	3b04      	subgt	r3, #4
 8016b8e:	9306      	strgt	r3, [sp, #24]
 8016b90:	9b06      	ldr	r3, [sp, #24]
 8016b92:	f1a3 0302 	sub.w	r3, r3, #2
 8016b96:	bfcc      	ite	gt
 8016b98:	2500      	movgt	r5, #0
 8016b9a:	2501      	movle	r5, #1
 8016b9c:	2b03      	cmp	r3, #3
 8016b9e:	f200 808f 	bhi.w	8016cc0 <_dtoa_r+0x2f0>
 8016ba2:	e8df f003 	tbb	[pc, r3]
 8016ba6:	7f7d      	.short	0x7f7d
 8016ba8:	7131      	.short	0x7131
 8016baa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016bae:	441d      	add	r5, r3
 8016bb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016bb4:	2820      	cmp	r0, #32
 8016bb6:	dd13      	ble.n	8016be0 <_dtoa_r+0x210>
 8016bb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016bbc:	9b00      	ldr	r3, [sp, #0]
 8016bbe:	fa08 f800 	lsl.w	r8, r8, r0
 8016bc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016bc6:	fa23 f000 	lsr.w	r0, r3, r0
 8016bca:	ea48 0000 	orr.w	r0, r8, r0
 8016bce:	f7e9 fca3 	bl	8000518 <__aeabi_ui2d>
 8016bd2:	2301      	movs	r3, #1
 8016bd4:	4682      	mov	sl, r0
 8016bd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016bda:	3d01      	subs	r5, #1
 8016bdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8016bde:	e772      	b.n	8016ac6 <_dtoa_r+0xf6>
 8016be0:	9b00      	ldr	r3, [sp, #0]
 8016be2:	f1c0 0020 	rsb	r0, r0, #32
 8016be6:	fa03 f000 	lsl.w	r0, r3, r0
 8016bea:	e7f0      	b.n	8016bce <_dtoa_r+0x1fe>
 8016bec:	2301      	movs	r3, #1
 8016bee:	e7b1      	b.n	8016b54 <_dtoa_r+0x184>
 8016bf0:	900f      	str	r0, [sp, #60]	; 0x3c
 8016bf2:	e7b0      	b.n	8016b56 <_dtoa_r+0x186>
 8016bf4:	9b05      	ldr	r3, [sp, #20]
 8016bf6:	eba3 030a 	sub.w	r3, r3, sl
 8016bfa:	9305      	str	r3, [sp, #20]
 8016bfc:	f1ca 0300 	rsb	r3, sl, #0
 8016c00:	9307      	str	r3, [sp, #28]
 8016c02:	2300      	movs	r3, #0
 8016c04:	930e      	str	r3, [sp, #56]	; 0x38
 8016c06:	e7bb      	b.n	8016b80 <_dtoa_r+0x1b0>
 8016c08:	2301      	movs	r3, #1
 8016c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8016c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	dd59      	ble.n	8016cc6 <_dtoa_r+0x2f6>
 8016c12:	9302      	str	r3, [sp, #8]
 8016c14:	4699      	mov	r9, r3
 8016c16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016c18:	2200      	movs	r2, #0
 8016c1a:	6072      	str	r2, [r6, #4]
 8016c1c:	2204      	movs	r2, #4
 8016c1e:	f102 0014 	add.w	r0, r2, #20
 8016c22:	4298      	cmp	r0, r3
 8016c24:	6871      	ldr	r1, [r6, #4]
 8016c26:	d953      	bls.n	8016cd0 <_dtoa_r+0x300>
 8016c28:	4620      	mov	r0, r4
 8016c2a:	f000 fecd 	bl	80179c8 <_Balloc>
 8016c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c30:	6030      	str	r0, [r6, #0]
 8016c32:	f1b9 0f0e 	cmp.w	r9, #14
 8016c36:	f8d3 b000 	ldr.w	fp, [r3]
 8016c3a:	f200 80e6 	bhi.w	8016e0a <_dtoa_r+0x43a>
 8016c3e:	2d00      	cmp	r5, #0
 8016c40:	f000 80e3 	beq.w	8016e0a <_dtoa_r+0x43a>
 8016c44:	ed9d 7b00 	vldr	d7, [sp]
 8016c48:	f1ba 0f00 	cmp.w	sl, #0
 8016c4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016c50:	dd74      	ble.n	8016d3c <_dtoa_r+0x36c>
 8016c52:	4a2a      	ldr	r2, [pc, #168]	; (8016cfc <_dtoa_r+0x32c>)
 8016c54:	f00a 030f 	and.w	r3, sl, #15
 8016c58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016c5c:	ed93 7b00 	vldr	d7, [r3]
 8016c60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016c64:	06f0      	lsls	r0, r6, #27
 8016c66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016c6a:	d565      	bpl.n	8016d38 <_dtoa_r+0x368>
 8016c6c:	4b24      	ldr	r3, [pc, #144]	; (8016d00 <_dtoa_r+0x330>)
 8016c6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016c72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016c76:	f7e9 fdf3 	bl	8000860 <__aeabi_ddiv>
 8016c7a:	e9cd 0100 	strd	r0, r1, [sp]
 8016c7e:	f006 060f 	and.w	r6, r6, #15
 8016c82:	2503      	movs	r5, #3
 8016c84:	4f1e      	ldr	r7, [pc, #120]	; (8016d00 <_dtoa_r+0x330>)
 8016c86:	e04c      	b.n	8016d22 <_dtoa_r+0x352>
 8016c88:	2301      	movs	r3, #1
 8016c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8016c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c8e:	4453      	add	r3, sl
 8016c90:	f103 0901 	add.w	r9, r3, #1
 8016c94:	9302      	str	r3, [sp, #8]
 8016c96:	464b      	mov	r3, r9
 8016c98:	2b01      	cmp	r3, #1
 8016c9a:	bfb8      	it	lt
 8016c9c:	2301      	movlt	r3, #1
 8016c9e:	e7ba      	b.n	8016c16 <_dtoa_r+0x246>
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	e7b2      	b.n	8016c0a <_dtoa_r+0x23a>
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	e7f0      	b.n	8016c8a <_dtoa_r+0x2ba>
 8016ca8:	2501      	movs	r5, #1
 8016caa:	2300      	movs	r3, #0
 8016cac:	9306      	str	r3, [sp, #24]
 8016cae:	950a      	str	r5, [sp, #40]	; 0x28
 8016cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cb4:	9302      	str	r3, [sp, #8]
 8016cb6:	4699      	mov	r9, r3
 8016cb8:	2200      	movs	r2, #0
 8016cba:	2312      	movs	r3, #18
 8016cbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8016cbe:	e7aa      	b.n	8016c16 <_dtoa_r+0x246>
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8016cc4:	e7f4      	b.n	8016cb0 <_dtoa_r+0x2e0>
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	9302      	str	r3, [sp, #8]
 8016cca:	4699      	mov	r9, r3
 8016ccc:	461a      	mov	r2, r3
 8016cce:	e7f5      	b.n	8016cbc <_dtoa_r+0x2ec>
 8016cd0:	3101      	adds	r1, #1
 8016cd2:	6071      	str	r1, [r6, #4]
 8016cd4:	0052      	lsls	r2, r2, #1
 8016cd6:	e7a2      	b.n	8016c1e <_dtoa_r+0x24e>
 8016cd8:	636f4361 	.word	0x636f4361
 8016cdc:	3fd287a7 	.word	0x3fd287a7
 8016ce0:	8b60c8b3 	.word	0x8b60c8b3
 8016ce4:	3fc68a28 	.word	0x3fc68a28
 8016ce8:	509f79fb 	.word	0x509f79fb
 8016cec:	3fd34413 	.word	0x3fd34413
 8016cf0:	7ff00000 	.word	0x7ff00000
 8016cf4:	0801c5ad 	.word	0x0801c5ad
 8016cf8:	3ff80000 	.word	0x3ff80000
 8016cfc:	0801c4b8 	.word	0x0801c4b8
 8016d00:	0801c490 	.word	0x0801c490
 8016d04:	0801c3cc 	.word	0x0801c3cc
 8016d08:	07f1      	lsls	r1, r6, #31
 8016d0a:	d508      	bpl.n	8016d1e <_dtoa_r+0x34e>
 8016d0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016d14:	f7e9 fc7a 	bl	800060c <__aeabi_dmul>
 8016d18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016d1c:	3501      	adds	r5, #1
 8016d1e:	1076      	asrs	r6, r6, #1
 8016d20:	3708      	adds	r7, #8
 8016d22:	2e00      	cmp	r6, #0
 8016d24:	d1f0      	bne.n	8016d08 <_dtoa_r+0x338>
 8016d26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016d2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d2e:	f7e9 fd97 	bl	8000860 <__aeabi_ddiv>
 8016d32:	e9cd 0100 	strd	r0, r1, [sp]
 8016d36:	e01a      	b.n	8016d6e <_dtoa_r+0x39e>
 8016d38:	2502      	movs	r5, #2
 8016d3a:	e7a3      	b.n	8016c84 <_dtoa_r+0x2b4>
 8016d3c:	f000 80a0 	beq.w	8016e80 <_dtoa_r+0x4b0>
 8016d40:	f1ca 0600 	rsb	r6, sl, #0
 8016d44:	4b9f      	ldr	r3, [pc, #636]	; (8016fc4 <_dtoa_r+0x5f4>)
 8016d46:	4fa0      	ldr	r7, [pc, #640]	; (8016fc8 <_dtoa_r+0x5f8>)
 8016d48:	f006 020f 	and.w	r2, r6, #15
 8016d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016d58:	f7e9 fc58 	bl	800060c <__aeabi_dmul>
 8016d5c:	e9cd 0100 	strd	r0, r1, [sp]
 8016d60:	1136      	asrs	r6, r6, #4
 8016d62:	2300      	movs	r3, #0
 8016d64:	2502      	movs	r5, #2
 8016d66:	2e00      	cmp	r6, #0
 8016d68:	d17f      	bne.n	8016e6a <_dtoa_r+0x49a>
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d1e1      	bne.n	8016d32 <_dtoa_r+0x362>
 8016d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	f000 8087 	beq.w	8016e84 <_dtoa_r+0x4b4>
 8016d76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	4b93      	ldr	r3, [pc, #588]	; (8016fcc <_dtoa_r+0x5fc>)
 8016d7e:	4630      	mov	r0, r6
 8016d80:	4639      	mov	r1, r7
 8016d82:	f7e9 feb5 	bl	8000af0 <__aeabi_dcmplt>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	d07c      	beq.n	8016e84 <_dtoa_r+0x4b4>
 8016d8a:	f1b9 0f00 	cmp.w	r9, #0
 8016d8e:	d079      	beq.n	8016e84 <_dtoa_r+0x4b4>
 8016d90:	9b02      	ldr	r3, [sp, #8]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	dd35      	ble.n	8016e02 <_dtoa_r+0x432>
 8016d96:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8016d9a:	9308      	str	r3, [sp, #32]
 8016d9c:	4639      	mov	r1, r7
 8016d9e:	2200      	movs	r2, #0
 8016da0:	4b8b      	ldr	r3, [pc, #556]	; (8016fd0 <_dtoa_r+0x600>)
 8016da2:	4630      	mov	r0, r6
 8016da4:	f7e9 fc32 	bl	800060c <__aeabi_dmul>
 8016da8:	e9cd 0100 	strd	r0, r1, [sp]
 8016dac:	9f02      	ldr	r7, [sp, #8]
 8016dae:	3501      	adds	r5, #1
 8016db0:	4628      	mov	r0, r5
 8016db2:	f7e9 fbc1 	bl	8000538 <__aeabi_i2d>
 8016db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016dba:	f7e9 fc27 	bl	800060c <__aeabi_dmul>
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	4b84      	ldr	r3, [pc, #528]	; (8016fd4 <_dtoa_r+0x604>)
 8016dc2:	f7e9 fa6d 	bl	80002a0 <__adddf3>
 8016dc6:	4605      	mov	r5, r0
 8016dc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016dcc:	2f00      	cmp	r7, #0
 8016dce:	d15d      	bne.n	8016e8c <_dtoa_r+0x4bc>
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	4b81      	ldr	r3, [pc, #516]	; (8016fd8 <_dtoa_r+0x608>)
 8016dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dd8:	f7e9 fa60 	bl	800029c <__aeabi_dsub>
 8016ddc:	462a      	mov	r2, r5
 8016dde:	4633      	mov	r3, r6
 8016de0:	e9cd 0100 	strd	r0, r1, [sp]
 8016de4:	f7e9 fea2 	bl	8000b2c <__aeabi_dcmpgt>
 8016de8:	2800      	cmp	r0, #0
 8016dea:	f040 8288 	bne.w	80172fe <_dtoa_r+0x92e>
 8016dee:	462a      	mov	r2, r5
 8016df0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016df8:	f7e9 fe7a 	bl	8000af0 <__aeabi_dcmplt>
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	f040 827c 	bne.w	80172fa <_dtoa_r+0x92a>
 8016e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016e06:	e9cd 2300 	strd	r2, r3, [sp]
 8016e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	f2c0 8150 	blt.w	80170b2 <_dtoa_r+0x6e2>
 8016e12:	f1ba 0f0e 	cmp.w	sl, #14
 8016e16:	f300 814c 	bgt.w	80170b2 <_dtoa_r+0x6e2>
 8016e1a:	4b6a      	ldr	r3, [pc, #424]	; (8016fc4 <_dtoa_r+0x5f4>)
 8016e1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016e20:	ed93 7b00 	vldr	d7, [r3]
 8016e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016e2c:	f280 80d8 	bge.w	8016fe0 <_dtoa_r+0x610>
 8016e30:	f1b9 0f00 	cmp.w	r9, #0
 8016e34:	f300 80d4 	bgt.w	8016fe0 <_dtoa_r+0x610>
 8016e38:	f040 825e 	bne.w	80172f8 <_dtoa_r+0x928>
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	4b66      	ldr	r3, [pc, #408]	; (8016fd8 <_dtoa_r+0x608>)
 8016e40:	ec51 0b17 	vmov	r0, r1, d7
 8016e44:	f7e9 fbe2 	bl	800060c <__aeabi_dmul>
 8016e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e4c:	f7e9 fe64 	bl	8000b18 <__aeabi_dcmpge>
 8016e50:	464f      	mov	r7, r9
 8016e52:	464e      	mov	r6, r9
 8016e54:	2800      	cmp	r0, #0
 8016e56:	f040 8234 	bne.w	80172c2 <_dtoa_r+0x8f2>
 8016e5a:	2331      	movs	r3, #49	; 0x31
 8016e5c:	f10b 0501 	add.w	r5, fp, #1
 8016e60:	f88b 3000 	strb.w	r3, [fp]
 8016e64:	f10a 0a01 	add.w	sl, sl, #1
 8016e68:	e22f      	b.n	80172ca <_dtoa_r+0x8fa>
 8016e6a:	07f2      	lsls	r2, r6, #31
 8016e6c:	d505      	bpl.n	8016e7a <_dtoa_r+0x4aa>
 8016e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e72:	f7e9 fbcb 	bl	800060c <__aeabi_dmul>
 8016e76:	3501      	adds	r5, #1
 8016e78:	2301      	movs	r3, #1
 8016e7a:	1076      	asrs	r6, r6, #1
 8016e7c:	3708      	adds	r7, #8
 8016e7e:	e772      	b.n	8016d66 <_dtoa_r+0x396>
 8016e80:	2502      	movs	r5, #2
 8016e82:	e774      	b.n	8016d6e <_dtoa_r+0x39e>
 8016e84:	f8cd a020 	str.w	sl, [sp, #32]
 8016e88:	464f      	mov	r7, r9
 8016e8a:	e791      	b.n	8016db0 <_dtoa_r+0x3e0>
 8016e8c:	4b4d      	ldr	r3, [pc, #308]	; (8016fc4 <_dtoa_r+0x5f4>)
 8016e8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016e92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d047      	beq.n	8016f2c <_dtoa_r+0x55c>
 8016e9c:	4602      	mov	r2, r0
 8016e9e:	460b      	mov	r3, r1
 8016ea0:	2000      	movs	r0, #0
 8016ea2:	494e      	ldr	r1, [pc, #312]	; (8016fdc <_dtoa_r+0x60c>)
 8016ea4:	f7e9 fcdc 	bl	8000860 <__aeabi_ddiv>
 8016ea8:	462a      	mov	r2, r5
 8016eaa:	4633      	mov	r3, r6
 8016eac:	f7e9 f9f6 	bl	800029c <__aeabi_dsub>
 8016eb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016eb4:	465d      	mov	r5, fp
 8016eb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016eba:	f7e9 fe57 	bl	8000b6c <__aeabi_d2iz>
 8016ebe:	4606      	mov	r6, r0
 8016ec0:	f7e9 fb3a 	bl	8000538 <__aeabi_i2d>
 8016ec4:	4602      	mov	r2, r0
 8016ec6:	460b      	mov	r3, r1
 8016ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ecc:	f7e9 f9e6 	bl	800029c <__aeabi_dsub>
 8016ed0:	3630      	adds	r6, #48	; 0x30
 8016ed2:	f805 6b01 	strb.w	r6, [r5], #1
 8016ed6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016eda:	e9cd 0100 	strd	r0, r1, [sp]
 8016ede:	f7e9 fe07 	bl	8000af0 <__aeabi_dcmplt>
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	d163      	bne.n	8016fae <_dtoa_r+0x5de>
 8016ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016eea:	2000      	movs	r0, #0
 8016eec:	4937      	ldr	r1, [pc, #220]	; (8016fcc <_dtoa_r+0x5fc>)
 8016eee:	f7e9 f9d5 	bl	800029c <__aeabi_dsub>
 8016ef2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016ef6:	f7e9 fdfb 	bl	8000af0 <__aeabi_dcmplt>
 8016efa:	2800      	cmp	r0, #0
 8016efc:	f040 80b7 	bne.w	801706e <_dtoa_r+0x69e>
 8016f00:	eba5 030b 	sub.w	r3, r5, fp
 8016f04:	429f      	cmp	r7, r3
 8016f06:	f77f af7c 	ble.w	8016e02 <_dtoa_r+0x432>
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	4b30      	ldr	r3, [pc, #192]	; (8016fd0 <_dtoa_r+0x600>)
 8016f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016f12:	f7e9 fb7b 	bl	800060c <__aeabi_dmul>
 8016f16:	2200      	movs	r2, #0
 8016f18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016f1c:	4b2c      	ldr	r3, [pc, #176]	; (8016fd0 <_dtoa_r+0x600>)
 8016f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f22:	f7e9 fb73 	bl	800060c <__aeabi_dmul>
 8016f26:	e9cd 0100 	strd	r0, r1, [sp]
 8016f2a:	e7c4      	b.n	8016eb6 <_dtoa_r+0x4e6>
 8016f2c:	462a      	mov	r2, r5
 8016f2e:	4633      	mov	r3, r6
 8016f30:	f7e9 fb6c 	bl	800060c <__aeabi_dmul>
 8016f34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016f38:	eb0b 0507 	add.w	r5, fp, r7
 8016f3c:	465e      	mov	r6, fp
 8016f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f42:	f7e9 fe13 	bl	8000b6c <__aeabi_d2iz>
 8016f46:	4607      	mov	r7, r0
 8016f48:	f7e9 faf6 	bl	8000538 <__aeabi_i2d>
 8016f4c:	3730      	adds	r7, #48	; 0x30
 8016f4e:	4602      	mov	r2, r0
 8016f50:	460b      	mov	r3, r1
 8016f52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f56:	f7e9 f9a1 	bl	800029c <__aeabi_dsub>
 8016f5a:	f806 7b01 	strb.w	r7, [r6], #1
 8016f5e:	42ae      	cmp	r6, r5
 8016f60:	e9cd 0100 	strd	r0, r1, [sp]
 8016f64:	f04f 0200 	mov.w	r2, #0
 8016f68:	d126      	bne.n	8016fb8 <_dtoa_r+0x5e8>
 8016f6a:	4b1c      	ldr	r3, [pc, #112]	; (8016fdc <_dtoa_r+0x60c>)
 8016f6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016f70:	f7e9 f996 	bl	80002a0 <__adddf3>
 8016f74:	4602      	mov	r2, r0
 8016f76:	460b      	mov	r3, r1
 8016f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f7c:	f7e9 fdd6 	bl	8000b2c <__aeabi_dcmpgt>
 8016f80:	2800      	cmp	r0, #0
 8016f82:	d174      	bne.n	801706e <_dtoa_r+0x69e>
 8016f84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016f88:	2000      	movs	r0, #0
 8016f8a:	4914      	ldr	r1, [pc, #80]	; (8016fdc <_dtoa_r+0x60c>)
 8016f8c:	f7e9 f986 	bl	800029c <__aeabi_dsub>
 8016f90:	4602      	mov	r2, r0
 8016f92:	460b      	mov	r3, r1
 8016f94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f98:	f7e9 fdaa 	bl	8000af0 <__aeabi_dcmplt>
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	f43f af30 	beq.w	8016e02 <_dtoa_r+0x432>
 8016fa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016fa6:	2b30      	cmp	r3, #48	; 0x30
 8016fa8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8016fac:	d002      	beq.n	8016fb4 <_dtoa_r+0x5e4>
 8016fae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016fb2:	e04a      	b.n	801704a <_dtoa_r+0x67a>
 8016fb4:	4615      	mov	r5, r2
 8016fb6:	e7f4      	b.n	8016fa2 <_dtoa_r+0x5d2>
 8016fb8:	4b05      	ldr	r3, [pc, #20]	; (8016fd0 <_dtoa_r+0x600>)
 8016fba:	f7e9 fb27 	bl	800060c <__aeabi_dmul>
 8016fbe:	e9cd 0100 	strd	r0, r1, [sp]
 8016fc2:	e7bc      	b.n	8016f3e <_dtoa_r+0x56e>
 8016fc4:	0801c4b8 	.word	0x0801c4b8
 8016fc8:	0801c490 	.word	0x0801c490
 8016fcc:	3ff00000 	.word	0x3ff00000
 8016fd0:	40240000 	.word	0x40240000
 8016fd4:	401c0000 	.word	0x401c0000
 8016fd8:	40140000 	.word	0x40140000
 8016fdc:	3fe00000 	.word	0x3fe00000
 8016fe0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016fe4:	465d      	mov	r5, fp
 8016fe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fea:	4630      	mov	r0, r6
 8016fec:	4639      	mov	r1, r7
 8016fee:	f7e9 fc37 	bl	8000860 <__aeabi_ddiv>
 8016ff2:	f7e9 fdbb 	bl	8000b6c <__aeabi_d2iz>
 8016ff6:	4680      	mov	r8, r0
 8016ff8:	f7e9 fa9e 	bl	8000538 <__aeabi_i2d>
 8016ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017000:	f7e9 fb04 	bl	800060c <__aeabi_dmul>
 8017004:	4602      	mov	r2, r0
 8017006:	460b      	mov	r3, r1
 8017008:	4630      	mov	r0, r6
 801700a:	4639      	mov	r1, r7
 801700c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017010:	f7e9 f944 	bl	800029c <__aeabi_dsub>
 8017014:	f805 6b01 	strb.w	r6, [r5], #1
 8017018:	eba5 060b 	sub.w	r6, r5, fp
 801701c:	45b1      	cmp	r9, r6
 801701e:	4602      	mov	r2, r0
 8017020:	460b      	mov	r3, r1
 8017022:	d139      	bne.n	8017098 <_dtoa_r+0x6c8>
 8017024:	f7e9 f93c 	bl	80002a0 <__adddf3>
 8017028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801702c:	4606      	mov	r6, r0
 801702e:	460f      	mov	r7, r1
 8017030:	f7e9 fd7c 	bl	8000b2c <__aeabi_dcmpgt>
 8017034:	b9c8      	cbnz	r0, 801706a <_dtoa_r+0x69a>
 8017036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801703a:	4630      	mov	r0, r6
 801703c:	4639      	mov	r1, r7
 801703e:	f7e9 fd4d 	bl	8000adc <__aeabi_dcmpeq>
 8017042:	b110      	cbz	r0, 801704a <_dtoa_r+0x67a>
 8017044:	f018 0f01 	tst.w	r8, #1
 8017048:	d10f      	bne.n	801706a <_dtoa_r+0x69a>
 801704a:	9904      	ldr	r1, [sp, #16]
 801704c:	4620      	mov	r0, r4
 801704e:	f000 fcef 	bl	8017a30 <_Bfree>
 8017052:	2300      	movs	r3, #0
 8017054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017056:	702b      	strb	r3, [r5, #0]
 8017058:	f10a 0301 	add.w	r3, sl, #1
 801705c:	6013      	str	r3, [r2, #0]
 801705e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017060:	2b00      	cmp	r3, #0
 8017062:	f000 8241 	beq.w	80174e8 <_dtoa_r+0xb18>
 8017066:	601d      	str	r5, [r3, #0]
 8017068:	e23e      	b.n	80174e8 <_dtoa_r+0xb18>
 801706a:	f8cd a020 	str.w	sl, [sp, #32]
 801706e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017072:	2a39      	cmp	r2, #57	; 0x39
 8017074:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8017078:	d108      	bne.n	801708c <_dtoa_r+0x6bc>
 801707a:	459b      	cmp	fp, r3
 801707c:	d10a      	bne.n	8017094 <_dtoa_r+0x6c4>
 801707e:	9b08      	ldr	r3, [sp, #32]
 8017080:	3301      	adds	r3, #1
 8017082:	9308      	str	r3, [sp, #32]
 8017084:	2330      	movs	r3, #48	; 0x30
 8017086:	f88b 3000 	strb.w	r3, [fp]
 801708a:	465b      	mov	r3, fp
 801708c:	781a      	ldrb	r2, [r3, #0]
 801708e:	3201      	adds	r2, #1
 8017090:	701a      	strb	r2, [r3, #0]
 8017092:	e78c      	b.n	8016fae <_dtoa_r+0x5de>
 8017094:	461d      	mov	r5, r3
 8017096:	e7ea      	b.n	801706e <_dtoa_r+0x69e>
 8017098:	2200      	movs	r2, #0
 801709a:	4b9b      	ldr	r3, [pc, #620]	; (8017308 <_dtoa_r+0x938>)
 801709c:	f7e9 fab6 	bl	800060c <__aeabi_dmul>
 80170a0:	2200      	movs	r2, #0
 80170a2:	2300      	movs	r3, #0
 80170a4:	4606      	mov	r6, r0
 80170a6:	460f      	mov	r7, r1
 80170a8:	f7e9 fd18 	bl	8000adc <__aeabi_dcmpeq>
 80170ac:	2800      	cmp	r0, #0
 80170ae:	d09a      	beq.n	8016fe6 <_dtoa_r+0x616>
 80170b0:	e7cb      	b.n	801704a <_dtoa_r+0x67a>
 80170b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170b4:	2a00      	cmp	r2, #0
 80170b6:	f000 808b 	beq.w	80171d0 <_dtoa_r+0x800>
 80170ba:	9a06      	ldr	r2, [sp, #24]
 80170bc:	2a01      	cmp	r2, #1
 80170be:	dc6e      	bgt.n	801719e <_dtoa_r+0x7ce>
 80170c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80170c2:	2a00      	cmp	r2, #0
 80170c4:	d067      	beq.n	8017196 <_dtoa_r+0x7c6>
 80170c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80170ca:	9f07      	ldr	r7, [sp, #28]
 80170cc:	9d05      	ldr	r5, [sp, #20]
 80170ce:	9a05      	ldr	r2, [sp, #20]
 80170d0:	2101      	movs	r1, #1
 80170d2:	441a      	add	r2, r3
 80170d4:	4620      	mov	r0, r4
 80170d6:	9205      	str	r2, [sp, #20]
 80170d8:	4498      	add	r8, r3
 80170da:	f000 fd49 	bl	8017b70 <__i2b>
 80170de:	4606      	mov	r6, r0
 80170e0:	2d00      	cmp	r5, #0
 80170e2:	dd0c      	ble.n	80170fe <_dtoa_r+0x72e>
 80170e4:	f1b8 0f00 	cmp.w	r8, #0
 80170e8:	dd09      	ble.n	80170fe <_dtoa_r+0x72e>
 80170ea:	4545      	cmp	r5, r8
 80170ec:	9a05      	ldr	r2, [sp, #20]
 80170ee:	462b      	mov	r3, r5
 80170f0:	bfa8      	it	ge
 80170f2:	4643      	movge	r3, r8
 80170f4:	1ad2      	subs	r2, r2, r3
 80170f6:	9205      	str	r2, [sp, #20]
 80170f8:	1aed      	subs	r5, r5, r3
 80170fa:	eba8 0803 	sub.w	r8, r8, r3
 80170fe:	9b07      	ldr	r3, [sp, #28]
 8017100:	b1eb      	cbz	r3, 801713e <_dtoa_r+0x76e>
 8017102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017104:	2b00      	cmp	r3, #0
 8017106:	d067      	beq.n	80171d8 <_dtoa_r+0x808>
 8017108:	b18f      	cbz	r7, 801712e <_dtoa_r+0x75e>
 801710a:	4631      	mov	r1, r6
 801710c:	463a      	mov	r2, r7
 801710e:	4620      	mov	r0, r4
 8017110:	f000 fdce 	bl	8017cb0 <__pow5mult>
 8017114:	9a04      	ldr	r2, [sp, #16]
 8017116:	4601      	mov	r1, r0
 8017118:	4606      	mov	r6, r0
 801711a:	4620      	mov	r0, r4
 801711c:	f000 fd31 	bl	8017b82 <__multiply>
 8017120:	9904      	ldr	r1, [sp, #16]
 8017122:	9008      	str	r0, [sp, #32]
 8017124:	4620      	mov	r0, r4
 8017126:	f000 fc83 	bl	8017a30 <_Bfree>
 801712a:	9b08      	ldr	r3, [sp, #32]
 801712c:	9304      	str	r3, [sp, #16]
 801712e:	9b07      	ldr	r3, [sp, #28]
 8017130:	1bda      	subs	r2, r3, r7
 8017132:	d004      	beq.n	801713e <_dtoa_r+0x76e>
 8017134:	9904      	ldr	r1, [sp, #16]
 8017136:	4620      	mov	r0, r4
 8017138:	f000 fdba 	bl	8017cb0 <__pow5mult>
 801713c:	9004      	str	r0, [sp, #16]
 801713e:	2101      	movs	r1, #1
 8017140:	4620      	mov	r0, r4
 8017142:	f000 fd15 	bl	8017b70 <__i2b>
 8017146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017148:	4607      	mov	r7, r0
 801714a:	2b00      	cmp	r3, #0
 801714c:	f000 81d0 	beq.w	80174f0 <_dtoa_r+0xb20>
 8017150:	461a      	mov	r2, r3
 8017152:	4601      	mov	r1, r0
 8017154:	4620      	mov	r0, r4
 8017156:	f000 fdab 	bl	8017cb0 <__pow5mult>
 801715a:	9b06      	ldr	r3, [sp, #24]
 801715c:	2b01      	cmp	r3, #1
 801715e:	4607      	mov	r7, r0
 8017160:	dc40      	bgt.n	80171e4 <_dtoa_r+0x814>
 8017162:	9b00      	ldr	r3, [sp, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d139      	bne.n	80171dc <_dtoa_r+0x80c>
 8017168:	9b01      	ldr	r3, [sp, #4]
 801716a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801716e:	2b00      	cmp	r3, #0
 8017170:	d136      	bne.n	80171e0 <_dtoa_r+0x810>
 8017172:	9b01      	ldr	r3, [sp, #4]
 8017174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017178:	0d1b      	lsrs	r3, r3, #20
 801717a:	051b      	lsls	r3, r3, #20
 801717c:	b12b      	cbz	r3, 801718a <_dtoa_r+0x7ba>
 801717e:	9b05      	ldr	r3, [sp, #20]
 8017180:	3301      	adds	r3, #1
 8017182:	9305      	str	r3, [sp, #20]
 8017184:	f108 0801 	add.w	r8, r8, #1
 8017188:	2301      	movs	r3, #1
 801718a:	9307      	str	r3, [sp, #28]
 801718c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801718e:	2b00      	cmp	r3, #0
 8017190:	d12a      	bne.n	80171e8 <_dtoa_r+0x818>
 8017192:	2001      	movs	r0, #1
 8017194:	e030      	b.n	80171f8 <_dtoa_r+0x828>
 8017196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017198:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801719c:	e795      	b.n	80170ca <_dtoa_r+0x6fa>
 801719e:	9b07      	ldr	r3, [sp, #28]
 80171a0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80171a4:	42bb      	cmp	r3, r7
 80171a6:	bfbf      	itttt	lt
 80171a8:	9b07      	ldrlt	r3, [sp, #28]
 80171aa:	9707      	strlt	r7, [sp, #28]
 80171ac:	1afa      	sublt	r2, r7, r3
 80171ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80171b0:	bfbb      	ittet	lt
 80171b2:	189b      	addlt	r3, r3, r2
 80171b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80171b6:	1bdf      	subge	r7, r3, r7
 80171b8:	2700      	movlt	r7, #0
 80171ba:	f1b9 0f00 	cmp.w	r9, #0
 80171be:	bfb5      	itete	lt
 80171c0:	9b05      	ldrlt	r3, [sp, #20]
 80171c2:	9d05      	ldrge	r5, [sp, #20]
 80171c4:	eba3 0509 	sublt.w	r5, r3, r9
 80171c8:	464b      	movge	r3, r9
 80171ca:	bfb8      	it	lt
 80171cc:	2300      	movlt	r3, #0
 80171ce:	e77e      	b.n	80170ce <_dtoa_r+0x6fe>
 80171d0:	9f07      	ldr	r7, [sp, #28]
 80171d2:	9d05      	ldr	r5, [sp, #20]
 80171d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80171d6:	e783      	b.n	80170e0 <_dtoa_r+0x710>
 80171d8:	9a07      	ldr	r2, [sp, #28]
 80171da:	e7ab      	b.n	8017134 <_dtoa_r+0x764>
 80171dc:	2300      	movs	r3, #0
 80171de:	e7d4      	b.n	801718a <_dtoa_r+0x7ba>
 80171e0:	9b00      	ldr	r3, [sp, #0]
 80171e2:	e7d2      	b.n	801718a <_dtoa_r+0x7ba>
 80171e4:	2300      	movs	r3, #0
 80171e6:	9307      	str	r3, [sp, #28]
 80171e8:	693b      	ldr	r3, [r7, #16]
 80171ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80171ee:	6918      	ldr	r0, [r3, #16]
 80171f0:	f000 fc70 	bl	8017ad4 <__hi0bits>
 80171f4:	f1c0 0020 	rsb	r0, r0, #32
 80171f8:	4440      	add	r0, r8
 80171fa:	f010 001f 	ands.w	r0, r0, #31
 80171fe:	d047      	beq.n	8017290 <_dtoa_r+0x8c0>
 8017200:	f1c0 0320 	rsb	r3, r0, #32
 8017204:	2b04      	cmp	r3, #4
 8017206:	dd3b      	ble.n	8017280 <_dtoa_r+0x8b0>
 8017208:	9b05      	ldr	r3, [sp, #20]
 801720a:	f1c0 001c 	rsb	r0, r0, #28
 801720e:	4403      	add	r3, r0
 8017210:	9305      	str	r3, [sp, #20]
 8017212:	4405      	add	r5, r0
 8017214:	4480      	add	r8, r0
 8017216:	9b05      	ldr	r3, [sp, #20]
 8017218:	2b00      	cmp	r3, #0
 801721a:	dd05      	ble.n	8017228 <_dtoa_r+0x858>
 801721c:	461a      	mov	r2, r3
 801721e:	9904      	ldr	r1, [sp, #16]
 8017220:	4620      	mov	r0, r4
 8017222:	f000 fd93 	bl	8017d4c <__lshift>
 8017226:	9004      	str	r0, [sp, #16]
 8017228:	f1b8 0f00 	cmp.w	r8, #0
 801722c:	dd05      	ble.n	801723a <_dtoa_r+0x86a>
 801722e:	4639      	mov	r1, r7
 8017230:	4642      	mov	r2, r8
 8017232:	4620      	mov	r0, r4
 8017234:	f000 fd8a 	bl	8017d4c <__lshift>
 8017238:	4607      	mov	r7, r0
 801723a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801723c:	b353      	cbz	r3, 8017294 <_dtoa_r+0x8c4>
 801723e:	4639      	mov	r1, r7
 8017240:	9804      	ldr	r0, [sp, #16]
 8017242:	f000 fdd7 	bl	8017df4 <__mcmp>
 8017246:	2800      	cmp	r0, #0
 8017248:	da24      	bge.n	8017294 <_dtoa_r+0x8c4>
 801724a:	2300      	movs	r3, #0
 801724c:	220a      	movs	r2, #10
 801724e:	9904      	ldr	r1, [sp, #16]
 8017250:	4620      	mov	r0, r4
 8017252:	f000 fc04 	bl	8017a5e <__multadd>
 8017256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017258:	9004      	str	r0, [sp, #16]
 801725a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801725e:	2b00      	cmp	r3, #0
 8017260:	f000 814d 	beq.w	80174fe <_dtoa_r+0xb2e>
 8017264:	2300      	movs	r3, #0
 8017266:	4631      	mov	r1, r6
 8017268:	220a      	movs	r2, #10
 801726a:	4620      	mov	r0, r4
 801726c:	f000 fbf7 	bl	8017a5e <__multadd>
 8017270:	9b02      	ldr	r3, [sp, #8]
 8017272:	2b00      	cmp	r3, #0
 8017274:	4606      	mov	r6, r0
 8017276:	dc4f      	bgt.n	8017318 <_dtoa_r+0x948>
 8017278:	9b06      	ldr	r3, [sp, #24]
 801727a:	2b02      	cmp	r3, #2
 801727c:	dd4c      	ble.n	8017318 <_dtoa_r+0x948>
 801727e:	e011      	b.n	80172a4 <_dtoa_r+0x8d4>
 8017280:	d0c9      	beq.n	8017216 <_dtoa_r+0x846>
 8017282:	9a05      	ldr	r2, [sp, #20]
 8017284:	331c      	adds	r3, #28
 8017286:	441a      	add	r2, r3
 8017288:	9205      	str	r2, [sp, #20]
 801728a:	441d      	add	r5, r3
 801728c:	4498      	add	r8, r3
 801728e:	e7c2      	b.n	8017216 <_dtoa_r+0x846>
 8017290:	4603      	mov	r3, r0
 8017292:	e7f6      	b.n	8017282 <_dtoa_r+0x8b2>
 8017294:	f1b9 0f00 	cmp.w	r9, #0
 8017298:	dc38      	bgt.n	801730c <_dtoa_r+0x93c>
 801729a:	9b06      	ldr	r3, [sp, #24]
 801729c:	2b02      	cmp	r3, #2
 801729e:	dd35      	ble.n	801730c <_dtoa_r+0x93c>
 80172a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80172a4:	9b02      	ldr	r3, [sp, #8]
 80172a6:	b963      	cbnz	r3, 80172c2 <_dtoa_r+0x8f2>
 80172a8:	4639      	mov	r1, r7
 80172aa:	2205      	movs	r2, #5
 80172ac:	4620      	mov	r0, r4
 80172ae:	f000 fbd6 	bl	8017a5e <__multadd>
 80172b2:	4601      	mov	r1, r0
 80172b4:	4607      	mov	r7, r0
 80172b6:	9804      	ldr	r0, [sp, #16]
 80172b8:	f000 fd9c 	bl	8017df4 <__mcmp>
 80172bc:	2800      	cmp	r0, #0
 80172be:	f73f adcc 	bgt.w	8016e5a <_dtoa_r+0x48a>
 80172c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172c4:	465d      	mov	r5, fp
 80172c6:	ea6f 0a03 	mvn.w	sl, r3
 80172ca:	f04f 0900 	mov.w	r9, #0
 80172ce:	4639      	mov	r1, r7
 80172d0:	4620      	mov	r0, r4
 80172d2:	f000 fbad 	bl	8017a30 <_Bfree>
 80172d6:	2e00      	cmp	r6, #0
 80172d8:	f43f aeb7 	beq.w	801704a <_dtoa_r+0x67a>
 80172dc:	f1b9 0f00 	cmp.w	r9, #0
 80172e0:	d005      	beq.n	80172ee <_dtoa_r+0x91e>
 80172e2:	45b1      	cmp	r9, r6
 80172e4:	d003      	beq.n	80172ee <_dtoa_r+0x91e>
 80172e6:	4649      	mov	r1, r9
 80172e8:	4620      	mov	r0, r4
 80172ea:	f000 fba1 	bl	8017a30 <_Bfree>
 80172ee:	4631      	mov	r1, r6
 80172f0:	4620      	mov	r0, r4
 80172f2:	f000 fb9d 	bl	8017a30 <_Bfree>
 80172f6:	e6a8      	b.n	801704a <_dtoa_r+0x67a>
 80172f8:	2700      	movs	r7, #0
 80172fa:	463e      	mov	r6, r7
 80172fc:	e7e1      	b.n	80172c2 <_dtoa_r+0x8f2>
 80172fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017302:	463e      	mov	r6, r7
 8017304:	e5a9      	b.n	8016e5a <_dtoa_r+0x48a>
 8017306:	bf00      	nop
 8017308:	40240000 	.word	0x40240000
 801730c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801730e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017312:	2b00      	cmp	r3, #0
 8017314:	f000 80fa 	beq.w	801750c <_dtoa_r+0xb3c>
 8017318:	2d00      	cmp	r5, #0
 801731a:	dd05      	ble.n	8017328 <_dtoa_r+0x958>
 801731c:	4631      	mov	r1, r6
 801731e:	462a      	mov	r2, r5
 8017320:	4620      	mov	r0, r4
 8017322:	f000 fd13 	bl	8017d4c <__lshift>
 8017326:	4606      	mov	r6, r0
 8017328:	9b07      	ldr	r3, [sp, #28]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d04c      	beq.n	80173c8 <_dtoa_r+0x9f8>
 801732e:	6871      	ldr	r1, [r6, #4]
 8017330:	4620      	mov	r0, r4
 8017332:	f000 fb49 	bl	80179c8 <_Balloc>
 8017336:	6932      	ldr	r2, [r6, #16]
 8017338:	3202      	adds	r2, #2
 801733a:	4605      	mov	r5, r0
 801733c:	0092      	lsls	r2, r2, #2
 801733e:	f106 010c 	add.w	r1, r6, #12
 8017342:	300c      	adds	r0, #12
 8017344:	f7fd ff70 	bl	8015228 <memcpy>
 8017348:	2201      	movs	r2, #1
 801734a:	4629      	mov	r1, r5
 801734c:	4620      	mov	r0, r4
 801734e:	f000 fcfd 	bl	8017d4c <__lshift>
 8017352:	9b00      	ldr	r3, [sp, #0]
 8017354:	f8cd b014 	str.w	fp, [sp, #20]
 8017358:	f003 0301 	and.w	r3, r3, #1
 801735c:	46b1      	mov	r9, r6
 801735e:	9307      	str	r3, [sp, #28]
 8017360:	4606      	mov	r6, r0
 8017362:	4639      	mov	r1, r7
 8017364:	9804      	ldr	r0, [sp, #16]
 8017366:	f7ff faa5 	bl	80168b4 <quorem>
 801736a:	4649      	mov	r1, r9
 801736c:	4605      	mov	r5, r0
 801736e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017372:	9804      	ldr	r0, [sp, #16]
 8017374:	f000 fd3e 	bl	8017df4 <__mcmp>
 8017378:	4632      	mov	r2, r6
 801737a:	9000      	str	r0, [sp, #0]
 801737c:	4639      	mov	r1, r7
 801737e:	4620      	mov	r0, r4
 8017380:	f000 fd52 	bl	8017e28 <__mdiff>
 8017384:	68c3      	ldr	r3, [r0, #12]
 8017386:	4602      	mov	r2, r0
 8017388:	bb03      	cbnz	r3, 80173cc <_dtoa_r+0x9fc>
 801738a:	4601      	mov	r1, r0
 801738c:	9008      	str	r0, [sp, #32]
 801738e:	9804      	ldr	r0, [sp, #16]
 8017390:	f000 fd30 	bl	8017df4 <__mcmp>
 8017394:	9a08      	ldr	r2, [sp, #32]
 8017396:	4603      	mov	r3, r0
 8017398:	4611      	mov	r1, r2
 801739a:	4620      	mov	r0, r4
 801739c:	9308      	str	r3, [sp, #32]
 801739e:	f000 fb47 	bl	8017a30 <_Bfree>
 80173a2:	9b08      	ldr	r3, [sp, #32]
 80173a4:	b9a3      	cbnz	r3, 80173d0 <_dtoa_r+0xa00>
 80173a6:	9a06      	ldr	r2, [sp, #24]
 80173a8:	b992      	cbnz	r2, 80173d0 <_dtoa_r+0xa00>
 80173aa:	9a07      	ldr	r2, [sp, #28]
 80173ac:	b982      	cbnz	r2, 80173d0 <_dtoa_r+0xa00>
 80173ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80173b2:	d029      	beq.n	8017408 <_dtoa_r+0xa38>
 80173b4:	9b00      	ldr	r3, [sp, #0]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	dd01      	ble.n	80173be <_dtoa_r+0x9ee>
 80173ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80173be:	9b05      	ldr	r3, [sp, #20]
 80173c0:	1c5d      	adds	r5, r3, #1
 80173c2:	f883 8000 	strb.w	r8, [r3]
 80173c6:	e782      	b.n	80172ce <_dtoa_r+0x8fe>
 80173c8:	4630      	mov	r0, r6
 80173ca:	e7c2      	b.n	8017352 <_dtoa_r+0x982>
 80173cc:	2301      	movs	r3, #1
 80173ce:	e7e3      	b.n	8017398 <_dtoa_r+0x9c8>
 80173d0:	9a00      	ldr	r2, [sp, #0]
 80173d2:	2a00      	cmp	r2, #0
 80173d4:	db04      	blt.n	80173e0 <_dtoa_r+0xa10>
 80173d6:	d125      	bne.n	8017424 <_dtoa_r+0xa54>
 80173d8:	9a06      	ldr	r2, [sp, #24]
 80173da:	bb1a      	cbnz	r2, 8017424 <_dtoa_r+0xa54>
 80173dc:	9a07      	ldr	r2, [sp, #28]
 80173de:	bb0a      	cbnz	r2, 8017424 <_dtoa_r+0xa54>
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	ddec      	ble.n	80173be <_dtoa_r+0x9ee>
 80173e4:	2201      	movs	r2, #1
 80173e6:	9904      	ldr	r1, [sp, #16]
 80173e8:	4620      	mov	r0, r4
 80173ea:	f000 fcaf 	bl	8017d4c <__lshift>
 80173ee:	4639      	mov	r1, r7
 80173f0:	9004      	str	r0, [sp, #16]
 80173f2:	f000 fcff 	bl	8017df4 <__mcmp>
 80173f6:	2800      	cmp	r0, #0
 80173f8:	dc03      	bgt.n	8017402 <_dtoa_r+0xa32>
 80173fa:	d1e0      	bne.n	80173be <_dtoa_r+0x9ee>
 80173fc:	f018 0f01 	tst.w	r8, #1
 8017400:	d0dd      	beq.n	80173be <_dtoa_r+0x9ee>
 8017402:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017406:	d1d8      	bne.n	80173ba <_dtoa_r+0x9ea>
 8017408:	9b05      	ldr	r3, [sp, #20]
 801740a:	9a05      	ldr	r2, [sp, #20]
 801740c:	1c5d      	adds	r5, r3, #1
 801740e:	2339      	movs	r3, #57	; 0x39
 8017410:	7013      	strb	r3, [r2, #0]
 8017412:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017416:	2b39      	cmp	r3, #57	; 0x39
 8017418:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801741c:	d04f      	beq.n	80174be <_dtoa_r+0xaee>
 801741e:	3301      	adds	r3, #1
 8017420:	7013      	strb	r3, [r2, #0]
 8017422:	e754      	b.n	80172ce <_dtoa_r+0x8fe>
 8017424:	9a05      	ldr	r2, [sp, #20]
 8017426:	2b00      	cmp	r3, #0
 8017428:	f102 0501 	add.w	r5, r2, #1
 801742c:	dd06      	ble.n	801743c <_dtoa_r+0xa6c>
 801742e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017432:	d0e9      	beq.n	8017408 <_dtoa_r+0xa38>
 8017434:	f108 0801 	add.w	r8, r8, #1
 8017438:	9b05      	ldr	r3, [sp, #20]
 801743a:	e7c2      	b.n	80173c2 <_dtoa_r+0x9f2>
 801743c:	9a02      	ldr	r2, [sp, #8]
 801743e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017442:	eba5 030b 	sub.w	r3, r5, fp
 8017446:	4293      	cmp	r3, r2
 8017448:	d021      	beq.n	801748e <_dtoa_r+0xabe>
 801744a:	2300      	movs	r3, #0
 801744c:	220a      	movs	r2, #10
 801744e:	9904      	ldr	r1, [sp, #16]
 8017450:	4620      	mov	r0, r4
 8017452:	f000 fb04 	bl	8017a5e <__multadd>
 8017456:	45b1      	cmp	r9, r6
 8017458:	9004      	str	r0, [sp, #16]
 801745a:	f04f 0300 	mov.w	r3, #0
 801745e:	f04f 020a 	mov.w	r2, #10
 8017462:	4649      	mov	r1, r9
 8017464:	4620      	mov	r0, r4
 8017466:	d105      	bne.n	8017474 <_dtoa_r+0xaa4>
 8017468:	f000 faf9 	bl	8017a5e <__multadd>
 801746c:	4681      	mov	r9, r0
 801746e:	4606      	mov	r6, r0
 8017470:	9505      	str	r5, [sp, #20]
 8017472:	e776      	b.n	8017362 <_dtoa_r+0x992>
 8017474:	f000 faf3 	bl	8017a5e <__multadd>
 8017478:	4631      	mov	r1, r6
 801747a:	4681      	mov	r9, r0
 801747c:	2300      	movs	r3, #0
 801747e:	220a      	movs	r2, #10
 8017480:	4620      	mov	r0, r4
 8017482:	f000 faec 	bl	8017a5e <__multadd>
 8017486:	4606      	mov	r6, r0
 8017488:	e7f2      	b.n	8017470 <_dtoa_r+0xaa0>
 801748a:	f04f 0900 	mov.w	r9, #0
 801748e:	2201      	movs	r2, #1
 8017490:	9904      	ldr	r1, [sp, #16]
 8017492:	4620      	mov	r0, r4
 8017494:	f000 fc5a 	bl	8017d4c <__lshift>
 8017498:	4639      	mov	r1, r7
 801749a:	9004      	str	r0, [sp, #16]
 801749c:	f000 fcaa 	bl	8017df4 <__mcmp>
 80174a0:	2800      	cmp	r0, #0
 80174a2:	dcb6      	bgt.n	8017412 <_dtoa_r+0xa42>
 80174a4:	d102      	bne.n	80174ac <_dtoa_r+0xadc>
 80174a6:	f018 0f01 	tst.w	r8, #1
 80174aa:	d1b2      	bne.n	8017412 <_dtoa_r+0xa42>
 80174ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80174b0:	2b30      	cmp	r3, #48	; 0x30
 80174b2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80174b6:	f47f af0a 	bne.w	80172ce <_dtoa_r+0x8fe>
 80174ba:	4615      	mov	r5, r2
 80174bc:	e7f6      	b.n	80174ac <_dtoa_r+0xadc>
 80174be:	4593      	cmp	fp, r2
 80174c0:	d105      	bne.n	80174ce <_dtoa_r+0xafe>
 80174c2:	2331      	movs	r3, #49	; 0x31
 80174c4:	f10a 0a01 	add.w	sl, sl, #1
 80174c8:	f88b 3000 	strb.w	r3, [fp]
 80174cc:	e6ff      	b.n	80172ce <_dtoa_r+0x8fe>
 80174ce:	4615      	mov	r5, r2
 80174d0:	e79f      	b.n	8017412 <_dtoa_r+0xa42>
 80174d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017538 <_dtoa_r+0xb68>
 80174d6:	e007      	b.n	80174e8 <_dtoa_r+0xb18>
 80174d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174da:	f8df b060 	ldr.w	fp, [pc, #96]	; 801753c <_dtoa_r+0xb6c>
 80174de:	b11b      	cbz	r3, 80174e8 <_dtoa_r+0xb18>
 80174e0:	f10b 0308 	add.w	r3, fp, #8
 80174e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174e6:	6013      	str	r3, [r2, #0]
 80174e8:	4658      	mov	r0, fp
 80174ea:	b017      	add	sp, #92	; 0x5c
 80174ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f0:	9b06      	ldr	r3, [sp, #24]
 80174f2:	2b01      	cmp	r3, #1
 80174f4:	f77f ae35 	ble.w	8017162 <_dtoa_r+0x792>
 80174f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174fa:	9307      	str	r3, [sp, #28]
 80174fc:	e649      	b.n	8017192 <_dtoa_r+0x7c2>
 80174fe:	9b02      	ldr	r3, [sp, #8]
 8017500:	2b00      	cmp	r3, #0
 8017502:	dc03      	bgt.n	801750c <_dtoa_r+0xb3c>
 8017504:	9b06      	ldr	r3, [sp, #24]
 8017506:	2b02      	cmp	r3, #2
 8017508:	f73f aecc 	bgt.w	80172a4 <_dtoa_r+0x8d4>
 801750c:	465d      	mov	r5, fp
 801750e:	4639      	mov	r1, r7
 8017510:	9804      	ldr	r0, [sp, #16]
 8017512:	f7ff f9cf 	bl	80168b4 <quorem>
 8017516:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801751a:	f805 8b01 	strb.w	r8, [r5], #1
 801751e:	9a02      	ldr	r2, [sp, #8]
 8017520:	eba5 030b 	sub.w	r3, r5, fp
 8017524:	429a      	cmp	r2, r3
 8017526:	ddb0      	ble.n	801748a <_dtoa_r+0xaba>
 8017528:	2300      	movs	r3, #0
 801752a:	220a      	movs	r2, #10
 801752c:	9904      	ldr	r1, [sp, #16]
 801752e:	4620      	mov	r0, r4
 8017530:	f000 fa95 	bl	8017a5e <__multadd>
 8017534:	9004      	str	r0, [sp, #16]
 8017536:	e7ea      	b.n	801750e <_dtoa_r+0xb3e>
 8017538:	0801c5ac 	.word	0x0801c5ac
 801753c:	0801c3c3 	.word	0x0801c3c3

08017540 <__sflush_r>:
 8017540:	898a      	ldrh	r2, [r1, #12]
 8017542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017546:	4605      	mov	r5, r0
 8017548:	0710      	lsls	r0, r2, #28
 801754a:	460c      	mov	r4, r1
 801754c:	d458      	bmi.n	8017600 <__sflush_r+0xc0>
 801754e:	684b      	ldr	r3, [r1, #4]
 8017550:	2b00      	cmp	r3, #0
 8017552:	dc05      	bgt.n	8017560 <__sflush_r+0x20>
 8017554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017556:	2b00      	cmp	r3, #0
 8017558:	dc02      	bgt.n	8017560 <__sflush_r+0x20>
 801755a:	2000      	movs	r0, #0
 801755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017562:	2e00      	cmp	r6, #0
 8017564:	d0f9      	beq.n	801755a <__sflush_r+0x1a>
 8017566:	2300      	movs	r3, #0
 8017568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801756c:	682f      	ldr	r7, [r5, #0]
 801756e:	6a21      	ldr	r1, [r4, #32]
 8017570:	602b      	str	r3, [r5, #0]
 8017572:	d032      	beq.n	80175da <__sflush_r+0x9a>
 8017574:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017576:	89a3      	ldrh	r3, [r4, #12]
 8017578:	075a      	lsls	r2, r3, #29
 801757a:	d505      	bpl.n	8017588 <__sflush_r+0x48>
 801757c:	6863      	ldr	r3, [r4, #4]
 801757e:	1ac0      	subs	r0, r0, r3
 8017580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017582:	b10b      	cbz	r3, 8017588 <__sflush_r+0x48>
 8017584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017586:	1ac0      	subs	r0, r0, r3
 8017588:	2300      	movs	r3, #0
 801758a:	4602      	mov	r2, r0
 801758c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801758e:	6a21      	ldr	r1, [r4, #32]
 8017590:	4628      	mov	r0, r5
 8017592:	47b0      	blx	r6
 8017594:	1c43      	adds	r3, r0, #1
 8017596:	89a3      	ldrh	r3, [r4, #12]
 8017598:	d106      	bne.n	80175a8 <__sflush_r+0x68>
 801759a:	6829      	ldr	r1, [r5, #0]
 801759c:	291d      	cmp	r1, #29
 801759e:	d848      	bhi.n	8017632 <__sflush_r+0xf2>
 80175a0:	4a29      	ldr	r2, [pc, #164]	; (8017648 <__sflush_r+0x108>)
 80175a2:	40ca      	lsrs	r2, r1
 80175a4:	07d6      	lsls	r6, r2, #31
 80175a6:	d544      	bpl.n	8017632 <__sflush_r+0xf2>
 80175a8:	2200      	movs	r2, #0
 80175aa:	6062      	str	r2, [r4, #4]
 80175ac:	04d9      	lsls	r1, r3, #19
 80175ae:	6922      	ldr	r2, [r4, #16]
 80175b0:	6022      	str	r2, [r4, #0]
 80175b2:	d504      	bpl.n	80175be <__sflush_r+0x7e>
 80175b4:	1c42      	adds	r2, r0, #1
 80175b6:	d101      	bne.n	80175bc <__sflush_r+0x7c>
 80175b8:	682b      	ldr	r3, [r5, #0]
 80175ba:	b903      	cbnz	r3, 80175be <__sflush_r+0x7e>
 80175bc:	6560      	str	r0, [r4, #84]	; 0x54
 80175be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80175c0:	602f      	str	r7, [r5, #0]
 80175c2:	2900      	cmp	r1, #0
 80175c4:	d0c9      	beq.n	801755a <__sflush_r+0x1a>
 80175c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175ca:	4299      	cmp	r1, r3
 80175cc:	d002      	beq.n	80175d4 <__sflush_r+0x94>
 80175ce:	4628      	mov	r0, r5
 80175d0:	f000 fce4 	bl	8017f9c <_free_r>
 80175d4:	2000      	movs	r0, #0
 80175d6:	6360      	str	r0, [r4, #52]	; 0x34
 80175d8:	e7c0      	b.n	801755c <__sflush_r+0x1c>
 80175da:	2301      	movs	r3, #1
 80175dc:	4628      	mov	r0, r5
 80175de:	47b0      	blx	r6
 80175e0:	1c41      	adds	r1, r0, #1
 80175e2:	d1c8      	bne.n	8017576 <__sflush_r+0x36>
 80175e4:	682b      	ldr	r3, [r5, #0]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d0c5      	beq.n	8017576 <__sflush_r+0x36>
 80175ea:	2b1d      	cmp	r3, #29
 80175ec:	d001      	beq.n	80175f2 <__sflush_r+0xb2>
 80175ee:	2b16      	cmp	r3, #22
 80175f0:	d101      	bne.n	80175f6 <__sflush_r+0xb6>
 80175f2:	602f      	str	r7, [r5, #0]
 80175f4:	e7b1      	b.n	801755a <__sflush_r+0x1a>
 80175f6:	89a3      	ldrh	r3, [r4, #12]
 80175f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175fc:	81a3      	strh	r3, [r4, #12]
 80175fe:	e7ad      	b.n	801755c <__sflush_r+0x1c>
 8017600:	690f      	ldr	r7, [r1, #16]
 8017602:	2f00      	cmp	r7, #0
 8017604:	d0a9      	beq.n	801755a <__sflush_r+0x1a>
 8017606:	0793      	lsls	r3, r2, #30
 8017608:	680e      	ldr	r6, [r1, #0]
 801760a:	bf08      	it	eq
 801760c:	694b      	ldreq	r3, [r1, #20]
 801760e:	600f      	str	r7, [r1, #0]
 8017610:	bf18      	it	ne
 8017612:	2300      	movne	r3, #0
 8017614:	eba6 0807 	sub.w	r8, r6, r7
 8017618:	608b      	str	r3, [r1, #8]
 801761a:	f1b8 0f00 	cmp.w	r8, #0
 801761e:	dd9c      	ble.n	801755a <__sflush_r+0x1a>
 8017620:	4643      	mov	r3, r8
 8017622:	463a      	mov	r2, r7
 8017624:	6a21      	ldr	r1, [r4, #32]
 8017626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017628:	4628      	mov	r0, r5
 801762a:	47b0      	blx	r6
 801762c:	2800      	cmp	r0, #0
 801762e:	dc06      	bgt.n	801763e <__sflush_r+0xfe>
 8017630:	89a3      	ldrh	r3, [r4, #12]
 8017632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017636:	81a3      	strh	r3, [r4, #12]
 8017638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801763c:	e78e      	b.n	801755c <__sflush_r+0x1c>
 801763e:	4407      	add	r7, r0
 8017640:	eba8 0800 	sub.w	r8, r8, r0
 8017644:	e7e9      	b.n	801761a <__sflush_r+0xda>
 8017646:	bf00      	nop
 8017648:	20400001 	.word	0x20400001

0801764c <_fflush_r>:
 801764c:	b538      	push	{r3, r4, r5, lr}
 801764e:	690b      	ldr	r3, [r1, #16]
 8017650:	4605      	mov	r5, r0
 8017652:	460c      	mov	r4, r1
 8017654:	b1db      	cbz	r3, 801768e <_fflush_r+0x42>
 8017656:	b118      	cbz	r0, 8017660 <_fflush_r+0x14>
 8017658:	6983      	ldr	r3, [r0, #24]
 801765a:	b90b      	cbnz	r3, 8017660 <_fflush_r+0x14>
 801765c:	f000 f860 	bl	8017720 <__sinit>
 8017660:	4b0c      	ldr	r3, [pc, #48]	; (8017694 <_fflush_r+0x48>)
 8017662:	429c      	cmp	r4, r3
 8017664:	d109      	bne.n	801767a <_fflush_r+0x2e>
 8017666:	686c      	ldr	r4, [r5, #4]
 8017668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801766c:	b17b      	cbz	r3, 801768e <_fflush_r+0x42>
 801766e:	4621      	mov	r1, r4
 8017670:	4628      	mov	r0, r5
 8017672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017676:	f7ff bf63 	b.w	8017540 <__sflush_r>
 801767a:	4b07      	ldr	r3, [pc, #28]	; (8017698 <_fflush_r+0x4c>)
 801767c:	429c      	cmp	r4, r3
 801767e:	d101      	bne.n	8017684 <_fflush_r+0x38>
 8017680:	68ac      	ldr	r4, [r5, #8]
 8017682:	e7f1      	b.n	8017668 <_fflush_r+0x1c>
 8017684:	4b05      	ldr	r3, [pc, #20]	; (801769c <_fflush_r+0x50>)
 8017686:	429c      	cmp	r4, r3
 8017688:	bf08      	it	eq
 801768a:	68ec      	ldreq	r4, [r5, #12]
 801768c:	e7ec      	b.n	8017668 <_fflush_r+0x1c>
 801768e:	2000      	movs	r0, #0
 8017690:	bd38      	pop	{r3, r4, r5, pc}
 8017692:	bf00      	nop
 8017694:	0801c3f0 	.word	0x0801c3f0
 8017698:	0801c410 	.word	0x0801c410
 801769c:	0801c3d0 	.word	0x0801c3d0

080176a0 <std>:
 80176a0:	2300      	movs	r3, #0
 80176a2:	b510      	push	{r4, lr}
 80176a4:	4604      	mov	r4, r0
 80176a6:	e9c0 3300 	strd	r3, r3, [r0]
 80176aa:	6083      	str	r3, [r0, #8]
 80176ac:	8181      	strh	r1, [r0, #12]
 80176ae:	6643      	str	r3, [r0, #100]	; 0x64
 80176b0:	81c2      	strh	r2, [r0, #14]
 80176b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80176b6:	6183      	str	r3, [r0, #24]
 80176b8:	4619      	mov	r1, r3
 80176ba:	2208      	movs	r2, #8
 80176bc:	305c      	adds	r0, #92	; 0x5c
 80176be:	f7fd fdbe 	bl	801523e <memset>
 80176c2:	4b05      	ldr	r3, [pc, #20]	; (80176d8 <std+0x38>)
 80176c4:	6263      	str	r3, [r4, #36]	; 0x24
 80176c6:	4b05      	ldr	r3, [pc, #20]	; (80176dc <std+0x3c>)
 80176c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80176ca:	4b05      	ldr	r3, [pc, #20]	; (80176e0 <std+0x40>)
 80176cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80176ce:	4b05      	ldr	r3, [pc, #20]	; (80176e4 <std+0x44>)
 80176d0:	6224      	str	r4, [r4, #32]
 80176d2:	6323      	str	r3, [r4, #48]	; 0x30
 80176d4:	bd10      	pop	{r4, pc}
 80176d6:	bf00      	nop
 80176d8:	080181ad 	.word	0x080181ad
 80176dc:	080181d3 	.word	0x080181d3
 80176e0:	0801820b 	.word	0x0801820b
 80176e4:	0801822f 	.word	0x0801822f

080176e8 <_cleanup_r>:
 80176e8:	4901      	ldr	r1, [pc, #4]	; (80176f0 <_cleanup_r+0x8>)
 80176ea:	f000 b885 	b.w	80177f8 <_fwalk_reent>
 80176ee:	bf00      	nop
 80176f0:	0801764d 	.word	0x0801764d

080176f4 <__sfmoreglue>:
 80176f4:	b570      	push	{r4, r5, r6, lr}
 80176f6:	1e4a      	subs	r2, r1, #1
 80176f8:	2568      	movs	r5, #104	; 0x68
 80176fa:	4355      	muls	r5, r2
 80176fc:	460e      	mov	r6, r1
 80176fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017702:	f000 fc99 	bl	8018038 <_malloc_r>
 8017706:	4604      	mov	r4, r0
 8017708:	b140      	cbz	r0, 801771c <__sfmoreglue+0x28>
 801770a:	2100      	movs	r1, #0
 801770c:	e9c0 1600 	strd	r1, r6, [r0]
 8017710:	300c      	adds	r0, #12
 8017712:	60a0      	str	r0, [r4, #8]
 8017714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017718:	f7fd fd91 	bl	801523e <memset>
 801771c:	4620      	mov	r0, r4
 801771e:	bd70      	pop	{r4, r5, r6, pc}

08017720 <__sinit>:
 8017720:	6983      	ldr	r3, [r0, #24]
 8017722:	b510      	push	{r4, lr}
 8017724:	4604      	mov	r4, r0
 8017726:	bb33      	cbnz	r3, 8017776 <__sinit+0x56>
 8017728:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801772c:	6503      	str	r3, [r0, #80]	; 0x50
 801772e:	4b12      	ldr	r3, [pc, #72]	; (8017778 <__sinit+0x58>)
 8017730:	4a12      	ldr	r2, [pc, #72]	; (801777c <__sinit+0x5c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	6282      	str	r2, [r0, #40]	; 0x28
 8017736:	4298      	cmp	r0, r3
 8017738:	bf04      	itt	eq
 801773a:	2301      	moveq	r3, #1
 801773c:	6183      	streq	r3, [r0, #24]
 801773e:	f000 f81f 	bl	8017780 <__sfp>
 8017742:	6060      	str	r0, [r4, #4]
 8017744:	4620      	mov	r0, r4
 8017746:	f000 f81b 	bl	8017780 <__sfp>
 801774a:	60a0      	str	r0, [r4, #8]
 801774c:	4620      	mov	r0, r4
 801774e:	f000 f817 	bl	8017780 <__sfp>
 8017752:	2200      	movs	r2, #0
 8017754:	60e0      	str	r0, [r4, #12]
 8017756:	2104      	movs	r1, #4
 8017758:	6860      	ldr	r0, [r4, #4]
 801775a:	f7ff ffa1 	bl	80176a0 <std>
 801775e:	2201      	movs	r2, #1
 8017760:	2109      	movs	r1, #9
 8017762:	68a0      	ldr	r0, [r4, #8]
 8017764:	f7ff ff9c 	bl	80176a0 <std>
 8017768:	2202      	movs	r2, #2
 801776a:	2112      	movs	r1, #18
 801776c:	68e0      	ldr	r0, [r4, #12]
 801776e:	f7ff ff97 	bl	80176a0 <std>
 8017772:	2301      	movs	r3, #1
 8017774:	61a3      	str	r3, [r4, #24]
 8017776:	bd10      	pop	{r4, pc}
 8017778:	0801c2e0 	.word	0x0801c2e0
 801777c:	080176e9 	.word	0x080176e9

08017780 <__sfp>:
 8017780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017782:	4b1b      	ldr	r3, [pc, #108]	; (80177f0 <__sfp+0x70>)
 8017784:	681e      	ldr	r6, [r3, #0]
 8017786:	69b3      	ldr	r3, [r6, #24]
 8017788:	4607      	mov	r7, r0
 801778a:	b913      	cbnz	r3, 8017792 <__sfp+0x12>
 801778c:	4630      	mov	r0, r6
 801778e:	f7ff ffc7 	bl	8017720 <__sinit>
 8017792:	3648      	adds	r6, #72	; 0x48
 8017794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017798:	3b01      	subs	r3, #1
 801779a:	d503      	bpl.n	80177a4 <__sfp+0x24>
 801779c:	6833      	ldr	r3, [r6, #0]
 801779e:	b133      	cbz	r3, 80177ae <__sfp+0x2e>
 80177a0:	6836      	ldr	r6, [r6, #0]
 80177a2:	e7f7      	b.n	8017794 <__sfp+0x14>
 80177a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80177a8:	b16d      	cbz	r5, 80177c6 <__sfp+0x46>
 80177aa:	3468      	adds	r4, #104	; 0x68
 80177ac:	e7f4      	b.n	8017798 <__sfp+0x18>
 80177ae:	2104      	movs	r1, #4
 80177b0:	4638      	mov	r0, r7
 80177b2:	f7ff ff9f 	bl	80176f4 <__sfmoreglue>
 80177b6:	6030      	str	r0, [r6, #0]
 80177b8:	2800      	cmp	r0, #0
 80177ba:	d1f1      	bne.n	80177a0 <__sfp+0x20>
 80177bc:	230c      	movs	r3, #12
 80177be:	603b      	str	r3, [r7, #0]
 80177c0:	4604      	mov	r4, r0
 80177c2:	4620      	mov	r0, r4
 80177c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177c6:	4b0b      	ldr	r3, [pc, #44]	; (80177f4 <__sfp+0x74>)
 80177c8:	6665      	str	r5, [r4, #100]	; 0x64
 80177ca:	e9c4 5500 	strd	r5, r5, [r4]
 80177ce:	60a5      	str	r5, [r4, #8]
 80177d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80177d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80177d8:	2208      	movs	r2, #8
 80177da:	4629      	mov	r1, r5
 80177dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80177e0:	f7fd fd2d 	bl	801523e <memset>
 80177e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80177e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80177ec:	e7e9      	b.n	80177c2 <__sfp+0x42>
 80177ee:	bf00      	nop
 80177f0:	0801c2e0 	.word	0x0801c2e0
 80177f4:	ffff0001 	.word	0xffff0001

080177f8 <_fwalk_reent>:
 80177f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177fc:	4680      	mov	r8, r0
 80177fe:	4689      	mov	r9, r1
 8017800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017804:	2600      	movs	r6, #0
 8017806:	b914      	cbnz	r4, 801780e <_fwalk_reent+0x16>
 8017808:	4630      	mov	r0, r6
 801780a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801780e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017812:	3f01      	subs	r7, #1
 8017814:	d501      	bpl.n	801781a <_fwalk_reent+0x22>
 8017816:	6824      	ldr	r4, [r4, #0]
 8017818:	e7f5      	b.n	8017806 <_fwalk_reent+0xe>
 801781a:	89ab      	ldrh	r3, [r5, #12]
 801781c:	2b01      	cmp	r3, #1
 801781e:	d907      	bls.n	8017830 <_fwalk_reent+0x38>
 8017820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017824:	3301      	adds	r3, #1
 8017826:	d003      	beq.n	8017830 <_fwalk_reent+0x38>
 8017828:	4629      	mov	r1, r5
 801782a:	4640      	mov	r0, r8
 801782c:	47c8      	blx	r9
 801782e:	4306      	orrs	r6, r0
 8017830:	3568      	adds	r5, #104	; 0x68
 8017832:	e7ee      	b.n	8017812 <_fwalk_reent+0x1a>

08017834 <_findenv_r>:
 8017834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017838:	4607      	mov	r7, r0
 801783a:	468b      	mov	fp, r1
 801783c:	4690      	mov	r8, r2
 801783e:	f000 fdd9 	bl	80183f4 <__env_lock>
 8017842:	4b19      	ldr	r3, [pc, #100]	; (80178a8 <_findenv_r+0x74>)
 8017844:	681d      	ldr	r5, [r3, #0]
 8017846:	469a      	mov	sl, r3
 8017848:	b13d      	cbz	r5, 801785a <_findenv_r+0x26>
 801784a:	465c      	mov	r4, fp
 801784c:	4623      	mov	r3, r4
 801784e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017852:	b32a      	cbz	r2, 80178a0 <_findenv_r+0x6c>
 8017854:	2a3d      	cmp	r2, #61	; 0x3d
 8017856:	461c      	mov	r4, r3
 8017858:	d1f8      	bne.n	801784c <_findenv_r+0x18>
 801785a:	4638      	mov	r0, r7
 801785c:	f000 fdcb 	bl	80183f6 <__env_unlock>
 8017860:	2000      	movs	r0, #0
 8017862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017866:	464d      	mov	r5, r9
 8017868:	46a9      	mov	r9, r5
 801786a:	f859 0b04 	ldr.w	r0, [r9], #4
 801786e:	2800      	cmp	r0, #0
 8017870:	d0f3      	beq.n	801785a <_findenv_r+0x26>
 8017872:	4622      	mov	r2, r4
 8017874:	4659      	mov	r1, fp
 8017876:	f000 fce6 	bl	8018246 <strncmp>
 801787a:	2800      	cmp	r0, #0
 801787c:	d1f3      	bne.n	8017866 <_findenv_r+0x32>
 801787e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8017882:	191e      	adds	r6, r3, r4
 8017884:	5d1b      	ldrb	r3, [r3, r4]
 8017886:	2b3d      	cmp	r3, #61	; 0x3d
 8017888:	d1ed      	bne.n	8017866 <_findenv_r+0x32>
 801788a:	f8da 3000 	ldr.w	r3, [sl]
 801788e:	1aed      	subs	r5, r5, r3
 8017890:	10ad      	asrs	r5, r5, #2
 8017892:	4638      	mov	r0, r7
 8017894:	f8c8 5000 	str.w	r5, [r8]
 8017898:	f000 fdad 	bl	80183f6 <__env_unlock>
 801789c:	1c70      	adds	r0, r6, #1
 801789e:	e7e0      	b.n	8017862 <_findenv_r+0x2e>
 80178a0:	eba4 040b 	sub.w	r4, r4, fp
 80178a4:	e7e0      	b.n	8017868 <_findenv_r+0x34>
 80178a6:	bf00      	nop
 80178a8:	20000140 	.word	0x20000140

080178ac <_getenv_r>:
 80178ac:	b507      	push	{r0, r1, r2, lr}
 80178ae:	aa01      	add	r2, sp, #4
 80178b0:	f7ff ffc0 	bl	8017834 <_findenv_r>
 80178b4:	b003      	add	sp, #12
 80178b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080178bc <__gettzinfo>:
 80178bc:	4800      	ldr	r0, [pc, #0]	; (80178c0 <__gettzinfo+0x4>)
 80178be:	4770      	bx	lr
 80178c0:	200001c0 	.word	0x200001c0

080178c4 <_localeconv_r>:
 80178c4:	4b04      	ldr	r3, [pc, #16]	; (80178d8 <_localeconv_r+0x14>)
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	6a18      	ldr	r0, [r3, #32]
 80178ca:	4b04      	ldr	r3, [pc, #16]	; (80178dc <_localeconv_r+0x18>)
 80178cc:	2800      	cmp	r0, #0
 80178ce:	bf08      	it	eq
 80178d0:	4618      	moveq	r0, r3
 80178d2:	30f0      	adds	r0, #240	; 0xf0
 80178d4:	4770      	bx	lr
 80178d6:	bf00      	nop
 80178d8:	20000154 	.word	0x20000154
 80178dc:	20000218 	.word	0x20000218

080178e0 <__swhatbuf_r>:
 80178e0:	b570      	push	{r4, r5, r6, lr}
 80178e2:	460e      	mov	r6, r1
 80178e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178e8:	2900      	cmp	r1, #0
 80178ea:	b096      	sub	sp, #88	; 0x58
 80178ec:	4614      	mov	r4, r2
 80178ee:	461d      	mov	r5, r3
 80178f0:	da07      	bge.n	8017902 <__swhatbuf_r+0x22>
 80178f2:	2300      	movs	r3, #0
 80178f4:	602b      	str	r3, [r5, #0]
 80178f6:	89b3      	ldrh	r3, [r6, #12]
 80178f8:	061a      	lsls	r2, r3, #24
 80178fa:	d410      	bmi.n	801791e <__swhatbuf_r+0x3e>
 80178fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017900:	e00e      	b.n	8017920 <__swhatbuf_r+0x40>
 8017902:	466a      	mov	r2, sp
 8017904:	f000 fd78 	bl	80183f8 <_fstat_r>
 8017908:	2800      	cmp	r0, #0
 801790a:	dbf2      	blt.n	80178f2 <__swhatbuf_r+0x12>
 801790c:	9a01      	ldr	r2, [sp, #4]
 801790e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017912:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017916:	425a      	negs	r2, r3
 8017918:	415a      	adcs	r2, r3
 801791a:	602a      	str	r2, [r5, #0]
 801791c:	e7ee      	b.n	80178fc <__swhatbuf_r+0x1c>
 801791e:	2340      	movs	r3, #64	; 0x40
 8017920:	2000      	movs	r0, #0
 8017922:	6023      	str	r3, [r4, #0]
 8017924:	b016      	add	sp, #88	; 0x58
 8017926:	bd70      	pop	{r4, r5, r6, pc}

08017928 <__smakebuf_r>:
 8017928:	898b      	ldrh	r3, [r1, #12]
 801792a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801792c:	079d      	lsls	r5, r3, #30
 801792e:	4606      	mov	r6, r0
 8017930:	460c      	mov	r4, r1
 8017932:	d507      	bpl.n	8017944 <__smakebuf_r+0x1c>
 8017934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017938:	6023      	str	r3, [r4, #0]
 801793a:	6123      	str	r3, [r4, #16]
 801793c:	2301      	movs	r3, #1
 801793e:	6163      	str	r3, [r4, #20]
 8017940:	b002      	add	sp, #8
 8017942:	bd70      	pop	{r4, r5, r6, pc}
 8017944:	ab01      	add	r3, sp, #4
 8017946:	466a      	mov	r2, sp
 8017948:	f7ff ffca 	bl	80178e0 <__swhatbuf_r>
 801794c:	9900      	ldr	r1, [sp, #0]
 801794e:	4605      	mov	r5, r0
 8017950:	4630      	mov	r0, r6
 8017952:	f000 fb71 	bl	8018038 <_malloc_r>
 8017956:	b948      	cbnz	r0, 801796c <__smakebuf_r+0x44>
 8017958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801795c:	059a      	lsls	r2, r3, #22
 801795e:	d4ef      	bmi.n	8017940 <__smakebuf_r+0x18>
 8017960:	f023 0303 	bic.w	r3, r3, #3
 8017964:	f043 0302 	orr.w	r3, r3, #2
 8017968:	81a3      	strh	r3, [r4, #12]
 801796a:	e7e3      	b.n	8017934 <__smakebuf_r+0xc>
 801796c:	4b0d      	ldr	r3, [pc, #52]	; (80179a4 <__smakebuf_r+0x7c>)
 801796e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017970:	89a3      	ldrh	r3, [r4, #12]
 8017972:	6020      	str	r0, [r4, #0]
 8017974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017978:	81a3      	strh	r3, [r4, #12]
 801797a:	9b00      	ldr	r3, [sp, #0]
 801797c:	6163      	str	r3, [r4, #20]
 801797e:	9b01      	ldr	r3, [sp, #4]
 8017980:	6120      	str	r0, [r4, #16]
 8017982:	b15b      	cbz	r3, 801799c <__smakebuf_r+0x74>
 8017984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017988:	4630      	mov	r0, r6
 801798a:	f000 fd47 	bl	801841c <_isatty_r>
 801798e:	b128      	cbz	r0, 801799c <__smakebuf_r+0x74>
 8017990:	89a3      	ldrh	r3, [r4, #12]
 8017992:	f023 0303 	bic.w	r3, r3, #3
 8017996:	f043 0301 	orr.w	r3, r3, #1
 801799a:	81a3      	strh	r3, [r4, #12]
 801799c:	89a3      	ldrh	r3, [r4, #12]
 801799e:	431d      	orrs	r5, r3
 80179a0:	81a5      	strh	r5, [r4, #12]
 80179a2:	e7cd      	b.n	8017940 <__smakebuf_r+0x18>
 80179a4:	080176e9 	.word	0x080176e9

080179a8 <malloc>:
 80179a8:	4b02      	ldr	r3, [pc, #8]	; (80179b4 <malloc+0xc>)
 80179aa:	4601      	mov	r1, r0
 80179ac:	6818      	ldr	r0, [r3, #0]
 80179ae:	f000 bb43 	b.w	8018038 <_malloc_r>
 80179b2:	bf00      	nop
 80179b4:	20000154 	.word	0x20000154

080179b8 <free>:
 80179b8:	4b02      	ldr	r3, [pc, #8]	; (80179c4 <free+0xc>)
 80179ba:	4601      	mov	r1, r0
 80179bc:	6818      	ldr	r0, [r3, #0]
 80179be:	f000 baed 	b.w	8017f9c <_free_r>
 80179c2:	bf00      	nop
 80179c4:	20000154 	.word	0x20000154

080179c8 <_Balloc>:
 80179c8:	b570      	push	{r4, r5, r6, lr}
 80179ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80179cc:	4604      	mov	r4, r0
 80179ce:	460e      	mov	r6, r1
 80179d0:	b93d      	cbnz	r5, 80179e2 <_Balloc+0x1a>
 80179d2:	2010      	movs	r0, #16
 80179d4:	f7ff ffe8 	bl	80179a8 <malloc>
 80179d8:	6260      	str	r0, [r4, #36]	; 0x24
 80179da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80179de:	6005      	str	r5, [r0, #0]
 80179e0:	60c5      	str	r5, [r0, #12]
 80179e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80179e4:	68eb      	ldr	r3, [r5, #12]
 80179e6:	b183      	cbz	r3, 8017a0a <_Balloc+0x42>
 80179e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80179ea:	68db      	ldr	r3, [r3, #12]
 80179ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80179f0:	b9b8      	cbnz	r0, 8017a22 <_Balloc+0x5a>
 80179f2:	2101      	movs	r1, #1
 80179f4:	fa01 f506 	lsl.w	r5, r1, r6
 80179f8:	1d6a      	adds	r2, r5, #5
 80179fa:	0092      	lsls	r2, r2, #2
 80179fc:	4620      	mov	r0, r4
 80179fe:	f000 fabf 	bl	8017f80 <_calloc_r>
 8017a02:	b160      	cbz	r0, 8017a1e <_Balloc+0x56>
 8017a04:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017a08:	e00e      	b.n	8017a28 <_Balloc+0x60>
 8017a0a:	2221      	movs	r2, #33	; 0x21
 8017a0c:	2104      	movs	r1, #4
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f000 fab6 	bl	8017f80 <_calloc_r>
 8017a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a16:	60e8      	str	r0, [r5, #12]
 8017a18:	68db      	ldr	r3, [r3, #12]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d1e4      	bne.n	80179e8 <_Balloc+0x20>
 8017a1e:	2000      	movs	r0, #0
 8017a20:	bd70      	pop	{r4, r5, r6, pc}
 8017a22:	6802      	ldr	r2, [r0, #0]
 8017a24:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017a28:	2300      	movs	r3, #0
 8017a2a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017a2e:	e7f7      	b.n	8017a20 <_Balloc+0x58>

08017a30 <_Bfree>:
 8017a30:	b570      	push	{r4, r5, r6, lr}
 8017a32:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017a34:	4606      	mov	r6, r0
 8017a36:	460d      	mov	r5, r1
 8017a38:	b93c      	cbnz	r4, 8017a4a <_Bfree+0x1a>
 8017a3a:	2010      	movs	r0, #16
 8017a3c:	f7ff ffb4 	bl	80179a8 <malloc>
 8017a40:	6270      	str	r0, [r6, #36]	; 0x24
 8017a42:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017a46:	6004      	str	r4, [r0, #0]
 8017a48:	60c4      	str	r4, [r0, #12]
 8017a4a:	b13d      	cbz	r5, 8017a5c <_Bfree+0x2c>
 8017a4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017a4e:	686a      	ldr	r2, [r5, #4]
 8017a50:	68db      	ldr	r3, [r3, #12]
 8017a52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017a56:	6029      	str	r1, [r5, #0]
 8017a58:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017a5c:	bd70      	pop	{r4, r5, r6, pc}

08017a5e <__multadd>:
 8017a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a62:	690d      	ldr	r5, [r1, #16]
 8017a64:	461f      	mov	r7, r3
 8017a66:	4606      	mov	r6, r0
 8017a68:	460c      	mov	r4, r1
 8017a6a:	f101 0c14 	add.w	ip, r1, #20
 8017a6e:	2300      	movs	r3, #0
 8017a70:	f8dc 0000 	ldr.w	r0, [ip]
 8017a74:	b281      	uxth	r1, r0
 8017a76:	fb02 7101 	mla	r1, r2, r1, r7
 8017a7a:	0c0f      	lsrs	r7, r1, #16
 8017a7c:	0c00      	lsrs	r0, r0, #16
 8017a7e:	fb02 7000 	mla	r0, r2, r0, r7
 8017a82:	b289      	uxth	r1, r1
 8017a84:	3301      	adds	r3, #1
 8017a86:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017a8a:	429d      	cmp	r5, r3
 8017a8c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017a90:	f84c 1b04 	str.w	r1, [ip], #4
 8017a94:	dcec      	bgt.n	8017a70 <__multadd+0x12>
 8017a96:	b1d7      	cbz	r7, 8017ace <__multadd+0x70>
 8017a98:	68a3      	ldr	r3, [r4, #8]
 8017a9a:	42ab      	cmp	r3, r5
 8017a9c:	dc12      	bgt.n	8017ac4 <__multadd+0x66>
 8017a9e:	6861      	ldr	r1, [r4, #4]
 8017aa0:	4630      	mov	r0, r6
 8017aa2:	3101      	adds	r1, #1
 8017aa4:	f7ff ff90 	bl	80179c8 <_Balloc>
 8017aa8:	6922      	ldr	r2, [r4, #16]
 8017aaa:	3202      	adds	r2, #2
 8017aac:	f104 010c 	add.w	r1, r4, #12
 8017ab0:	4680      	mov	r8, r0
 8017ab2:	0092      	lsls	r2, r2, #2
 8017ab4:	300c      	adds	r0, #12
 8017ab6:	f7fd fbb7 	bl	8015228 <memcpy>
 8017aba:	4621      	mov	r1, r4
 8017abc:	4630      	mov	r0, r6
 8017abe:	f7ff ffb7 	bl	8017a30 <_Bfree>
 8017ac2:	4644      	mov	r4, r8
 8017ac4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017ac8:	3501      	adds	r5, #1
 8017aca:	615f      	str	r7, [r3, #20]
 8017acc:	6125      	str	r5, [r4, #16]
 8017ace:	4620      	mov	r0, r4
 8017ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ad4 <__hi0bits>:
 8017ad4:	0c02      	lsrs	r2, r0, #16
 8017ad6:	0412      	lsls	r2, r2, #16
 8017ad8:	4603      	mov	r3, r0
 8017ada:	b9b2      	cbnz	r2, 8017b0a <__hi0bits+0x36>
 8017adc:	0403      	lsls	r3, r0, #16
 8017ade:	2010      	movs	r0, #16
 8017ae0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017ae4:	bf04      	itt	eq
 8017ae6:	021b      	lsleq	r3, r3, #8
 8017ae8:	3008      	addeq	r0, #8
 8017aea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017aee:	bf04      	itt	eq
 8017af0:	011b      	lsleq	r3, r3, #4
 8017af2:	3004      	addeq	r0, #4
 8017af4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017af8:	bf04      	itt	eq
 8017afa:	009b      	lsleq	r3, r3, #2
 8017afc:	3002      	addeq	r0, #2
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	db06      	blt.n	8017b10 <__hi0bits+0x3c>
 8017b02:	005b      	lsls	r3, r3, #1
 8017b04:	d503      	bpl.n	8017b0e <__hi0bits+0x3a>
 8017b06:	3001      	adds	r0, #1
 8017b08:	4770      	bx	lr
 8017b0a:	2000      	movs	r0, #0
 8017b0c:	e7e8      	b.n	8017ae0 <__hi0bits+0xc>
 8017b0e:	2020      	movs	r0, #32
 8017b10:	4770      	bx	lr

08017b12 <__lo0bits>:
 8017b12:	6803      	ldr	r3, [r0, #0]
 8017b14:	f013 0207 	ands.w	r2, r3, #7
 8017b18:	4601      	mov	r1, r0
 8017b1a:	d00b      	beq.n	8017b34 <__lo0bits+0x22>
 8017b1c:	07da      	lsls	r2, r3, #31
 8017b1e:	d423      	bmi.n	8017b68 <__lo0bits+0x56>
 8017b20:	0798      	lsls	r0, r3, #30
 8017b22:	bf49      	itett	mi
 8017b24:	085b      	lsrmi	r3, r3, #1
 8017b26:	089b      	lsrpl	r3, r3, #2
 8017b28:	2001      	movmi	r0, #1
 8017b2a:	600b      	strmi	r3, [r1, #0]
 8017b2c:	bf5c      	itt	pl
 8017b2e:	600b      	strpl	r3, [r1, #0]
 8017b30:	2002      	movpl	r0, #2
 8017b32:	4770      	bx	lr
 8017b34:	b298      	uxth	r0, r3
 8017b36:	b9a8      	cbnz	r0, 8017b64 <__lo0bits+0x52>
 8017b38:	0c1b      	lsrs	r3, r3, #16
 8017b3a:	2010      	movs	r0, #16
 8017b3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017b40:	bf04      	itt	eq
 8017b42:	0a1b      	lsreq	r3, r3, #8
 8017b44:	3008      	addeq	r0, #8
 8017b46:	071a      	lsls	r2, r3, #28
 8017b48:	bf04      	itt	eq
 8017b4a:	091b      	lsreq	r3, r3, #4
 8017b4c:	3004      	addeq	r0, #4
 8017b4e:	079a      	lsls	r2, r3, #30
 8017b50:	bf04      	itt	eq
 8017b52:	089b      	lsreq	r3, r3, #2
 8017b54:	3002      	addeq	r0, #2
 8017b56:	07da      	lsls	r2, r3, #31
 8017b58:	d402      	bmi.n	8017b60 <__lo0bits+0x4e>
 8017b5a:	085b      	lsrs	r3, r3, #1
 8017b5c:	d006      	beq.n	8017b6c <__lo0bits+0x5a>
 8017b5e:	3001      	adds	r0, #1
 8017b60:	600b      	str	r3, [r1, #0]
 8017b62:	4770      	bx	lr
 8017b64:	4610      	mov	r0, r2
 8017b66:	e7e9      	b.n	8017b3c <__lo0bits+0x2a>
 8017b68:	2000      	movs	r0, #0
 8017b6a:	4770      	bx	lr
 8017b6c:	2020      	movs	r0, #32
 8017b6e:	4770      	bx	lr

08017b70 <__i2b>:
 8017b70:	b510      	push	{r4, lr}
 8017b72:	460c      	mov	r4, r1
 8017b74:	2101      	movs	r1, #1
 8017b76:	f7ff ff27 	bl	80179c8 <_Balloc>
 8017b7a:	2201      	movs	r2, #1
 8017b7c:	6144      	str	r4, [r0, #20]
 8017b7e:	6102      	str	r2, [r0, #16]
 8017b80:	bd10      	pop	{r4, pc}

08017b82 <__multiply>:
 8017b82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b86:	4614      	mov	r4, r2
 8017b88:	690a      	ldr	r2, [r1, #16]
 8017b8a:	6923      	ldr	r3, [r4, #16]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	bfb8      	it	lt
 8017b90:	460b      	movlt	r3, r1
 8017b92:	4688      	mov	r8, r1
 8017b94:	bfbc      	itt	lt
 8017b96:	46a0      	movlt	r8, r4
 8017b98:	461c      	movlt	r4, r3
 8017b9a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017b9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017ba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ba6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017baa:	eb07 0609 	add.w	r6, r7, r9
 8017bae:	42b3      	cmp	r3, r6
 8017bb0:	bfb8      	it	lt
 8017bb2:	3101      	addlt	r1, #1
 8017bb4:	f7ff ff08 	bl	80179c8 <_Balloc>
 8017bb8:	f100 0514 	add.w	r5, r0, #20
 8017bbc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017bc0:	462b      	mov	r3, r5
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	4573      	cmp	r3, lr
 8017bc6:	d316      	bcc.n	8017bf6 <__multiply+0x74>
 8017bc8:	f104 0214 	add.w	r2, r4, #20
 8017bcc:	f108 0114 	add.w	r1, r8, #20
 8017bd0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017bd4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017bd8:	9300      	str	r3, [sp, #0]
 8017bda:	9b00      	ldr	r3, [sp, #0]
 8017bdc:	9201      	str	r2, [sp, #4]
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d80c      	bhi.n	8017bfc <__multiply+0x7a>
 8017be2:	2e00      	cmp	r6, #0
 8017be4:	dd03      	ble.n	8017bee <__multiply+0x6c>
 8017be6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d05d      	beq.n	8017caa <__multiply+0x128>
 8017bee:	6106      	str	r6, [r0, #16]
 8017bf0:	b003      	add	sp, #12
 8017bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bf6:	f843 2b04 	str.w	r2, [r3], #4
 8017bfa:	e7e3      	b.n	8017bc4 <__multiply+0x42>
 8017bfc:	f8b2 b000 	ldrh.w	fp, [r2]
 8017c00:	f1bb 0f00 	cmp.w	fp, #0
 8017c04:	d023      	beq.n	8017c4e <__multiply+0xcc>
 8017c06:	4689      	mov	r9, r1
 8017c08:	46ac      	mov	ip, r5
 8017c0a:	f04f 0800 	mov.w	r8, #0
 8017c0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017c12:	f8dc a000 	ldr.w	sl, [ip]
 8017c16:	b2a3      	uxth	r3, r4
 8017c18:	fa1f fa8a 	uxth.w	sl, sl
 8017c1c:	fb0b a303 	mla	r3, fp, r3, sl
 8017c20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017c24:	f8dc 4000 	ldr.w	r4, [ip]
 8017c28:	4443      	add	r3, r8
 8017c2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017c2e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017c32:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017c36:	46e2      	mov	sl, ip
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017c3e:	454f      	cmp	r7, r9
 8017c40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017c44:	f84a 3b04 	str.w	r3, [sl], #4
 8017c48:	d82b      	bhi.n	8017ca2 <__multiply+0x120>
 8017c4a:	f8cc 8004 	str.w	r8, [ip, #4]
 8017c4e:	9b01      	ldr	r3, [sp, #4]
 8017c50:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017c54:	3204      	adds	r2, #4
 8017c56:	f1ba 0f00 	cmp.w	sl, #0
 8017c5a:	d020      	beq.n	8017c9e <__multiply+0x11c>
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	4689      	mov	r9, r1
 8017c60:	46a8      	mov	r8, r5
 8017c62:	f04f 0b00 	mov.w	fp, #0
 8017c66:	f8b9 c000 	ldrh.w	ip, [r9]
 8017c6a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017c6e:	fb0a 440c 	mla	r4, sl, ip, r4
 8017c72:	445c      	add	r4, fp
 8017c74:	46c4      	mov	ip, r8
 8017c76:	b29b      	uxth	r3, r3
 8017c78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017c7c:	f84c 3b04 	str.w	r3, [ip], #4
 8017c80:	f859 3b04 	ldr.w	r3, [r9], #4
 8017c84:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017c88:	0c1b      	lsrs	r3, r3, #16
 8017c8a:	fb0a b303 	mla	r3, sl, r3, fp
 8017c8e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017c92:	454f      	cmp	r7, r9
 8017c94:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017c98:	d805      	bhi.n	8017ca6 <__multiply+0x124>
 8017c9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8017c9e:	3504      	adds	r5, #4
 8017ca0:	e79b      	b.n	8017bda <__multiply+0x58>
 8017ca2:	46d4      	mov	ip, sl
 8017ca4:	e7b3      	b.n	8017c0e <__multiply+0x8c>
 8017ca6:	46e0      	mov	r8, ip
 8017ca8:	e7dd      	b.n	8017c66 <__multiply+0xe4>
 8017caa:	3e01      	subs	r6, #1
 8017cac:	e799      	b.n	8017be2 <__multiply+0x60>
	...

08017cb0 <__pow5mult>:
 8017cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cb4:	4615      	mov	r5, r2
 8017cb6:	f012 0203 	ands.w	r2, r2, #3
 8017cba:	4606      	mov	r6, r0
 8017cbc:	460f      	mov	r7, r1
 8017cbe:	d007      	beq.n	8017cd0 <__pow5mult+0x20>
 8017cc0:	3a01      	subs	r2, #1
 8017cc2:	4c21      	ldr	r4, [pc, #132]	; (8017d48 <__pow5mult+0x98>)
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017cca:	f7ff fec8 	bl	8017a5e <__multadd>
 8017cce:	4607      	mov	r7, r0
 8017cd0:	10ad      	asrs	r5, r5, #2
 8017cd2:	d035      	beq.n	8017d40 <__pow5mult+0x90>
 8017cd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017cd6:	b93c      	cbnz	r4, 8017ce8 <__pow5mult+0x38>
 8017cd8:	2010      	movs	r0, #16
 8017cda:	f7ff fe65 	bl	80179a8 <malloc>
 8017cde:	6270      	str	r0, [r6, #36]	; 0x24
 8017ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ce4:	6004      	str	r4, [r0, #0]
 8017ce6:	60c4      	str	r4, [r0, #12]
 8017ce8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017cf0:	b94c      	cbnz	r4, 8017d06 <__pow5mult+0x56>
 8017cf2:	f240 2171 	movw	r1, #625	; 0x271
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	f7ff ff3a 	bl	8017b70 <__i2b>
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8017d02:	4604      	mov	r4, r0
 8017d04:	6003      	str	r3, [r0, #0]
 8017d06:	f04f 0800 	mov.w	r8, #0
 8017d0a:	07eb      	lsls	r3, r5, #31
 8017d0c:	d50a      	bpl.n	8017d24 <__pow5mult+0x74>
 8017d0e:	4639      	mov	r1, r7
 8017d10:	4622      	mov	r2, r4
 8017d12:	4630      	mov	r0, r6
 8017d14:	f7ff ff35 	bl	8017b82 <__multiply>
 8017d18:	4639      	mov	r1, r7
 8017d1a:	4681      	mov	r9, r0
 8017d1c:	4630      	mov	r0, r6
 8017d1e:	f7ff fe87 	bl	8017a30 <_Bfree>
 8017d22:	464f      	mov	r7, r9
 8017d24:	106d      	asrs	r5, r5, #1
 8017d26:	d00b      	beq.n	8017d40 <__pow5mult+0x90>
 8017d28:	6820      	ldr	r0, [r4, #0]
 8017d2a:	b938      	cbnz	r0, 8017d3c <__pow5mult+0x8c>
 8017d2c:	4622      	mov	r2, r4
 8017d2e:	4621      	mov	r1, r4
 8017d30:	4630      	mov	r0, r6
 8017d32:	f7ff ff26 	bl	8017b82 <__multiply>
 8017d36:	6020      	str	r0, [r4, #0]
 8017d38:	f8c0 8000 	str.w	r8, [r0]
 8017d3c:	4604      	mov	r4, r0
 8017d3e:	e7e4      	b.n	8017d0a <__pow5mult+0x5a>
 8017d40:	4638      	mov	r0, r7
 8017d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d46:	bf00      	nop
 8017d48:	0801c580 	.word	0x0801c580

08017d4c <__lshift>:
 8017d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d50:	460c      	mov	r4, r1
 8017d52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017d56:	6923      	ldr	r3, [r4, #16]
 8017d58:	6849      	ldr	r1, [r1, #4]
 8017d5a:	eb0a 0903 	add.w	r9, sl, r3
 8017d5e:	68a3      	ldr	r3, [r4, #8]
 8017d60:	4607      	mov	r7, r0
 8017d62:	4616      	mov	r6, r2
 8017d64:	f109 0501 	add.w	r5, r9, #1
 8017d68:	42ab      	cmp	r3, r5
 8017d6a:	db32      	blt.n	8017dd2 <__lshift+0x86>
 8017d6c:	4638      	mov	r0, r7
 8017d6e:	f7ff fe2b 	bl	80179c8 <_Balloc>
 8017d72:	2300      	movs	r3, #0
 8017d74:	4680      	mov	r8, r0
 8017d76:	f100 0114 	add.w	r1, r0, #20
 8017d7a:	461a      	mov	r2, r3
 8017d7c:	4553      	cmp	r3, sl
 8017d7e:	db2b      	blt.n	8017dd8 <__lshift+0x8c>
 8017d80:	6920      	ldr	r0, [r4, #16]
 8017d82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017d86:	f104 0314 	add.w	r3, r4, #20
 8017d8a:	f016 021f 	ands.w	r2, r6, #31
 8017d8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017d92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017d96:	d025      	beq.n	8017de4 <__lshift+0x98>
 8017d98:	f1c2 0e20 	rsb	lr, r2, #32
 8017d9c:	2000      	movs	r0, #0
 8017d9e:	681e      	ldr	r6, [r3, #0]
 8017da0:	468a      	mov	sl, r1
 8017da2:	4096      	lsls	r6, r2
 8017da4:	4330      	orrs	r0, r6
 8017da6:	f84a 0b04 	str.w	r0, [sl], #4
 8017daa:	f853 0b04 	ldr.w	r0, [r3], #4
 8017dae:	459c      	cmp	ip, r3
 8017db0:	fa20 f00e 	lsr.w	r0, r0, lr
 8017db4:	d814      	bhi.n	8017de0 <__lshift+0x94>
 8017db6:	6048      	str	r0, [r1, #4]
 8017db8:	b108      	cbz	r0, 8017dbe <__lshift+0x72>
 8017dba:	f109 0502 	add.w	r5, r9, #2
 8017dbe:	3d01      	subs	r5, #1
 8017dc0:	4638      	mov	r0, r7
 8017dc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8017dc6:	4621      	mov	r1, r4
 8017dc8:	f7ff fe32 	bl	8017a30 <_Bfree>
 8017dcc:	4640      	mov	r0, r8
 8017dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dd2:	3101      	adds	r1, #1
 8017dd4:	005b      	lsls	r3, r3, #1
 8017dd6:	e7c7      	b.n	8017d68 <__lshift+0x1c>
 8017dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017ddc:	3301      	adds	r3, #1
 8017dde:	e7cd      	b.n	8017d7c <__lshift+0x30>
 8017de0:	4651      	mov	r1, sl
 8017de2:	e7dc      	b.n	8017d9e <__lshift+0x52>
 8017de4:	3904      	subs	r1, #4
 8017de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dea:	f841 2f04 	str.w	r2, [r1, #4]!
 8017dee:	459c      	cmp	ip, r3
 8017df0:	d8f9      	bhi.n	8017de6 <__lshift+0x9a>
 8017df2:	e7e4      	b.n	8017dbe <__lshift+0x72>

08017df4 <__mcmp>:
 8017df4:	6903      	ldr	r3, [r0, #16]
 8017df6:	690a      	ldr	r2, [r1, #16]
 8017df8:	1a9b      	subs	r3, r3, r2
 8017dfa:	b530      	push	{r4, r5, lr}
 8017dfc:	d10c      	bne.n	8017e18 <__mcmp+0x24>
 8017dfe:	0092      	lsls	r2, r2, #2
 8017e00:	3014      	adds	r0, #20
 8017e02:	3114      	adds	r1, #20
 8017e04:	1884      	adds	r4, r0, r2
 8017e06:	4411      	add	r1, r2
 8017e08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017e0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017e10:	4295      	cmp	r5, r2
 8017e12:	d003      	beq.n	8017e1c <__mcmp+0x28>
 8017e14:	d305      	bcc.n	8017e22 <__mcmp+0x2e>
 8017e16:	2301      	movs	r3, #1
 8017e18:	4618      	mov	r0, r3
 8017e1a:	bd30      	pop	{r4, r5, pc}
 8017e1c:	42a0      	cmp	r0, r4
 8017e1e:	d3f3      	bcc.n	8017e08 <__mcmp+0x14>
 8017e20:	e7fa      	b.n	8017e18 <__mcmp+0x24>
 8017e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e26:	e7f7      	b.n	8017e18 <__mcmp+0x24>

08017e28 <__mdiff>:
 8017e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e2c:	460d      	mov	r5, r1
 8017e2e:	4607      	mov	r7, r0
 8017e30:	4611      	mov	r1, r2
 8017e32:	4628      	mov	r0, r5
 8017e34:	4614      	mov	r4, r2
 8017e36:	f7ff ffdd 	bl	8017df4 <__mcmp>
 8017e3a:	1e06      	subs	r6, r0, #0
 8017e3c:	d108      	bne.n	8017e50 <__mdiff+0x28>
 8017e3e:	4631      	mov	r1, r6
 8017e40:	4638      	mov	r0, r7
 8017e42:	f7ff fdc1 	bl	80179c8 <_Balloc>
 8017e46:	2301      	movs	r3, #1
 8017e48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e50:	bfa4      	itt	ge
 8017e52:	4623      	movge	r3, r4
 8017e54:	462c      	movge	r4, r5
 8017e56:	4638      	mov	r0, r7
 8017e58:	6861      	ldr	r1, [r4, #4]
 8017e5a:	bfa6      	itte	ge
 8017e5c:	461d      	movge	r5, r3
 8017e5e:	2600      	movge	r6, #0
 8017e60:	2601      	movlt	r6, #1
 8017e62:	f7ff fdb1 	bl	80179c8 <_Balloc>
 8017e66:	692b      	ldr	r3, [r5, #16]
 8017e68:	60c6      	str	r6, [r0, #12]
 8017e6a:	6926      	ldr	r6, [r4, #16]
 8017e6c:	f105 0914 	add.w	r9, r5, #20
 8017e70:	f104 0214 	add.w	r2, r4, #20
 8017e74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017e78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017e7c:	f100 0514 	add.w	r5, r0, #20
 8017e80:	f04f 0e00 	mov.w	lr, #0
 8017e84:	f852 ab04 	ldr.w	sl, [r2], #4
 8017e88:	f859 4b04 	ldr.w	r4, [r9], #4
 8017e8c:	fa1e f18a 	uxtah	r1, lr, sl
 8017e90:	b2a3      	uxth	r3, r4
 8017e92:	1ac9      	subs	r1, r1, r3
 8017e94:	0c23      	lsrs	r3, r4, #16
 8017e96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017e9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017e9e:	b289      	uxth	r1, r1
 8017ea0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017ea4:	45c8      	cmp	r8, r9
 8017ea6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017eaa:	4694      	mov	ip, r2
 8017eac:	f845 3b04 	str.w	r3, [r5], #4
 8017eb0:	d8e8      	bhi.n	8017e84 <__mdiff+0x5c>
 8017eb2:	45bc      	cmp	ip, r7
 8017eb4:	d304      	bcc.n	8017ec0 <__mdiff+0x98>
 8017eb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017eba:	b183      	cbz	r3, 8017ede <__mdiff+0xb6>
 8017ebc:	6106      	str	r6, [r0, #16]
 8017ebe:	e7c5      	b.n	8017e4c <__mdiff+0x24>
 8017ec0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017ec4:	fa1e f381 	uxtah	r3, lr, r1
 8017ec8:	141a      	asrs	r2, r3, #16
 8017eca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ed4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017ed8:	f845 3b04 	str.w	r3, [r5], #4
 8017edc:	e7e9      	b.n	8017eb2 <__mdiff+0x8a>
 8017ede:	3e01      	subs	r6, #1
 8017ee0:	e7e9      	b.n	8017eb6 <__mdiff+0x8e>

08017ee2 <__d2b>:
 8017ee2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ee6:	460e      	mov	r6, r1
 8017ee8:	2101      	movs	r1, #1
 8017eea:	ec59 8b10 	vmov	r8, r9, d0
 8017eee:	4615      	mov	r5, r2
 8017ef0:	f7ff fd6a 	bl	80179c8 <_Balloc>
 8017ef4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017ef8:	4607      	mov	r7, r0
 8017efa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017efe:	bb34      	cbnz	r4, 8017f4e <__d2b+0x6c>
 8017f00:	9301      	str	r3, [sp, #4]
 8017f02:	f1b8 0300 	subs.w	r3, r8, #0
 8017f06:	d027      	beq.n	8017f58 <__d2b+0x76>
 8017f08:	a802      	add	r0, sp, #8
 8017f0a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017f0e:	f7ff fe00 	bl	8017b12 <__lo0bits>
 8017f12:	9900      	ldr	r1, [sp, #0]
 8017f14:	b1f0      	cbz	r0, 8017f54 <__d2b+0x72>
 8017f16:	9a01      	ldr	r2, [sp, #4]
 8017f18:	f1c0 0320 	rsb	r3, r0, #32
 8017f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8017f20:	430b      	orrs	r3, r1
 8017f22:	40c2      	lsrs	r2, r0
 8017f24:	617b      	str	r3, [r7, #20]
 8017f26:	9201      	str	r2, [sp, #4]
 8017f28:	9b01      	ldr	r3, [sp, #4]
 8017f2a:	61bb      	str	r3, [r7, #24]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	bf14      	ite	ne
 8017f30:	2102      	movne	r1, #2
 8017f32:	2101      	moveq	r1, #1
 8017f34:	6139      	str	r1, [r7, #16]
 8017f36:	b1c4      	cbz	r4, 8017f6a <__d2b+0x88>
 8017f38:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017f3c:	4404      	add	r4, r0
 8017f3e:	6034      	str	r4, [r6, #0]
 8017f40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017f44:	6028      	str	r0, [r5, #0]
 8017f46:	4638      	mov	r0, r7
 8017f48:	b003      	add	sp, #12
 8017f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f52:	e7d5      	b.n	8017f00 <__d2b+0x1e>
 8017f54:	6179      	str	r1, [r7, #20]
 8017f56:	e7e7      	b.n	8017f28 <__d2b+0x46>
 8017f58:	a801      	add	r0, sp, #4
 8017f5a:	f7ff fdda 	bl	8017b12 <__lo0bits>
 8017f5e:	9b01      	ldr	r3, [sp, #4]
 8017f60:	617b      	str	r3, [r7, #20]
 8017f62:	2101      	movs	r1, #1
 8017f64:	6139      	str	r1, [r7, #16]
 8017f66:	3020      	adds	r0, #32
 8017f68:	e7e5      	b.n	8017f36 <__d2b+0x54>
 8017f6a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017f6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017f72:	6030      	str	r0, [r6, #0]
 8017f74:	6918      	ldr	r0, [r3, #16]
 8017f76:	f7ff fdad 	bl	8017ad4 <__hi0bits>
 8017f7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017f7e:	e7e1      	b.n	8017f44 <__d2b+0x62>

08017f80 <_calloc_r>:
 8017f80:	b538      	push	{r3, r4, r5, lr}
 8017f82:	fb02 f401 	mul.w	r4, r2, r1
 8017f86:	4621      	mov	r1, r4
 8017f88:	f000 f856 	bl	8018038 <_malloc_r>
 8017f8c:	4605      	mov	r5, r0
 8017f8e:	b118      	cbz	r0, 8017f98 <_calloc_r+0x18>
 8017f90:	4622      	mov	r2, r4
 8017f92:	2100      	movs	r1, #0
 8017f94:	f7fd f953 	bl	801523e <memset>
 8017f98:	4628      	mov	r0, r5
 8017f9a:	bd38      	pop	{r3, r4, r5, pc}

08017f9c <_free_r>:
 8017f9c:	b538      	push	{r3, r4, r5, lr}
 8017f9e:	4605      	mov	r5, r0
 8017fa0:	2900      	cmp	r1, #0
 8017fa2:	d045      	beq.n	8018030 <_free_r+0x94>
 8017fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fa8:	1f0c      	subs	r4, r1, #4
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	bfb8      	it	lt
 8017fae:	18e4      	addlt	r4, r4, r3
 8017fb0:	f000 fa7a 	bl	80184a8 <__malloc_lock>
 8017fb4:	4a1f      	ldr	r2, [pc, #124]	; (8018034 <_free_r+0x98>)
 8017fb6:	6813      	ldr	r3, [r2, #0]
 8017fb8:	4610      	mov	r0, r2
 8017fba:	b933      	cbnz	r3, 8017fca <_free_r+0x2e>
 8017fbc:	6063      	str	r3, [r4, #4]
 8017fbe:	6014      	str	r4, [r2, #0]
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fc6:	f000 ba70 	b.w	80184aa <__malloc_unlock>
 8017fca:	42a3      	cmp	r3, r4
 8017fcc:	d90c      	bls.n	8017fe8 <_free_r+0x4c>
 8017fce:	6821      	ldr	r1, [r4, #0]
 8017fd0:	1862      	adds	r2, r4, r1
 8017fd2:	4293      	cmp	r3, r2
 8017fd4:	bf04      	itt	eq
 8017fd6:	681a      	ldreq	r2, [r3, #0]
 8017fd8:	685b      	ldreq	r3, [r3, #4]
 8017fda:	6063      	str	r3, [r4, #4]
 8017fdc:	bf04      	itt	eq
 8017fde:	1852      	addeq	r2, r2, r1
 8017fe0:	6022      	streq	r2, [r4, #0]
 8017fe2:	6004      	str	r4, [r0, #0]
 8017fe4:	e7ec      	b.n	8017fc0 <_free_r+0x24>
 8017fe6:	4613      	mov	r3, r2
 8017fe8:	685a      	ldr	r2, [r3, #4]
 8017fea:	b10a      	cbz	r2, 8017ff0 <_free_r+0x54>
 8017fec:	42a2      	cmp	r2, r4
 8017fee:	d9fa      	bls.n	8017fe6 <_free_r+0x4a>
 8017ff0:	6819      	ldr	r1, [r3, #0]
 8017ff2:	1858      	adds	r0, r3, r1
 8017ff4:	42a0      	cmp	r0, r4
 8017ff6:	d10b      	bne.n	8018010 <_free_r+0x74>
 8017ff8:	6820      	ldr	r0, [r4, #0]
 8017ffa:	4401      	add	r1, r0
 8017ffc:	1858      	adds	r0, r3, r1
 8017ffe:	4282      	cmp	r2, r0
 8018000:	6019      	str	r1, [r3, #0]
 8018002:	d1dd      	bne.n	8017fc0 <_free_r+0x24>
 8018004:	6810      	ldr	r0, [r2, #0]
 8018006:	6852      	ldr	r2, [r2, #4]
 8018008:	605a      	str	r2, [r3, #4]
 801800a:	4401      	add	r1, r0
 801800c:	6019      	str	r1, [r3, #0]
 801800e:	e7d7      	b.n	8017fc0 <_free_r+0x24>
 8018010:	d902      	bls.n	8018018 <_free_r+0x7c>
 8018012:	230c      	movs	r3, #12
 8018014:	602b      	str	r3, [r5, #0]
 8018016:	e7d3      	b.n	8017fc0 <_free_r+0x24>
 8018018:	6820      	ldr	r0, [r4, #0]
 801801a:	1821      	adds	r1, r4, r0
 801801c:	428a      	cmp	r2, r1
 801801e:	bf04      	itt	eq
 8018020:	6811      	ldreq	r1, [r2, #0]
 8018022:	6852      	ldreq	r2, [r2, #4]
 8018024:	6062      	str	r2, [r4, #4]
 8018026:	bf04      	itt	eq
 8018028:	1809      	addeq	r1, r1, r0
 801802a:	6021      	streq	r1, [r4, #0]
 801802c:	605c      	str	r4, [r3, #4]
 801802e:	e7c7      	b.n	8017fc0 <_free_r+0x24>
 8018030:	bd38      	pop	{r3, r4, r5, pc}
 8018032:	bf00      	nop
 8018034:	20004878 	.word	0x20004878

08018038 <_malloc_r>:
 8018038:	b570      	push	{r4, r5, r6, lr}
 801803a:	1ccd      	adds	r5, r1, #3
 801803c:	f025 0503 	bic.w	r5, r5, #3
 8018040:	3508      	adds	r5, #8
 8018042:	2d0c      	cmp	r5, #12
 8018044:	bf38      	it	cc
 8018046:	250c      	movcc	r5, #12
 8018048:	2d00      	cmp	r5, #0
 801804a:	4606      	mov	r6, r0
 801804c:	db01      	blt.n	8018052 <_malloc_r+0x1a>
 801804e:	42a9      	cmp	r1, r5
 8018050:	d903      	bls.n	801805a <_malloc_r+0x22>
 8018052:	230c      	movs	r3, #12
 8018054:	6033      	str	r3, [r6, #0]
 8018056:	2000      	movs	r0, #0
 8018058:	bd70      	pop	{r4, r5, r6, pc}
 801805a:	f000 fa25 	bl	80184a8 <__malloc_lock>
 801805e:	4a21      	ldr	r2, [pc, #132]	; (80180e4 <_malloc_r+0xac>)
 8018060:	6814      	ldr	r4, [r2, #0]
 8018062:	4621      	mov	r1, r4
 8018064:	b991      	cbnz	r1, 801808c <_malloc_r+0x54>
 8018066:	4c20      	ldr	r4, [pc, #128]	; (80180e8 <_malloc_r+0xb0>)
 8018068:	6823      	ldr	r3, [r4, #0]
 801806a:	b91b      	cbnz	r3, 8018074 <_malloc_r+0x3c>
 801806c:	4630      	mov	r0, r6
 801806e:	f000 f863 	bl	8018138 <_sbrk_r>
 8018072:	6020      	str	r0, [r4, #0]
 8018074:	4629      	mov	r1, r5
 8018076:	4630      	mov	r0, r6
 8018078:	f000 f85e 	bl	8018138 <_sbrk_r>
 801807c:	1c43      	adds	r3, r0, #1
 801807e:	d124      	bne.n	80180ca <_malloc_r+0x92>
 8018080:	230c      	movs	r3, #12
 8018082:	6033      	str	r3, [r6, #0]
 8018084:	4630      	mov	r0, r6
 8018086:	f000 fa10 	bl	80184aa <__malloc_unlock>
 801808a:	e7e4      	b.n	8018056 <_malloc_r+0x1e>
 801808c:	680b      	ldr	r3, [r1, #0]
 801808e:	1b5b      	subs	r3, r3, r5
 8018090:	d418      	bmi.n	80180c4 <_malloc_r+0x8c>
 8018092:	2b0b      	cmp	r3, #11
 8018094:	d90f      	bls.n	80180b6 <_malloc_r+0x7e>
 8018096:	600b      	str	r3, [r1, #0]
 8018098:	50cd      	str	r5, [r1, r3]
 801809a:	18cc      	adds	r4, r1, r3
 801809c:	4630      	mov	r0, r6
 801809e:	f000 fa04 	bl	80184aa <__malloc_unlock>
 80180a2:	f104 000b 	add.w	r0, r4, #11
 80180a6:	1d23      	adds	r3, r4, #4
 80180a8:	f020 0007 	bic.w	r0, r0, #7
 80180ac:	1ac3      	subs	r3, r0, r3
 80180ae:	d0d3      	beq.n	8018058 <_malloc_r+0x20>
 80180b0:	425a      	negs	r2, r3
 80180b2:	50e2      	str	r2, [r4, r3]
 80180b4:	e7d0      	b.n	8018058 <_malloc_r+0x20>
 80180b6:	428c      	cmp	r4, r1
 80180b8:	684b      	ldr	r3, [r1, #4]
 80180ba:	bf16      	itet	ne
 80180bc:	6063      	strne	r3, [r4, #4]
 80180be:	6013      	streq	r3, [r2, #0]
 80180c0:	460c      	movne	r4, r1
 80180c2:	e7eb      	b.n	801809c <_malloc_r+0x64>
 80180c4:	460c      	mov	r4, r1
 80180c6:	6849      	ldr	r1, [r1, #4]
 80180c8:	e7cc      	b.n	8018064 <_malloc_r+0x2c>
 80180ca:	1cc4      	adds	r4, r0, #3
 80180cc:	f024 0403 	bic.w	r4, r4, #3
 80180d0:	42a0      	cmp	r0, r4
 80180d2:	d005      	beq.n	80180e0 <_malloc_r+0xa8>
 80180d4:	1a21      	subs	r1, r4, r0
 80180d6:	4630      	mov	r0, r6
 80180d8:	f000 f82e 	bl	8018138 <_sbrk_r>
 80180dc:	3001      	adds	r0, #1
 80180de:	d0cf      	beq.n	8018080 <_malloc_r+0x48>
 80180e0:	6025      	str	r5, [r4, #0]
 80180e2:	e7db      	b.n	801809c <_malloc_r+0x64>
 80180e4:	20004878 	.word	0x20004878
 80180e8:	2000487c 	.word	0x2000487c

080180ec <_realloc_r>:
 80180ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ee:	4607      	mov	r7, r0
 80180f0:	4614      	mov	r4, r2
 80180f2:	460e      	mov	r6, r1
 80180f4:	b921      	cbnz	r1, 8018100 <_realloc_r+0x14>
 80180f6:	4611      	mov	r1, r2
 80180f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80180fc:	f7ff bf9c 	b.w	8018038 <_malloc_r>
 8018100:	b922      	cbnz	r2, 801810c <_realloc_r+0x20>
 8018102:	f7ff ff4b 	bl	8017f9c <_free_r>
 8018106:	4625      	mov	r5, r4
 8018108:	4628      	mov	r0, r5
 801810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801810c:	f000 f9ce 	bl	80184ac <_malloc_usable_size_r>
 8018110:	42a0      	cmp	r0, r4
 8018112:	d20f      	bcs.n	8018134 <_realloc_r+0x48>
 8018114:	4621      	mov	r1, r4
 8018116:	4638      	mov	r0, r7
 8018118:	f7ff ff8e 	bl	8018038 <_malloc_r>
 801811c:	4605      	mov	r5, r0
 801811e:	2800      	cmp	r0, #0
 8018120:	d0f2      	beq.n	8018108 <_realloc_r+0x1c>
 8018122:	4631      	mov	r1, r6
 8018124:	4622      	mov	r2, r4
 8018126:	f7fd f87f 	bl	8015228 <memcpy>
 801812a:	4631      	mov	r1, r6
 801812c:	4638      	mov	r0, r7
 801812e:	f7ff ff35 	bl	8017f9c <_free_r>
 8018132:	e7e9      	b.n	8018108 <_realloc_r+0x1c>
 8018134:	4635      	mov	r5, r6
 8018136:	e7e7      	b.n	8018108 <_realloc_r+0x1c>

08018138 <_sbrk_r>:
 8018138:	b538      	push	{r3, r4, r5, lr}
 801813a:	4c06      	ldr	r4, [pc, #24]	; (8018154 <_sbrk_r+0x1c>)
 801813c:	2300      	movs	r3, #0
 801813e:	4605      	mov	r5, r0
 8018140:	4608      	mov	r0, r1
 8018142:	6023      	str	r3, [r4, #0]
 8018144:	f7f4 ff3e 	bl	800cfc4 <_sbrk>
 8018148:	1c43      	adds	r3, r0, #1
 801814a:	d102      	bne.n	8018152 <_sbrk_r+0x1a>
 801814c:	6823      	ldr	r3, [r4, #0]
 801814e:	b103      	cbz	r3, 8018152 <_sbrk_r+0x1a>
 8018150:	602b      	str	r3, [r5, #0]
 8018152:	bd38      	pop	{r3, r4, r5, pc}
 8018154:	20005400 	.word	0x20005400

08018158 <siscanf>:
 8018158:	b40e      	push	{r1, r2, r3}
 801815a:	b530      	push	{r4, r5, lr}
 801815c:	b09c      	sub	sp, #112	; 0x70
 801815e:	ac1f      	add	r4, sp, #124	; 0x7c
 8018160:	f44f 7201 	mov.w	r2, #516	; 0x204
 8018164:	f854 5b04 	ldr.w	r5, [r4], #4
 8018168:	f8ad 2014 	strh.w	r2, [sp, #20]
 801816c:	9002      	str	r0, [sp, #8]
 801816e:	9006      	str	r0, [sp, #24]
 8018170:	f7e8 f82e 	bl	80001d0 <strlen>
 8018174:	4b0b      	ldr	r3, [pc, #44]	; (80181a4 <siscanf+0x4c>)
 8018176:	9003      	str	r0, [sp, #12]
 8018178:	9007      	str	r0, [sp, #28]
 801817a:	930b      	str	r3, [sp, #44]	; 0x2c
 801817c:	480a      	ldr	r0, [pc, #40]	; (80181a8 <siscanf+0x50>)
 801817e:	9401      	str	r4, [sp, #4]
 8018180:	2300      	movs	r3, #0
 8018182:	930f      	str	r3, [sp, #60]	; 0x3c
 8018184:	9314      	str	r3, [sp, #80]	; 0x50
 8018186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801818a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801818e:	462a      	mov	r2, r5
 8018190:	4623      	mov	r3, r4
 8018192:	a902      	add	r1, sp, #8
 8018194:	6800      	ldr	r0, [r0, #0]
 8018196:	f000 f9eb 	bl	8018570 <__ssvfiscanf_r>
 801819a:	b01c      	add	sp, #112	; 0x70
 801819c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181a0:	b003      	add	sp, #12
 80181a2:	4770      	bx	lr
 80181a4:	080181cf 	.word	0x080181cf
 80181a8:	20000154 	.word	0x20000154

080181ac <__sread>:
 80181ac:	b510      	push	{r4, lr}
 80181ae:	460c      	mov	r4, r1
 80181b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181b4:	f000 fc84 	bl	8018ac0 <_read_r>
 80181b8:	2800      	cmp	r0, #0
 80181ba:	bfab      	itete	ge
 80181bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80181be:	89a3      	ldrhlt	r3, [r4, #12]
 80181c0:	181b      	addge	r3, r3, r0
 80181c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80181c6:	bfac      	ite	ge
 80181c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80181ca:	81a3      	strhlt	r3, [r4, #12]
 80181cc:	bd10      	pop	{r4, pc}

080181ce <__seofread>:
 80181ce:	2000      	movs	r0, #0
 80181d0:	4770      	bx	lr

080181d2 <__swrite>:
 80181d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181d6:	461f      	mov	r7, r3
 80181d8:	898b      	ldrh	r3, [r1, #12]
 80181da:	05db      	lsls	r3, r3, #23
 80181dc:	4605      	mov	r5, r0
 80181de:	460c      	mov	r4, r1
 80181e0:	4616      	mov	r6, r2
 80181e2:	d505      	bpl.n	80181f0 <__swrite+0x1e>
 80181e4:	2302      	movs	r3, #2
 80181e6:	2200      	movs	r2, #0
 80181e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181ec:	f000 f938 	bl	8018460 <_lseek_r>
 80181f0:	89a3      	ldrh	r3, [r4, #12]
 80181f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80181fa:	81a3      	strh	r3, [r4, #12]
 80181fc:	4632      	mov	r2, r6
 80181fe:	463b      	mov	r3, r7
 8018200:	4628      	mov	r0, r5
 8018202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018206:	f000 b8d3 	b.w	80183b0 <_write_r>

0801820a <__sseek>:
 801820a:	b510      	push	{r4, lr}
 801820c:	460c      	mov	r4, r1
 801820e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018212:	f000 f925 	bl	8018460 <_lseek_r>
 8018216:	1c43      	adds	r3, r0, #1
 8018218:	89a3      	ldrh	r3, [r4, #12]
 801821a:	bf15      	itete	ne
 801821c:	6560      	strne	r0, [r4, #84]	; 0x54
 801821e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018226:	81a3      	strheq	r3, [r4, #12]
 8018228:	bf18      	it	ne
 801822a:	81a3      	strhne	r3, [r4, #12]
 801822c:	bd10      	pop	{r4, pc}

0801822e <__sclose>:
 801822e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018232:	f000 b8cf 	b.w	80183d4 <_close_r>

08018236 <strcpy>:
 8018236:	4603      	mov	r3, r0
 8018238:	f811 2b01 	ldrb.w	r2, [r1], #1
 801823c:	f803 2b01 	strb.w	r2, [r3], #1
 8018240:	2a00      	cmp	r2, #0
 8018242:	d1f9      	bne.n	8018238 <strcpy+0x2>
 8018244:	4770      	bx	lr

08018246 <strncmp>:
 8018246:	b510      	push	{r4, lr}
 8018248:	b16a      	cbz	r2, 8018266 <strncmp+0x20>
 801824a:	3901      	subs	r1, #1
 801824c:	1884      	adds	r4, r0, r2
 801824e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018252:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018256:	4293      	cmp	r3, r2
 8018258:	d103      	bne.n	8018262 <strncmp+0x1c>
 801825a:	42a0      	cmp	r0, r4
 801825c:	d001      	beq.n	8018262 <strncmp+0x1c>
 801825e:	2b00      	cmp	r3, #0
 8018260:	d1f5      	bne.n	801824e <strncmp+0x8>
 8018262:	1a98      	subs	r0, r3, r2
 8018264:	bd10      	pop	{r4, pc}
 8018266:	4610      	mov	r0, r2
 8018268:	e7fc      	b.n	8018264 <strncmp+0x1e>

0801826a <_strtoul_l.isra.0>:
 801826a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801826e:	4680      	mov	r8, r0
 8018270:	4689      	mov	r9, r1
 8018272:	4692      	mov	sl, r2
 8018274:	461e      	mov	r6, r3
 8018276:	460f      	mov	r7, r1
 8018278:	463d      	mov	r5, r7
 801827a:	9808      	ldr	r0, [sp, #32]
 801827c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018280:	f000 f8dc 	bl	801843c <__locale_ctype_ptr_l>
 8018284:	4420      	add	r0, r4
 8018286:	7843      	ldrb	r3, [r0, #1]
 8018288:	f013 0308 	ands.w	r3, r3, #8
 801828c:	d130      	bne.n	80182f0 <_strtoul_l.isra.0+0x86>
 801828e:	2c2d      	cmp	r4, #45	; 0x2d
 8018290:	d130      	bne.n	80182f4 <_strtoul_l.isra.0+0x8a>
 8018292:	787c      	ldrb	r4, [r7, #1]
 8018294:	1cbd      	adds	r5, r7, #2
 8018296:	2101      	movs	r1, #1
 8018298:	2e00      	cmp	r6, #0
 801829a:	d05c      	beq.n	8018356 <_strtoul_l.isra.0+0xec>
 801829c:	2e10      	cmp	r6, #16
 801829e:	d109      	bne.n	80182b4 <_strtoul_l.isra.0+0x4a>
 80182a0:	2c30      	cmp	r4, #48	; 0x30
 80182a2:	d107      	bne.n	80182b4 <_strtoul_l.isra.0+0x4a>
 80182a4:	782b      	ldrb	r3, [r5, #0]
 80182a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80182aa:	2b58      	cmp	r3, #88	; 0x58
 80182ac:	d14e      	bne.n	801834c <_strtoul_l.isra.0+0xe2>
 80182ae:	786c      	ldrb	r4, [r5, #1]
 80182b0:	2610      	movs	r6, #16
 80182b2:	3502      	adds	r5, #2
 80182b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182b8:	2300      	movs	r3, #0
 80182ba:	fbb2 f2f6 	udiv	r2, r2, r6
 80182be:	fb06 fc02 	mul.w	ip, r6, r2
 80182c2:	ea6f 0c0c 	mvn.w	ip, ip
 80182c6:	4618      	mov	r0, r3
 80182c8:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80182cc:	2f09      	cmp	r7, #9
 80182ce:	d817      	bhi.n	8018300 <_strtoul_l.isra.0+0x96>
 80182d0:	463c      	mov	r4, r7
 80182d2:	42a6      	cmp	r6, r4
 80182d4:	dd23      	ble.n	801831e <_strtoul_l.isra.0+0xb4>
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	db1e      	blt.n	8018318 <_strtoul_l.isra.0+0xae>
 80182da:	4282      	cmp	r2, r0
 80182dc:	d31c      	bcc.n	8018318 <_strtoul_l.isra.0+0xae>
 80182de:	d101      	bne.n	80182e4 <_strtoul_l.isra.0+0x7a>
 80182e0:	45a4      	cmp	ip, r4
 80182e2:	db19      	blt.n	8018318 <_strtoul_l.isra.0+0xae>
 80182e4:	fb00 4006 	mla	r0, r0, r6, r4
 80182e8:	2301      	movs	r3, #1
 80182ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182ee:	e7eb      	b.n	80182c8 <_strtoul_l.isra.0+0x5e>
 80182f0:	462f      	mov	r7, r5
 80182f2:	e7c1      	b.n	8018278 <_strtoul_l.isra.0+0xe>
 80182f4:	2c2b      	cmp	r4, #43	; 0x2b
 80182f6:	bf04      	itt	eq
 80182f8:	1cbd      	addeq	r5, r7, #2
 80182fa:	787c      	ldrbeq	r4, [r7, #1]
 80182fc:	4619      	mov	r1, r3
 80182fe:	e7cb      	b.n	8018298 <_strtoul_l.isra.0+0x2e>
 8018300:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018304:	2f19      	cmp	r7, #25
 8018306:	d801      	bhi.n	801830c <_strtoul_l.isra.0+0xa2>
 8018308:	3c37      	subs	r4, #55	; 0x37
 801830a:	e7e2      	b.n	80182d2 <_strtoul_l.isra.0+0x68>
 801830c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018310:	2f19      	cmp	r7, #25
 8018312:	d804      	bhi.n	801831e <_strtoul_l.isra.0+0xb4>
 8018314:	3c57      	subs	r4, #87	; 0x57
 8018316:	e7dc      	b.n	80182d2 <_strtoul_l.isra.0+0x68>
 8018318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801831c:	e7e5      	b.n	80182ea <_strtoul_l.isra.0+0x80>
 801831e:	2b00      	cmp	r3, #0
 8018320:	da09      	bge.n	8018336 <_strtoul_l.isra.0+0xcc>
 8018322:	2322      	movs	r3, #34	; 0x22
 8018324:	f8c8 3000 	str.w	r3, [r8]
 8018328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801832c:	f1ba 0f00 	cmp.w	sl, #0
 8018330:	d107      	bne.n	8018342 <_strtoul_l.isra.0+0xd8>
 8018332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018336:	b101      	cbz	r1, 801833a <_strtoul_l.isra.0+0xd0>
 8018338:	4240      	negs	r0, r0
 801833a:	f1ba 0f00 	cmp.w	sl, #0
 801833e:	d0f8      	beq.n	8018332 <_strtoul_l.isra.0+0xc8>
 8018340:	b10b      	cbz	r3, 8018346 <_strtoul_l.isra.0+0xdc>
 8018342:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8018346:	f8ca 9000 	str.w	r9, [sl]
 801834a:	e7f2      	b.n	8018332 <_strtoul_l.isra.0+0xc8>
 801834c:	2430      	movs	r4, #48	; 0x30
 801834e:	2e00      	cmp	r6, #0
 8018350:	d1b0      	bne.n	80182b4 <_strtoul_l.isra.0+0x4a>
 8018352:	2608      	movs	r6, #8
 8018354:	e7ae      	b.n	80182b4 <_strtoul_l.isra.0+0x4a>
 8018356:	2c30      	cmp	r4, #48	; 0x30
 8018358:	d0a4      	beq.n	80182a4 <_strtoul_l.isra.0+0x3a>
 801835a:	260a      	movs	r6, #10
 801835c:	e7aa      	b.n	80182b4 <_strtoul_l.isra.0+0x4a>
	...

08018360 <_strtoul_r>:
 8018360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018362:	4c06      	ldr	r4, [pc, #24]	; (801837c <_strtoul_r+0x1c>)
 8018364:	4d06      	ldr	r5, [pc, #24]	; (8018380 <_strtoul_r+0x20>)
 8018366:	6824      	ldr	r4, [r4, #0]
 8018368:	6a24      	ldr	r4, [r4, #32]
 801836a:	2c00      	cmp	r4, #0
 801836c:	bf08      	it	eq
 801836e:	462c      	moveq	r4, r5
 8018370:	9400      	str	r4, [sp, #0]
 8018372:	f7ff ff7a 	bl	801826a <_strtoul_l.isra.0>
 8018376:	b003      	add	sp, #12
 8018378:	bd30      	pop	{r4, r5, pc}
 801837a:	bf00      	nop
 801837c:	20000154 	.word	0x20000154
 8018380:	20000218 	.word	0x20000218

08018384 <strtoul>:
 8018384:	4b08      	ldr	r3, [pc, #32]	; (80183a8 <strtoul+0x24>)
 8018386:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018388:	681c      	ldr	r4, [r3, #0]
 801838a:	4d08      	ldr	r5, [pc, #32]	; (80183ac <strtoul+0x28>)
 801838c:	6a23      	ldr	r3, [r4, #32]
 801838e:	2b00      	cmp	r3, #0
 8018390:	bf08      	it	eq
 8018392:	462b      	moveq	r3, r5
 8018394:	9300      	str	r3, [sp, #0]
 8018396:	4613      	mov	r3, r2
 8018398:	460a      	mov	r2, r1
 801839a:	4601      	mov	r1, r0
 801839c:	4620      	mov	r0, r4
 801839e:	f7ff ff64 	bl	801826a <_strtoul_l.isra.0>
 80183a2:	b003      	add	sp, #12
 80183a4:	bd30      	pop	{r4, r5, pc}
 80183a6:	bf00      	nop
 80183a8:	20000154 	.word	0x20000154
 80183ac:	20000218 	.word	0x20000218

080183b0 <_write_r>:
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	4c07      	ldr	r4, [pc, #28]	; (80183d0 <_write_r+0x20>)
 80183b4:	4605      	mov	r5, r0
 80183b6:	4608      	mov	r0, r1
 80183b8:	4611      	mov	r1, r2
 80183ba:	2200      	movs	r2, #0
 80183bc:	6022      	str	r2, [r4, #0]
 80183be:	461a      	mov	r2, r3
 80183c0:	f7f4 fdaf 	bl	800cf22 <_write>
 80183c4:	1c43      	adds	r3, r0, #1
 80183c6:	d102      	bne.n	80183ce <_write_r+0x1e>
 80183c8:	6823      	ldr	r3, [r4, #0]
 80183ca:	b103      	cbz	r3, 80183ce <_write_r+0x1e>
 80183cc:	602b      	str	r3, [r5, #0]
 80183ce:	bd38      	pop	{r3, r4, r5, pc}
 80183d0:	20005400 	.word	0x20005400

080183d4 <_close_r>:
 80183d4:	b538      	push	{r3, r4, r5, lr}
 80183d6:	4c06      	ldr	r4, [pc, #24]	; (80183f0 <_close_r+0x1c>)
 80183d8:	2300      	movs	r3, #0
 80183da:	4605      	mov	r5, r0
 80183dc:	4608      	mov	r0, r1
 80183de:	6023      	str	r3, [r4, #0]
 80183e0:	f7f4 fdbb 	bl	800cf5a <_close>
 80183e4:	1c43      	adds	r3, r0, #1
 80183e6:	d102      	bne.n	80183ee <_close_r+0x1a>
 80183e8:	6823      	ldr	r3, [r4, #0]
 80183ea:	b103      	cbz	r3, 80183ee <_close_r+0x1a>
 80183ec:	602b      	str	r3, [r5, #0]
 80183ee:	bd38      	pop	{r3, r4, r5, pc}
 80183f0:	20005400 	.word	0x20005400

080183f4 <__env_lock>:
 80183f4:	4770      	bx	lr

080183f6 <__env_unlock>:
 80183f6:	4770      	bx	lr

080183f8 <_fstat_r>:
 80183f8:	b538      	push	{r3, r4, r5, lr}
 80183fa:	4c07      	ldr	r4, [pc, #28]	; (8018418 <_fstat_r+0x20>)
 80183fc:	2300      	movs	r3, #0
 80183fe:	4605      	mov	r5, r0
 8018400:	4608      	mov	r0, r1
 8018402:	4611      	mov	r1, r2
 8018404:	6023      	str	r3, [r4, #0]
 8018406:	f7f4 fdb4 	bl	800cf72 <_fstat>
 801840a:	1c43      	adds	r3, r0, #1
 801840c:	d102      	bne.n	8018414 <_fstat_r+0x1c>
 801840e:	6823      	ldr	r3, [r4, #0]
 8018410:	b103      	cbz	r3, 8018414 <_fstat_r+0x1c>
 8018412:	602b      	str	r3, [r5, #0]
 8018414:	bd38      	pop	{r3, r4, r5, pc}
 8018416:	bf00      	nop
 8018418:	20005400 	.word	0x20005400

0801841c <_isatty_r>:
 801841c:	b538      	push	{r3, r4, r5, lr}
 801841e:	4c06      	ldr	r4, [pc, #24]	; (8018438 <_isatty_r+0x1c>)
 8018420:	2300      	movs	r3, #0
 8018422:	4605      	mov	r5, r0
 8018424:	4608      	mov	r0, r1
 8018426:	6023      	str	r3, [r4, #0]
 8018428:	f7f4 fdb3 	bl	800cf92 <_isatty>
 801842c:	1c43      	adds	r3, r0, #1
 801842e:	d102      	bne.n	8018436 <_isatty_r+0x1a>
 8018430:	6823      	ldr	r3, [r4, #0]
 8018432:	b103      	cbz	r3, 8018436 <_isatty_r+0x1a>
 8018434:	602b      	str	r3, [r5, #0]
 8018436:	bd38      	pop	{r3, r4, r5, pc}
 8018438:	20005400 	.word	0x20005400

0801843c <__locale_ctype_ptr_l>:
 801843c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018440:	4770      	bx	lr
	...

08018444 <__locale_ctype_ptr>:
 8018444:	4b04      	ldr	r3, [pc, #16]	; (8018458 <__locale_ctype_ptr+0x14>)
 8018446:	4a05      	ldr	r2, [pc, #20]	; (801845c <__locale_ctype_ptr+0x18>)
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	6a1b      	ldr	r3, [r3, #32]
 801844c:	2b00      	cmp	r3, #0
 801844e:	bf08      	it	eq
 8018450:	4613      	moveq	r3, r2
 8018452:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018456:	4770      	bx	lr
 8018458:	20000154 	.word	0x20000154
 801845c:	20000218 	.word	0x20000218

08018460 <_lseek_r>:
 8018460:	b538      	push	{r3, r4, r5, lr}
 8018462:	4c07      	ldr	r4, [pc, #28]	; (8018480 <_lseek_r+0x20>)
 8018464:	4605      	mov	r5, r0
 8018466:	4608      	mov	r0, r1
 8018468:	4611      	mov	r1, r2
 801846a:	2200      	movs	r2, #0
 801846c:	6022      	str	r2, [r4, #0]
 801846e:	461a      	mov	r2, r3
 8018470:	f7f4 fd9a 	bl	800cfa8 <_lseek>
 8018474:	1c43      	adds	r3, r0, #1
 8018476:	d102      	bne.n	801847e <_lseek_r+0x1e>
 8018478:	6823      	ldr	r3, [r4, #0]
 801847a:	b103      	cbz	r3, 801847e <_lseek_r+0x1e>
 801847c:	602b      	str	r3, [r5, #0]
 801847e:	bd38      	pop	{r3, r4, r5, pc}
 8018480:	20005400 	.word	0x20005400

08018484 <__ascii_mbtowc>:
 8018484:	b082      	sub	sp, #8
 8018486:	b901      	cbnz	r1, 801848a <__ascii_mbtowc+0x6>
 8018488:	a901      	add	r1, sp, #4
 801848a:	b142      	cbz	r2, 801849e <__ascii_mbtowc+0x1a>
 801848c:	b14b      	cbz	r3, 80184a2 <__ascii_mbtowc+0x1e>
 801848e:	7813      	ldrb	r3, [r2, #0]
 8018490:	600b      	str	r3, [r1, #0]
 8018492:	7812      	ldrb	r2, [r2, #0]
 8018494:	1c10      	adds	r0, r2, #0
 8018496:	bf18      	it	ne
 8018498:	2001      	movne	r0, #1
 801849a:	b002      	add	sp, #8
 801849c:	4770      	bx	lr
 801849e:	4610      	mov	r0, r2
 80184a0:	e7fb      	b.n	801849a <__ascii_mbtowc+0x16>
 80184a2:	f06f 0001 	mvn.w	r0, #1
 80184a6:	e7f8      	b.n	801849a <__ascii_mbtowc+0x16>

080184a8 <__malloc_lock>:
 80184a8:	4770      	bx	lr

080184aa <__malloc_unlock>:
 80184aa:	4770      	bx	lr

080184ac <_malloc_usable_size_r>:
 80184ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184b0:	1f18      	subs	r0, r3, #4
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	bfbc      	itt	lt
 80184b6:	580b      	ldrlt	r3, [r1, r0]
 80184b8:	18c0      	addlt	r0, r0, r3
 80184ba:	4770      	bx	lr

080184bc <_sungetc_r>:
 80184bc:	b538      	push	{r3, r4, r5, lr}
 80184be:	1c4b      	adds	r3, r1, #1
 80184c0:	4614      	mov	r4, r2
 80184c2:	d103      	bne.n	80184cc <_sungetc_r+0x10>
 80184c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80184c8:	4628      	mov	r0, r5
 80184ca:	bd38      	pop	{r3, r4, r5, pc}
 80184cc:	8993      	ldrh	r3, [r2, #12]
 80184ce:	f023 0320 	bic.w	r3, r3, #32
 80184d2:	8193      	strh	r3, [r2, #12]
 80184d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80184d6:	6852      	ldr	r2, [r2, #4]
 80184d8:	b2cd      	uxtb	r5, r1
 80184da:	b18b      	cbz	r3, 8018500 <_sungetc_r+0x44>
 80184dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80184de:	4293      	cmp	r3, r2
 80184e0:	dd08      	ble.n	80184f4 <_sungetc_r+0x38>
 80184e2:	6823      	ldr	r3, [r4, #0]
 80184e4:	1e5a      	subs	r2, r3, #1
 80184e6:	6022      	str	r2, [r4, #0]
 80184e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80184ec:	6863      	ldr	r3, [r4, #4]
 80184ee:	3301      	adds	r3, #1
 80184f0:	6063      	str	r3, [r4, #4]
 80184f2:	e7e9      	b.n	80184c8 <_sungetc_r+0xc>
 80184f4:	4621      	mov	r1, r4
 80184f6:	f000 fbb5 	bl	8018c64 <__submore>
 80184fa:	2800      	cmp	r0, #0
 80184fc:	d0f1      	beq.n	80184e2 <_sungetc_r+0x26>
 80184fe:	e7e1      	b.n	80184c4 <_sungetc_r+0x8>
 8018500:	6921      	ldr	r1, [r4, #16]
 8018502:	6823      	ldr	r3, [r4, #0]
 8018504:	b151      	cbz	r1, 801851c <_sungetc_r+0x60>
 8018506:	4299      	cmp	r1, r3
 8018508:	d208      	bcs.n	801851c <_sungetc_r+0x60>
 801850a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801850e:	42a9      	cmp	r1, r5
 8018510:	d104      	bne.n	801851c <_sungetc_r+0x60>
 8018512:	3b01      	subs	r3, #1
 8018514:	3201      	adds	r2, #1
 8018516:	6023      	str	r3, [r4, #0]
 8018518:	6062      	str	r2, [r4, #4]
 801851a:	e7d5      	b.n	80184c8 <_sungetc_r+0xc>
 801851c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018524:	6363      	str	r3, [r4, #52]	; 0x34
 8018526:	2303      	movs	r3, #3
 8018528:	63a3      	str	r3, [r4, #56]	; 0x38
 801852a:	4623      	mov	r3, r4
 801852c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018530:	6023      	str	r3, [r4, #0]
 8018532:	2301      	movs	r3, #1
 8018534:	e7dc      	b.n	80184f0 <_sungetc_r+0x34>

08018536 <__ssrefill_r>:
 8018536:	b510      	push	{r4, lr}
 8018538:	460c      	mov	r4, r1
 801853a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801853c:	b169      	cbz	r1, 801855a <__ssrefill_r+0x24>
 801853e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018542:	4299      	cmp	r1, r3
 8018544:	d001      	beq.n	801854a <__ssrefill_r+0x14>
 8018546:	f7ff fd29 	bl	8017f9c <_free_r>
 801854a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801854c:	6063      	str	r3, [r4, #4]
 801854e:	2000      	movs	r0, #0
 8018550:	6360      	str	r0, [r4, #52]	; 0x34
 8018552:	b113      	cbz	r3, 801855a <__ssrefill_r+0x24>
 8018554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018556:	6023      	str	r3, [r4, #0]
 8018558:	bd10      	pop	{r4, pc}
 801855a:	6923      	ldr	r3, [r4, #16]
 801855c:	6023      	str	r3, [r4, #0]
 801855e:	2300      	movs	r3, #0
 8018560:	6063      	str	r3, [r4, #4]
 8018562:	89a3      	ldrh	r3, [r4, #12]
 8018564:	f043 0320 	orr.w	r3, r3, #32
 8018568:	81a3      	strh	r3, [r4, #12]
 801856a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801856e:	e7f3      	b.n	8018558 <__ssrefill_r+0x22>

08018570 <__ssvfiscanf_r>:
 8018570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018574:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018578:	460c      	mov	r4, r1
 801857a:	2100      	movs	r1, #0
 801857c:	9144      	str	r1, [sp, #272]	; 0x110
 801857e:	9145      	str	r1, [sp, #276]	; 0x114
 8018580:	499f      	ldr	r1, [pc, #636]	; (8018800 <__ssvfiscanf_r+0x290>)
 8018582:	91a0      	str	r1, [sp, #640]	; 0x280
 8018584:	f10d 0804 	add.w	r8, sp, #4
 8018588:	499e      	ldr	r1, [pc, #632]	; (8018804 <__ssvfiscanf_r+0x294>)
 801858a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018808 <__ssvfiscanf_r+0x298>
 801858e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018592:	4606      	mov	r6, r0
 8018594:	4692      	mov	sl, r2
 8018596:	91a1      	str	r1, [sp, #644]	; 0x284
 8018598:	9300      	str	r3, [sp, #0]
 801859a:	270a      	movs	r7, #10
 801859c:	f89a 3000 	ldrb.w	r3, [sl]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	f000 812a 	beq.w	80187fa <__ssvfiscanf_r+0x28a>
 80185a6:	4655      	mov	r5, sl
 80185a8:	f7ff ff4c 	bl	8018444 <__locale_ctype_ptr>
 80185ac:	f815 bb01 	ldrb.w	fp, [r5], #1
 80185b0:	4458      	add	r0, fp
 80185b2:	7843      	ldrb	r3, [r0, #1]
 80185b4:	f013 0308 	ands.w	r3, r3, #8
 80185b8:	d01c      	beq.n	80185f4 <__ssvfiscanf_r+0x84>
 80185ba:	6863      	ldr	r3, [r4, #4]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	dd12      	ble.n	80185e6 <__ssvfiscanf_r+0x76>
 80185c0:	f7ff ff40 	bl	8018444 <__locale_ctype_ptr>
 80185c4:	6823      	ldr	r3, [r4, #0]
 80185c6:	781a      	ldrb	r2, [r3, #0]
 80185c8:	4410      	add	r0, r2
 80185ca:	7842      	ldrb	r2, [r0, #1]
 80185cc:	0712      	lsls	r2, r2, #28
 80185ce:	d401      	bmi.n	80185d4 <__ssvfiscanf_r+0x64>
 80185d0:	46aa      	mov	sl, r5
 80185d2:	e7e3      	b.n	801859c <__ssvfiscanf_r+0x2c>
 80185d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80185d6:	3201      	adds	r2, #1
 80185d8:	9245      	str	r2, [sp, #276]	; 0x114
 80185da:	6862      	ldr	r2, [r4, #4]
 80185dc:	3301      	adds	r3, #1
 80185de:	3a01      	subs	r2, #1
 80185e0:	6062      	str	r2, [r4, #4]
 80185e2:	6023      	str	r3, [r4, #0]
 80185e4:	e7e9      	b.n	80185ba <__ssvfiscanf_r+0x4a>
 80185e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80185e8:	4621      	mov	r1, r4
 80185ea:	4630      	mov	r0, r6
 80185ec:	4798      	blx	r3
 80185ee:	2800      	cmp	r0, #0
 80185f0:	d0e6      	beq.n	80185c0 <__ssvfiscanf_r+0x50>
 80185f2:	e7ed      	b.n	80185d0 <__ssvfiscanf_r+0x60>
 80185f4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80185f8:	f040 8082 	bne.w	8018700 <__ssvfiscanf_r+0x190>
 80185fc:	9343      	str	r3, [sp, #268]	; 0x10c
 80185fe:	9341      	str	r3, [sp, #260]	; 0x104
 8018600:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018604:	2b2a      	cmp	r3, #42	; 0x2a
 8018606:	d103      	bne.n	8018610 <__ssvfiscanf_r+0xa0>
 8018608:	2310      	movs	r3, #16
 801860a:	9341      	str	r3, [sp, #260]	; 0x104
 801860c:	f10a 0502 	add.w	r5, sl, #2
 8018610:	46aa      	mov	sl, r5
 8018612:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018616:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801861a:	2a09      	cmp	r2, #9
 801861c:	d922      	bls.n	8018664 <__ssvfiscanf_r+0xf4>
 801861e:	2203      	movs	r2, #3
 8018620:	4879      	ldr	r0, [pc, #484]	; (8018808 <__ssvfiscanf_r+0x298>)
 8018622:	f7e7 fddd 	bl	80001e0 <memchr>
 8018626:	b138      	cbz	r0, 8018638 <__ssvfiscanf_r+0xc8>
 8018628:	eba0 0309 	sub.w	r3, r0, r9
 801862c:	2001      	movs	r0, #1
 801862e:	4098      	lsls	r0, r3
 8018630:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018632:	4318      	orrs	r0, r3
 8018634:	9041      	str	r0, [sp, #260]	; 0x104
 8018636:	46aa      	mov	sl, r5
 8018638:	f89a 3000 	ldrb.w	r3, [sl]
 801863c:	2b67      	cmp	r3, #103	; 0x67
 801863e:	f10a 0501 	add.w	r5, sl, #1
 8018642:	d82b      	bhi.n	801869c <__ssvfiscanf_r+0x12c>
 8018644:	2b65      	cmp	r3, #101	; 0x65
 8018646:	f080 809f 	bcs.w	8018788 <__ssvfiscanf_r+0x218>
 801864a:	2b47      	cmp	r3, #71	; 0x47
 801864c:	d810      	bhi.n	8018670 <__ssvfiscanf_r+0x100>
 801864e:	2b45      	cmp	r3, #69	; 0x45
 8018650:	f080 809a 	bcs.w	8018788 <__ssvfiscanf_r+0x218>
 8018654:	2b00      	cmp	r3, #0
 8018656:	d06c      	beq.n	8018732 <__ssvfiscanf_r+0x1c2>
 8018658:	2b25      	cmp	r3, #37	; 0x25
 801865a:	d051      	beq.n	8018700 <__ssvfiscanf_r+0x190>
 801865c:	2303      	movs	r3, #3
 801865e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018660:	9742      	str	r7, [sp, #264]	; 0x108
 8018662:	e027      	b.n	80186b4 <__ssvfiscanf_r+0x144>
 8018664:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018666:	fb07 1303 	mla	r3, r7, r3, r1
 801866a:	3b30      	subs	r3, #48	; 0x30
 801866c:	9343      	str	r3, [sp, #268]	; 0x10c
 801866e:	e7cf      	b.n	8018610 <__ssvfiscanf_r+0xa0>
 8018670:	2b5b      	cmp	r3, #91	; 0x5b
 8018672:	d06a      	beq.n	801874a <__ssvfiscanf_r+0x1da>
 8018674:	d80c      	bhi.n	8018690 <__ssvfiscanf_r+0x120>
 8018676:	2b58      	cmp	r3, #88	; 0x58
 8018678:	d1f0      	bne.n	801865c <__ssvfiscanf_r+0xec>
 801867a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801867c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018680:	9241      	str	r2, [sp, #260]	; 0x104
 8018682:	2210      	movs	r2, #16
 8018684:	9242      	str	r2, [sp, #264]	; 0x108
 8018686:	2b6e      	cmp	r3, #110	; 0x6e
 8018688:	bf8c      	ite	hi
 801868a:	2304      	movhi	r3, #4
 801868c:	2303      	movls	r3, #3
 801868e:	e010      	b.n	80186b2 <__ssvfiscanf_r+0x142>
 8018690:	2b63      	cmp	r3, #99	; 0x63
 8018692:	d065      	beq.n	8018760 <__ssvfiscanf_r+0x1f0>
 8018694:	2b64      	cmp	r3, #100	; 0x64
 8018696:	d1e1      	bne.n	801865c <__ssvfiscanf_r+0xec>
 8018698:	9742      	str	r7, [sp, #264]	; 0x108
 801869a:	e7f4      	b.n	8018686 <__ssvfiscanf_r+0x116>
 801869c:	2b70      	cmp	r3, #112	; 0x70
 801869e:	d04b      	beq.n	8018738 <__ssvfiscanf_r+0x1c8>
 80186a0:	d826      	bhi.n	80186f0 <__ssvfiscanf_r+0x180>
 80186a2:	2b6e      	cmp	r3, #110	; 0x6e
 80186a4:	d062      	beq.n	801876c <__ssvfiscanf_r+0x1fc>
 80186a6:	d84c      	bhi.n	8018742 <__ssvfiscanf_r+0x1d2>
 80186a8:	2b69      	cmp	r3, #105	; 0x69
 80186aa:	d1d7      	bne.n	801865c <__ssvfiscanf_r+0xec>
 80186ac:	2300      	movs	r3, #0
 80186ae:	9342      	str	r3, [sp, #264]	; 0x108
 80186b0:	2303      	movs	r3, #3
 80186b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80186b4:	6863      	ldr	r3, [r4, #4]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	dd68      	ble.n	801878c <__ssvfiscanf_r+0x21c>
 80186ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80186bc:	0659      	lsls	r1, r3, #25
 80186be:	d407      	bmi.n	80186d0 <__ssvfiscanf_r+0x160>
 80186c0:	f7ff fec0 	bl	8018444 <__locale_ctype_ptr>
 80186c4:	6823      	ldr	r3, [r4, #0]
 80186c6:	781a      	ldrb	r2, [r3, #0]
 80186c8:	4410      	add	r0, r2
 80186ca:	7842      	ldrb	r2, [r0, #1]
 80186cc:	0712      	lsls	r2, r2, #28
 80186ce:	d464      	bmi.n	801879a <__ssvfiscanf_r+0x22a>
 80186d0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80186d2:	2b02      	cmp	r3, #2
 80186d4:	dc73      	bgt.n	80187be <__ssvfiscanf_r+0x24e>
 80186d6:	466b      	mov	r3, sp
 80186d8:	4622      	mov	r2, r4
 80186da:	a941      	add	r1, sp, #260	; 0x104
 80186dc:	4630      	mov	r0, r6
 80186de:	f000 f897 	bl	8018810 <_scanf_chars>
 80186e2:	2801      	cmp	r0, #1
 80186e4:	f000 8089 	beq.w	80187fa <__ssvfiscanf_r+0x28a>
 80186e8:	2802      	cmp	r0, #2
 80186ea:	f47f af71 	bne.w	80185d0 <__ssvfiscanf_r+0x60>
 80186ee:	e01d      	b.n	801872c <__ssvfiscanf_r+0x1bc>
 80186f0:	2b75      	cmp	r3, #117	; 0x75
 80186f2:	d0d1      	beq.n	8018698 <__ssvfiscanf_r+0x128>
 80186f4:	2b78      	cmp	r3, #120	; 0x78
 80186f6:	d0c0      	beq.n	801867a <__ssvfiscanf_r+0x10a>
 80186f8:	2b73      	cmp	r3, #115	; 0x73
 80186fa:	d1af      	bne.n	801865c <__ssvfiscanf_r+0xec>
 80186fc:	2302      	movs	r3, #2
 80186fe:	e7d8      	b.n	80186b2 <__ssvfiscanf_r+0x142>
 8018700:	6863      	ldr	r3, [r4, #4]
 8018702:	2b00      	cmp	r3, #0
 8018704:	dd0c      	ble.n	8018720 <__ssvfiscanf_r+0x1b0>
 8018706:	6823      	ldr	r3, [r4, #0]
 8018708:	781a      	ldrb	r2, [r3, #0]
 801870a:	455a      	cmp	r2, fp
 801870c:	d175      	bne.n	80187fa <__ssvfiscanf_r+0x28a>
 801870e:	3301      	adds	r3, #1
 8018710:	6862      	ldr	r2, [r4, #4]
 8018712:	6023      	str	r3, [r4, #0]
 8018714:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018716:	3a01      	subs	r2, #1
 8018718:	3301      	adds	r3, #1
 801871a:	6062      	str	r2, [r4, #4]
 801871c:	9345      	str	r3, [sp, #276]	; 0x114
 801871e:	e757      	b.n	80185d0 <__ssvfiscanf_r+0x60>
 8018720:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018722:	4621      	mov	r1, r4
 8018724:	4630      	mov	r0, r6
 8018726:	4798      	blx	r3
 8018728:	2800      	cmp	r0, #0
 801872a:	d0ec      	beq.n	8018706 <__ssvfiscanf_r+0x196>
 801872c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801872e:	2800      	cmp	r0, #0
 8018730:	d159      	bne.n	80187e6 <__ssvfiscanf_r+0x276>
 8018732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018736:	e05c      	b.n	80187f2 <__ssvfiscanf_r+0x282>
 8018738:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801873a:	f042 0220 	orr.w	r2, r2, #32
 801873e:	9241      	str	r2, [sp, #260]	; 0x104
 8018740:	e79b      	b.n	801867a <__ssvfiscanf_r+0x10a>
 8018742:	2308      	movs	r3, #8
 8018744:	9342      	str	r3, [sp, #264]	; 0x108
 8018746:	2304      	movs	r3, #4
 8018748:	e7b3      	b.n	80186b2 <__ssvfiscanf_r+0x142>
 801874a:	4629      	mov	r1, r5
 801874c:	4640      	mov	r0, r8
 801874e:	f000 f9c9 	bl	8018ae4 <__sccl>
 8018752:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018758:	9341      	str	r3, [sp, #260]	; 0x104
 801875a:	4605      	mov	r5, r0
 801875c:	2301      	movs	r3, #1
 801875e:	e7a8      	b.n	80186b2 <__ssvfiscanf_r+0x142>
 8018760:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018766:	9341      	str	r3, [sp, #260]	; 0x104
 8018768:	2300      	movs	r3, #0
 801876a:	e7a2      	b.n	80186b2 <__ssvfiscanf_r+0x142>
 801876c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801876e:	06c3      	lsls	r3, r0, #27
 8018770:	f53f af2e 	bmi.w	80185d0 <__ssvfiscanf_r+0x60>
 8018774:	9b00      	ldr	r3, [sp, #0]
 8018776:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018778:	1d19      	adds	r1, r3, #4
 801877a:	9100      	str	r1, [sp, #0]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	07c0      	lsls	r0, r0, #31
 8018780:	bf4c      	ite	mi
 8018782:	801a      	strhmi	r2, [r3, #0]
 8018784:	601a      	strpl	r2, [r3, #0]
 8018786:	e723      	b.n	80185d0 <__ssvfiscanf_r+0x60>
 8018788:	2305      	movs	r3, #5
 801878a:	e792      	b.n	80186b2 <__ssvfiscanf_r+0x142>
 801878c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801878e:	4621      	mov	r1, r4
 8018790:	4630      	mov	r0, r6
 8018792:	4798      	blx	r3
 8018794:	2800      	cmp	r0, #0
 8018796:	d090      	beq.n	80186ba <__ssvfiscanf_r+0x14a>
 8018798:	e7c8      	b.n	801872c <__ssvfiscanf_r+0x1bc>
 801879a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801879c:	3201      	adds	r2, #1
 801879e:	9245      	str	r2, [sp, #276]	; 0x114
 80187a0:	6862      	ldr	r2, [r4, #4]
 80187a2:	3a01      	subs	r2, #1
 80187a4:	2a00      	cmp	r2, #0
 80187a6:	6062      	str	r2, [r4, #4]
 80187a8:	dd02      	ble.n	80187b0 <__ssvfiscanf_r+0x240>
 80187aa:	3301      	adds	r3, #1
 80187ac:	6023      	str	r3, [r4, #0]
 80187ae:	e787      	b.n	80186c0 <__ssvfiscanf_r+0x150>
 80187b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80187b2:	4621      	mov	r1, r4
 80187b4:	4630      	mov	r0, r6
 80187b6:	4798      	blx	r3
 80187b8:	2800      	cmp	r0, #0
 80187ba:	d081      	beq.n	80186c0 <__ssvfiscanf_r+0x150>
 80187bc:	e7b6      	b.n	801872c <__ssvfiscanf_r+0x1bc>
 80187be:	2b04      	cmp	r3, #4
 80187c0:	dc06      	bgt.n	80187d0 <__ssvfiscanf_r+0x260>
 80187c2:	466b      	mov	r3, sp
 80187c4:	4622      	mov	r2, r4
 80187c6:	a941      	add	r1, sp, #260	; 0x104
 80187c8:	4630      	mov	r0, r6
 80187ca:	f000 f885 	bl	80188d8 <_scanf_i>
 80187ce:	e788      	b.n	80186e2 <__ssvfiscanf_r+0x172>
 80187d0:	4b0e      	ldr	r3, [pc, #56]	; (801880c <__ssvfiscanf_r+0x29c>)
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	f43f aefc 	beq.w	80185d0 <__ssvfiscanf_r+0x60>
 80187d8:	466b      	mov	r3, sp
 80187da:	4622      	mov	r2, r4
 80187dc:	a941      	add	r1, sp, #260	; 0x104
 80187de:	4630      	mov	r0, r6
 80187e0:	f3af 8000 	nop.w
 80187e4:	e77d      	b.n	80186e2 <__ssvfiscanf_r+0x172>
 80187e6:	89a3      	ldrh	r3, [r4, #12]
 80187e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80187ec:	bf18      	it	ne
 80187ee:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80187f2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80187f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80187fc:	e7f9      	b.n	80187f2 <__ssvfiscanf_r+0x282>
 80187fe:	bf00      	nop
 8018800:	080184bd 	.word	0x080184bd
 8018804:	08018537 	.word	0x08018537
 8018808:	0801c34a 	.word	0x0801c34a
 801880c:	00000000 	.word	0x00000000

08018810 <_scanf_chars>:
 8018810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018814:	4615      	mov	r5, r2
 8018816:	688a      	ldr	r2, [r1, #8]
 8018818:	4680      	mov	r8, r0
 801881a:	460c      	mov	r4, r1
 801881c:	b932      	cbnz	r2, 801882c <_scanf_chars+0x1c>
 801881e:	698a      	ldr	r2, [r1, #24]
 8018820:	2a00      	cmp	r2, #0
 8018822:	bf14      	ite	ne
 8018824:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8018828:	2201      	moveq	r2, #1
 801882a:	608a      	str	r2, [r1, #8]
 801882c:	6822      	ldr	r2, [r4, #0]
 801882e:	06d1      	lsls	r1, r2, #27
 8018830:	bf5f      	itttt	pl
 8018832:	681a      	ldrpl	r2, [r3, #0]
 8018834:	1d11      	addpl	r1, r2, #4
 8018836:	6019      	strpl	r1, [r3, #0]
 8018838:	6817      	ldrpl	r7, [r2, #0]
 801883a:	2600      	movs	r6, #0
 801883c:	69a3      	ldr	r3, [r4, #24]
 801883e:	b1db      	cbz	r3, 8018878 <_scanf_chars+0x68>
 8018840:	2b01      	cmp	r3, #1
 8018842:	d107      	bne.n	8018854 <_scanf_chars+0x44>
 8018844:	682b      	ldr	r3, [r5, #0]
 8018846:	6962      	ldr	r2, [r4, #20]
 8018848:	781b      	ldrb	r3, [r3, #0]
 801884a:	5cd3      	ldrb	r3, [r2, r3]
 801884c:	b9a3      	cbnz	r3, 8018878 <_scanf_chars+0x68>
 801884e:	2e00      	cmp	r6, #0
 8018850:	d132      	bne.n	80188b8 <_scanf_chars+0xa8>
 8018852:	e006      	b.n	8018862 <_scanf_chars+0x52>
 8018854:	2b02      	cmp	r3, #2
 8018856:	d007      	beq.n	8018868 <_scanf_chars+0x58>
 8018858:	2e00      	cmp	r6, #0
 801885a:	d12d      	bne.n	80188b8 <_scanf_chars+0xa8>
 801885c:	69a3      	ldr	r3, [r4, #24]
 801885e:	2b01      	cmp	r3, #1
 8018860:	d12a      	bne.n	80188b8 <_scanf_chars+0xa8>
 8018862:	2001      	movs	r0, #1
 8018864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018868:	f7ff fdec 	bl	8018444 <__locale_ctype_ptr>
 801886c:	682b      	ldr	r3, [r5, #0]
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	4418      	add	r0, r3
 8018872:	7843      	ldrb	r3, [r0, #1]
 8018874:	071b      	lsls	r3, r3, #28
 8018876:	d4ef      	bmi.n	8018858 <_scanf_chars+0x48>
 8018878:	6823      	ldr	r3, [r4, #0]
 801887a:	06da      	lsls	r2, r3, #27
 801887c:	bf5e      	ittt	pl
 801887e:	682b      	ldrpl	r3, [r5, #0]
 8018880:	781b      	ldrbpl	r3, [r3, #0]
 8018882:	703b      	strbpl	r3, [r7, #0]
 8018884:	682a      	ldr	r2, [r5, #0]
 8018886:	686b      	ldr	r3, [r5, #4]
 8018888:	f102 0201 	add.w	r2, r2, #1
 801888c:	602a      	str	r2, [r5, #0]
 801888e:	68a2      	ldr	r2, [r4, #8]
 8018890:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8018894:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8018898:	606b      	str	r3, [r5, #4]
 801889a:	f106 0601 	add.w	r6, r6, #1
 801889e:	bf58      	it	pl
 80188a0:	3701      	addpl	r7, #1
 80188a2:	60a2      	str	r2, [r4, #8]
 80188a4:	b142      	cbz	r2, 80188b8 <_scanf_chars+0xa8>
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	dcc8      	bgt.n	801883c <_scanf_chars+0x2c>
 80188aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80188ae:	4629      	mov	r1, r5
 80188b0:	4640      	mov	r0, r8
 80188b2:	4798      	blx	r3
 80188b4:	2800      	cmp	r0, #0
 80188b6:	d0c1      	beq.n	801883c <_scanf_chars+0x2c>
 80188b8:	6823      	ldr	r3, [r4, #0]
 80188ba:	f013 0310 	ands.w	r3, r3, #16
 80188be:	d105      	bne.n	80188cc <_scanf_chars+0xbc>
 80188c0:	68e2      	ldr	r2, [r4, #12]
 80188c2:	3201      	adds	r2, #1
 80188c4:	60e2      	str	r2, [r4, #12]
 80188c6:	69a2      	ldr	r2, [r4, #24]
 80188c8:	b102      	cbz	r2, 80188cc <_scanf_chars+0xbc>
 80188ca:	703b      	strb	r3, [r7, #0]
 80188cc:	6923      	ldr	r3, [r4, #16]
 80188ce:	441e      	add	r6, r3
 80188d0:	6126      	str	r6, [r4, #16]
 80188d2:	2000      	movs	r0, #0
 80188d4:	e7c6      	b.n	8018864 <_scanf_chars+0x54>
	...

080188d8 <_scanf_i>:
 80188d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188dc:	469a      	mov	sl, r3
 80188de:	4b74      	ldr	r3, [pc, #464]	; (8018ab0 <_scanf_i+0x1d8>)
 80188e0:	460c      	mov	r4, r1
 80188e2:	4683      	mov	fp, r0
 80188e4:	4616      	mov	r6, r2
 80188e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80188ea:	b087      	sub	sp, #28
 80188ec:	ab03      	add	r3, sp, #12
 80188ee:	68a7      	ldr	r7, [r4, #8]
 80188f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80188f4:	4b6f      	ldr	r3, [pc, #444]	; (8018ab4 <_scanf_i+0x1dc>)
 80188f6:	69a1      	ldr	r1, [r4, #24]
 80188f8:	4a6f      	ldr	r2, [pc, #444]	; (8018ab8 <_scanf_i+0x1e0>)
 80188fa:	2903      	cmp	r1, #3
 80188fc:	bf08      	it	eq
 80188fe:	461a      	moveq	r2, r3
 8018900:	1e7b      	subs	r3, r7, #1
 8018902:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018906:	bf84      	itt	hi
 8018908:	f240 135d 	movwhi	r3, #349	; 0x15d
 801890c:	60a3      	strhi	r3, [r4, #8]
 801890e:	6823      	ldr	r3, [r4, #0]
 8018910:	9200      	str	r2, [sp, #0]
 8018912:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018916:	bf88      	it	hi
 8018918:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801891c:	f104 091c 	add.w	r9, r4, #28
 8018920:	6023      	str	r3, [r4, #0]
 8018922:	bf8c      	ite	hi
 8018924:	197f      	addhi	r7, r7, r5
 8018926:	2700      	movls	r7, #0
 8018928:	464b      	mov	r3, r9
 801892a:	f04f 0800 	mov.w	r8, #0
 801892e:	9301      	str	r3, [sp, #4]
 8018930:	6831      	ldr	r1, [r6, #0]
 8018932:	ab03      	add	r3, sp, #12
 8018934:	2202      	movs	r2, #2
 8018936:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801893a:	7809      	ldrb	r1, [r1, #0]
 801893c:	f7e7 fc50 	bl	80001e0 <memchr>
 8018940:	9b01      	ldr	r3, [sp, #4]
 8018942:	b330      	cbz	r0, 8018992 <_scanf_i+0xba>
 8018944:	f1b8 0f01 	cmp.w	r8, #1
 8018948:	d15a      	bne.n	8018a00 <_scanf_i+0x128>
 801894a:	6862      	ldr	r2, [r4, #4]
 801894c:	b92a      	cbnz	r2, 801895a <_scanf_i+0x82>
 801894e:	6822      	ldr	r2, [r4, #0]
 8018950:	2108      	movs	r1, #8
 8018952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018956:	6061      	str	r1, [r4, #4]
 8018958:	6022      	str	r2, [r4, #0]
 801895a:	6822      	ldr	r2, [r4, #0]
 801895c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018960:	6022      	str	r2, [r4, #0]
 8018962:	68a2      	ldr	r2, [r4, #8]
 8018964:	1e51      	subs	r1, r2, #1
 8018966:	60a1      	str	r1, [r4, #8]
 8018968:	b19a      	cbz	r2, 8018992 <_scanf_i+0xba>
 801896a:	6832      	ldr	r2, [r6, #0]
 801896c:	1c51      	adds	r1, r2, #1
 801896e:	6031      	str	r1, [r6, #0]
 8018970:	7812      	ldrb	r2, [r2, #0]
 8018972:	701a      	strb	r2, [r3, #0]
 8018974:	1c5d      	adds	r5, r3, #1
 8018976:	6873      	ldr	r3, [r6, #4]
 8018978:	3b01      	subs	r3, #1
 801897a:	2b00      	cmp	r3, #0
 801897c:	6073      	str	r3, [r6, #4]
 801897e:	dc07      	bgt.n	8018990 <_scanf_i+0xb8>
 8018980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018984:	4631      	mov	r1, r6
 8018986:	4658      	mov	r0, fp
 8018988:	4798      	blx	r3
 801898a:	2800      	cmp	r0, #0
 801898c:	f040 8086 	bne.w	8018a9c <_scanf_i+0x1c4>
 8018990:	462b      	mov	r3, r5
 8018992:	f108 0801 	add.w	r8, r8, #1
 8018996:	f1b8 0f03 	cmp.w	r8, #3
 801899a:	d1c8      	bne.n	801892e <_scanf_i+0x56>
 801899c:	6862      	ldr	r2, [r4, #4]
 801899e:	b90a      	cbnz	r2, 80189a4 <_scanf_i+0xcc>
 80189a0:	220a      	movs	r2, #10
 80189a2:	6062      	str	r2, [r4, #4]
 80189a4:	6862      	ldr	r2, [r4, #4]
 80189a6:	4945      	ldr	r1, [pc, #276]	; (8018abc <_scanf_i+0x1e4>)
 80189a8:	6960      	ldr	r0, [r4, #20]
 80189aa:	9301      	str	r3, [sp, #4]
 80189ac:	1a89      	subs	r1, r1, r2
 80189ae:	f000 f899 	bl	8018ae4 <__sccl>
 80189b2:	9b01      	ldr	r3, [sp, #4]
 80189b4:	f04f 0800 	mov.w	r8, #0
 80189b8:	461d      	mov	r5, r3
 80189ba:	68a3      	ldr	r3, [r4, #8]
 80189bc:	6822      	ldr	r2, [r4, #0]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d03a      	beq.n	8018a38 <_scanf_i+0x160>
 80189c2:	6831      	ldr	r1, [r6, #0]
 80189c4:	6960      	ldr	r0, [r4, #20]
 80189c6:	f891 c000 	ldrb.w	ip, [r1]
 80189ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80189ce:	2800      	cmp	r0, #0
 80189d0:	d032      	beq.n	8018a38 <_scanf_i+0x160>
 80189d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80189d6:	d121      	bne.n	8018a1c <_scanf_i+0x144>
 80189d8:	0510      	lsls	r0, r2, #20
 80189da:	d51f      	bpl.n	8018a1c <_scanf_i+0x144>
 80189dc:	f108 0801 	add.w	r8, r8, #1
 80189e0:	b117      	cbz	r7, 80189e8 <_scanf_i+0x110>
 80189e2:	3301      	adds	r3, #1
 80189e4:	3f01      	subs	r7, #1
 80189e6:	60a3      	str	r3, [r4, #8]
 80189e8:	6873      	ldr	r3, [r6, #4]
 80189ea:	3b01      	subs	r3, #1
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	6073      	str	r3, [r6, #4]
 80189f0:	dd1b      	ble.n	8018a2a <_scanf_i+0x152>
 80189f2:	6833      	ldr	r3, [r6, #0]
 80189f4:	3301      	adds	r3, #1
 80189f6:	6033      	str	r3, [r6, #0]
 80189f8:	68a3      	ldr	r3, [r4, #8]
 80189fa:	3b01      	subs	r3, #1
 80189fc:	60a3      	str	r3, [r4, #8]
 80189fe:	e7dc      	b.n	80189ba <_scanf_i+0xe2>
 8018a00:	f1b8 0f02 	cmp.w	r8, #2
 8018a04:	d1ad      	bne.n	8018962 <_scanf_i+0x8a>
 8018a06:	6822      	ldr	r2, [r4, #0]
 8018a08:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018a0c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018a10:	d1bf      	bne.n	8018992 <_scanf_i+0xba>
 8018a12:	2110      	movs	r1, #16
 8018a14:	6061      	str	r1, [r4, #4]
 8018a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018a1a:	e7a1      	b.n	8018960 <_scanf_i+0x88>
 8018a1c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018a20:	6022      	str	r2, [r4, #0]
 8018a22:	780b      	ldrb	r3, [r1, #0]
 8018a24:	702b      	strb	r3, [r5, #0]
 8018a26:	3501      	adds	r5, #1
 8018a28:	e7de      	b.n	80189e8 <_scanf_i+0x110>
 8018a2a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018a2e:	4631      	mov	r1, r6
 8018a30:	4658      	mov	r0, fp
 8018a32:	4798      	blx	r3
 8018a34:	2800      	cmp	r0, #0
 8018a36:	d0df      	beq.n	80189f8 <_scanf_i+0x120>
 8018a38:	6823      	ldr	r3, [r4, #0]
 8018a3a:	05d9      	lsls	r1, r3, #23
 8018a3c:	d50c      	bpl.n	8018a58 <_scanf_i+0x180>
 8018a3e:	454d      	cmp	r5, r9
 8018a40:	d908      	bls.n	8018a54 <_scanf_i+0x17c>
 8018a42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018a46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018a4a:	4632      	mov	r2, r6
 8018a4c:	4658      	mov	r0, fp
 8018a4e:	4798      	blx	r3
 8018a50:	1e6f      	subs	r7, r5, #1
 8018a52:	463d      	mov	r5, r7
 8018a54:	454d      	cmp	r5, r9
 8018a56:	d029      	beq.n	8018aac <_scanf_i+0x1d4>
 8018a58:	6822      	ldr	r2, [r4, #0]
 8018a5a:	f012 0210 	ands.w	r2, r2, #16
 8018a5e:	d113      	bne.n	8018a88 <_scanf_i+0x1b0>
 8018a60:	702a      	strb	r2, [r5, #0]
 8018a62:	6863      	ldr	r3, [r4, #4]
 8018a64:	9e00      	ldr	r6, [sp, #0]
 8018a66:	4649      	mov	r1, r9
 8018a68:	4658      	mov	r0, fp
 8018a6a:	47b0      	blx	r6
 8018a6c:	f8da 3000 	ldr.w	r3, [sl]
 8018a70:	6821      	ldr	r1, [r4, #0]
 8018a72:	1d1a      	adds	r2, r3, #4
 8018a74:	f8ca 2000 	str.w	r2, [sl]
 8018a78:	f011 0f20 	tst.w	r1, #32
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	d010      	beq.n	8018aa2 <_scanf_i+0x1ca>
 8018a80:	6018      	str	r0, [r3, #0]
 8018a82:	68e3      	ldr	r3, [r4, #12]
 8018a84:	3301      	adds	r3, #1
 8018a86:	60e3      	str	r3, [r4, #12]
 8018a88:	eba5 0509 	sub.w	r5, r5, r9
 8018a8c:	44a8      	add	r8, r5
 8018a8e:	6925      	ldr	r5, [r4, #16]
 8018a90:	4445      	add	r5, r8
 8018a92:	6125      	str	r5, [r4, #16]
 8018a94:	2000      	movs	r0, #0
 8018a96:	b007      	add	sp, #28
 8018a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a9c:	f04f 0800 	mov.w	r8, #0
 8018aa0:	e7ca      	b.n	8018a38 <_scanf_i+0x160>
 8018aa2:	07ca      	lsls	r2, r1, #31
 8018aa4:	bf4c      	ite	mi
 8018aa6:	8018      	strhmi	r0, [r3, #0]
 8018aa8:	6018      	strpl	r0, [r3, #0]
 8018aaa:	e7ea      	b.n	8018a82 <_scanf_i+0x1aa>
 8018aac:	2001      	movs	r0, #1
 8018aae:	e7f2      	b.n	8018a96 <_scanf_i+0x1be>
 8018ab0:	0801c274 	.word	0x0801c274
 8018ab4:	08018c41 	.word	0x08018c41
 8018ab8:	08018361 	.word	0x08018361
 8018abc:	0801c5a6 	.word	0x0801c5a6

08018ac0 <_read_r>:
 8018ac0:	b538      	push	{r3, r4, r5, lr}
 8018ac2:	4c07      	ldr	r4, [pc, #28]	; (8018ae0 <_read_r+0x20>)
 8018ac4:	4605      	mov	r5, r0
 8018ac6:	4608      	mov	r0, r1
 8018ac8:	4611      	mov	r1, r2
 8018aca:	2200      	movs	r2, #0
 8018acc:	6022      	str	r2, [r4, #0]
 8018ace:	461a      	mov	r2, r3
 8018ad0:	f7f4 fa0a 	bl	800cee8 <_read>
 8018ad4:	1c43      	adds	r3, r0, #1
 8018ad6:	d102      	bne.n	8018ade <_read_r+0x1e>
 8018ad8:	6823      	ldr	r3, [r4, #0]
 8018ada:	b103      	cbz	r3, 8018ade <_read_r+0x1e>
 8018adc:	602b      	str	r3, [r5, #0]
 8018ade:	bd38      	pop	{r3, r4, r5, pc}
 8018ae0:	20005400 	.word	0x20005400

08018ae4 <__sccl>:
 8018ae4:	b570      	push	{r4, r5, r6, lr}
 8018ae6:	780b      	ldrb	r3, [r1, #0]
 8018ae8:	2b5e      	cmp	r3, #94	; 0x5e
 8018aea:	bf13      	iteet	ne
 8018aec:	1c4a      	addne	r2, r1, #1
 8018aee:	1c8a      	addeq	r2, r1, #2
 8018af0:	784b      	ldrbeq	r3, [r1, #1]
 8018af2:	2100      	movne	r1, #0
 8018af4:	bf08      	it	eq
 8018af6:	2101      	moveq	r1, #1
 8018af8:	1e44      	subs	r4, r0, #1
 8018afa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018afe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018b02:	42ac      	cmp	r4, r5
 8018b04:	d1fb      	bne.n	8018afe <__sccl+0x1a>
 8018b06:	b913      	cbnz	r3, 8018b0e <__sccl+0x2a>
 8018b08:	3a01      	subs	r2, #1
 8018b0a:	4610      	mov	r0, r2
 8018b0c:	bd70      	pop	{r4, r5, r6, pc}
 8018b0e:	f081 0401 	eor.w	r4, r1, #1
 8018b12:	54c4      	strb	r4, [r0, r3]
 8018b14:	1c51      	adds	r1, r2, #1
 8018b16:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018b1a:	2d2d      	cmp	r5, #45	; 0x2d
 8018b1c:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8018b20:	460a      	mov	r2, r1
 8018b22:	d006      	beq.n	8018b32 <__sccl+0x4e>
 8018b24:	2d5d      	cmp	r5, #93	; 0x5d
 8018b26:	d0f0      	beq.n	8018b0a <__sccl+0x26>
 8018b28:	b90d      	cbnz	r5, 8018b2e <__sccl+0x4a>
 8018b2a:	4632      	mov	r2, r6
 8018b2c:	e7ed      	b.n	8018b0a <__sccl+0x26>
 8018b2e:	462b      	mov	r3, r5
 8018b30:	e7ef      	b.n	8018b12 <__sccl+0x2e>
 8018b32:	780e      	ldrb	r6, [r1, #0]
 8018b34:	2e5d      	cmp	r6, #93	; 0x5d
 8018b36:	d0fa      	beq.n	8018b2e <__sccl+0x4a>
 8018b38:	42b3      	cmp	r3, r6
 8018b3a:	dcf8      	bgt.n	8018b2e <__sccl+0x4a>
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	429e      	cmp	r6, r3
 8018b40:	54c4      	strb	r4, [r0, r3]
 8018b42:	dcfb      	bgt.n	8018b3c <__sccl+0x58>
 8018b44:	3102      	adds	r1, #2
 8018b46:	e7e6      	b.n	8018b16 <__sccl+0x32>

08018b48 <_strtol_l.isra.0>:
 8018b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b4c:	4680      	mov	r8, r0
 8018b4e:	4689      	mov	r9, r1
 8018b50:	4692      	mov	sl, r2
 8018b52:	461e      	mov	r6, r3
 8018b54:	460f      	mov	r7, r1
 8018b56:	463d      	mov	r5, r7
 8018b58:	9808      	ldr	r0, [sp, #32]
 8018b5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b5e:	f7ff fc6d 	bl	801843c <__locale_ctype_ptr_l>
 8018b62:	4420      	add	r0, r4
 8018b64:	7843      	ldrb	r3, [r0, #1]
 8018b66:	f013 0308 	ands.w	r3, r3, #8
 8018b6a:	d132      	bne.n	8018bd2 <_strtol_l.isra.0+0x8a>
 8018b6c:	2c2d      	cmp	r4, #45	; 0x2d
 8018b6e:	d132      	bne.n	8018bd6 <_strtol_l.isra.0+0x8e>
 8018b70:	787c      	ldrb	r4, [r7, #1]
 8018b72:	1cbd      	adds	r5, r7, #2
 8018b74:	2201      	movs	r2, #1
 8018b76:	2e00      	cmp	r6, #0
 8018b78:	d05d      	beq.n	8018c36 <_strtol_l.isra.0+0xee>
 8018b7a:	2e10      	cmp	r6, #16
 8018b7c:	d109      	bne.n	8018b92 <_strtol_l.isra.0+0x4a>
 8018b7e:	2c30      	cmp	r4, #48	; 0x30
 8018b80:	d107      	bne.n	8018b92 <_strtol_l.isra.0+0x4a>
 8018b82:	782b      	ldrb	r3, [r5, #0]
 8018b84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018b88:	2b58      	cmp	r3, #88	; 0x58
 8018b8a:	d14f      	bne.n	8018c2c <_strtol_l.isra.0+0xe4>
 8018b8c:	786c      	ldrb	r4, [r5, #1]
 8018b8e:	2610      	movs	r6, #16
 8018b90:	3502      	adds	r5, #2
 8018b92:	2a00      	cmp	r2, #0
 8018b94:	bf14      	ite	ne
 8018b96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8018b9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8018b9e:	2700      	movs	r7, #0
 8018ba0:	fbb1 fcf6 	udiv	ip, r1, r6
 8018ba4:	4638      	mov	r0, r7
 8018ba6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8018baa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018bae:	2b09      	cmp	r3, #9
 8018bb0:	d817      	bhi.n	8018be2 <_strtol_l.isra.0+0x9a>
 8018bb2:	461c      	mov	r4, r3
 8018bb4:	42a6      	cmp	r6, r4
 8018bb6:	dd23      	ble.n	8018c00 <_strtol_l.isra.0+0xb8>
 8018bb8:	1c7b      	adds	r3, r7, #1
 8018bba:	d007      	beq.n	8018bcc <_strtol_l.isra.0+0x84>
 8018bbc:	4584      	cmp	ip, r0
 8018bbe:	d31c      	bcc.n	8018bfa <_strtol_l.isra.0+0xb2>
 8018bc0:	d101      	bne.n	8018bc6 <_strtol_l.isra.0+0x7e>
 8018bc2:	45a6      	cmp	lr, r4
 8018bc4:	db19      	blt.n	8018bfa <_strtol_l.isra.0+0xb2>
 8018bc6:	fb00 4006 	mla	r0, r0, r6, r4
 8018bca:	2701      	movs	r7, #1
 8018bcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018bd0:	e7eb      	b.n	8018baa <_strtol_l.isra.0+0x62>
 8018bd2:	462f      	mov	r7, r5
 8018bd4:	e7bf      	b.n	8018b56 <_strtol_l.isra.0+0xe>
 8018bd6:	2c2b      	cmp	r4, #43	; 0x2b
 8018bd8:	bf04      	itt	eq
 8018bda:	1cbd      	addeq	r5, r7, #2
 8018bdc:	787c      	ldrbeq	r4, [r7, #1]
 8018bde:	461a      	mov	r2, r3
 8018be0:	e7c9      	b.n	8018b76 <_strtol_l.isra.0+0x2e>
 8018be2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8018be6:	2b19      	cmp	r3, #25
 8018be8:	d801      	bhi.n	8018bee <_strtol_l.isra.0+0xa6>
 8018bea:	3c37      	subs	r4, #55	; 0x37
 8018bec:	e7e2      	b.n	8018bb4 <_strtol_l.isra.0+0x6c>
 8018bee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8018bf2:	2b19      	cmp	r3, #25
 8018bf4:	d804      	bhi.n	8018c00 <_strtol_l.isra.0+0xb8>
 8018bf6:	3c57      	subs	r4, #87	; 0x57
 8018bf8:	e7dc      	b.n	8018bb4 <_strtol_l.isra.0+0x6c>
 8018bfa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018bfe:	e7e5      	b.n	8018bcc <_strtol_l.isra.0+0x84>
 8018c00:	1c7b      	adds	r3, r7, #1
 8018c02:	d108      	bne.n	8018c16 <_strtol_l.isra.0+0xce>
 8018c04:	2322      	movs	r3, #34	; 0x22
 8018c06:	f8c8 3000 	str.w	r3, [r8]
 8018c0a:	4608      	mov	r0, r1
 8018c0c:	f1ba 0f00 	cmp.w	sl, #0
 8018c10:	d107      	bne.n	8018c22 <_strtol_l.isra.0+0xda>
 8018c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c16:	b102      	cbz	r2, 8018c1a <_strtol_l.isra.0+0xd2>
 8018c18:	4240      	negs	r0, r0
 8018c1a:	f1ba 0f00 	cmp.w	sl, #0
 8018c1e:	d0f8      	beq.n	8018c12 <_strtol_l.isra.0+0xca>
 8018c20:	b10f      	cbz	r7, 8018c26 <_strtol_l.isra.0+0xde>
 8018c22:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8018c26:	f8ca 9000 	str.w	r9, [sl]
 8018c2a:	e7f2      	b.n	8018c12 <_strtol_l.isra.0+0xca>
 8018c2c:	2430      	movs	r4, #48	; 0x30
 8018c2e:	2e00      	cmp	r6, #0
 8018c30:	d1af      	bne.n	8018b92 <_strtol_l.isra.0+0x4a>
 8018c32:	2608      	movs	r6, #8
 8018c34:	e7ad      	b.n	8018b92 <_strtol_l.isra.0+0x4a>
 8018c36:	2c30      	cmp	r4, #48	; 0x30
 8018c38:	d0a3      	beq.n	8018b82 <_strtol_l.isra.0+0x3a>
 8018c3a:	260a      	movs	r6, #10
 8018c3c:	e7a9      	b.n	8018b92 <_strtol_l.isra.0+0x4a>
	...

08018c40 <_strtol_r>:
 8018c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c42:	4c06      	ldr	r4, [pc, #24]	; (8018c5c <_strtol_r+0x1c>)
 8018c44:	4d06      	ldr	r5, [pc, #24]	; (8018c60 <_strtol_r+0x20>)
 8018c46:	6824      	ldr	r4, [r4, #0]
 8018c48:	6a24      	ldr	r4, [r4, #32]
 8018c4a:	2c00      	cmp	r4, #0
 8018c4c:	bf08      	it	eq
 8018c4e:	462c      	moveq	r4, r5
 8018c50:	9400      	str	r4, [sp, #0]
 8018c52:	f7ff ff79 	bl	8018b48 <_strtol_l.isra.0>
 8018c56:	b003      	add	sp, #12
 8018c58:	bd30      	pop	{r4, r5, pc}
 8018c5a:	bf00      	nop
 8018c5c:	20000154 	.word	0x20000154
 8018c60:	20000218 	.word	0x20000218

08018c64 <__submore>:
 8018c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c68:	460c      	mov	r4, r1
 8018c6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c70:	4299      	cmp	r1, r3
 8018c72:	d11d      	bne.n	8018cb0 <__submore+0x4c>
 8018c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018c78:	f7ff f9de 	bl	8018038 <_malloc_r>
 8018c7c:	b918      	cbnz	r0, 8018c86 <__submore+0x22>
 8018c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8018c8c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018c90:	6360      	str	r0, [r4, #52]	; 0x34
 8018c92:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018c96:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018c9a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018c9e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018ca2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018ca6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018caa:	6020      	str	r0, [r4, #0]
 8018cac:	2000      	movs	r0, #0
 8018cae:	e7e8      	b.n	8018c82 <__submore+0x1e>
 8018cb0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018cb2:	0077      	lsls	r7, r6, #1
 8018cb4:	463a      	mov	r2, r7
 8018cb6:	f7ff fa19 	bl	80180ec <_realloc_r>
 8018cba:	4605      	mov	r5, r0
 8018cbc:	2800      	cmp	r0, #0
 8018cbe:	d0de      	beq.n	8018c7e <__submore+0x1a>
 8018cc0:	eb00 0806 	add.w	r8, r0, r6
 8018cc4:	4601      	mov	r1, r0
 8018cc6:	4632      	mov	r2, r6
 8018cc8:	4640      	mov	r0, r8
 8018cca:	f7fc faad 	bl	8015228 <memcpy>
 8018cce:	f8c4 8000 	str.w	r8, [r4]
 8018cd2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018cd6:	e7e9      	b.n	8018cac <__submore+0x48>

08018cd8 <__ascii_wctomb>:
 8018cd8:	b149      	cbz	r1, 8018cee <__ascii_wctomb+0x16>
 8018cda:	2aff      	cmp	r2, #255	; 0xff
 8018cdc:	bf85      	ittet	hi
 8018cde:	238a      	movhi	r3, #138	; 0x8a
 8018ce0:	6003      	strhi	r3, [r0, #0]
 8018ce2:	700a      	strbls	r2, [r1, #0]
 8018ce4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8018ce8:	bf98      	it	ls
 8018cea:	2001      	movls	r0, #1
 8018cec:	4770      	bx	lr
 8018cee:	4608      	mov	r0, r1
 8018cf0:	4770      	bx	lr
 8018cf2:	0000      	movs	r0, r0
 8018cf4:	0000      	movs	r0, r0
	...

08018cf8 <atan>:
 8018cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cfc:	ec55 4b10 	vmov	r4, r5, d0
 8018d00:	4bc3      	ldr	r3, [pc, #780]	; (8019010 <atan+0x318>)
 8018d02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018d06:	429e      	cmp	r6, r3
 8018d08:	46ab      	mov	fp, r5
 8018d0a:	dd18      	ble.n	8018d3e <atan+0x46>
 8018d0c:	4bc1      	ldr	r3, [pc, #772]	; (8019014 <atan+0x31c>)
 8018d0e:	429e      	cmp	r6, r3
 8018d10:	dc01      	bgt.n	8018d16 <atan+0x1e>
 8018d12:	d109      	bne.n	8018d28 <atan+0x30>
 8018d14:	b144      	cbz	r4, 8018d28 <atan+0x30>
 8018d16:	4622      	mov	r2, r4
 8018d18:	462b      	mov	r3, r5
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	4629      	mov	r1, r5
 8018d1e:	f7e7 fabf 	bl	80002a0 <__adddf3>
 8018d22:	4604      	mov	r4, r0
 8018d24:	460d      	mov	r5, r1
 8018d26:	e006      	b.n	8018d36 <atan+0x3e>
 8018d28:	f1bb 0f00 	cmp.w	fp, #0
 8018d2c:	f340 8131 	ble.w	8018f92 <atan+0x29a>
 8018d30:	a59b      	add	r5, pc, #620	; (adr r5, 8018fa0 <atan+0x2a8>)
 8018d32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018d36:	ec45 4b10 	vmov	d0, r4, r5
 8018d3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d3e:	4bb6      	ldr	r3, [pc, #728]	; (8019018 <atan+0x320>)
 8018d40:	429e      	cmp	r6, r3
 8018d42:	dc14      	bgt.n	8018d6e <atan+0x76>
 8018d44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8018d48:	429e      	cmp	r6, r3
 8018d4a:	dc0d      	bgt.n	8018d68 <atan+0x70>
 8018d4c:	a396      	add	r3, pc, #600	; (adr r3, 8018fa8 <atan+0x2b0>)
 8018d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d52:	ee10 0a10 	vmov	r0, s0
 8018d56:	4629      	mov	r1, r5
 8018d58:	f7e7 faa2 	bl	80002a0 <__adddf3>
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	4baf      	ldr	r3, [pc, #700]	; (801901c <atan+0x324>)
 8018d60:	f7e7 fee4 	bl	8000b2c <__aeabi_dcmpgt>
 8018d64:	2800      	cmp	r0, #0
 8018d66:	d1e6      	bne.n	8018d36 <atan+0x3e>
 8018d68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018d6c:	e02b      	b.n	8018dc6 <atan+0xce>
 8018d6e:	f000 f9a7 	bl	80190c0 <fabs>
 8018d72:	4bab      	ldr	r3, [pc, #684]	; (8019020 <atan+0x328>)
 8018d74:	429e      	cmp	r6, r3
 8018d76:	ec55 4b10 	vmov	r4, r5, d0
 8018d7a:	f300 80bf 	bgt.w	8018efc <atan+0x204>
 8018d7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8018d82:	429e      	cmp	r6, r3
 8018d84:	f300 80a0 	bgt.w	8018ec8 <atan+0x1d0>
 8018d88:	ee10 2a10 	vmov	r2, s0
 8018d8c:	ee10 0a10 	vmov	r0, s0
 8018d90:	462b      	mov	r3, r5
 8018d92:	4629      	mov	r1, r5
 8018d94:	f7e7 fa84 	bl	80002a0 <__adddf3>
 8018d98:	2200      	movs	r2, #0
 8018d9a:	4ba0      	ldr	r3, [pc, #640]	; (801901c <atan+0x324>)
 8018d9c:	f7e7 fa7e 	bl	800029c <__aeabi_dsub>
 8018da0:	2200      	movs	r2, #0
 8018da2:	4606      	mov	r6, r0
 8018da4:	460f      	mov	r7, r1
 8018da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018daa:	4620      	mov	r0, r4
 8018dac:	4629      	mov	r1, r5
 8018dae:	f7e7 fa77 	bl	80002a0 <__adddf3>
 8018db2:	4602      	mov	r2, r0
 8018db4:	460b      	mov	r3, r1
 8018db6:	4630      	mov	r0, r6
 8018db8:	4639      	mov	r1, r7
 8018dba:	f7e7 fd51 	bl	8000860 <__aeabi_ddiv>
 8018dbe:	f04f 0a00 	mov.w	sl, #0
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	460d      	mov	r5, r1
 8018dc6:	4622      	mov	r2, r4
 8018dc8:	462b      	mov	r3, r5
 8018dca:	4620      	mov	r0, r4
 8018dcc:	4629      	mov	r1, r5
 8018dce:	f7e7 fc1d 	bl	800060c <__aeabi_dmul>
 8018dd2:	4602      	mov	r2, r0
 8018dd4:	460b      	mov	r3, r1
 8018dd6:	4680      	mov	r8, r0
 8018dd8:	4689      	mov	r9, r1
 8018dda:	f7e7 fc17 	bl	800060c <__aeabi_dmul>
 8018dde:	a374      	add	r3, pc, #464	; (adr r3, 8018fb0 <atan+0x2b8>)
 8018de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de4:	4606      	mov	r6, r0
 8018de6:	460f      	mov	r7, r1
 8018de8:	f7e7 fc10 	bl	800060c <__aeabi_dmul>
 8018dec:	a372      	add	r3, pc, #456	; (adr r3, 8018fb8 <atan+0x2c0>)
 8018dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018df2:	f7e7 fa55 	bl	80002a0 <__adddf3>
 8018df6:	4632      	mov	r2, r6
 8018df8:	463b      	mov	r3, r7
 8018dfa:	f7e7 fc07 	bl	800060c <__aeabi_dmul>
 8018dfe:	a370      	add	r3, pc, #448	; (adr r3, 8018fc0 <atan+0x2c8>)
 8018e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e04:	f7e7 fa4c 	bl	80002a0 <__adddf3>
 8018e08:	4632      	mov	r2, r6
 8018e0a:	463b      	mov	r3, r7
 8018e0c:	f7e7 fbfe 	bl	800060c <__aeabi_dmul>
 8018e10:	a36d      	add	r3, pc, #436	; (adr r3, 8018fc8 <atan+0x2d0>)
 8018e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e16:	f7e7 fa43 	bl	80002a0 <__adddf3>
 8018e1a:	4632      	mov	r2, r6
 8018e1c:	463b      	mov	r3, r7
 8018e1e:	f7e7 fbf5 	bl	800060c <__aeabi_dmul>
 8018e22:	a36b      	add	r3, pc, #428	; (adr r3, 8018fd0 <atan+0x2d8>)
 8018e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e28:	f7e7 fa3a 	bl	80002a0 <__adddf3>
 8018e2c:	4632      	mov	r2, r6
 8018e2e:	463b      	mov	r3, r7
 8018e30:	f7e7 fbec 	bl	800060c <__aeabi_dmul>
 8018e34:	a368      	add	r3, pc, #416	; (adr r3, 8018fd8 <atan+0x2e0>)
 8018e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e3a:	f7e7 fa31 	bl	80002a0 <__adddf3>
 8018e3e:	4642      	mov	r2, r8
 8018e40:	464b      	mov	r3, r9
 8018e42:	f7e7 fbe3 	bl	800060c <__aeabi_dmul>
 8018e46:	a366      	add	r3, pc, #408	; (adr r3, 8018fe0 <atan+0x2e8>)
 8018e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e4c:	4680      	mov	r8, r0
 8018e4e:	4689      	mov	r9, r1
 8018e50:	4630      	mov	r0, r6
 8018e52:	4639      	mov	r1, r7
 8018e54:	f7e7 fbda 	bl	800060c <__aeabi_dmul>
 8018e58:	a363      	add	r3, pc, #396	; (adr r3, 8018fe8 <atan+0x2f0>)
 8018e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e5e:	f7e7 fa1d 	bl	800029c <__aeabi_dsub>
 8018e62:	4632      	mov	r2, r6
 8018e64:	463b      	mov	r3, r7
 8018e66:	f7e7 fbd1 	bl	800060c <__aeabi_dmul>
 8018e6a:	a361      	add	r3, pc, #388	; (adr r3, 8018ff0 <atan+0x2f8>)
 8018e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e70:	f7e7 fa14 	bl	800029c <__aeabi_dsub>
 8018e74:	4632      	mov	r2, r6
 8018e76:	463b      	mov	r3, r7
 8018e78:	f7e7 fbc8 	bl	800060c <__aeabi_dmul>
 8018e7c:	a35e      	add	r3, pc, #376	; (adr r3, 8018ff8 <atan+0x300>)
 8018e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e82:	f7e7 fa0b 	bl	800029c <__aeabi_dsub>
 8018e86:	4632      	mov	r2, r6
 8018e88:	463b      	mov	r3, r7
 8018e8a:	f7e7 fbbf 	bl	800060c <__aeabi_dmul>
 8018e8e:	a35c      	add	r3, pc, #368	; (adr r3, 8019000 <atan+0x308>)
 8018e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e94:	f7e7 fa02 	bl	800029c <__aeabi_dsub>
 8018e98:	4632      	mov	r2, r6
 8018e9a:	463b      	mov	r3, r7
 8018e9c:	f7e7 fbb6 	bl	800060c <__aeabi_dmul>
 8018ea0:	4602      	mov	r2, r0
 8018ea2:	460b      	mov	r3, r1
 8018ea4:	4640      	mov	r0, r8
 8018ea6:	4649      	mov	r1, r9
 8018ea8:	f7e7 f9fa 	bl	80002a0 <__adddf3>
 8018eac:	4622      	mov	r2, r4
 8018eae:	462b      	mov	r3, r5
 8018eb0:	f7e7 fbac 	bl	800060c <__aeabi_dmul>
 8018eb4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8018eb8:	4602      	mov	r2, r0
 8018eba:	460b      	mov	r3, r1
 8018ebc:	d14b      	bne.n	8018f56 <atan+0x25e>
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	4629      	mov	r1, r5
 8018ec2:	f7e7 f9eb 	bl	800029c <__aeabi_dsub>
 8018ec6:	e72c      	b.n	8018d22 <atan+0x2a>
 8018ec8:	ee10 0a10 	vmov	r0, s0
 8018ecc:	2200      	movs	r2, #0
 8018ece:	4b53      	ldr	r3, [pc, #332]	; (801901c <atan+0x324>)
 8018ed0:	4629      	mov	r1, r5
 8018ed2:	f7e7 f9e3 	bl	800029c <__aeabi_dsub>
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	4606      	mov	r6, r0
 8018eda:	460f      	mov	r7, r1
 8018edc:	4b4f      	ldr	r3, [pc, #316]	; (801901c <atan+0x324>)
 8018ede:	4620      	mov	r0, r4
 8018ee0:	4629      	mov	r1, r5
 8018ee2:	f7e7 f9dd 	bl	80002a0 <__adddf3>
 8018ee6:	4602      	mov	r2, r0
 8018ee8:	460b      	mov	r3, r1
 8018eea:	4630      	mov	r0, r6
 8018eec:	4639      	mov	r1, r7
 8018eee:	f7e7 fcb7 	bl	8000860 <__aeabi_ddiv>
 8018ef2:	f04f 0a01 	mov.w	sl, #1
 8018ef6:	4604      	mov	r4, r0
 8018ef8:	460d      	mov	r5, r1
 8018efa:	e764      	b.n	8018dc6 <atan+0xce>
 8018efc:	4b49      	ldr	r3, [pc, #292]	; (8019024 <atan+0x32c>)
 8018efe:	429e      	cmp	r6, r3
 8018f00:	dc1d      	bgt.n	8018f3e <atan+0x246>
 8018f02:	ee10 0a10 	vmov	r0, s0
 8018f06:	2200      	movs	r2, #0
 8018f08:	4b47      	ldr	r3, [pc, #284]	; (8019028 <atan+0x330>)
 8018f0a:	4629      	mov	r1, r5
 8018f0c:	f7e7 f9c6 	bl	800029c <__aeabi_dsub>
 8018f10:	2200      	movs	r2, #0
 8018f12:	4606      	mov	r6, r0
 8018f14:	460f      	mov	r7, r1
 8018f16:	4b44      	ldr	r3, [pc, #272]	; (8019028 <atan+0x330>)
 8018f18:	4620      	mov	r0, r4
 8018f1a:	4629      	mov	r1, r5
 8018f1c:	f7e7 fb76 	bl	800060c <__aeabi_dmul>
 8018f20:	2200      	movs	r2, #0
 8018f22:	4b3e      	ldr	r3, [pc, #248]	; (801901c <atan+0x324>)
 8018f24:	f7e7 f9bc 	bl	80002a0 <__adddf3>
 8018f28:	4602      	mov	r2, r0
 8018f2a:	460b      	mov	r3, r1
 8018f2c:	4630      	mov	r0, r6
 8018f2e:	4639      	mov	r1, r7
 8018f30:	f7e7 fc96 	bl	8000860 <__aeabi_ddiv>
 8018f34:	f04f 0a02 	mov.w	sl, #2
 8018f38:	4604      	mov	r4, r0
 8018f3a:	460d      	mov	r5, r1
 8018f3c:	e743      	b.n	8018dc6 <atan+0xce>
 8018f3e:	462b      	mov	r3, r5
 8018f40:	ee10 2a10 	vmov	r2, s0
 8018f44:	2000      	movs	r0, #0
 8018f46:	4939      	ldr	r1, [pc, #228]	; (801902c <atan+0x334>)
 8018f48:	f7e7 fc8a 	bl	8000860 <__aeabi_ddiv>
 8018f4c:	f04f 0a03 	mov.w	sl, #3
 8018f50:	4604      	mov	r4, r0
 8018f52:	460d      	mov	r5, r1
 8018f54:	e737      	b.n	8018dc6 <atan+0xce>
 8018f56:	4b36      	ldr	r3, [pc, #216]	; (8019030 <atan+0x338>)
 8018f58:	4e36      	ldr	r6, [pc, #216]	; (8019034 <atan+0x33c>)
 8018f5a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8018f5e:	4456      	add	r6, sl
 8018f60:	449a      	add	sl, r3
 8018f62:	e9da 2300 	ldrd	r2, r3, [sl]
 8018f66:	f7e7 f999 	bl	800029c <__aeabi_dsub>
 8018f6a:	4622      	mov	r2, r4
 8018f6c:	462b      	mov	r3, r5
 8018f6e:	f7e7 f995 	bl	800029c <__aeabi_dsub>
 8018f72:	4602      	mov	r2, r0
 8018f74:	460b      	mov	r3, r1
 8018f76:	e9d6 0100 	ldrd	r0, r1, [r6]
 8018f7a:	f7e7 f98f 	bl	800029c <__aeabi_dsub>
 8018f7e:	f1bb 0f00 	cmp.w	fp, #0
 8018f82:	4604      	mov	r4, r0
 8018f84:	460d      	mov	r5, r1
 8018f86:	f6bf aed6 	bge.w	8018d36 <atan+0x3e>
 8018f8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018f8e:	461d      	mov	r5, r3
 8018f90:	e6d1      	b.n	8018d36 <atan+0x3e>
 8018f92:	a51d      	add	r5, pc, #116	; (adr r5, 8019008 <atan+0x310>)
 8018f94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018f98:	e6cd      	b.n	8018d36 <atan+0x3e>
 8018f9a:	bf00      	nop
 8018f9c:	f3af 8000 	nop.w
 8018fa0:	54442d18 	.word	0x54442d18
 8018fa4:	3ff921fb 	.word	0x3ff921fb
 8018fa8:	8800759c 	.word	0x8800759c
 8018fac:	7e37e43c 	.word	0x7e37e43c
 8018fb0:	e322da11 	.word	0xe322da11
 8018fb4:	3f90ad3a 	.word	0x3f90ad3a
 8018fb8:	24760deb 	.word	0x24760deb
 8018fbc:	3fa97b4b 	.word	0x3fa97b4b
 8018fc0:	a0d03d51 	.word	0xa0d03d51
 8018fc4:	3fb10d66 	.word	0x3fb10d66
 8018fc8:	c54c206e 	.word	0xc54c206e
 8018fcc:	3fb745cd 	.word	0x3fb745cd
 8018fd0:	920083ff 	.word	0x920083ff
 8018fd4:	3fc24924 	.word	0x3fc24924
 8018fd8:	5555550d 	.word	0x5555550d
 8018fdc:	3fd55555 	.word	0x3fd55555
 8018fe0:	2c6a6c2f 	.word	0x2c6a6c2f
 8018fe4:	bfa2b444 	.word	0xbfa2b444
 8018fe8:	52defd9a 	.word	0x52defd9a
 8018fec:	3fadde2d 	.word	0x3fadde2d
 8018ff0:	af749a6d 	.word	0xaf749a6d
 8018ff4:	3fb3b0f2 	.word	0x3fb3b0f2
 8018ff8:	fe231671 	.word	0xfe231671
 8018ffc:	3fbc71c6 	.word	0x3fbc71c6
 8019000:	9998ebc4 	.word	0x9998ebc4
 8019004:	3fc99999 	.word	0x3fc99999
 8019008:	54442d18 	.word	0x54442d18
 801900c:	bff921fb 	.word	0xbff921fb
 8019010:	440fffff 	.word	0x440fffff
 8019014:	7ff00000 	.word	0x7ff00000
 8019018:	3fdbffff 	.word	0x3fdbffff
 801901c:	3ff00000 	.word	0x3ff00000
 8019020:	3ff2ffff 	.word	0x3ff2ffff
 8019024:	40037fff 	.word	0x40037fff
 8019028:	3ff80000 	.word	0x3ff80000
 801902c:	bff00000 	.word	0xbff00000
 8019030:	0801c6d8 	.word	0x0801c6d8
 8019034:	0801c6b8 	.word	0x0801c6b8

08019038 <cos>:
 8019038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801903a:	ec51 0b10 	vmov	r0, r1, d0
 801903e:	4a1e      	ldr	r2, [pc, #120]	; (80190b8 <cos+0x80>)
 8019040:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019044:	4293      	cmp	r3, r2
 8019046:	dc06      	bgt.n	8019056 <cos+0x1e>
 8019048:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80190b0 <cos+0x78>
 801904c:	f002 f910 	bl	801b270 <__kernel_cos>
 8019050:	ec51 0b10 	vmov	r0, r1, d0
 8019054:	e007      	b.n	8019066 <cos+0x2e>
 8019056:	4a19      	ldr	r2, [pc, #100]	; (80190bc <cos+0x84>)
 8019058:	4293      	cmp	r3, r2
 801905a:	dd09      	ble.n	8019070 <cos+0x38>
 801905c:	ee10 2a10 	vmov	r2, s0
 8019060:	460b      	mov	r3, r1
 8019062:	f7e7 f91b 	bl	800029c <__aeabi_dsub>
 8019066:	ec41 0b10 	vmov	d0, r0, r1
 801906a:	b005      	add	sp, #20
 801906c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019070:	4668      	mov	r0, sp
 8019072:	f001 fe59 	bl	801ad28 <__ieee754_rem_pio2>
 8019076:	f000 0003 	and.w	r0, r0, #3
 801907a:	2801      	cmp	r0, #1
 801907c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019080:	ed9d 0b00 	vldr	d0, [sp]
 8019084:	d007      	beq.n	8019096 <cos+0x5e>
 8019086:	2802      	cmp	r0, #2
 8019088:	d00e      	beq.n	80190a8 <cos+0x70>
 801908a:	2800      	cmp	r0, #0
 801908c:	d0de      	beq.n	801904c <cos+0x14>
 801908e:	2001      	movs	r0, #1
 8019090:	f002 fcf6 	bl	801ba80 <__kernel_sin>
 8019094:	e7dc      	b.n	8019050 <cos+0x18>
 8019096:	f002 fcf3 	bl	801ba80 <__kernel_sin>
 801909a:	ec53 2b10 	vmov	r2, r3, d0
 801909e:	ee10 0a10 	vmov	r0, s0
 80190a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80190a6:	e7de      	b.n	8019066 <cos+0x2e>
 80190a8:	f002 f8e2 	bl	801b270 <__kernel_cos>
 80190ac:	e7f5      	b.n	801909a <cos+0x62>
 80190ae:	bf00      	nop
	...
 80190b8:	3fe921fb 	.word	0x3fe921fb
 80190bc:	7fefffff 	.word	0x7fefffff

080190c0 <fabs>:
 80190c0:	ec51 0b10 	vmov	r0, r1, d0
 80190c4:	ee10 2a10 	vmov	r2, s0
 80190c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80190cc:	ec43 2b10 	vmov	d0, r2, r3
 80190d0:	4770      	bx	lr
 80190d2:	0000      	movs	r0, r0
 80190d4:	0000      	movs	r0, r0
	...

080190d8 <floor>:
 80190d8:	ec51 0b10 	vmov	r0, r1, d0
 80190dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80190e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80190e8:	2e13      	cmp	r6, #19
 80190ea:	460c      	mov	r4, r1
 80190ec:	ee10 5a10 	vmov	r5, s0
 80190f0:	4680      	mov	r8, r0
 80190f2:	dc34      	bgt.n	801915e <floor+0x86>
 80190f4:	2e00      	cmp	r6, #0
 80190f6:	da16      	bge.n	8019126 <floor+0x4e>
 80190f8:	a335      	add	r3, pc, #212	; (adr r3, 80191d0 <floor+0xf8>)
 80190fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190fe:	f7e7 f8cf 	bl	80002a0 <__adddf3>
 8019102:	2200      	movs	r2, #0
 8019104:	2300      	movs	r3, #0
 8019106:	f7e7 fd11 	bl	8000b2c <__aeabi_dcmpgt>
 801910a:	b148      	cbz	r0, 8019120 <floor+0x48>
 801910c:	2c00      	cmp	r4, #0
 801910e:	da59      	bge.n	80191c4 <floor+0xec>
 8019110:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019114:	4a30      	ldr	r2, [pc, #192]	; (80191d8 <floor+0x100>)
 8019116:	432b      	orrs	r3, r5
 8019118:	2500      	movs	r5, #0
 801911a:	42ab      	cmp	r3, r5
 801911c:	bf18      	it	ne
 801911e:	4614      	movne	r4, r2
 8019120:	4621      	mov	r1, r4
 8019122:	4628      	mov	r0, r5
 8019124:	e025      	b.n	8019172 <floor+0x9a>
 8019126:	4f2d      	ldr	r7, [pc, #180]	; (80191dc <floor+0x104>)
 8019128:	4137      	asrs	r7, r6
 801912a:	ea01 0307 	and.w	r3, r1, r7
 801912e:	4303      	orrs	r3, r0
 8019130:	d01f      	beq.n	8019172 <floor+0x9a>
 8019132:	a327      	add	r3, pc, #156	; (adr r3, 80191d0 <floor+0xf8>)
 8019134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019138:	f7e7 f8b2 	bl	80002a0 <__adddf3>
 801913c:	2200      	movs	r2, #0
 801913e:	2300      	movs	r3, #0
 8019140:	f7e7 fcf4 	bl	8000b2c <__aeabi_dcmpgt>
 8019144:	2800      	cmp	r0, #0
 8019146:	d0eb      	beq.n	8019120 <floor+0x48>
 8019148:	2c00      	cmp	r4, #0
 801914a:	bfbe      	ittt	lt
 801914c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019150:	fa43 f606 	asrlt.w	r6, r3, r6
 8019154:	19a4      	addlt	r4, r4, r6
 8019156:	ea24 0407 	bic.w	r4, r4, r7
 801915a:	2500      	movs	r5, #0
 801915c:	e7e0      	b.n	8019120 <floor+0x48>
 801915e:	2e33      	cmp	r6, #51	; 0x33
 8019160:	dd0b      	ble.n	801917a <floor+0xa2>
 8019162:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019166:	d104      	bne.n	8019172 <floor+0x9a>
 8019168:	ee10 2a10 	vmov	r2, s0
 801916c:	460b      	mov	r3, r1
 801916e:	f7e7 f897 	bl	80002a0 <__adddf3>
 8019172:	ec41 0b10 	vmov	d0, r0, r1
 8019176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801917a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801917e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019182:	fa23 f707 	lsr.w	r7, r3, r7
 8019186:	4207      	tst	r7, r0
 8019188:	d0f3      	beq.n	8019172 <floor+0x9a>
 801918a:	a311      	add	r3, pc, #68	; (adr r3, 80191d0 <floor+0xf8>)
 801918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019190:	f7e7 f886 	bl	80002a0 <__adddf3>
 8019194:	2200      	movs	r2, #0
 8019196:	2300      	movs	r3, #0
 8019198:	f7e7 fcc8 	bl	8000b2c <__aeabi_dcmpgt>
 801919c:	2800      	cmp	r0, #0
 801919e:	d0bf      	beq.n	8019120 <floor+0x48>
 80191a0:	2c00      	cmp	r4, #0
 80191a2:	da02      	bge.n	80191aa <floor+0xd2>
 80191a4:	2e14      	cmp	r6, #20
 80191a6:	d103      	bne.n	80191b0 <floor+0xd8>
 80191a8:	3401      	adds	r4, #1
 80191aa:	ea25 0507 	bic.w	r5, r5, r7
 80191ae:	e7b7      	b.n	8019120 <floor+0x48>
 80191b0:	2301      	movs	r3, #1
 80191b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80191b6:	fa03 f606 	lsl.w	r6, r3, r6
 80191ba:	4435      	add	r5, r6
 80191bc:	4545      	cmp	r5, r8
 80191be:	bf38      	it	cc
 80191c0:	18e4      	addcc	r4, r4, r3
 80191c2:	e7f2      	b.n	80191aa <floor+0xd2>
 80191c4:	2500      	movs	r5, #0
 80191c6:	462c      	mov	r4, r5
 80191c8:	e7aa      	b.n	8019120 <floor+0x48>
 80191ca:	bf00      	nop
 80191cc:	f3af 8000 	nop.w
 80191d0:	8800759c 	.word	0x8800759c
 80191d4:	7e37e43c 	.word	0x7e37e43c
 80191d8:	bff00000 	.word	0xbff00000
 80191dc:	000fffff 	.word	0x000fffff

080191e0 <fmin>:
 80191e0:	b508      	push	{r3, lr}
 80191e2:	ed2d 8b04 	vpush	{d8-d9}
 80191e6:	eeb0 8a40 	vmov.f32	s16, s0
 80191ea:	eef0 8a60 	vmov.f32	s17, s1
 80191ee:	eeb0 9a41 	vmov.f32	s18, s2
 80191f2:	eef0 9a61 	vmov.f32	s19, s3
 80191f6:	f000 f81b 	bl	8019230 <__fpclassifyd>
 80191fa:	b168      	cbz	r0, 8019218 <fmin+0x38>
 80191fc:	eeb0 0a49 	vmov.f32	s0, s18
 8019200:	eef0 0a69 	vmov.f32	s1, s19
 8019204:	f000 f814 	bl	8019230 <__fpclassifyd>
 8019208:	b150      	cbz	r0, 8019220 <fmin+0x40>
 801920a:	ec53 2b19 	vmov	r2, r3, d9
 801920e:	ec51 0b18 	vmov	r0, r1, d8
 8019212:	f7e7 fc6d 	bl	8000af0 <__aeabi_dcmplt>
 8019216:	b918      	cbnz	r0, 8019220 <fmin+0x40>
 8019218:	eeb0 8a49 	vmov.f32	s16, s18
 801921c:	eef0 8a69 	vmov.f32	s17, s19
 8019220:	eeb0 0a48 	vmov.f32	s0, s16
 8019224:	eef0 0a68 	vmov.f32	s1, s17
 8019228:	ecbd 8b04 	vpop	{d8-d9}
 801922c:	bd08      	pop	{r3, pc}
	...

08019230 <__fpclassifyd>:
 8019230:	ec51 0b10 	vmov	r0, r1, d0
 8019234:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 8019238:	b510      	push	{r4, lr}
 801923a:	460b      	mov	r3, r1
 801923c:	d01b      	beq.n	8019276 <__fpclassifyd+0x46>
 801923e:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8019242:	490f      	ldr	r1, [pc, #60]	; (8019280 <__fpclassifyd+0x50>)
 8019244:	428c      	cmp	r4, r1
 8019246:	d910      	bls.n	801926a <__fpclassifyd+0x3a>
 8019248:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 801924c:	490c      	ldr	r1, [pc, #48]	; (8019280 <__fpclassifyd+0x50>)
 801924e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019252:	428b      	cmp	r3, r1
 8019254:	d909      	bls.n	801926a <__fpclassifyd+0x3a>
 8019256:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 801925a:	d308      	bcc.n	801926e <__fpclassifyd+0x3e>
 801925c:	4b09      	ldr	r3, [pc, #36]	; (8019284 <__fpclassifyd+0x54>)
 801925e:	429a      	cmp	r2, r3
 8019260:	d107      	bne.n	8019272 <__fpclassifyd+0x42>
 8019262:	fab0 f080 	clz	r0, r0
 8019266:	0940      	lsrs	r0, r0, #5
 8019268:	bd10      	pop	{r4, pc}
 801926a:	2004      	movs	r0, #4
 801926c:	e7fc      	b.n	8019268 <__fpclassifyd+0x38>
 801926e:	2003      	movs	r0, #3
 8019270:	e7fa      	b.n	8019268 <__fpclassifyd+0x38>
 8019272:	2000      	movs	r0, #0
 8019274:	e7f8      	b.n	8019268 <__fpclassifyd+0x38>
 8019276:	2800      	cmp	r0, #0
 8019278:	d1e6      	bne.n	8019248 <__fpclassifyd+0x18>
 801927a:	2002      	movs	r0, #2
 801927c:	e7f4      	b.n	8019268 <__fpclassifyd+0x38>
 801927e:	bf00      	nop
 8019280:	7fdfffff 	.word	0x7fdfffff
 8019284:	7ff00000 	.word	0x7ff00000

08019288 <sin>:
 8019288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801928a:	ec51 0b10 	vmov	r0, r1, d0
 801928e:	4a20      	ldr	r2, [pc, #128]	; (8019310 <sin+0x88>)
 8019290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019294:	4293      	cmp	r3, r2
 8019296:	dc07      	bgt.n	80192a8 <sin+0x20>
 8019298:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019308 <sin+0x80>
 801929c:	2000      	movs	r0, #0
 801929e:	f002 fbef 	bl	801ba80 <__kernel_sin>
 80192a2:	ec51 0b10 	vmov	r0, r1, d0
 80192a6:	e007      	b.n	80192b8 <sin+0x30>
 80192a8:	4a1a      	ldr	r2, [pc, #104]	; (8019314 <sin+0x8c>)
 80192aa:	4293      	cmp	r3, r2
 80192ac:	dd09      	ble.n	80192c2 <sin+0x3a>
 80192ae:	ee10 2a10 	vmov	r2, s0
 80192b2:	460b      	mov	r3, r1
 80192b4:	f7e6 fff2 	bl	800029c <__aeabi_dsub>
 80192b8:	ec41 0b10 	vmov	d0, r0, r1
 80192bc:	b005      	add	sp, #20
 80192be:	f85d fb04 	ldr.w	pc, [sp], #4
 80192c2:	4668      	mov	r0, sp
 80192c4:	f001 fd30 	bl	801ad28 <__ieee754_rem_pio2>
 80192c8:	f000 0003 	and.w	r0, r0, #3
 80192cc:	2801      	cmp	r0, #1
 80192ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80192d2:	ed9d 0b00 	vldr	d0, [sp]
 80192d6:	d004      	beq.n	80192e2 <sin+0x5a>
 80192d8:	2802      	cmp	r0, #2
 80192da:	d005      	beq.n	80192e8 <sin+0x60>
 80192dc:	b970      	cbnz	r0, 80192fc <sin+0x74>
 80192de:	2001      	movs	r0, #1
 80192e0:	e7dd      	b.n	801929e <sin+0x16>
 80192e2:	f001 ffc5 	bl	801b270 <__kernel_cos>
 80192e6:	e7dc      	b.n	80192a2 <sin+0x1a>
 80192e8:	2001      	movs	r0, #1
 80192ea:	f002 fbc9 	bl	801ba80 <__kernel_sin>
 80192ee:	ec53 2b10 	vmov	r2, r3, d0
 80192f2:	ee10 0a10 	vmov	r0, s0
 80192f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80192fa:	e7dd      	b.n	80192b8 <sin+0x30>
 80192fc:	f001 ffb8 	bl	801b270 <__kernel_cos>
 8019300:	e7f5      	b.n	80192ee <sin+0x66>
 8019302:	bf00      	nop
 8019304:	f3af 8000 	nop.w
	...
 8019310:	3fe921fb 	.word	0x3fe921fb
 8019314:	7fefffff 	.word	0x7fefffff

08019318 <tan>:
 8019318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801931a:	ec51 0b10 	vmov	r0, r1, d0
 801931e:	4a14      	ldr	r2, [pc, #80]	; (8019370 <tan+0x58>)
 8019320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019324:	4293      	cmp	r3, r2
 8019326:	dc05      	bgt.n	8019334 <tan+0x1c>
 8019328:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8019368 <tan+0x50>
 801932c:	2001      	movs	r0, #1
 801932e:	f002 fc63 	bl	801bbf8 <__kernel_tan>
 8019332:	e009      	b.n	8019348 <tan+0x30>
 8019334:	4a0f      	ldr	r2, [pc, #60]	; (8019374 <tan+0x5c>)
 8019336:	4293      	cmp	r3, r2
 8019338:	dd09      	ble.n	801934e <tan+0x36>
 801933a:	ee10 2a10 	vmov	r2, s0
 801933e:	460b      	mov	r3, r1
 8019340:	f7e6 ffac 	bl	800029c <__aeabi_dsub>
 8019344:	ec41 0b10 	vmov	d0, r0, r1
 8019348:	b005      	add	sp, #20
 801934a:	f85d fb04 	ldr.w	pc, [sp], #4
 801934e:	4668      	mov	r0, sp
 8019350:	f001 fcea 	bl	801ad28 <__ieee754_rem_pio2>
 8019354:	0040      	lsls	r0, r0, #1
 8019356:	f000 0002 	and.w	r0, r0, #2
 801935a:	f1c0 0001 	rsb	r0, r0, #1
 801935e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019362:	ed9d 0b00 	vldr	d0, [sp]
 8019366:	e7e2      	b.n	801932e <tan+0x16>
	...
 8019370:	3fe921fb 	.word	0x3fe921fb
 8019374:	7fefffff 	.word	0x7fefffff

08019378 <acos>:
 8019378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801937a:	ed2d 8b02 	vpush	{d8}
 801937e:	4e26      	ldr	r6, [pc, #152]	; (8019418 <acos+0xa0>)
 8019380:	b08b      	sub	sp, #44	; 0x2c
 8019382:	ec55 4b10 	vmov	r4, r5, d0
 8019386:	f000 fa73 	bl	8019870 <__ieee754_acos>
 801938a:	f996 3000 	ldrsb.w	r3, [r6]
 801938e:	eeb0 8a40 	vmov.f32	s16, s0
 8019392:	eef0 8a60 	vmov.f32	s17, s1
 8019396:	3301      	adds	r3, #1
 8019398:	d036      	beq.n	8019408 <acos+0x90>
 801939a:	4622      	mov	r2, r4
 801939c:	462b      	mov	r3, r5
 801939e:	4620      	mov	r0, r4
 80193a0:	4629      	mov	r1, r5
 80193a2:	f7e7 fbcd 	bl	8000b40 <__aeabi_dcmpun>
 80193a6:	4607      	mov	r7, r0
 80193a8:	bb70      	cbnz	r0, 8019408 <acos+0x90>
 80193aa:	ec45 4b10 	vmov	d0, r4, r5
 80193ae:	f7ff fe87 	bl	80190c0 <fabs>
 80193b2:	2200      	movs	r2, #0
 80193b4:	4b19      	ldr	r3, [pc, #100]	; (801941c <acos+0xa4>)
 80193b6:	ec51 0b10 	vmov	r0, r1, d0
 80193ba:	f7e7 fbb7 	bl	8000b2c <__aeabi_dcmpgt>
 80193be:	b318      	cbz	r0, 8019408 <acos+0x90>
 80193c0:	2301      	movs	r3, #1
 80193c2:	9300      	str	r3, [sp, #0]
 80193c4:	4816      	ldr	r0, [pc, #88]	; (8019420 <acos+0xa8>)
 80193c6:	4b17      	ldr	r3, [pc, #92]	; (8019424 <acos+0xac>)
 80193c8:	9301      	str	r3, [sp, #4]
 80193ca:	9708      	str	r7, [sp, #32]
 80193cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80193d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80193d4:	f002 fde8 	bl	801bfa8 <nan>
 80193d8:	f996 3000 	ldrsb.w	r3, [r6]
 80193dc:	2b02      	cmp	r3, #2
 80193de:	ed8d 0b06 	vstr	d0, [sp, #24]
 80193e2:	d104      	bne.n	80193ee <acos+0x76>
 80193e4:	f7fb fee4 	bl	80151b0 <__errno>
 80193e8:	2321      	movs	r3, #33	; 0x21
 80193ea:	6003      	str	r3, [r0, #0]
 80193ec:	e004      	b.n	80193f8 <acos+0x80>
 80193ee:	4668      	mov	r0, sp
 80193f0:	f002 fdd6 	bl	801bfa0 <matherr>
 80193f4:	2800      	cmp	r0, #0
 80193f6:	d0f5      	beq.n	80193e4 <acos+0x6c>
 80193f8:	9b08      	ldr	r3, [sp, #32]
 80193fa:	b11b      	cbz	r3, 8019404 <acos+0x8c>
 80193fc:	f7fb fed8 	bl	80151b0 <__errno>
 8019400:	9b08      	ldr	r3, [sp, #32]
 8019402:	6003      	str	r3, [r0, #0]
 8019404:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019408:	eeb0 0a48 	vmov.f32	s0, s16
 801940c:	eef0 0a68 	vmov.f32	s1, s17
 8019410:	b00b      	add	sp, #44	; 0x2c
 8019412:	ecbd 8b02 	vpop	{d8}
 8019416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019418:	20000384 	.word	0x20000384
 801941c:	3ff00000 	.word	0x3ff00000
 8019420:	0801c349 	.word	0x0801c349
 8019424:	0801c6f8 	.word	0x0801c6f8

08019428 <asin>:
 8019428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801942a:	ed2d 8b02 	vpush	{d8}
 801942e:	4e26      	ldr	r6, [pc, #152]	; (80194c8 <asin+0xa0>)
 8019430:	b08b      	sub	sp, #44	; 0x2c
 8019432:	ec55 4b10 	vmov	r4, r5, d0
 8019436:	f000 fc77 	bl	8019d28 <__ieee754_asin>
 801943a:	f996 3000 	ldrsb.w	r3, [r6]
 801943e:	eeb0 8a40 	vmov.f32	s16, s0
 8019442:	eef0 8a60 	vmov.f32	s17, s1
 8019446:	3301      	adds	r3, #1
 8019448:	d036      	beq.n	80194b8 <asin+0x90>
 801944a:	4622      	mov	r2, r4
 801944c:	462b      	mov	r3, r5
 801944e:	4620      	mov	r0, r4
 8019450:	4629      	mov	r1, r5
 8019452:	f7e7 fb75 	bl	8000b40 <__aeabi_dcmpun>
 8019456:	4607      	mov	r7, r0
 8019458:	bb70      	cbnz	r0, 80194b8 <asin+0x90>
 801945a:	ec45 4b10 	vmov	d0, r4, r5
 801945e:	f7ff fe2f 	bl	80190c0 <fabs>
 8019462:	2200      	movs	r2, #0
 8019464:	4b19      	ldr	r3, [pc, #100]	; (80194cc <asin+0xa4>)
 8019466:	ec51 0b10 	vmov	r0, r1, d0
 801946a:	f7e7 fb5f 	bl	8000b2c <__aeabi_dcmpgt>
 801946e:	b318      	cbz	r0, 80194b8 <asin+0x90>
 8019470:	2301      	movs	r3, #1
 8019472:	9300      	str	r3, [sp, #0]
 8019474:	4816      	ldr	r0, [pc, #88]	; (80194d0 <asin+0xa8>)
 8019476:	4b17      	ldr	r3, [pc, #92]	; (80194d4 <asin+0xac>)
 8019478:	9301      	str	r3, [sp, #4]
 801947a:	9708      	str	r7, [sp, #32]
 801947c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019480:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019484:	f002 fd90 	bl	801bfa8 <nan>
 8019488:	f996 3000 	ldrsb.w	r3, [r6]
 801948c:	2b02      	cmp	r3, #2
 801948e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8019492:	d104      	bne.n	801949e <asin+0x76>
 8019494:	f7fb fe8c 	bl	80151b0 <__errno>
 8019498:	2321      	movs	r3, #33	; 0x21
 801949a:	6003      	str	r3, [r0, #0]
 801949c:	e004      	b.n	80194a8 <asin+0x80>
 801949e:	4668      	mov	r0, sp
 80194a0:	f002 fd7e 	bl	801bfa0 <matherr>
 80194a4:	2800      	cmp	r0, #0
 80194a6:	d0f5      	beq.n	8019494 <asin+0x6c>
 80194a8:	9b08      	ldr	r3, [sp, #32]
 80194aa:	b11b      	cbz	r3, 80194b4 <asin+0x8c>
 80194ac:	f7fb fe80 	bl	80151b0 <__errno>
 80194b0:	9b08      	ldr	r3, [sp, #32]
 80194b2:	6003      	str	r3, [r0, #0]
 80194b4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80194b8:	eeb0 0a48 	vmov.f32	s0, s16
 80194bc:	eef0 0a68 	vmov.f32	s1, s17
 80194c0:	b00b      	add	sp, #44	; 0x2c
 80194c2:	ecbd 8b02 	vpop	{d8}
 80194c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194c8:	20000384 	.word	0x20000384
 80194cc:	3ff00000 	.word	0x3ff00000
 80194d0:	0801c349 	.word	0x0801c349
 80194d4:	0801c6fd 	.word	0x0801c6fd

080194d8 <atan2>:
 80194d8:	f000 be36 	b.w	801a148 <__ieee754_atan2>

080194dc <pow>:
 80194dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e0:	ed2d 8b04 	vpush	{d8-d9}
 80194e4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80197b8 <pow+0x2dc>
 80194e8:	b08d      	sub	sp, #52	; 0x34
 80194ea:	ec57 6b10 	vmov	r6, r7, d0
 80194ee:	ec55 4b11 	vmov	r4, r5, d1
 80194f2:	f000 ff09 	bl	801a308 <__ieee754_pow>
 80194f6:	f999 3000 	ldrsb.w	r3, [r9]
 80194fa:	9300      	str	r3, [sp, #0]
 80194fc:	3301      	adds	r3, #1
 80194fe:	eeb0 8a40 	vmov.f32	s16, s0
 8019502:	eef0 8a60 	vmov.f32	s17, s1
 8019506:	46c8      	mov	r8, r9
 8019508:	d05f      	beq.n	80195ca <pow+0xee>
 801950a:	4622      	mov	r2, r4
 801950c:	462b      	mov	r3, r5
 801950e:	4620      	mov	r0, r4
 8019510:	4629      	mov	r1, r5
 8019512:	f7e7 fb15 	bl	8000b40 <__aeabi_dcmpun>
 8019516:	4683      	mov	fp, r0
 8019518:	2800      	cmp	r0, #0
 801951a:	d156      	bne.n	80195ca <pow+0xee>
 801951c:	4632      	mov	r2, r6
 801951e:	463b      	mov	r3, r7
 8019520:	4630      	mov	r0, r6
 8019522:	4639      	mov	r1, r7
 8019524:	f7e7 fb0c 	bl	8000b40 <__aeabi_dcmpun>
 8019528:	9001      	str	r0, [sp, #4]
 801952a:	b1e8      	cbz	r0, 8019568 <pow+0x8c>
 801952c:	2200      	movs	r2, #0
 801952e:	2300      	movs	r3, #0
 8019530:	4620      	mov	r0, r4
 8019532:	4629      	mov	r1, r5
 8019534:	f7e7 fad2 	bl	8000adc <__aeabi_dcmpeq>
 8019538:	2800      	cmp	r0, #0
 801953a:	d046      	beq.n	80195ca <pow+0xee>
 801953c:	2301      	movs	r3, #1
 801953e:	9302      	str	r3, [sp, #8]
 8019540:	4b96      	ldr	r3, [pc, #600]	; (801979c <pow+0x2c0>)
 8019542:	9303      	str	r3, [sp, #12]
 8019544:	4b96      	ldr	r3, [pc, #600]	; (80197a0 <pow+0x2c4>)
 8019546:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801954a:	2200      	movs	r2, #0
 801954c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019550:	9b00      	ldr	r3, [sp, #0]
 8019552:	2b02      	cmp	r3, #2
 8019554:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019558:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801955c:	d033      	beq.n	80195c6 <pow+0xea>
 801955e:	a802      	add	r0, sp, #8
 8019560:	f002 fd1e 	bl	801bfa0 <matherr>
 8019564:	bb48      	cbnz	r0, 80195ba <pow+0xde>
 8019566:	e05d      	b.n	8019624 <pow+0x148>
 8019568:	f04f 0a00 	mov.w	sl, #0
 801956c:	f04f 0b00 	mov.w	fp, #0
 8019570:	4652      	mov	r2, sl
 8019572:	465b      	mov	r3, fp
 8019574:	4630      	mov	r0, r6
 8019576:	4639      	mov	r1, r7
 8019578:	f7e7 fab0 	bl	8000adc <__aeabi_dcmpeq>
 801957c:	ec4b ab19 	vmov	d9, sl, fp
 8019580:	2800      	cmp	r0, #0
 8019582:	d054      	beq.n	801962e <pow+0x152>
 8019584:	4652      	mov	r2, sl
 8019586:	465b      	mov	r3, fp
 8019588:	4620      	mov	r0, r4
 801958a:	4629      	mov	r1, r5
 801958c:	f7e7 faa6 	bl	8000adc <__aeabi_dcmpeq>
 8019590:	4680      	mov	r8, r0
 8019592:	b318      	cbz	r0, 80195dc <pow+0x100>
 8019594:	2301      	movs	r3, #1
 8019596:	9302      	str	r3, [sp, #8]
 8019598:	4b80      	ldr	r3, [pc, #512]	; (801979c <pow+0x2c0>)
 801959a:	9303      	str	r3, [sp, #12]
 801959c:	9b01      	ldr	r3, [sp, #4]
 801959e:	930a      	str	r3, [sp, #40]	; 0x28
 80195a0:	9b00      	ldr	r3, [sp, #0]
 80195a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80195a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80195aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d0d5      	beq.n	801955e <pow+0x82>
 80195b2:	4b7b      	ldr	r3, [pc, #492]	; (80197a0 <pow+0x2c4>)
 80195b4:	2200      	movs	r2, #0
 80195b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80195ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195bc:	b11b      	cbz	r3, 80195c6 <pow+0xea>
 80195be:	f7fb fdf7 	bl	80151b0 <__errno>
 80195c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195c4:	6003      	str	r3, [r0, #0]
 80195c6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80195ca:	eeb0 0a48 	vmov.f32	s0, s16
 80195ce:	eef0 0a68 	vmov.f32	s1, s17
 80195d2:	b00d      	add	sp, #52	; 0x34
 80195d4:	ecbd 8b04 	vpop	{d8-d9}
 80195d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195dc:	ec45 4b10 	vmov	d0, r4, r5
 80195e0:	f002 fcd6 	bl	801bf90 <finite>
 80195e4:	2800      	cmp	r0, #0
 80195e6:	d0f0      	beq.n	80195ca <pow+0xee>
 80195e8:	4652      	mov	r2, sl
 80195ea:	465b      	mov	r3, fp
 80195ec:	4620      	mov	r0, r4
 80195ee:	4629      	mov	r1, r5
 80195f0:	f7e7 fa7e 	bl	8000af0 <__aeabi_dcmplt>
 80195f4:	2800      	cmp	r0, #0
 80195f6:	d0e8      	beq.n	80195ca <pow+0xee>
 80195f8:	2301      	movs	r3, #1
 80195fa:	9302      	str	r3, [sp, #8]
 80195fc:	4b67      	ldr	r3, [pc, #412]	; (801979c <pow+0x2c0>)
 80195fe:	9303      	str	r3, [sp, #12]
 8019600:	f999 3000 	ldrsb.w	r3, [r9]
 8019604:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8019608:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801960c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019610:	b913      	cbnz	r3, 8019618 <pow+0x13c>
 8019612:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019616:	e7a2      	b.n	801955e <pow+0x82>
 8019618:	4962      	ldr	r1, [pc, #392]	; (80197a4 <pow+0x2c8>)
 801961a:	2000      	movs	r0, #0
 801961c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019620:	2b02      	cmp	r3, #2
 8019622:	d19c      	bne.n	801955e <pow+0x82>
 8019624:	f7fb fdc4 	bl	80151b0 <__errno>
 8019628:	2321      	movs	r3, #33	; 0x21
 801962a:	6003      	str	r3, [r0, #0]
 801962c:	e7c5      	b.n	80195ba <pow+0xde>
 801962e:	eeb0 0a48 	vmov.f32	s0, s16
 8019632:	eef0 0a68 	vmov.f32	s1, s17
 8019636:	f002 fcab 	bl	801bf90 <finite>
 801963a:	9000      	str	r0, [sp, #0]
 801963c:	2800      	cmp	r0, #0
 801963e:	f040 8081 	bne.w	8019744 <pow+0x268>
 8019642:	ec47 6b10 	vmov	d0, r6, r7
 8019646:	f002 fca3 	bl	801bf90 <finite>
 801964a:	2800      	cmp	r0, #0
 801964c:	d07a      	beq.n	8019744 <pow+0x268>
 801964e:	ec45 4b10 	vmov	d0, r4, r5
 8019652:	f002 fc9d 	bl	801bf90 <finite>
 8019656:	2800      	cmp	r0, #0
 8019658:	d074      	beq.n	8019744 <pow+0x268>
 801965a:	ec53 2b18 	vmov	r2, r3, d8
 801965e:	ee18 0a10 	vmov	r0, s16
 8019662:	4619      	mov	r1, r3
 8019664:	f7e7 fa6c 	bl	8000b40 <__aeabi_dcmpun>
 8019668:	f999 9000 	ldrsb.w	r9, [r9]
 801966c:	4b4b      	ldr	r3, [pc, #300]	; (801979c <pow+0x2c0>)
 801966e:	b1b0      	cbz	r0, 801969e <pow+0x1c2>
 8019670:	2201      	movs	r2, #1
 8019672:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019676:	9b00      	ldr	r3, [sp, #0]
 8019678:	930a      	str	r3, [sp, #40]	; 0x28
 801967a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801967e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019682:	f1b9 0f00 	cmp.w	r9, #0
 8019686:	d0c4      	beq.n	8019612 <pow+0x136>
 8019688:	4652      	mov	r2, sl
 801968a:	465b      	mov	r3, fp
 801968c:	4650      	mov	r0, sl
 801968e:	4659      	mov	r1, fp
 8019690:	f7e7 f8e6 	bl	8000860 <__aeabi_ddiv>
 8019694:	f1b9 0f02 	cmp.w	r9, #2
 8019698:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801969c:	e7c1      	b.n	8019622 <pow+0x146>
 801969e:	2203      	movs	r2, #3
 80196a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80196a4:	900a      	str	r0, [sp, #40]	; 0x28
 80196a6:	4629      	mov	r1, r5
 80196a8:	4620      	mov	r0, r4
 80196aa:	2200      	movs	r2, #0
 80196ac:	4b3e      	ldr	r3, [pc, #248]	; (80197a8 <pow+0x2cc>)
 80196ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80196b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80196b6:	f7e6 ffa9 	bl	800060c <__aeabi_dmul>
 80196ba:	4604      	mov	r4, r0
 80196bc:	460d      	mov	r5, r1
 80196be:	f1b9 0f00 	cmp.w	r9, #0
 80196c2:	d124      	bne.n	801970e <pow+0x232>
 80196c4:	4b39      	ldr	r3, [pc, #228]	; (80197ac <pow+0x2d0>)
 80196c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80196ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80196ce:	4630      	mov	r0, r6
 80196d0:	4652      	mov	r2, sl
 80196d2:	465b      	mov	r3, fp
 80196d4:	4639      	mov	r1, r7
 80196d6:	f7e7 fa0b 	bl	8000af0 <__aeabi_dcmplt>
 80196da:	2800      	cmp	r0, #0
 80196dc:	d056      	beq.n	801978c <pow+0x2b0>
 80196de:	ec45 4b10 	vmov	d0, r4, r5
 80196e2:	f002 fc69 	bl	801bfb8 <rint>
 80196e6:	4622      	mov	r2, r4
 80196e8:	462b      	mov	r3, r5
 80196ea:	ec51 0b10 	vmov	r0, r1, d0
 80196ee:	f7e7 f9f5 	bl	8000adc <__aeabi_dcmpeq>
 80196f2:	b920      	cbnz	r0, 80196fe <pow+0x222>
 80196f4:	4b2e      	ldr	r3, [pc, #184]	; (80197b0 <pow+0x2d4>)
 80196f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80196fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80196fe:	f998 3000 	ldrsb.w	r3, [r8]
 8019702:	2b02      	cmp	r3, #2
 8019704:	d142      	bne.n	801978c <pow+0x2b0>
 8019706:	f7fb fd53 	bl	80151b0 <__errno>
 801970a:	2322      	movs	r3, #34	; 0x22
 801970c:	e78d      	b.n	801962a <pow+0x14e>
 801970e:	4b29      	ldr	r3, [pc, #164]	; (80197b4 <pow+0x2d8>)
 8019710:	2200      	movs	r2, #0
 8019712:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019716:	4630      	mov	r0, r6
 8019718:	4652      	mov	r2, sl
 801971a:	465b      	mov	r3, fp
 801971c:	4639      	mov	r1, r7
 801971e:	f7e7 f9e7 	bl	8000af0 <__aeabi_dcmplt>
 8019722:	2800      	cmp	r0, #0
 8019724:	d0eb      	beq.n	80196fe <pow+0x222>
 8019726:	ec45 4b10 	vmov	d0, r4, r5
 801972a:	f002 fc45 	bl	801bfb8 <rint>
 801972e:	4622      	mov	r2, r4
 8019730:	462b      	mov	r3, r5
 8019732:	ec51 0b10 	vmov	r0, r1, d0
 8019736:	f7e7 f9d1 	bl	8000adc <__aeabi_dcmpeq>
 801973a:	2800      	cmp	r0, #0
 801973c:	d1df      	bne.n	80196fe <pow+0x222>
 801973e:	2200      	movs	r2, #0
 8019740:	4b18      	ldr	r3, [pc, #96]	; (80197a4 <pow+0x2c8>)
 8019742:	e7da      	b.n	80196fa <pow+0x21e>
 8019744:	2200      	movs	r2, #0
 8019746:	2300      	movs	r3, #0
 8019748:	ec51 0b18 	vmov	r0, r1, d8
 801974c:	f7e7 f9c6 	bl	8000adc <__aeabi_dcmpeq>
 8019750:	2800      	cmp	r0, #0
 8019752:	f43f af3a 	beq.w	80195ca <pow+0xee>
 8019756:	ec47 6b10 	vmov	d0, r6, r7
 801975a:	f002 fc19 	bl	801bf90 <finite>
 801975e:	2800      	cmp	r0, #0
 8019760:	f43f af33 	beq.w	80195ca <pow+0xee>
 8019764:	ec45 4b10 	vmov	d0, r4, r5
 8019768:	f002 fc12 	bl	801bf90 <finite>
 801976c:	2800      	cmp	r0, #0
 801976e:	f43f af2c 	beq.w	80195ca <pow+0xee>
 8019772:	2304      	movs	r3, #4
 8019774:	9302      	str	r3, [sp, #8]
 8019776:	4b09      	ldr	r3, [pc, #36]	; (801979c <pow+0x2c0>)
 8019778:	9303      	str	r3, [sp, #12]
 801977a:	2300      	movs	r3, #0
 801977c:	930a      	str	r3, [sp, #40]	; 0x28
 801977e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019782:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019786:	ed8d 9b08 	vstr	d9, [sp, #32]
 801978a:	e7b8      	b.n	80196fe <pow+0x222>
 801978c:	a802      	add	r0, sp, #8
 801978e:	f002 fc07 	bl	801bfa0 <matherr>
 8019792:	2800      	cmp	r0, #0
 8019794:	f47f af11 	bne.w	80195ba <pow+0xde>
 8019798:	e7b5      	b.n	8019706 <pow+0x22a>
 801979a:	bf00      	nop
 801979c:	0801c702 	.word	0x0801c702
 80197a0:	3ff00000 	.word	0x3ff00000
 80197a4:	fff00000 	.word	0xfff00000
 80197a8:	3fe00000 	.word	0x3fe00000
 80197ac:	47efffff 	.word	0x47efffff
 80197b0:	c7efffff 	.word	0xc7efffff
 80197b4:	7ff00000 	.word	0x7ff00000
 80197b8:	20000384 	.word	0x20000384

080197bc <sqrt>:
 80197bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197c0:	ed2d 8b02 	vpush	{d8}
 80197c4:	b08b      	sub	sp, #44	; 0x2c
 80197c6:	ec55 4b10 	vmov	r4, r5, d0
 80197ca:	f001 fc9f 	bl	801b10c <__ieee754_sqrt>
 80197ce:	4b26      	ldr	r3, [pc, #152]	; (8019868 <sqrt+0xac>)
 80197d0:	eeb0 8a40 	vmov.f32	s16, s0
 80197d4:	eef0 8a60 	vmov.f32	s17, s1
 80197d8:	f993 6000 	ldrsb.w	r6, [r3]
 80197dc:	1c73      	adds	r3, r6, #1
 80197de:	d02a      	beq.n	8019836 <sqrt+0x7a>
 80197e0:	4622      	mov	r2, r4
 80197e2:	462b      	mov	r3, r5
 80197e4:	4620      	mov	r0, r4
 80197e6:	4629      	mov	r1, r5
 80197e8:	f7e7 f9aa 	bl	8000b40 <__aeabi_dcmpun>
 80197ec:	4607      	mov	r7, r0
 80197ee:	bb10      	cbnz	r0, 8019836 <sqrt+0x7a>
 80197f0:	f04f 0800 	mov.w	r8, #0
 80197f4:	f04f 0900 	mov.w	r9, #0
 80197f8:	4642      	mov	r2, r8
 80197fa:	464b      	mov	r3, r9
 80197fc:	4620      	mov	r0, r4
 80197fe:	4629      	mov	r1, r5
 8019800:	f7e7 f976 	bl	8000af0 <__aeabi_dcmplt>
 8019804:	b1b8      	cbz	r0, 8019836 <sqrt+0x7a>
 8019806:	2301      	movs	r3, #1
 8019808:	9300      	str	r3, [sp, #0]
 801980a:	4b18      	ldr	r3, [pc, #96]	; (801986c <sqrt+0xb0>)
 801980c:	9301      	str	r3, [sp, #4]
 801980e:	9708      	str	r7, [sp, #32]
 8019810:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019814:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019818:	b9b6      	cbnz	r6, 8019848 <sqrt+0x8c>
 801981a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801981e:	4668      	mov	r0, sp
 8019820:	f002 fbbe 	bl	801bfa0 <matherr>
 8019824:	b1d0      	cbz	r0, 801985c <sqrt+0xa0>
 8019826:	9b08      	ldr	r3, [sp, #32]
 8019828:	b11b      	cbz	r3, 8019832 <sqrt+0x76>
 801982a:	f7fb fcc1 	bl	80151b0 <__errno>
 801982e:	9b08      	ldr	r3, [sp, #32]
 8019830:	6003      	str	r3, [r0, #0]
 8019832:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019836:	eeb0 0a48 	vmov.f32	s0, s16
 801983a:	eef0 0a68 	vmov.f32	s1, s17
 801983e:	b00b      	add	sp, #44	; 0x2c
 8019840:	ecbd 8b02 	vpop	{d8}
 8019844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019848:	4642      	mov	r2, r8
 801984a:	464b      	mov	r3, r9
 801984c:	4640      	mov	r0, r8
 801984e:	4649      	mov	r1, r9
 8019850:	f7e7 f806 	bl	8000860 <__aeabi_ddiv>
 8019854:	2e02      	cmp	r6, #2
 8019856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801985a:	d1e0      	bne.n	801981e <sqrt+0x62>
 801985c:	f7fb fca8 	bl	80151b0 <__errno>
 8019860:	2321      	movs	r3, #33	; 0x21
 8019862:	6003      	str	r3, [r0, #0]
 8019864:	e7df      	b.n	8019826 <sqrt+0x6a>
 8019866:	bf00      	nop
 8019868:	20000384 	.word	0x20000384
 801986c:	0801c706 	.word	0x0801c706

08019870 <__ieee754_acos>:
 8019870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019874:	ec55 4b10 	vmov	r4, r5, d0
 8019878:	49b7      	ldr	r1, [pc, #732]	; (8019b58 <__ieee754_acos+0x2e8>)
 801987a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801987e:	428b      	cmp	r3, r1
 8019880:	dd1b      	ble.n	80198ba <__ieee754_acos+0x4a>
 8019882:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8019886:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801988a:	4323      	orrs	r3, r4
 801988c:	d109      	bne.n	80198a2 <__ieee754_acos+0x32>
 801988e:	2d00      	cmp	r5, #0
 8019890:	f300 8211 	bgt.w	8019cb6 <__ieee754_acos+0x446>
 8019894:	a196      	add	r1, pc, #600	; (adr r1, 8019af0 <__ieee754_acos+0x280>)
 8019896:	e9d1 0100 	ldrd	r0, r1, [r1]
 801989a:	ec41 0b10 	vmov	d0, r0, r1
 801989e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a2:	ee10 2a10 	vmov	r2, s0
 80198a6:	462b      	mov	r3, r5
 80198a8:	4620      	mov	r0, r4
 80198aa:	4629      	mov	r1, r5
 80198ac:	f7e6 fcf6 	bl	800029c <__aeabi_dsub>
 80198b0:	4602      	mov	r2, r0
 80198b2:	460b      	mov	r3, r1
 80198b4:	f7e6 ffd4 	bl	8000860 <__aeabi_ddiv>
 80198b8:	e7ef      	b.n	801989a <__ieee754_acos+0x2a>
 80198ba:	49a8      	ldr	r1, [pc, #672]	; (8019b5c <__ieee754_acos+0x2ec>)
 80198bc:	428b      	cmp	r3, r1
 80198be:	f300 8087 	bgt.w	80199d0 <__ieee754_acos+0x160>
 80198c2:	4aa7      	ldr	r2, [pc, #668]	; (8019b60 <__ieee754_acos+0x2f0>)
 80198c4:	4293      	cmp	r3, r2
 80198c6:	f340 81f9 	ble.w	8019cbc <__ieee754_acos+0x44c>
 80198ca:	ee10 2a10 	vmov	r2, s0
 80198ce:	ee10 0a10 	vmov	r0, s0
 80198d2:	462b      	mov	r3, r5
 80198d4:	4629      	mov	r1, r5
 80198d6:	f7e6 fe99 	bl	800060c <__aeabi_dmul>
 80198da:	a387      	add	r3, pc, #540	; (adr r3, 8019af8 <__ieee754_acos+0x288>)
 80198dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e0:	4606      	mov	r6, r0
 80198e2:	460f      	mov	r7, r1
 80198e4:	f7e6 fe92 	bl	800060c <__aeabi_dmul>
 80198e8:	a385      	add	r3, pc, #532	; (adr r3, 8019b00 <__ieee754_acos+0x290>)
 80198ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198ee:	f7e6 fcd7 	bl	80002a0 <__adddf3>
 80198f2:	4632      	mov	r2, r6
 80198f4:	463b      	mov	r3, r7
 80198f6:	f7e6 fe89 	bl	800060c <__aeabi_dmul>
 80198fa:	a383      	add	r3, pc, #524	; (adr r3, 8019b08 <__ieee754_acos+0x298>)
 80198fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019900:	f7e6 fccc 	bl	800029c <__aeabi_dsub>
 8019904:	4632      	mov	r2, r6
 8019906:	463b      	mov	r3, r7
 8019908:	f7e6 fe80 	bl	800060c <__aeabi_dmul>
 801990c:	a380      	add	r3, pc, #512	; (adr r3, 8019b10 <__ieee754_acos+0x2a0>)
 801990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019912:	f7e6 fcc5 	bl	80002a0 <__adddf3>
 8019916:	4632      	mov	r2, r6
 8019918:	463b      	mov	r3, r7
 801991a:	f7e6 fe77 	bl	800060c <__aeabi_dmul>
 801991e:	a37e      	add	r3, pc, #504	; (adr r3, 8019b18 <__ieee754_acos+0x2a8>)
 8019920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019924:	f7e6 fcba 	bl	800029c <__aeabi_dsub>
 8019928:	4632      	mov	r2, r6
 801992a:	463b      	mov	r3, r7
 801992c:	f7e6 fe6e 	bl	800060c <__aeabi_dmul>
 8019930:	a37b      	add	r3, pc, #492	; (adr r3, 8019b20 <__ieee754_acos+0x2b0>)
 8019932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019936:	f7e6 fcb3 	bl	80002a0 <__adddf3>
 801993a:	4632      	mov	r2, r6
 801993c:	463b      	mov	r3, r7
 801993e:	f7e6 fe65 	bl	800060c <__aeabi_dmul>
 8019942:	a379      	add	r3, pc, #484	; (adr r3, 8019b28 <__ieee754_acos+0x2b8>)
 8019944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019948:	4680      	mov	r8, r0
 801994a:	4689      	mov	r9, r1
 801994c:	4630      	mov	r0, r6
 801994e:	4639      	mov	r1, r7
 8019950:	f7e6 fe5c 	bl	800060c <__aeabi_dmul>
 8019954:	a376      	add	r3, pc, #472	; (adr r3, 8019b30 <__ieee754_acos+0x2c0>)
 8019956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801995a:	f7e6 fc9f 	bl	800029c <__aeabi_dsub>
 801995e:	4632      	mov	r2, r6
 8019960:	463b      	mov	r3, r7
 8019962:	f7e6 fe53 	bl	800060c <__aeabi_dmul>
 8019966:	a374      	add	r3, pc, #464	; (adr r3, 8019b38 <__ieee754_acos+0x2c8>)
 8019968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801996c:	f7e6 fc98 	bl	80002a0 <__adddf3>
 8019970:	4632      	mov	r2, r6
 8019972:	463b      	mov	r3, r7
 8019974:	f7e6 fe4a 	bl	800060c <__aeabi_dmul>
 8019978:	a371      	add	r3, pc, #452	; (adr r3, 8019b40 <__ieee754_acos+0x2d0>)
 801997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801997e:	f7e6 fc8d 	bl	800029c <__aeabi_dsub>
 8019982:	4632      	mov	r2, r6
 8019984:	463b      	mov	r3, r7
 8019986:	f7e6 fe41 	bl	800060c <__aeabi_dmul>
 801998a:	2200      	movs	r2, #0
 801998c:	4b75      	ldr	r3, [pc, #468]	; (8019b64 <__ieee754_acos+0x2f4>)
 801998e:	f7e6 fc87 	bl	80002a0 <__adddf3>
 8019992:	4602      	mov	r2, r0
 8019994:	460b      	mov	r3, r1
 8019996:	4640      	mov	r0, r8
 8019998:	4649      	mov	r1, r9
 801999a:	f7e6 ff61 	bl	8000860 <__aeabi_ddiv>
 801999e:	4622      	mov	r2, r4
 80199a0:	462b      	mov	r3, r5
 80199a2:	f7e6 fe33 	bl	800060c <__aeabi_dmul>
 80199a6:	4602      	mov	r2, r0
 80199a8:	460b      	mov	r3, r1
 80199aa:	a167      	add	r1, pc, #412	; (adr r1, 8019b48 <__ieee754_acos+0x2d8>)
 80199ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199b0:	f7e6 fc74 	bl	800029c <__aeabi_dsub>
 80199b4:	4602      	mov	r2, r0
 80199b6:	460b      	mov	r3, r1
 80199b8:	4620      	mov	r0, r4
 80199ba:	4629      	mov	r1, r5
 80199bc:	f7e6 fc6e 	bl	800029c <__aeabi_dsub>
 80199c0:	4602      	mov	r2, r0
 80199c2:	460b      	mov	r3, r1
 80199c4:	a162      	add	r1, pc, #392	; (adr r1, 8019b50 <__ieee754_acos+0x2e0>)
 80199c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199ca:	f7e6 fc67 	bl	800029c <__aeabi_dsub>
 80199ce:	e764      	b.n	801989a <__ieee754_acos+0x2a>
 80199d0:	2d00      	cmp	r5, #0
 80199d2:	f280 80cb 	bge.w	8019b6c <__ieee754_acos+0x2fc>
 80199d6:	ee10 0a10 	vmov	r0, s0
 80199da:	2200      	movs	r2, #0
 80199dc:	4b61      	ldr	r3, [pc, #388]	; (8019b64 <__ieee754_acos+0x2f4>)
 80199de:	4629      	mov	r1, r5
 80199e0:	f7e6 fc5e 	bl	80002a0 <__adddf3>
 80199e4:	2200      	movs	r2, #0
 80199e6:	4b60      	ldr	r3, [pc, #384]	; (8019b68 <__ieee754_acos+0x2f8>)
 80199e8:	f7e6 fe10 	bl	800060c <__aeabi_dmul>
 80199ec:	a342      	add	r3, pc, #264	; (adr r3, 8019af8 <__ieee754_acos+0x288>)
 80199ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f2:	4604      	mov	r4, r0
 80199f4:	460d      	mov	r5, r1
 80199f6:	f7e6 fe09 	bl	800060c <__aeabi_dmul>
 80199fa:	a341      	add	r3, pc, #260	; (adr r3, 8019b00 <__ieee754_acos+0x290>)
 80199fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a00:	f7e6 fc4e 	bl	80002a0 <__adddf3>
 8019a04:	4622      	mov	r2, r4
 8019a06:	462b      	mov	r3, r5
 8019a08:	f7e6 fe00 	bl	800060c <__aeabi_dmul>
 8019a0c:	a33e      	add	r3, pc, #248	; (adr r3, 8019b08 <__ieee754_acos+0x298>)
 8019a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a12:	f7e6 fc43 	bl	800029c <__aeabi_dsub>
 8019a16:	4622      	mov	r2, r4
 8019a18:	462b      	mov	r3, r5
 8019a1a:	f7e6 fdf7 	bl	800060c <__aeabi_dmul>
 8019a1e:	a33c      	add	r3, pc, #240	; (adr r3, 8019b10 <__ieee754_acos+0x2a0>)
 8019a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a24:	f7e6 fc3c 	bl	80002a0 <__adddf3>
 8019a28:	4622      	mov	r2, r4
 8019a2a:	462b      	mov	r3, r5
 8019a2c:	f7e6 fdee 	bl	800060c <__aeabi_dmul>
 8019a30:	a339      	add	r3, pc, #228	; (adr r3, 8019b18 <__ieee754_acos+0x2a8>)
 8019a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a36:	f7e6 fc31 	bl	800029c <__aeabi_dsub>
 8019a3a:	4622      	mov	r2, r4
 8019a3c:	462b      	mov	r3, r5
 8019a3e:	f7e6 fde5 	bl	800060c <__aeabi_dmul>
 8019a42:	a337      	add	r3, pc, #220	; (adr r3, 8019b20 <__ieee754_acos+0x2b0>)
 8019a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a48:	f7e6 fc2a 	bl	80002a0 <__adddf3>
 8019a4c:	4622      	mov	r2, r4
 8019a4e:	462b      	mov	r3, r5
 8019a50:	f7e6 fddc 	bl	800060c <__aeabi_dmul>
 8019a54:	ec45 4b10 	vmov	d0, r4, r5
 8019a58:	4680      	mov	r8, r0
 8019a5a:	4689      	mov	r9, r1
 8019a5c:	f001 fb56 	bl	801b10c <__ieee754_sqrt>
 8019a60:	a331      	add	r3, pc, #196	; (adr r3, 8019b28 <__ieee754_acos+0x2b8>)
 8019a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a66:	4620      	mov	r0, r4
 8019a68:	4629      	mov	r1, r5
 8019a6a:	ec57 6b10 	vmov	r6, r7, d0
 8019a6e:	f7e6 fdcd 	bl	800060c <__aeabi_dmul>
 8019a72:	a32f      	add	r3, pc, #188	; (adr r3, 8019b30 <__ieee754_acos+0x2c0>)
 8019a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a78:	f7e6 fc10 	bl	800029c <__aeabi_dsub>
 8019a7c:	4622      	mov	r2, r4
 8019a7e:	462b      	mov	r3, r5
 8019a80:	f7e6 fdc4 	bl	800060c <__aeabi_dmul>
 8019a84:	a32c      	add	r3, pc, #176	; (adr r3, 8019b38 <__ieee754_acos+0x2c8>)
 8019a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a8a:	f7e6 fc09 	bl	80002a0 <__adddf3>
 8019a8e:	4622      	mov	r2, r4
 8019a90:	462b      	mov	r3, r5
 8019a92:	f7e6 fdbb 	bl	800060c <__aeabi_dmul>
 8019a96:	a32a      	add	r3, pc, #168	; (adr r3, 8019b40 <__ieee754_acos+0x2d0>)
 8019a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a9c:	f7e6 fbfe 	bl	800029c <__aeabi_dsub>
 8019aa0:	4622      	mov	r2, r4
 8019aa2:	462b      	mov	r3, r5
 8019aa4:	f7e6 fdb2 	bl	800060c <__aeabi_dmul>
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	4b2e      	ldr	r3, [pc, #184]	; (8019b64 <__ieee754_acos+0x2f4>)
 8019aac:	f7e6 fbf8 	bl	80002a0 <__adddf3>
 8019ab0:	4602      	mov	r2, r0
 8019ab2:	460b      	mov	r3, r1
 8019ab4:	4640      	mov	r0, r8
 8019ab6:	4649      	mov	r1, r9
 8019ab8:	f7e6 fed2 	bl	8000860 <__aeabi_ddiv>
 8019abc:	4632      	mov	r2, r6
 8019abe:	463b      	mov	r3, r7
 8019ac0:	f7e6 fda4 	bl	800060c <__aeabi_dmul>
 8019ac4:	a320      	add	r3, pc, #128	; (adr r3, 8019b48 <__ieee754_acos+0x2d8>)
 8019ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aca:	f7e6 fbe7 	bl	800029c <__aeabi_dsub>
 8019ace:	4632      	mov	r2, r6
 8019ad0:	463b      	mov	r3, r7
 8019ad2:	f7e6 fbe5 	bl	80002a0 <__adddf3>
 8019ad6:	4602      	mov	r2, r0
 8019ad8:	460b      	mov	r3, r1
 8019ada:	f7e6 fbe1 	bl	80002a0 <__adddf3>
 8019ade:	4602      	mov	r2, r0
 8019ae0:	460b      	mov	r3, r1
 8019ae2:	a103      	add	r1, pc, #12	; (adr r1, 8019af0 <__ieee754_acos+0x280>)
 8019ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ae8:	e76f      	b.n	80199ca <__ieee754_acos+0x15a>
 8019aea:	bf00      	nop
 8019aec:	f3af 8000 	nop.w
 8019af0:	54442d18 	.word	0x54442d18
 8019af4:	400921fb 	.word	0x400921fb
 8019af8:	0dfdf709 	.word	0x0dfdf709
 8019afc:	3f023de1 	.word	0x3f023de1
 8019b00:	7501b288 	.word	0x7501b288
 8019b04:	3f49efe0 	.word	0x3f49efe0
 8019b08:	b5688f3b 	.word	0xb5688f3b
 8019b0c:	3fa48228 	.word	0x3fa48228
 8019b10:	0e884455 	.word	0x0e884455
 8019b14:	3fc9c155 	.word	0x3fc9c155
 8019b18:	03eb6f7d 	.word	0x03eb6f7d
 8019b1c:	3fd4d612 	.word	0x3fd4d612
 8019b20:	55555555 	.word	0x55555555
 8019b24:	3fc55555 	.word	0x3fc55555
 8019b28:	b12e9282 	.word	0xb12e9282
 8019b2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8019b30:	1b8d0159 	.word	0x1b8d0159
 8019b34:	3fe6066c 	.word	0x3fe6066c
 8019b38:	9c598ac8 	.word	0x9c598ac8
 8019b3c:	40002ae5 	.word	0x40002ae5
 8019b40:	1c8a2d4b 	.word	0x1c8a2d4b
 8019b44:	40033a27 	.word	0x40033a27
 8019b48:	33145c07 	.word	0x33145c07
 8019b4c:	3c91a626 	.word	0x3c91a626
 8019b50:	54442d18 	.word	0x54442d18
 8019b54:	3ff921fb 	.word	0x3ff921fb
 8019b58:	3fefffff 	.word	0x3fefffff
 8019b5c:	3fdfffff 	.word	0x3fdfffff
 8019b60:	3c600000 	.word	0x3c600000
 8019b64:	3ff00000 	.word	0x3ff00000
 8019b68:	3fe00000 	.word	0x3fe00000
 8019b6c:	ee10 2a10 	vmov	r2, s0
 8019b70:	462b      	mov	r3, r5
 8019b72:	2000      	movs	r0, #0
 8019b74:	496a      	ldr	r1, [pc, #424]	; (8019d20 <__ieee754_acos+0x4b0>)
 8019b76:	f7e6 fb91 	bl	800029c <__aeabi_dsub>
 8019b7a:	2200      	movs	r2, #0
 8019b7c:	4b69      	ldr	r3, [pc, #420]	; (8019d24 <__ieee754_acos+0x4b4>)
 8019b7e:	f7e6 fd45 	bl	800060c <__aeabi_dmul>
 8019b82:	4604      	mov	r4, r0
 8019b84:	460d      	mov	r5, r1
 8019b86:	ec45 4b10 	vmov	d0, r4, r5
 8019b8a:	f001 fabf 	bl	801b10c <__ieee754_sqrt>
 8019b8e:	a34e      	add	r3, pc, #312	; (adr r3, 8019cc8 <__ieee754_acos+0x458>)
 8019b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b94:	4620      	mov	r0, r4
 8019b96:	4629      	mov	r1, r5
 8019b98:	ec59 8b10 	vmov	r8, r9, d0
 8019b9c:	f7e6 fd36 	bl	800060c <__aeabi_dmul>
 8019ba0:	a34b      	add	r3, pc, #300	; (adr r3, 8019cd0 <__ieee754_acos+0x460>)
 8019ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ba6:	f7e6 fb7b 	bl	80002a0 <__adddf3>
 8019baa:	4622      	mov	r2, r4
 8019bac:	462b      	mov	r3, r5
 8019bae:	f7e6 fd2d 	bl	800060c <__aeabi_dmul>
 8019bb2:	a349      	add	r3, pc, #292	; (adr r3, 8019cd8 <__ieee754_acos+0x468>)
 8019bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bb8:	f7e6 fb70 	bl	800029c <__aeabi_dsub>
 8019bbc:	4622      	mov	r2, r4
 8019bbe:	462b      	mov	r3, r5
 8019bc0:	f7e6 fd24 	bl	800060c <__aeabi_dmul>
 8019bc4:	a346      	add	r3, pc, #280	; (adr r3, 8019ce0 <__ieee754_acos+0x470>)
 8019bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bca:	f7e6 fb69 	bl	80002a0 <__adddf3>
 8019bce:	4622      	mov	r2, r4
 8019bd0:	462b      	mov	r3, r5
 8019bd2:	f7e6 fd1b 	bl	800060c <__aeabi_dmul>
 8019bd6:	a344      	add	r3, pc, #272	; (adr r3, 8019ce8 <__ieee754_acos+0x478>)
 8019bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bdc:	f7e6 fb5e 	bl	800029c <__aeabi_dsub>
 8019be0:	4622      	mov	r2, r4
 8019be2:	462b      	mov	r3, r5
 8019be4:	f7e6 fd12 	bl	800060c <__aeabi_dmul>
 8019be8:	a341      	add	r3, pc, #260	; (adr r3, 8019cf0 <__ieee754_acos+0x480>)
 8019bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bee:	f7e6 fb57 	bl	80002a0 <__adddf3>
 8019bf2:	4622      	mov	r2, r4
 8019bf4:	462b      	mov	r3, r5
 8019bf6:	f7e6 fd09 	bl	800060c <__aeabi_dmul>
 8019bfa:	a33f      	add	r3, pc, #252	; (adr r3, 8019cf8 <__ieee754_acos+0x488>)
 8019bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c00:	4682      	mov	sl, r0
 8019c02:	468b      	mov	fp, r1
 8019c04:	4620      	mov	r0, r4
 8019c06:	4629      	mov	r1, r5
 8019c08:	f7e6 fd00 	bl	800060c <__aeabi_dmul>
 8019c0c:	a33c      	add	r3, pc, #240	; (adr r3, 8019d00 <__ieee754_acos+0x490>)
 8019c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c12:	f7e6 fb43 	bl	800029c <__aeabi_dsub>
 8019c16:	4622      	mov	r2, r4
 8019c18:	462b      	mov	r3, r5
 8019c1a:	f7e6 fcf7 	bl	800060c <__aeabi_dmul>
 8019c1e:	a33a      	add	r3, pc, #232	; (adr r3, 8019d08 <__ieee754_acos+0x498>)
 8019c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c24:	f7e6 fb3c 	bl	80002a0 <__adddf3>
 8019c28:	4622      	mov	r2, r4
 8019c2a:	462b      	mov	r3, r5
 8019c2c:	f7e6 fcee 	bl	800060c <__aeabi_dmul>
 8019c30:	a337      	add	r3, pc, #220	; (adr r3, 8019d10 <__ieee754_acos+0x4a0>)
 8019c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c36:	f7e6 fb31 	bl	800029c <__aeabi_dsub>
 8019c3a:	4622      	mov	r2, r4
 8019c3c:	462b      	mov	r3, r5
 8019c3e:	f7e6 fce5 	bl	800060c <__aeabi_dmul>
 8019c42:	2200      	movs	r2, #0
 8019c44:	4b36      	ldr	r3, [pc, #216]	; (8019d20 <__ieee754_acos+0x4b0>)
 8019c46:	f7e6 fb2b 	bl	80002a0 <__adddf3>
 8019c4a:	4602      	mov	r2, r0
 8019c4c:	460b      	mov	r3, r1
 8019c4e:	4650      	mov	r0, sl
 8019c50:	4659      	mov	r1, fp
 8019c52:	f7e6 fe05 	bl	8000860 <__aeabi_ddiv>
 8019c56:	4642      	mov	r2, r8
 8019c58:	464b      	mov	r3, r9
 8019c5a:	f7e6 fcd7 	bl	800060c <__aeabi_dmul>
 8019c5e:	2600      	movs	r6, #0
 8019c60:	4682      	mov	sl, r0
 8019c62:	468b      	mov	fp, r1
 8019c64:	4632      	mov	r2, r6
 8019c66:	464b      	mov	r3, r9
 8019c68:	4630      	mov	r0, r6
 8019c6a:	4649      	mov	r1, r9
 8019c6c:	f7e6 fcce 	bl	800060c <__aeabi_dmul>
 8019c70:	4602      	mov	r2, r0
 8019c72:	460b      	mov	r3, r1
 8019c74:	4620      	mov	r0, r4
 8019c76:	4629      	mov	r1, r5
 8019c78:	f7e6 fb10 	bl	800029c <__aeabi_dsub>
 8019c7c:	4632      	mov	r2, r6
 8019c7e:	4604      	mov	r4, r0
 8019c80:	460d      	mov	r5, r1
 8019c82:	464b      	mov	r3, r9
 8019c84:	4640      	mov	r0, r8
 8019c86:	4649      	mov	r1, r9
 8019c88:	f7e6 fb0a 	bl	80002a0 <__adddf3>
 8019c8c:	4602      	mov	r2, r0
 8019c8e:	460b      	mov	r3, r1
 8019c90:	4620      	mov	r0, r4
 8019c92:	4629      	mov	r1, r5
 8019c94:	f7e6 fde4 	bl	8000860 <__aeabi_ddiv>
 8019c98:	4602      	mov	r2, r0
 8019c9a:	460b      	mov	r3, r1
 8019c9c:	4650      	mov	r0, sl
 8019c9e:	4659      	mov	r1, fp
 8019ca0:	f7e6 fafe 	bl	80002a0 <__adddf3>
 8019ca4:	4632      	mov	r2, r6
 8019ca6:	464b      	mov	r3, r9
 8019ca8:	f7e6 fafa 	bl	80002a0 <__adddf3>
 8019cac:	4602      	mov	r2, r0
 8019cae:	460b      	mov	r3, r1
 8019cb0:	f7e6 faf6 	bl	80002a0 <__adddf3>
 8019cb4:	e5f1      	b.n	801989a <__ieee754_acos+0x2a>
 8019cb6:	2000      	movs	r0, #0
 8019cb8:	2100      	movs	r1, #0
 8019cba:	e5ee      	b.n	801989a <__ieee754_acos+0x2a>
 8019cbc:	a116      	add	r1, pc, #88	; (adr r1, 8019d18 <__ieee754_acos+0x4a8>)
 8019cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cc2:	e5ea      	b.n	801989a <__ieee754_acos+0x2a>
 8019cc4:	f3af 8000 	nop.w
 8019cc8:	0dfdf709 	.word	0x0dfdf709
 8019ccc:	3f023de1 	.word	0x3f023de1
 8019cd0:	7501b288 	.word	0x7501b288
 8019cd4:	3f49efe0 	.word	0x3f49efe0
 8019cd8:	b5688f3b 	.word	0xb5688f3b
 8019cdc:	3fa48228 	.word	0x3fa48228
 8019ce0:	0e884455 	.word	0x0e884455
 8019ce4:	3fc9c155 	.word	0x3fc9c155
 8019ce8:	03eb6f7d 	.word	0x03eb6f7d
 8019cec:	3fd4d612 	.word	0x3fd4d612
 8019cf0:	55555555 	.word	0x55555555
 8019cf4:	3fc55555 	.word	0x3fc55555
 8019cf8:	b12e9282 	.word	0xb12e9282
 8019cfc:	3fb3b8c5 	.word	0x3fb3b8c5
 8019d00:	1b8d0159 	.word	0x1b8d0159
 8019d04:	3fe6066c 	.word	0x3fe6066c
 8019d08:	9c598ac8 	.word	0x9c598ac8
 8019d0c:	40002ae5 	.word	0x40002ae5
 8019d10:	1c8a2d4b 	.word	0x1c8a2d4b
 8019d14:	40033a27 	.word	0x40033a27
 8019d18:	54442d18 	.word	0x54442d18
 8019d1c:	3ff921fb 	.word	0x3ff921fb
 8019d20:	3ff00000 	.word	0x3ff00000
 8019d24:	3fe00000 	.word	0x3fe00000

08019d28 <__ieee754_asin>:
 8019d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d2c:	ec55 4b10 	vmov	r4, r5, d0
 8019d30:	4bcb      	ldr	r3, [pc, #812]	; (801a060 <__ieee754_asin+0x338>)
 8019d32:	b087      	sub	sp, #28
 8019d34:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8019d38:	429f      	cmp	r7, r3
 8019d3a:	9501      	str	r5, [sp, #4]
 8019d3c:	dd31      	ble.n	8019da2 <__ieee754_asin+0x7a>
 8019d3e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8019d42:	ee10 3a10 	vmov	r3, s0
 8019d46:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8019d4a:	433b      	orrs	r3, r7
 8019d4c:	d117      	bne.n	8019d7e <__ieee754_asin+0x56>
 8019d4e:	a3aa      	add	r3, pc, #680	; (adr r3, 8019ff8 <__ieee754_asin+0x2d0>)
 8019d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d54:	ee10 0a10 	vmov	r0, s0
 8019d58:	4629      	mov	r1, r5
 8019d5a:	f7e6 fc57 	bl	800060c <__aeabi_dmul>
 8019d5e:	a3a8      	add	r3, pc, #672	; (adr r3, 801a000 <__ieee754_asin+0x2d8>)
 8019d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d64:	4606      	mov	r6, r0
 8019d66:	460f      	mov	r7, r1
 8019d68:	4620      	mov	r0, r4
 8019d6a:	4629      	mov	r1, r5
 8019d6c:	f7e6 fc4e 	bl	800060c <__aeabi_dmul>
 8019d70:	4602      	mov	r2, r0
 8019d72:	460b      	mov	r3, r1
 8019d74:	4630      	mov	r0, r6
 8019d76:	4639      	mov	r1, r7
 8019d78:	f7e6 fa92 	bl	80002a0 <__adddf3>
 8019d7c:	e00a      	b.n	8019d94 <__ieee754_asin+0x6c>
 8019d7e:	ee10 2a10 	vmov	r2, s0
 8019d82:	462b      	mov	r3, r5
 8019d84:	4620      	mov	r0, r4
 8019d86:	4629      	mov	r1, r5
 8019d88:	f7e6 fa88 	bl	800029c <__aeabi_dsub>
 8019d8c:	4602      	mov	r2, r0
 8019d8e:	460b      	mov	r3, r1
 8019d90:	f7e6 fd66 	bl	8000860 <__aeabi_ddiv>
 8019d94:	4604      	mov	r4, r0
 8019d96:	460d      	mov	r5, r1
 8019d98:	ec45 4b10 	vmov	d0, r4, r5
 8019d9c:	b007      	add	sp, #28
 8019d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019da2:	4bb0      	ldr	r3, [pc, #704]	; (801a064 <__ieee754_asin+0x33c>)
 8019da4:	429f      	cmp	r7, r3
 8019da6:	dc11      	bgt.n	8019dcc <__ieee754_asin+0xa4>
 8019da8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8019dac:	f280 80ae 	bge.w	8019f0c <__ieee754_asin+0x1e4>
 8019db0:	a395      	add	r3, pc, #596	; (adr r3, 801a008 <__ieee754_asin+0x2e0>)
 8019db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019db6:	ee10 0a10 	vmov	r0, s0
 8019dba:	4629      	mov	r1, r5
 8019dbc:	f7e6 fa70 	bl	80002a0 <__adddf3>
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	4ba9      	ldr	r3, [pc, #676]	; (801a068 <__ieee754_asin+0x340>)
 8019dc4:	f7e6 feb2 	bl	8000b2c <__aeabi_dcmpgt>
 8019dc8:	2800      	cmp	r0, #0
 8019dca:	d1e5      	bne.n	8019d98 <__ieee754_asin+0x70>
 8019dcc:	ec45 4b10 	vmov	d0, r4, r5
 8019dd0:	f7ff f976 	bl	80190c0 <fabs>
 8019dd4:	2000      	movs	r0, #0
 8019dd6:	ec53 2b10 	vmov	r2, r3, d0
 8019dda:	49a3      	ldr	r1, [pc, #652]	; (801a068 <__ieee754_asin+0x340>)
 8019ddc:	f7e6 fa5e 	bl	800029c <__aeabi_dsub>
 8019de0:	2200      	movs	r2, #0
 8019de2:	4ba2      	ldr	r3, [pc, #648]	; (801a06c <__ieee754_asin+0x344>)
 8019de4:	f7e6 fc12 	bl	800060c <__aeabi_dmul>
 8019de8:	a389      	add	r3, pc, #548	; (adr r3, 801a010 <__ieee754_asin+0x2e8>)
 8019dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dee:	4604      	mov	r4, r0
 8019df0:	460d      	mov	r5, r1
 8019df2:	f7e6 fc0b 	bl	800060c <__aeabi_dmul>
 8019df6:	a388      	add	r3, pc, #544	; (adr r3, 801a018 <__ieee754_asin+0x2f0>)
 8019df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dfc:	f7e6 fa50 	bl	80002a0 <__adddf3>
 8019e00:	4622      	mov	r2, r4
 8019e02:	462b      	mov	r3, r5
 8019e04:	f7e6 fc02 	bl	800060c <__aeabi_dmul>
 8019e08:	a385      	add	r3, pc, #532	; (adr r3, 801a020 <__ieee754_asin+0x2f8>)
 8019e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e0e:	f7e6 fa45 	bl	800029c <__aeabi_dsub>
 8019e12:	4622      	mov	r2, r4
 8019e14:	462b      	mov	r3, r5
 8019e16:	f7e6 fbf9 	bl	800060c <__aeabi_dmul>
 8019e1a:	a383      	add	r3, pc, #524	; (adr r3, 801a028 <__ieee754_asin+0x300>)
 8019e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e20:	f7e6 fa3e 	bl	80002a0 <__adddf3>
 8019e24:	4622      	mov	r2, r4
 8019e26:	462b      	mov	r3, r5
 8019e28:	f7e6 fbf0 	bl	800060c <__aeabi_dmul>
 8019e2c:	a380      	add	r3, pc, #512	; (adr r3, 801a030 <__ieee754_asin+0x308>)
 8019e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e32:	f7e6 fa33 	bl	800029c <__aeabi_dsub>
 8019e36:	4622      	mov	r2, r4
 8019e38:	462b      	mov	r3, r5
 8019e3a:	f7e6 fbe7 	bl	800060c <__aeabi_dmul>
 8019e3e:	a37e      	add	r3, pc, #504	; (adr r3, 801a038 <__ieee754_asin+0x310>)
 8019e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e44:	f7e6 fa2c 	bl	80002a0 <__adddf3>
 8019e48:	4622      	mov	r2, r4
 8019e4a:	462b      	mov	r3, r5
 8019e4c:	f7e6 fbde 	bl	800060c <__aeabi_dmul>
 8019e50:	a37b      	add	r3, pc, #492	; (adr r3, 801a040 <__ieee754_asin+0x318>)
 8019e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e56:	4680      	mov	r8, r0
 8019e58:	4689      	mov	r9, r1
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	4629      	mov	r1, r5
 8019e5e:	f7e6 fbd5 	bl	800060c <__aeabi_dmul>
 8019e62:	a379      	add	r3, pc, #484	; (adr r3, 801a048 <__ieee754_asin+0x320>)
 8019e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e68:	f7e6 fa18 	bl	800029c <__aeabi_dsub>
 8019e6c:	4622      	mov	r2, r4
 8019e6e:	462b      	mov	r3, r5
 8019e70:	f7e6 fbcc 	bl	800060c <__aeabi_dmul>
 8019e74:	a376      	add	r3, pc, #472	; (adr r3, 801a050 <__ieee754_asin+0x328>)
 8019e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e7a:	f7e6 fa11 	bl	80002a0 <__adddf3>
 8019e7e:	4622      	mov	r2, r4
 8019e80:	462b      	mov	r3, r5
 8019e82:	f7e6 fbc3 	bl	800060c <__aeabi_dmul>
 8019e86:	a374      	add	r3, pc, #464	; (adr r3, 801a058 <__ieee754_asin+0x330>)
 8019e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e8c:	f7e6 fa06 	bl	800029c <__aeabi_dsub>
 8019e90:	4622      	mov	r2, r4
 8019e92:	462b      	mov	r3, r5
 8019e94:	f7e6 fbba 	bl	800060c <__aeabi_dmul>
 8019e98:	4b73      	ldr	r3, [pc, #460]	; (801a068 <__ieee754_asin+0x340>)
 8019e9a:	2200      	movs	r2, #0
 8019e9c:	f7e6 fa00 	bl	80002a0 <__adddf3>
 8019ea0:	ec45 4b10 	vmov	d0, r4, r5
 8019ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019ea8:	f001 f930 	bl	801b10c <__ieee754_sqrt>
 8019eac:	4b70      	ldr	r3, [pc, #448]	; (801a070 <__ieee754_asin+0x348>)
 8019eae:	429f      	cmp	r7, r3
 8019eb0:	ec5b ab10 	vmov	sl, fp, d0
 8019eb4:	f340 80de 	ble.w	801a074 <__ieee754_asin+0x34c>
 8019eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019ebc:	4640      	mov	r0, r8
 8019ebe:	4649      	mov	r1, r9
 8019ec0:	f7e6 fcce 	bl	8000860 <__aeabi_ddiv>
 8019ec4:	4652      	mov	r2, sl
 8019ec6:	465b      	mov	r3, fp
 8019ec8:	f7e6 fba0 	bl	800060c <__aeabi_dmul>
 8019ecc:	4652      	mov	r2, sl
 8019ece:	465b      	mov	r3, fp
 8019ed0:	f7e6 f9e6 	bl	80002a0 <__adddf3>
 8019ed4:	4602      	mov	r2, r0
 8019ed6:	460b      	mov	r3, r1
 8019ed8:	f7e6 f9e2 	bl	80002a0 <__adddf3>
 8019edc:	a348      	add	r3, pc, #288	; (adr r3, 801a000 <__ieee754_asin+0x2d8>)
 8019ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee2:	f7e6 f9db 	bl	800029c <__aeabi_dsub>
 8019ee6:	4602      	mov	r2, r0
 8019ee8:	460b      	mov	r3, r1
 8019eea:	a143      	add	r1, pc, #268	; (adr r1, 8019ff8 <__ieee754_asin+0x2d0>)
 8019eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ef0:	f7e6 f9d4 	bl	800029c <__aeabi_dsub>
 8019ef4:	9b01      	ldr	r3, [sp, #4]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	bfdc      	itt	le
 8019efa:	4602      	movle	r2, r0
 8019efc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8019f00:	4604      	mov	r4, r0
 8019f02:	460d      	mov	r5, r1
 8019f04:	bfdc      	itt	le
 8019f06:	4614      	movle	r4, r2
 8019f08:	461d      	movle	r5, r3
 8019f0a:	e745      	b.n	8019d98 <__ieee754_asin+0x70>
 8019f0c:	ee10 2a10 	vmov	r2, s0
 8019f10:	ee10 0a10 	vmov	r0, s0
 8019f14:	462b      	mov	r3, r5
 8019f16:	4629      	mov	r1, r5
 8019f18:	f7e6 fb78 	bl	800060c <__aeabi_dmul>
 8019f1c:	a33c      	add	r3, pc, #240	; (adr r3, 801a010 <__ieee754_asin+0x2e8>)
 8019f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f22:	4606      	mov	r6, r0
 8019f24:	460f      	mov	r7, r1
 8019f26:	f7e6 fb71 	bl	800060c <__aeabi_dmul>
 8019f2a:	a33b      	add	r3, pc, #236	; (adr r3, 801a018 <__ieee754_asin+0x2f0>)
 8019f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f30:	f7e6 f9b6 	bl	80002a0 <__adddf3>
 8019f34:	4632      	mov	r2, r6
 8019f36:	463b      	mov	r3, r7
 8019f38:	f7e6 fb68 	bl	800060c <__aeabi_dmul>
 8019f3c:	a338      	add	r3, pc, #224	; (adr r3, 801a020 <__ieee754_asin+0x2f8>)
 8019f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f42:	f7e6 f9ab 	bl	800029c <__aeabi_dsub>
 8019f46:	4632      	mov	r2, r6
 8019f48:	463b      	mov	r3, r7
 8019f4a:	f7e6 fb5f 	bl	800060c <__aeabi_dmul>
 8019f4e:	a336      	add	r3, pc, #216	; (adr r3, 801a028 <__ieee754_asin+0x300>)
 8019f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f54:	f7e6 f9a4 	bl	80002a0 <__adddf3>
 8019f58:	4632      	mov	r2, r6
 8019f5a:	463b      	mov	r3, r7
 8019f5c:	f7e6 fb56 	bl	800060c <__aeabi_dmul>
 8019f60:	a333      	add	r3, pc, #204	; (adr r3, 801a030 <__ieee754_asin+0x308>)
 8019f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f66:	f7e6 f999 	bl	800029c <__aeabi_dsub>
 8019f6a:	4632      	mov	r2, r6
 8019f6c:	463b      	mov	r3, r7
 8019f6e:	f7e6 fb4d 	bl	800060c <__aeabi_dmul>
 8019f72:	a331      	add	r3, pc, #196	; (adr r3, 801a038 <__ieee754_asin+0x310>)
 8019f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f78:	f7e6 f992 	bl	80002a0 <__adddf3>
 8019f7c:	4632      	mov	r2, r6
 8019f7e:	463b      	mov	r3, r7
 8019f80:	f7e6 fb44 	bl	800060c <__aeabi_dmul>
 8019f84:	a32e      	add	r3, pc, #184	; (adr r3, 801a040 <__ieee754_asin+0x318>)
 8019f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8a:	4680      	mov	r8, r0
 8019f8c:	4689      	mov	r9, r1
 8019f8e:	4630      	mov	r0, r6
 8019f90:	4639      	mov	r1, r7
 8019f92:	f7e6 fb3b 	bl	800060c <__aeabi_dmul>
 8019f96:	a32c      	add	r3, pc, #176	; (adr r3, 801a048 <__ieee754_asin+0x320>)
 8019f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f9c:	f7e6 f97e 	bl	800029c <__aeabi_dsub>
 8019fa0:	4632      	mov	r2, r6
 8019fa2:	463b      	mov	r3, r7
 8019fa4:	f7e6 fb32 	bl	800060c <__aeabi_dmul>
 8019fa8:	a329      	add	r3, pc, #164	; (adr r3, 801a050 <__ieee754_asin+0x328>)
 8019faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fae:	f7e6 f977 	bl	80002a0 <__adddf3>
 8019fb2:	4632      	mov	r2, r6
 8019fb4:	463b      	mov	r3, r7
 8019fb6:	f7e6 fb29 	bl	800060c <__aeabi_dmul>
 8019fba:	a327      	add	r3, pc, #156	; (adr r3, 801a058 <__ieee754_asin+0x330>)
 8019fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc0:	f7e6 f96c 	bl	800029c <__aeabi_dsub>
 8019fc4:	4632      	mov	r2, r6
 8019fc6:	463b      	mov	r3, r7
 8019fc8:	f7e6 fb20 	bl	800060c <__aeabi_dmul>
 8019fcc:	2200      	movs	r2, #0
 8019fce:	4b26      	ldr	r3, [pc, #152]	; (801a068 <__ieee754_asin+0x340>)
 8019fd0:	f7e6 f966 	bl	80002a0 <__adddf3>
 8019fd4:	4602      	mov	r2, r0
 8019fd6:	460b      	mov	r3, r1
 8019fd8:	4640      	mov	r0, r8
 8019fda:	4649      	mov	r1, r9
 8019fdc:	f7e6 fc40 	bl	8000860 <__aeabi_ddiv>
 8019fe0:	4622      	mov	r2, r4
 8019fe2:	462b      	mov	r3, r5
 8019fe4:	f7e6 fb12 	bl	800060c <__aeabi_dmul>
 8019fe8:	4602      	mov	r2, r0
 8019fea:	460b      	mov	r3, r1
 8019fec:	4620      	mov	r0, r4
 8019fee:	4629      	mov	r1, r5
 8019ff0:	e6c2      	b.n	8019d78 <__ieee754_asin+0x50>
 8019ff2:	bf00      	nop
 8019ff4:	f3af 8000 	nop.w
 8019ff8:	54442d18 	.word	0x54442d18
 8019ffc:	3ff921fb 	.word	0x3ff921fb
 801a000:	33145c07 	.word	0x33145c07
 801a004:	3c91a626 	.word	0x3c91a626
 801a008:	8800759c 	.word	0x8800759c
 801a00c:	7e37e43c 	.word	0x7e37e43c
 801a010:	0dfdf709 	.word	0x0dfdf709
 801a014:	3f023de1 	.word	0x3f023de1
 801a018:	7501b288 	.word	0x7501b288
 801a01c:	3f49efe0 	.word	0x3f49efe0
 801a020:	b5688f3b 	.word	0xb5688f3b
 801a024:	3fa48228 	.word	0x3fa48228
 801a028:	0e884455 	.word	0x0e884455
 801a02c:	3fc9c155 	.word	0x3fc9c155
 801a030:	03eb6f7d 	.word	0x03eb6f7d
 801a034:	3fd4d612 	.word	0x3fd4d612
 801a038:	55555555 	.word	0x55555555
 801a03c:	3fc55555 	.word	0x3fc55555
 801a040:	b12e9282 	.word	0xb12e9282
 801a044:	3fb3b8c5 	.word	0x3fb3b8c5
 801a048:	1b8d0159 	.word	0x1b8d0159
 801a04c:	3fe6066c 	.word	0x3fe6066c
 801a050:	9c598ac8 	.word	0x9c598ac8
 801a054:	40002ae5 	.word	0x40002ae5
 801a058:	1c8a2d4b 	.word	0x1c8a2d4b
 801a05c:	40033a27 	.word	0x40033a27
 801a060:	3fefffff 	.word	0x3fefffff
 801a064:	3fdfffff 	.word	0x3fdfffff
 801a068:	3ff00000 	.word	0x3ff00000
 801a06c:	3fe00000 	.word	0x3fe00000
 801a070:	3fef3332 	.word	0x3fef3332
 801a074:	ee10 2a10 	vmov	r2, s0
 801a078:	ee10 0a10 	vmov	r0, s0
 801a07c:	465b      	mov	r3, fp
 801a07e:	4659      	mov	r1, fp
 801a080:	f7e6 f90e 	bl	80002a0 <__adddf3>
 801a084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a08c:	4640      	mov	r0, r8
 801a08e:	4649      	mov	r1, r9
 801a090:	f7e6 fbe6 	bl	8000860 <__aeabi_ddiv>
 801a094:	4602      	mov	r2, r0
 801a096:	460b      	mov	r3, r1
 801a098:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a09c:	f7e6 fab6 	bl	800060c <__aeabi_dmul>
 801a0a0:	2600      	movs	r6, #0
 801a0a2:	4680      	mov	r8, r0
 801a0a4:	4689      	mov	r9, r1
 801a0a6:	4632      	mov	r2, r6
 801a0a8:	465b      	mov	r3, fp
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	4659      	mov	r1, fp
 801a0ae:	f7e6 faad 	bl	800060c <__aeabi_dmul>
 801a0b2:	4602      	mov	r2, r0
 801a0b4:	460b      	mov	r3, r1
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	4629      	mov	r1, r5
 801a0ba:	f7e6 f8ef 	bl	800029c <__aeabi_dsub>
 801a0be:	4632      	mov	r2, r6
 801a0c0:	4604      	mov	r4, r0
 801a0c2:	460d      	mov	r5, r1
 801a0c4:	465b      	mov	r3, fp
 801a0c6:	4650      	mov	r0, sl
 801a0c8:	4659      	mov	r1, fp
 801a0ca:	f7e6 f8e9 	bl	80002a0 <__adddf3>
 801a0ce:	4602      	mov	r2, r0
 801a0d0:	460b      	mov	r3, r1
 801a0d2:	4620      	mov	r0, r4
 801a0d4:	4629      	mov	r1, r5
 801a0d6:	f7e6 fbc3 	bl	8000860 <__aeabi_ddiv>
 801a0da:	4602      	mov	r2, r0
 801a0dc:	460b      	mov	r3, r1
 801a0de:	f7e6 f8df 	bl	80002a0 <__adddf3>
 801a0e2:	4602      	mov	r2, r0
 801a0e4:	460b      	mov	r3, r1
 801a0e6:	a114      	add	r1, pc, #80	; (adr r1, 801a138 <__ieee754_asin+0x410>)
 801a0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0ec:	f7e6 f8d6 	bl	800029c <__aeabi_dsub>
 801a0f0:	4602      	mov	r2, r0
 801a0f2:	460b      	mov	r3, r1
 801a0f4:	4640      	mov	r0, r8
 801a0f6:	4649      	mov	r1, r9
 801a0f8:	f7e6 f8d0 	bl	800029c <__aeabi_dsub>
 801a0fc:	465f      	mov	r7, fp
 801a0fe:	4604      	mov	r4, r0
 801a100:	460d      	mov	r5, r1
 801a102:	4632      	mov	r2, r6
 801a104:	465b      	mov	r3, fp
 801a106:	4630      	mov	r0, r6
 801a108:	4639      	mov	r1, r7
 801a10a:	f7e6 f8c9 	bl	80002a0 <__adddf3>
 801a10e:	4602      	mov	r2, r0
 801a110:	460b      	mov	r3, r1
 801a112:	a10b      	add	r1, pc, #44	; (adr r1, 801a140 <__ieee754_asin+0x418>)
 801a114:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a118:	f7e6 f8c0 	bl	800029c <__aeabi_dsub>
 801a11c:	4602      	mov	r2, r0
 801a11e:	460b      	mov	r3, r1
 801a120:	4620      	mov	r0, r4
 801a122:	4629      	mov	r1, r5
 801a124:	f7e6 f8ba 	bl	800029c <__aeabi_dsub>
 801a128:	4602      	mov	r2, r0
 801a12a:	460b      	mov	r3, r1
 801a12c:	a104      	add	r1, pc, #16	; (adr r1, 801a140 <__ieee754_asin+0x418>)
 801a12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a132:	e6dd      	b.n	8019ef0 <__ieee754_asin+0x1c8>
 801a134:	f3af 8000 	nop.w
 801a138:	33145c07 	.word	0x33145c07
 801a13c:	3c91a626 	.word	0x3c91a626
 801a140:	54442d18 	.word	0x54442d18
 801a144:	3fe921fb 	.word	0x3fe921fb

0801a148 <__ieee754_atan2>:
 801a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a14c:	ec57 6b11 	vmov	r6, r7, d1
 801a150:	4273      	negs	r3, r6
 801a152:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a156:	4333      	orrs	r3, r6
 801a158:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801a300 <__ieee754_atan2+0x1b8>
 801a15c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a160:	4573      	cmp	r3, lr
 801a162:	ec51 0b10 	vmov	r0, r1, d0
 801a166:	ee11 8a10 	vmov	r8, s2
 801a16a:	d80a      	bhi.n	801a182 <__ieee754_atan2+0x3a>
 801a16c:	4244      	negs	r4, r0
 801a16e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a172:	4304      	orrs	r4, r0
 801a174:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a178:	4574      	cmp	r4, lr
 801a17a:	468c      	mov	ip, r1
 801a17c:	ee10 9a10 	vmov	r9, s0
 801a180:	d907      	bls.n	801a192 <__ieee754_atan2+0x4a>
 801a182:	4632      	mov	r2, r6
 801a184:	463b      	mov	r3, r7
 801a186:	f7e6 f88b 	bl	80002a0 <__adddf3>
 801a18a:	ec41 0b10 	vmov	d0, r0, r1
 801a18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a192:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a196:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a19a:	4334      	orrs	r4, r6
 801a19c:	d103      	bne.n	801a1a6 <__ieee754_atan2+0x5e>
 801a19e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1a2:	f7fe bda9 	b.w	8018cf8 <atan>
 801a1a6:	17bc      	asrs	r4, r7, #30
 801a1a8:	f004 0402 	and.w	r4, r4, #2
 801a1ac:	ea53 0909 	orrs.w	r9, r3, r9
 801a1b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a1b4:	d107      	bne.n	801a1c6 <__ieee754_atan2+0x7e>
 801a1b6:	2c02      	cmp	r4, #2
 801a1b8:	d073      	beq.n	801a2a2 <__ieee754_atan2+0x15a>
 801a1ba:	2c03      	cmp	r4, #3
 801a1bc:	d1e5      	bne.n	801a18a <__ieee754_atan2+0x42>
 801a1be:	a13e      	add	r1, pc, #248	; (adr r1, 801a2b8 <__ieee754_atan2+0x170>)
 801a1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1c4:	e7e1      	b.n	801a18a <__ieee754_atan2+0x42>
 801a1c6:	ea52 0808 	orrs.w	r8, r2, r8
 801a1ca:	d106      	bne.n	801a1da <__ieee754_atan2+0x92>
 801a1cc:	f1bc 0f00 	cmp.w	ip, #0
 801a1d0:	da6b      	bge.n	801a2aa <__ieee754_atan2+0x162>
 801a1d2:	a13b      	add	r1, pc, #236	; (adr r1, 801a2c0 <__ieee754_atan2+0x178>)
 801a1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1d8:	e7d7      	b.n	801a18a <__ieee754_atan2+0x42>
 801a1da:	4572      	cmp	r2, lr
 801a1dc:	d120      	bne.n	801a220 <__ieee754_atan2+0xd8>
 801a1de:	4293      	cmp	r3, r2
 801a1e0:	d111      	bne.n	801a206 <__ieee754_atan2+0xbe>
 801a1e2:	2c02      	cmp	r4, #2
 801a1e4:	d007      	beq.n	801a1f6 <__ieee754_atan2+0xae>
 801a1e6:	2c03      	cmp	r4, #3
 801a1e8:	d009      	beq.n	801a1fe <__ieee754_atan2+0xb6>
 801a1ea:	2c01      	cmp	r4, #1
 801a1ec:	d155      	bne.n	801a29a <__ieee754_atan2+0x152>
 801a1ee:	a136      	add	r1, pc, #216	; (adr r1, 801a2c8 <__ieee754_atan2+0x180>)
 801a1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1f4:	e7c9      	b.n	801a18a <__ieee754_atan2+0x42>
 801a1f6:	a136      	add	r1, pc, #216	; (adr r1, 801a2d0 <__ieee754_atan2+0x188>)
 801a1f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1fc:	e7c5      	b.n	801a18a <__ieee754_atan2+0x42>
 801a1fe:	a136      	add	r1, pc, #216	; (adr r1, 801a2d8 <__ieee754_atan2+0x190>)
 801a200:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a204:	e7c1      	b.n	801a18a <__ieee754_atan2+0x42>
 801a206:	2c02      	cmp	r4, #2
 801a208:	d04b      	beq.n	801a2a2 <__ieee754_atan2+0x15a>
 801a20a:	2c03      	cmp	r4, #3
 801a20c:	d0d7      	beq.n	801a1be <__ieee754_atan2+0x76>
 801a20e:	2c01      	cmp	r4, #1
 801a210:	f04f 0000 	mov.w	r0, #0
 801a214:	d102      	bne.n	801a21c <__ieee754_atan2+0xd4>
 801a216:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a21a:	e7b6      	b.n	801a18a <__ieee754_atan2+0x42>
 801a21c:	2100      	movs	r1, #0
 801a21e:	e7b4      	b.n	801a18a <__ieee754_atan2+0x42>
 801a220:	4573      	cmp	r3, lr
 801a222:	d0d3      	beq.n	801a1cc <__ieee754_atan2+0x84>
 801a224:	1a9b      	subs	r3, r3, r2
 801a226:	151b      	asrs	r3, r3, #20
 801a228:	2b3c      	cmp	r3, #60	; 0x3c
 801a22a:	dc1e      	bgt.n	801a26a <__ieee754_atan2+0x122>
 801a22c:	2f00      	cmp	r7, #0
 801a22e:	da01      	bge.n	801a234 <__ieee754_atan2+0xec>
 801a230:	333c      	adds	r3, #60	; 0x3c
 801a232:	db1e      	blt.n	801a272 <__ieee754_atan2+0x12a>
 801a234:	4632      	mov	r2, r6
 801a236:	463b      	mov	r3, r7
 801a238:	f7e6 fb12 	bl	8000860 <__aeabi_ddiv>
 801a23c:	ec41 0b10 	vmov	d0, r0, r1
 801a240:	f7fe ff3e 	bl	80190c0 <fabs>
 801a244:	f7fe fd58 	bl	8018cf8 <atan>
 801a248:	ec51 0b10 	vmov	r0, r1, d0
 801a24c:	2c01      	cmp	r4, #1
 801a24e:	d013      	beq.n	801a278 <__ieee754_atan2+0x130>
 801a250:	2c02      	cmp	r4, #2
 801a252:	d015      	beq.n	801a280 <__ieee754_atan2+0x138>
 801a254:	2c00      	cmp	r4, #0
 801a256:	d098      	beq.n	801a18a <__ieee754_atan2+0x42>
 801a258:	a321      	add	r3, pc, #132	; (adr r3, 801a2e0 <__ieee754_atan2+0x198>)
 801a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25e:	f7e6 f81d 	bl	800029c <__aeabi_dsub>
 801a262:	a321      	add	r3, pc, #132	; (adr r3, 801a2e8 <__ieee754_atan2+0x1a0>)
 801a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a268:	e014      	b.n	801a294 <__ieee754_atan2+0x14c>
 801a26a:	a121      	add	r1, pc, #132	; (adr r1, 801a2f0 <__ieee754_atan2+0x1a8>)
 801a26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a270:	e7ec      	b.n	801a24c <__ieee754_atan2+0x104>
 801a272:	2000      	movs	r0, #0
 801a274:	2100      	movs	r1, #0
 801a276:	e7e9      	b.n	801a24c <__ieee754_atan2+0x104>
 801a278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a27c:	4619      	mov	r1, r3
 801a27e:	e784      	b.n	801a18a <__ieee754_atan2+0x42>
 801a280:	a317      	add	r3, pc, #92	; (adr r3, 801a2e0 <__ieee754_atan2+0x198>)
 801a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a286:	f7e6 f809 	bl	800029c <__aeabi_dsub>
 801a28a:	4602      	mov	r2, r0
 801a28c:	460b      	mov	r3, r1
 801a28e:	a116      	add	r1, pc, #88	; (adr r1, 801a2e8 <__ieee754_atan2+0x1a0>)
 801a290:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a294:	f7e6 f802 	bl	800029c <__aeabi_dsub>
 801a298:	e777      	b.n	801a18a <__ieee754_atan2+0x42>
 801a29a:	a117      	add	r1, pc, #92	; (adr r1, 801a2f8 <__ieee754_atan2+0x1b0>)
 801a29c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2a0:	e773      	b.n	801a18a <__ieee754_atan2+0x42>
 801a2a2:	a111      	add	r1, pc, #68	; (adr r1, 801a2e8 <__ieee754_atan2+0x1a0>)
 801a2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2a8:	e76f      	b.n	801a18a <__ieee754_atan2+0x42>
 801a2aa:	a111      	add	r1, pc, #68	; (adr r1, 801a2f0 <__ieee754_atan2+0x1a8>)
 801a2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2b0:	e76b      	b.n	801a18a <__ieee754_atan2+0x42>
 801a2b2:	bf00      	nop
 801a2b4:	f3af 8000 	nop.w
 801a2b8:	54442d18 	.word	0x54442d18
 801a2bc:	c00921fb 	.word	0xc00921fb
 801a2c0:	54442d18 	.word	0x54442d18
 801a2c4:	bff921fb 	.word	0xbff921fb
 801a2c8:	54442d18 	.word	0x54442d18
 801a2cc:	bfe921fb 	.word	0xbfe921fb
 801a2d0:	7f3321d2 	.word	0x7f3321d2
 801a2d4:	4002d97c 	.word	0x4002d97c
 801a2d8:	7f3321d2 	.word	0x7f3321d2
 801a2dc:	c002d97c 	.word	0xc002d97c
 801a2e0:	33145c07 	.word	0x33145c07
 801a2e4:	3ca1a626 	.word	0x3ca1a626
 801a2e8:	54442d18 	.word	0x54442d18
 801a2ec:	400921fb 	.word	0x400921fb
 801a2f0:	54442d18 	.word	0x54442d18
 801a2f4:	3ff921fb 	.word	0x3ff921fb
 801a2f8:	54442d18 	.word	0x54442d18
 801a2fc:	3fe921fb 	.word	0x3fe921fb
 801a300:	7ff00000 	.word	0x7ff00000
 801a304:	00000000 	.word	0x00000000

0801a308 <__ieee754_pow>:
 801a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30c:	b091      	sub	sp, #68	; 0x44
 801a30e:	ed8d 1b00 	vstr	d1, [sp]
 801a312:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a316:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a31a:	ea58 0302 	orrs.w	r3, r8, r2
 801a31e:	ec57 6b10 	vmov	r6, r7, d0
 801a322:	f000 84be 	beq.w	801aca2 <__ieee754_pow+0x99a>
 801a326:	4b7a      	ldr	r3, [pc, #488]	; (801a510 <__ieee754_pow+0x208>)
 801a328:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a32c:	429c      	cmp	r4, r3
 801a32e:	463d      	mov	r5, r7
 801a330:	ee10 aa10 	vmov	sl, s0
 801a334:	dc09      	bgt.n	801a34a <__ieee754_pow+0x42>
 801a336:	d103      	bne.n	801a340 <__ieee754_pow+0x38>
 801a338:	b93e      	cbnz	r6, 801a34a <__ieee754_pow+0x42>
 801a33a:	45a0      	cmp	r8, r4
 801a33c:	dc0d      	bgt.n	801a35a <__ieee754_pow+0x52>
 801a33e:	e001      	b.n	801a344 <__ieee754_pow+0x3c>
 801a340:	4598      	cmp	r8, r3
 801a342:	dc02      	bgt.n	801a34a <__ieee754_pow+0x42>
 801a344:	4598      	cmp	r8, r3
 801a346:	d10e      	bne.n	801a366 <__ieee754_pow+0x5e>
 801a348:	b16a      	cbz	r2, 801a366 <__ieee754_pow+0x5e>
 801a34a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a34e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a352:	ea54 030a 	orrs.w	r3, r4, sl
 801a356:	f000 84a4 	beq.w	801aca2 <__ieee754_pow+0x99a>
 801a35a:	486e      	ldr	r0, [pc, #440]	; (801a514 <__ieee754_pow+0x20c>)
 801a35c:	b011      	add	sp, #68	; 0x44
 801a35e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a362:	f001 be21 	b.w	801bfa8 <nan>
 801a366:	2d00      	cmp	r5, #0
 801a368:	da53      	bge.n	801a412 <__ieee754_pow+0x10a>
 801a36a:	4b6b      	ldr	r3, [pc, #428]	; (801a518 <__ieee754_pow+0x210>)
 801a36c:	4598      	cmp	r8, r3
 801a36e:	dc4d      	bgt.n	801a40c <__ieee754_pow+0x104>
 801a370:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a374:	4598      	cmp	r8, r3
 801a376:	dd4c      	ble.n	801a412 <__ieee754_pow+0x10a>
 801a378:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a37c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a380:	2b14      	cmp	r3, #20
 801a382:	dd26      	ble.n	801a3d2 <__ieee754_pow+0xca>
 801a384:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a388:	fa22 f103 	lsr.w	r1, r2, r3
 801a38c:	fa01 f303 	lsl.w	r3, r1, r3
 801a390:	4293      	cmp	r3, r2
 801a392:	d13e      	bne.n	801a412 <__ieee754_pow+0x10a>
 801a394:	f001 0101 	and.w	r1, r1, #1
 801a398:	f1c1 0b02 	rsb	fp, r1, #2
 801a39c:	2a00      	cmp	r2, #0
 801a39e:	d15b      	bne.n	801a458 <__ieee754_pow+0x150>
 801a3a0:	4b5b      	ldr	r3, [pc, #364]	; (801a510 <__ieee754_pow+0x208>)
 801a3a2:	4598      	cmp	r8, r3
 801a3a4:	d124      	bne.n	801a3f0 <__ieee754_pow+0xe8>
 801a3a6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a3aa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a3ae:	ea53 030a 	orrs.w	r3, r3, sl
 801a3b2:	f000 8476 	beq.w	801aca2 <__ieee754_pow+0x99a>
 801a3b6:	4b59      	ldr	r3, [pc, #356]	; (801a51c <__ieee754_pow+0x214>)
 801a3b8:	429c      	cmp	r4, r3
 801a3ba:	dd2d      	ble.n	801a418 <__ieee754_pow+0x110>
 801a3bc:	f1b9 0f00 	cmp.w	r9, #0
 801a3c0:	f280 8473 	bge.w	801acaa <__ieee754_pow+0x9a2>
 801a3c4:	2000      	movs	r0, #0
 801a3c6:	2100      	movs	r1, #0
 801a3c8:	ec41 0b10 	vmov	d0, r0, r1
 801a3cc:	b011      	add	sp, #68	; 0x44
 801a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3d2:	2a00      	cmp	r2, #0
 801a3d4:	d13e      	bne.n	801a454 <__ieee754_pow+0x14c>
 801a3d6:	f1c3 0314 	rsb	r3, r3, #20
 801a3da:	fa48 f103 	asr.w	r1, r8, r3
 801a3de:	fa01 f303 	lsl.w	r3, r1, r3
 801a3e2:	4543      	cmp	r3, r8
 801a3e4:	f040 8469 	bne.w	801acba <__ieee754_pow+0x9b2>
 801a3e8:	f001 0101 	and.w	r1, r1, #1
 801a3ec:	f1c1 0b02 	rsb	fp, r1, #2
 801a3f0:	4b4b      	ldr	r3, [pc, #300]	; (801a520 <__ieee754_pow+0x218>)
 801a3f2:	4598      	cmp	r8, r3
 801a3f4:	d118      	bne.n	801a428 <__ieee754_pow+0x120>
 801a3f6:	f1b9 0f00 	cmp.w	r9, #0
 801a3fa:	f280 845a 	bge.w	801acb2 <__ieee754_pow+0x9aa>
 801a3fe:	4948      	ldr	r1, [pc, #288]	; (801a520 <__ieee754_pow+0x218>)
 801a400:	4632      	mov	r2, r6
 801a402:	463b      	mov	r3, r7
 801a404:	2000      	movs	r0, #0
 801a406:	f7e6 fa2b 	bl	8000860 <__aeabi_ddiv>
 801a40a:	e7dd      	b.n	801a3c8 <__ieee754_pow+0xc0>
 801a40c:	f04f 0b02 	mov.w	fp, #2
 801a410:	e7c4      	b.n	801a39c <__ieee754_pow+0x94>
 801a412:	f04f 0b00 	mov.w	fp, #0
 801a416:	e7c1      	b.n	801a39c <__ieee754_pow+0x94>
 801a418:	f1b9 0f00 	cmp.w	r9, #0
 801a41c:	dad2      	bge.n	801a3c4 <__ieee754_pow+0xbc>
 801a41e:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a422:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a426:	e7cf      	b.n	801a3c8 <__ieee754_pow+0xc0>
 801a428:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a42c:	d106      	bne.n	801a43c <__ieee754_pow+0x134>
 801a42e:	4632      	mov	r2, r6
 801a430:	463b      	mov	r3, r7
 801a432:	4610      	mov	r0, r2
 801a434:	4619      	mov	r1, r3
 801a436:	f7e6 f8e9 	bl	800060c <__aeabi_dmul>
 801a43a:	e7c5      	b.n	801a3c8 <__ieee754_pow+0xc0>
 801a43c:	4b39      	ldr	r3, [pc, #228]	; (801a524 <__ieee754_pow+0x21c>)
 801a43e:	4599      	cmp	r9, r3
 801a440:	d10a      	bne.n	801a458 <__ieee754_pow+0x150>
 801a442:	2d00      	cmp	r5, #0
 801a444:	db08      	blt.n	801a458 <__ieee754_pow+0x150>
 801a446:	ec47 6b10 	vmov	d0, r6, r7
 801a44a:	b011      	add	sp, #68	; 0x44
 801a44c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a450:	f000 be5c 	b.w	801b10c <__ieee754_sqrt>
 801a454:	f04f 0b00 	mov.w	fp, #0
 801a458:	ec47 6b10 	vmov	d0, r6, r7
 801a45c:	f7fe fe30 	bl	80190c0 <fabs>
 801a460:	ec51 0b10 	vmov	r0, r1, d0
 801a464:	f1ba 0f00 	cmp.w	sl, #0
 801a468:	d127      	bne.n	801a4ba <__ieee754_pow+0x1b2>
 801a46a:	b124      	cbz	r4, 801a476 <__ieee754_pow+0x16e>
 801a46c:	4b2c      	ldr	r3, [pc, #176]	; (801a520 <__ieee754_pow+0x218>)
 801a46e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a472:	429a      	cmp	r2, r3
 801a474:	d121      	bne.n	801a4ba <__ieee754_pow+0x1b2>
 801a476:	f1b9 0f00 	cmp.w	r9, #0
 801a47a:	da05      	bge.n	801a488 <__ieee754_pow+0x180>
 801a47c:	4602      	mov	r2, r0
 801a47e:	460b      	mov	r3, r1
 801a480:	2000      	movs	r0, #0
 801a482:	4927      	ldr	r1, [pc, #156]	; (801a520 <__ieee754_pow+0x218>)
 801a484:	f7e6 f9ec 	bl	8000860 <__aeabi_ddiv>
 801a488:	2d00      	cmp	r5, #0
 801a48a:	da9d      	bge.n	801a3c8 <__ieee754_pow+0xc0>
 801a48c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a490:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a494:	ea54 030b 	orrs.w	r3, r4, fp
 801a498:	d108      	bne.n	801a4ac <__ieee754_pow+0x1a4>
 801a49a:	4602      	mov	r2, r0
 801a49c:	460b      	mov	r3, r1
 801a49e:	4610      	mov	r0, r2
 801a4a0:	4619      	mov	r1, r3
 801a4a2:	f7e5 fefb 	bl	800029c <__aeabi_dsub>
 801a4a6:	4602      	mov	r2, r0
 801a4a8:	460b      	mov	r3, r1
 801a4aa:	e7ac      	b.n	801a406 <__ieee754_pow+0xfe>
 801a4ac:	f1bb 0f01 	cmp.w	fp, #1
 801a4b0:	d18a      	bne.n	801a3c8 <__ieee754_pow+0xc0>
 801a4b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a4b6:	4619      	mov	r1, r3
 801a4b8:	e786      	b.n	801a3c8 <__ieee754_pow+0xc0>
 801a4ba:	0fed      	lsrs	r5, r5, #31
 801a4bc:	1e6b      	subs	r3, r5, #1
 801a4be:	930d      	str	r3, [sp, #52]	; 0x34
 801a4c0:	ea5b 0303 	orrs.w	r3, fp, r3
 801a4c4:	d102      	bne.n	801a4cc <__ieee754_pow+0x1c4>
 801a4c6:	4632      	mov	r2, r6
 801a4c8:	463b      	mov	r3, r7
 801a4ca:	e7e8      	b.n	801a49e <__ieee754_pow+0x196>
 801a4cc:	4b16      	ldr	r3, [pc, #88]	; (801a528 <__ieee754_pow+0x220>)
 801a4ce:	4598      	cmp	r8, r3
 801a4d0:	f340 80fe 	ble.w	801a6d0 <__ieee754_pow+0x3c8>
 801a4d4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a4d8:	4598      	cmp	r8, r3
 801a4da:	dd0a      	ble.n	801a4f2 <__ieee754_pow+0x1ea>
 801a4dc:	4b0f      	ldr	r3, [pc, #60]	; (801a51c <__ieee754_pow+0x214>)
 801a4de:	429c      	cmp	r4, r3
 801a4e0:	dc0d      	bgt.n	801a4fe <__ieee754_pow+0x1f6>
 801a4e2:	f1b9 0f00 	cmp.w	r9, #0
 801a4e6:	f6bf af6d 	bge.w	801a3c4 <__ieee754_pow+0xbc>
 801a4ea:	a307      	add	r3, pc, #28	; (adr r3, 801a508 <__ieee754_pow+0x200>)
 801a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4f0:	e79f      	b.n	801a432 <__ieee754_pow+0x12a>
 801a4f2:	4b0e      	ldr	r3, [pc, #56]	; (801a52c <__ieee754_pow+0x224>)
 801a4f4:	429c      	cmp	r4, r3
 801a4f6:	ddf4      	ble.n	801a4e2 <__ieee754_pow+0x1da>
 801a4f8:	4b09      	ldr	r3, [pc, #36]	; (801a520 <__ieee754_pow+0x218>)
 801a4fa:	429c      	cmp	r4, r3
 801a4fc:	dd18      	ble.n	801a530 <__ieee754_pow+0x228>
 801a4fe:	f1b9 0f00 	cmp.w	r9, #0
 801a502:	dcf2      	bgt.n	801a4ea <__ieee754_pow+0x1e2>
 801a504:	e75e      	b.n	801a3c4 <__ieee754_pow+0xbc>
 801a506:	bf00      	nop
 801a508:	8800759c 	.word	0x8800759c
 801a50c:	7e37e43c 	.word	0x7e37e43c
 801a510:	7ff00000 	.word	0x7ff00000
 801a514:	0801c349 	.word	0x0801c349
 801a518:	433fffff 	.word	0x433fffff
 801a51c:	3fefffff 	.word	0x3fefffff
 801a520:	3ff00000 	.word	0x3ff00000
 801a524:	3fe00000 	.word	0x3fe00000
 801a528:	41e00000 	.word	0x41e00000
 801a52c:	3feffffe 	.word	0x3feffffe
 801a530:	2200      	movs	r2, #0
 801a532:	4b63      	ldr	r3, [pc, #396]	; (801a6c0 <__ieee754_pow+0x3b8>)
 801a534:	f7e5 feb2 	bl	800029c <__aeabi_dsub>
 801a538:	a355      	add	r3, pc, #340	; (adr r3, 801a690 <__ieee754_pow+0x388>)
 801a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a53e:	4604      	mov	r4, r0
 801a540:	460d      	mov	r5, r1
 801a542:	f7e6 f863 	bl	800060c <__aeabi_dmul>
 801a546:	a354      	add	r3, pc, #336	; (adr r3, 801a698 <__ieee754_pow+0x390>)
 801a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a54c:	4606      	mov	r6, r0
 801a54e:	460f      	mov	r7, r1
 801a550:	4620      	mov	r0, r4
 801a552:	4629      	mov	r1, r5
 801a554:	f7e6 f85a 	bl	800060c <__aeabi_dmul>
 801a558:	2200      	movs	r2, #0
 801a55a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a55e:	4b59      	ldr	r3, [pc, #356]	; (801a6c4 <__ieee754_pow+0x3bc>)
 801a560:	4620      	mov	r0, r4
 801a562:	4629      	mov	r1, r5
 801a564:	f7e6 f852 	bl	800060c <__aeabi_dmul>
 801a568:	4602      	mov	r2, r0
 801a56a:	460b      	mov	r3, r1
 801a56c:	a14c      	add	r1, pc, #304	; (adr r1, 801a6a0 <__ieee754_pow+0x398>)
 801a56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a572:	f7e5 fe93 	bl	800029c <__aeabi_dsub>
 801a576:	4622      	mov	r2, r4
 801a578:	462b      	mov	r3, r5
 801a57a:	f7e6 f847 	bl	800060c <__aeabi_dmul>
 801a57e:	4602      	mov	r2, r0
 801a580:	460b      	mov	r3, r1
 801a582:	2000      	movs	r0, #0
 801a584:	4950      	ldr	r1, [pc, #320]	; (801a6c8 <__ieee754_pow+0x3c0>)
 801a586:	f7e5 fe89 	bl	800029c <__aeabi_dsub>
 801a58a:	4622      	mov	r2, r4
 801a58c:	462b      	mov	r3, r5
 801a58e:	4680      	mov	r8, r0
 801a590:	4689      	mov	r9, r1
 801a592:	4620      	mov	r0, r4
 801a594:	4629      	mov	r1, r5
 801a596:	f7e6 f839 	bl	800060c <__aeabi_dmul>
 801a59a:	4602      	mov	r2, r0
 801a59c:	460b      	mov	r3, r1
 801a59e:	4640      	mov	r0, r8
 801a5a0:	4649      	mov	r1, r9
 801a5a2:	f7e6 f833 	bl	800060c <__aeabi_dmul>
 801a5a6:	a340      	add	r3, pc, #256	; (adr r3, 801a6a8 <__ieee754_pow+0x3a0>)
 801a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ac:	f7e6 f82e 	bl	800060c <__aeabi_dmul>
 801a5b0:	4602      	mov	r2, r0
 801a5b2:	460b      	mov	r3, r1
 801a5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5b8:	f7e5 fe70 	bl	800029c <__aeabi_dsub>
 801a5bc:	4602      	mov	r2, r0
 801a5be:	460b      	mov	r3, r1
 801a5c0:	4604      	mov	r4, r0
 801a5c2:	460d      	mov	r5, r1
 801a5c4:	4630      	mov	r0, r6
 801a5c6:	4639      	mov	r1, r7
 801a5c8:	f7e5 fe6a 	bl	80002a0 <__adddf3>
 801a5cc:	2000      	movs	r0, #0
 801a5ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a5d2:	4632      	mov	r2, r6
 801a5d4:	463b      	mov	r3, r7
 801a5d6:	f7e5 fe61 	bl	800029c <__aeabi_dsub>
 801a5da:	4602      	mov	r2, r0
 801a5dc:	460b      	mov	r3, r1
 801a5de:	4620      	mov	r0, r4
 801a5e0:	4629      	mov	r1, r5
 801a5e2:	f7e5 fe5b 	bl	800029c <__aeabi_dsub>
 801a5e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a5e8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801a5ec:	4313      	orrs	r3, r2
 801a5ee:	4606      	mov	r6, r0
 801a5f0:	460f      	mov	r7, r1
 801a5f2:	f040 81eb 	bne.w	801a9cc <__ieee754_pow+0x6c4>
 801a5f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a6b0 <__ieee754_pow+0x3a8>
 801a5fa:	e9dd 4500 	ldrd	r4, r5, [sp]
 801a5fe:	2400      	movs	r4, #0
 801a600:	4622      	mov	r2, r4
 801a602:	462b      	mov	r3, r5
 801a604:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a608:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a60c:	f7e5 fe46 	bl	800029c <__aeabi_dsub>
 801a610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a614:	f7e5 fffa 	bl	800060c <__aeabi_dmul>
 801a618:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a61c:	4680      	mov	r8, r0
 801a61e:	4689      	mov	r9, r1
 801a620:	4630      	mov	r0, r6
 801a622:	4639      	mov	r1, r7
 801a624:	f7e5 fff2 	bl	800060c <__aeabi_dmul>
 801a628:	4602      	mov	r2, r0
 801a62a:	460b      	mov	r3, r1
 801a62c:	4640      	mov	r0, r8
 801a62e:	4649      	mov	r1, r9
 801a630:	f7e5 fe36 	bl	80002a0 <__adddf3>
 801a634:	4622      	mov	r2, r4
 801a636:	462b      	mov	r3, r5
 801a638:	4680      	mov	r8, r0
 801a63a:	4689      	mov	r9, r1
 801a63c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a640:	f7e5 ffe4 	bl	800060c <__aeabi_dmul>
 801a644:	460b      	mov	r3, r1
 801a646:	4604      	mov	r4, r0
 801a648:	460d      	mov	r5, r1
 801a64a:	4602      	mov	r2, r0
 801a64c:	4649      	mov	r1, r9
 801a64e:	4640      	mov	r0, r8
 801a650:	e9cd 4500 	strd	r4, r5, [sp]
 801a654:	f7e5 fe24 	bl	80002a0 <__adddf3>
 801a658:	4b1c      	ldr	r3, [pc, #112]	; (801a6cc <__ieee754_pow+0x3c4>)
 801a65a:	4299      	cmp	r1, r3
 801a65c:	4606      	mov	r6, r0
 801a65e:	460f      	mov	r7, r1
 801a660:	468b      	mov	fp, r1
 801a662:	f340 82f7 	ble.w	801ac54 <__ieee754_pow+0x94c>
 801a666:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a66a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a66e:	4303      	orrs	r3, r0
 801a670:	f000 81ea 	beq.w	801aa48 <__ieee754_pow+0x740>
 801a674:	a310      	add	r3, pc, #64	; (adr r3, 801a6b8 <__ieee754_pow+0x3b0>)
 801a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a67a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a67e:	f7e5 ffc5 	bl	800060c <__aeabi_dmul>
 801a682:	a30d      	add	r3, pc, #52	; (adr r3, 801a6b8 <__ieee754_pow+0x3b0>)
 801a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a688:	e6d5      	b.n	801a436 <__ieee754_pow+0x12e>
 801a68a:	bf00      	nop
 801a68c:	f3af 8000 	nop.w
 801a690:	60000000 	.word	0x60000000
 801a694:	3ff71547 	.word	0x3ff71547
 801a698:	f85ddf44 	.word	0xf85ddf44
 801a69c:	3e54ae0b 	.word	0x3e54ae0b
 801a6a0:	55555555 	.word	0x55555555
 801a6a4:	3fd55555 	.word	0x3fd55555
 801a6a8:	652b82fe 	.word	0x652b82fe
 801a6ac:	3ff71547 	.word	0x3ff71547
 801a6b0:	00000000 	.word	0x00000000
 801a6b4:	bff00000 	.word	0xbff00000
 801a6b8:	8800759c 	.word	0x8800759c
 801a6bc:	7e37e43c 	.word	0x7e37e43c
 801a6c0:	3ff00000 	.word	0x3ff00000
 801a6c4:	3fd00000 	.word	0x3fd00000
 801a6c8:	3fe00000 	.word	0x3fe00000
 801a6cc:	408fffff 	.word	0x408fffff
 801a6d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801a6d4:	f04f 0200 	mov.w	r2, #0
 801a6d8:	da05      	bge.n	801a6e6 <__ieee754_pow+0x3de>
 801a6da:	4bd3      	ldr	r3, [pc, #844]	; (801aa28 <__ieee754_pow+0x720>)
 801a6dc:	f7e5 ff96 	bl	800060c <__aeabi_dmul>
 801a6e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801a6e4:	460c      	mov	r4, r1
 801a6e6:	1523      	asrs	r3, r4, #20
 801a6e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a6ec:	4413      	add	r3, r2
 801a6ee:	9309      	str	r3, [sp, #36]	; 0x24
 801a6f0:	4bce      	ldr	r3, [pc, #824]	; (801aa2c <__ieee754_pow+0x724>)
 801a6f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a6f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801a6fa:	429c      	cmp	r4, r3
 801a6fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a700:	dd08      	ble.n	801a714 <__ieee754_pow+0x40c>
 801a702:	4bcb      	ldr	r3, [pc, #812]	; (801aa30 <__ieee754_pow+0x728>)
 801a704:	429c      	cmp	r4, r3
 801a706:	f340 815e 	ble.w	801a9c6 <__ieee754_pow+0x6be>
 801a70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a70c:	3301      	adds	r3, #1
 801a70e:	9309      	str	r3, [sp, #36]	; 0x24
 801a710:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801a714:	f04f 0a00 	mov.w	sl, #0
 801a718:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a71c:	930c      	str	r3, [sp, #48]	; 0x30
 801a71e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a720:	4bc4      	ldr	r3, [pc, #784]	; (801aa34 <__ieee754_pow+0x72c>)
 801a722:	4413      	add	r3, r2
 801a724:	ed93 7b00 	vldr	d7, [r3]
 801a728:	4629      	mov	r1, r5
 801a72a:	ec53 2b17 	vmov	r2, r3, d7
 801a72e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a732:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a736:	f7e5 fdb1 	bl	800029c <__aeabi_dsub>
 801a73a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a73e:	4606      	mov	r6, r0
 801a740:	460f      	mov	r7, r1
 801a742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a746:	f7e5 fdab 	bl	80002a0 <__adddf3>
 801a74a:	4602      	mov	r2, r0
 801a74c:	460b      	mov	r3, r1
 801a74e:	2000      	movs	r0, #0
 801a750:	49b9      	ldr	r1, [pc, #740]	; (801aa38 <__ieee754_pow+0x730>)
 801a752:	f7e6 f885 	bl	8000860 <__aeabi_ddiv>
 801a756:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801a75a:	4602      	mov	r2, r0
 801a75c:	460b      	mov	r3, r1
 801a75e:	4630      	mov	r0, r6
 801a760:	4639      	mov	r1, r7
 801a762:	f7e5 ff53 	bl	800060c <__aeabi_dmul>
 801a766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a76a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801a76e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801a772:	2300      	movs	r3, #0
 801a774:	9302      	str	r3, [sp, #8]
 801a776:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a77a:	106d      	asrs	r5, r5, #1
 801a77c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801a780:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801a784:	2200      	movs	r2, #0
 801a786:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801a78a:	4640      	mov	r0, r8
 801a78c:	4649      	mov	r1, r9
 801a78e:	4614      	mov	r4, r2
 801a790:	461d      	mov	r5, r3
 801a792:	f7e5 ff3b 	bl	800060c <__aeabi_dmul>
 801a796:	4602      	mov	r2, r0
 801a798:	460b      	mov	r3, r1
 801a79a:	4630      	mov	r0, r6
 801a79c:	4639      	mov	r1, r7
 801a79e:	f7e5 fd7d 	bl	800029c <__aeabi_dsub>
 801a7a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a7a6:	4606      	mov	r6, r0
 801a7a8:	460f      	mov	r7, r1
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	4629      	mov	r1, r5
 801a7ae:	f7e5 fd75 	bl	800029c <__aeabi_dsub>
 801a7b2:	4602      	mov	r2, r0
 801a7b4:	460b      	mov	r3, r1
 801a7b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a7ba:	f7e5 fd6f 	bl	800029c <__aeabi_dsub>
 801a7be:	4642      	mov	r2, r8
 801a7c0:	464b      	mov	r3, r9
 801a7c2:	f7e5 ff23 	bl	800060c <__aeabi_dmul>
 801a7c6:	4602      	mov	r2, r0
 801a7c8:	460b      	mov	r3, r1
 801a7ca:	4630      	mov	r0, r6
 801a7cc:	4639      	mov	r1, r7
 801a7ce:	f7e5 fd65 	bl	800029c <__aeabi_dsub>
 801a7d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801a7d6:	f7e5 ff19 	bl	800060c <__aeabi_dmul>
 801a7da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a7de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a7e2:	4610      	mov	r0, r2
 801a7e4:	4619      	mov	r1, r3
 801a7e6:	f7e5 ff11 	bl	800060c <__aeabi_dmul>
 801a7ea:	a37b      	add	r3, pc, #492	; (adr r3, 801a9d8 <__ieee754_pow+0x6d0>)
 801a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7f0:	4604      	mov	r4, r0
 801a7f2:	460d      	mov	r5, r1
 801a7f4:	f7e5 ff0a 	bl	800060c <__aeabi_dmul>
 801a7f8:	a379      	add	r3, pc, #484	; (adr r3, 801a9e0 <__ieee754_pow+0x6d8>)
 801a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fe:	f7e5 fd4f 	bl	80002a0 <__adddf3>
 801a802:	4622      	mov	r2, r4
 801a804:	462b      	mov	r3, r5
 801a806:	f7e5 ff01 	bl	800060c <__aeabi_dmul>
 801a80a:	a377      	add	r3, pc, #476	; (adr r3, 801a9e8 <__ieee754_pow+0x6e0>)
 801a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a810:	f7e5 fd46 	bl	80002a0 <__adddf3>
 801a814:	4622      	mov	r2, r4
 801a816:	462b      	mov	r3, r5
 801a818:	f7e5 fef8 	bl	800060c <__aeabi_dmul>
 801a81c:	a374      	add	r3, pc, #464	; (adr r3, 801a9f0 <__ieee754_pow+0x6e8>)
 801a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a822:	f7e5 fd3d 	bl	80002a0 <__adddf3>
 801a826:	4622      	mov	r2, r4
 801a828:	462b      	mov	r3, r5
 801a82a:	f7e5 feef 	bl	800060c <__aeabi_dmul>
 801a82e:	a372      	add	r3, pc, #456	; (adr r3, 801a9f8 <__ieee754_pow+0x6f0>)
 801a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a834:	f7e5 fd34 	bl	80002a0 <__adddf3>
 801a838:	4622      	mov	r2, r4
 801a83a:	462b      	mov	r3, r5
 801a83c:	f7e5 fee6 	bl	800060c <__aeabi_dmul>
 801a840:	a36f      	add	r3, pc, #444	; (adr r3, 801aa00 <__ieee754_pow+0x6f8>)
 801a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a846:	f7e5 fd2b 	bl	80002a0 <__adddf3>
 801a84a:	4622      	mov	r2, r4
 801a84c:	4606      	mov	r6, r0
 801a84e:	460f      	mov	r7, r1
 801a850:	462b      	mov	r3, r5
 801a852:	4620      	mov	r0, r4
 801a854:	4629      	mov	r1, r5
 801a856:	f7e5 fed9 	bl	800060c <__aeabi_dmul>
 801a85a:	4602      	mov	r2, r0
 801a85c:	460b      	mov	r3, r1
 801a85e:	4630      	mov	r0, r6
 801a860:	4639      	mov	r1, r7
 801a862:	f7e5 fed3 	bl	800060c <__aeabi_dmul>
 801a866:	4642      	mov	r2, r8
 801a868:	4604      	mov	r4, r0
 801a86a:	460d      	mov	r5, r1
 801a86c:	464b      	mov	r3, r9
 801a86e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a872:	f7e5 fd15 	bl	80002a0 <__adddf3>
 801a876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a87a:	f7e5 fec7 	bl	800060c <__aeabi_dmul>
 801a87e:	4622      	mov	r2, r4
 801a880:	462b      	mov	r3, r5
 801a882:	f7e5 fd0d 	bl	80002a0 <__adddf3>
 801a886:	4642      	mov	r2, r8
 801a888:	4606      	mov	r6, r0
 801a88a:	460f      	mov	r7, r1
 801a88c:	464b      	mov	r3, r9
 801a88e:	4640      	mov	r0, r8
 801a890:	4649      	mov	r1, r9
 801a892:	f7e5 febb 	bl	800060c <__aeabi_dmul>
 801a896:	2200      	movs	r2, #0
 801a898:	4b68      	ldr	r3, [pc, #416]	; (801aa3c <__ieee754_pow+0x734>)
 801a89a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a89e:	f7e5 fcff 	bl	80002a0 <__adddf3>
 801a8a2:	4632      	mov	r2, r6
 801a8a4:	463b      	mov	r3, r7
 801a8a6:	f7e5 fcfb 	bl	80002a0 <__adddf3>
 801a8aa:	9802      	ldr	r0, [sp, #8]
 801a8ac:	460d      	mov	r5, r1
 801a8ae:	4604      	mov	r4, r0
 801a8b0:	4602      	mov	r2, r0
 801a8b2:	460b      	mov	r3, r1
 801a8b4:	4640      	mov	r0, r8
 801a8b6:	4649      	mov	r1, r9
 801a8b8:	f7e5 fea8 	bl	800060c <__aeabi_dmul>
 801a8bc:	2200      	movs	r2, #0
 801a8be:	4680      	mov	r8, r0
 801a8c0:	4689      	mov	r9, r1
 801a8c2:	4b5e      	ldr	r3, [pc, #376]	; (801aa3c <__ieee754_pow+0x734>)
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	4629      	mov	r1, r5
 801a8c8:	f7e5 fce8 	bl	800029c <__aeabi_dsub>
 801a8cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a8d0:	f7e5 fce4 	bl	800029c <__aeabi_dsub>
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	4630      	mov	r0, r6
 801a8da:	4639      	mov	r1, r7
 801a8dc:	f7e5 fcde 	bl	800029c <__aeabi_dsub>
 801a8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8e4:	f7e5 fe92 	bl	800060c <__aeabi_dmul>
 801a8e8:	4622      	mov	r2, r4
 801a8ea:	4606      	mov	r6, r0
 801a8ec:	460f      	mov	r7, r1
 801a8ee:	462b      	mov	r3, r5
 801a8f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a8f4:	f7e5 fe8a 	bl	800060c <__aeabi_dmul>
 801a8f8:	4602      	mov	r2, r0
 801a8fa:	460b      	mov	r3, r1
 801a8fc:	4630      	mov	r0, r6
 801a8fe:	4639      	mov	r1, r7
 801a900:	f7e5 fcce 	bl	80002a0 <__adddf3>
 801a904:	4606      	mov	r6, r0
 801a906:	460f      	mov	r7, r1
 801a908:	4602      	mov	r2, r0
 801a90a:	460b      	mov	r3, r1
 801a90c:	4640      	mov	r0, r8
 801a90e:	4649      	mov	r1, r9
 801a910:	f7e5 fcc6 	bl	80002a0 <__adddf3>
 801a914:	9802      	ldr	r0, [sp, #8]
 801a916:	a33c      	add	r3, pc, #240	; (adr r3, 801aa08 <__ieee754_pow+0x700>)
 801a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a91c:	4604      	mov	r4, r0
 801a91e:	460d      	mov	r5, r1
 801a920:	f7e5 fe74 	bl	800060c <__aeabi_dmul>
 801a924:	4642      	mov	r2, r8
 801a926:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a92a:	464b      	mov	r3, r9
 801a92c:	4620      	mov	r0, r4
 801a92e:	4629      	mov	r1, r5
 801a930:	f7e5 fcb4 	bl	800029c <__aeabi_dsub>
 801a934:	4602      	mov	r2, r0
 801a936:	460b      	mov	r3, r1
 801a938:	4630      	mov	r0, r6
 801a93a:	4639      	mov	r1, r7
 801a93c:	f7e5 fcae 	bl	800029c <__aeabi_dsub>
 801a940:	a333      	add	r3, pc, #204	; (adr r3, 801aa10 <__ieee754_pow+0x708>)
 801a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a946:	f7e5 fe61 	bl	800060c <__aeabi_dmul>
 801a94a:	a333      	add	r3, pc, #204	; (adr r3, 801aa18 <__ieee754_pow+0x710>)
 801a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a950:	4606      	mov	r6, r0
 801a952:	460f      	mov	r7, r1
 801a954:	4620      	mov	r0, r4
 801a956:	4629      	mov	r1, r5
 801a958:	f7e5 fe58 	bl	800060c <__aeabi_dmul>
 801a95c:	4602      	mov	r2, r0
 801a95e:	460b      	mov	r3, r1
 801a960:	4630      	mov	r0, r6
 801a962:	4639      	mov	r1, r7
 801a964:	f7e5 fc9c 	bl	80002a0 <__adddf3>
 801a968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a96a:	4b35      	ldr	r3, [pc, #212]	; (801aa40 <__ieee754_pow+0x738>)
 801a96c:	4413      	add	r3, r2
 801a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a972:	f7e5 fc95 	bl	80002a0 <__adddf3>
 801a976:	4604      	mov	r4, r0
 801a978:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a97a:	460d      	mov	r5, r1
 801a97c:	f7e5 fddc 	bl	8000538 <__aeabi_i2d>
 801a980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a982:	4b30      	ldr	r3, [pc, #192]	; (801aa44 <__ieee754_pow+0x73c>)
 801a984:	4413      	add	r3, r2
 801a986:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a98a:	4606      	mov	r6, r0
 801a98c:	460f      	mov	r7, r1
 801a98e:	4622      	mov	r2, r4
 801a990:	462b      	mov	r3, r5
 801a992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a996:	f7e5 fc83 	bl	80002a0 <__adddf3>
 801a99a:	4642      	mov	r2, r8
 801a99c:	464b      	mov	r3, r9
 801a99e:	f7e5 fc7f 	bl	80002a0 <__adddf3>
 801a9a2:	4632      	mov	r2, r6
 801a9a4:	463b      	mov	r3, r7
 801a9a6:	f7e5 fc7b 	bl	80002a0 <__adddf3>
 801a9aa:	9802      	ldr	r0, [sp, #8]
 801a9ac:	4632      	mov	r2, r6
 801a9ae:	463b      	mov	r3, r7
 801a9b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a9b4:	f7e5 fc72 	bl	800029c <__aeabi_dsub>
 801a9b8:	4642      	mov	r2, r8
 801a9ba:	464b      	mov	r3, r9
 801a9bc:	f7e5 fc6e 	bl	800029c <__aeabi_dsub>
 801a9c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a9c4:	e607      	b.n	801a5d6 <__ieee754_pow+0x2ce>
 801a9c6:	f04f 0a01 	mov.w	sl, #1
 801a9ca:	e6a5      	b.n	801a718 <__ieee754_pow+0x410>
 801a9cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801aa20 <__ieee754_pow+0x718>
 801a9d0:	e613      	b.n	801a5fa <__ieee754_pow+0x2f2>
 801a9d2:	bf00      	nop
 801a9d4:	f3af 8000 	nop.w
 801a9d8:	4a454eef 	.word	0x4a454eef
 801a9dc:	3fca7e28 	.word	0x3fca7e28
 801a9e0:	93c9db65 	.word	0x93c9db65
 801a9e4:	3fcd864a 	.word	0x3fcd864a
 801a9e8:	a91d4101 	.word	0xa91d4101
 801a9ec:	3fd17460 	.word	0x3fd17460
 801a9f0:	518f264d 	.word	0x518f264d
 801a9f4:	3fd55555 	.word	0x3fd55555
 801a9f8:	db6fabff 	.word	0xdb6fabff
 801a9fc:	3fdb6db6 	.word	0x3fdb6db6
 801aa00:	33333303 	.word	0x33333303
 801aa04:	3fe33333 	.word	0x3fe33333
 801aa08:	e0000000 	.word	0xe0000000
 801aa0c:	3feec709 	.word	0x3feec709
 801aa10:	dc3a03fd 	.word	0xdc3a03fd
 801aa14:	3feec709 	.word	0x3feec709
 801aa18:	145b01f5 	.word	0x145b01f5
 801aa1c:	be3e2fe0 	.word	0xbe3e2fe0
 801aa20:	00000000 	.word	0x00000000
 801aa24:	3ff00000 	.word	0x3ff00000
 801aa28:	43400000 	.word	0x43400000
 801aa2c:	0003988e 	.word	0x0003988e
 801aa30:	000bb679 	.word	0x000bb679
 801aa34:	0801c710 	.word	0x0801c710
 801aa38:	3ff00000 	.word	0x3ff00000
 801aa3c:	40080000 	.word	0x40080000
 801aa40:	0801c730 	.word	0x0801c730
 801aa44:	0801c720 	.word	0x0801c720
 801aa48:	a3b4      	add	r3, pc, #720	; (adr r3, 801ad1c <__ieee754_pow+0xa14>)
 801aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa4e:	4640      	mov	r0, r8
 801aa50:	4649      	mov	r1, r9
 801aa52:	f7e5 fc25 	bl	80002a0 <__adddf3>
 801aa56:	4622      	mov	r2, r4
 801aa58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aa5c:	462b      	mov	r3, r5
 801aa5e:	4630      	mov	r0, r6
 801aa60:	4639      	mov	r1, r7
 801aa62:	f7e5 fc1b 	bl	800029c <__aeabi_dsub>
 801aa66:	4602      	mov	r2, r0
 801aa68:	460b      	mov	r3, r1
 801aa6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa6e:	f7e6 f85d 	bl	8000b2c <__aeabi_dcmpgt>
 801aa72:	2800      	cmp	r0, #0
 801aa74:	f47f adfe 	bne.w	801a674 <__ieee754_pow+0x36c>
 801aa78:	4aa3      	ldr	r2, [pc, #652]	; (801ad08 <__ieee754_pow+0xa00>)
 801aa7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aa7e:	4293      	cmp	r3, r2
 801aa80:	f340 810a 	ble.w	801ac98 <__ieee754_pow+0x990>
 801aa84:	151b      	asrs	r3, r3, #20
 801aa86:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801aa8a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801aa8e:	fa4a f303 	asr.w	r3, sl, r3
 801aa92:	445b      	add	r3, fp
 801aa94:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801aa98:	4e9c      	ldr	r6, [pc, #624]	; (801ad0c <__ieee754_pow+0xa04>)
 801aa9a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801aa9e:	4116      	asrs	r6, r2
 801aaa0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801aaa4:	2000      	movs	r0, #0
 801aaa6:	ea23 0106 	bic.w	r1, r3, r6
 801aaaa:	f1c2 0214 	rsb	r2, r2, #20
 801aaae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801aab2:	fa4a fa02 	asr.w	sl, sl, r2
 801aab6:	f1bb 0f00 	cmp.w	fp, #0
 801aaba:	4602      	mov	r2, r0
 801aabc:	460b      	mov	r3, r1
 801aabe:	4620      	mov	r0, r4
 801aac0:	4629      	mov	r1, r5
 801aac2:	bfb8      	it	lt
 801aac4:	f1ca 0a00 	rsblt	sl, sl, #0
 801aac8:	f7e5 fbe8 	bl	800029c <__aeabi_dsub>
 801aacc:	e9cd 0100 	strd	r0, r1, [sp]
 801aad0:	4642      	mov	r2, r8
 801aad2:	464b      	mov	r3, r9
 801aad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aad8:	f7e5 fbe2 	bl	80002a0 <__adddf3>
 801aadc:	2000      	movs	r0, #0
 801aade:	a378      	add	r3, pc, #480	; (adr r3, 801acc0 <__ieee754_pow+0x9b8>)
 801aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae4:	4604      	mov	r4, r0
 801aae6:	460d      	mov	r5, r1
 801aae8:	f7e5 fd90 	bl	800060c <__aeabi_dmul>
 801aaec:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aaf0:	4606      	mov	r6, r0
 801aaf2:	460f      	mov	r7, r1
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	4629      	mov	r1, r5
 801aaf8:	f7e5 fbd0 	bl	800029c <__aeabi_dsub>
 801aafc:	4602      	mov	r2, r0
 801aafe:	460b      	mov	r3, r1
 801ab00:	4640      	mov	r0, r8
 801ab02:	4649      	mov	r1, r9
 801ab04:	f7e5 fbca 	bl	800029c <__aeabi_dsub>
 801ab08:	a36f      	add	r3, pc, #444	; (adr r3, 801acc8 <__ieee754_pow+0x9c0>)
 801ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab0e:	f7e5 fd7d 	bl	800060c <__aeabi_dmul>
 801ab12:	a36f      	add	r3, pc, #444	; (adr r3, 801acd0 <__ieee754_pow+0x9c8>)
 801ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab18:	4680      	mov	r8, r0
 801ab1a:	4689      	mov	r9, r1
 801ab1c:	4620      	mov	r0, r4
 801ab1e:	4629      	mov	r1, r5
 801ab20:	f7e5 fd74 	bl	800060c <__aeabi_dmul>
 801ab24:	4602      	mov	r2, r0
 801ab26:	460b      	mov	r3, r1
 801ab28:	4640      	mov	r0, r8
 801ab2a:	4649      	mov	r1, r9
 801ab2c:	f7e5 fbb8 	bl	80002a0 <__adddf3>
 801ab30:	4604      	mov	r4, r0
 801ab32:	460d      	mov	r5, r1
 801ab34:	4602      	mov	r2, r0
 801ab36:	460b      	mov	r3, r1
 801ab38:	4630      	mov	r0, r6
 801ab3a:	4639      	mov	r1, r7
 801ab3c:	f7e5 fbb0 	bl	80002a0 <__adddf3>
 801ab40:	4632      	mov	r2, r6
 801ab42:	463b      	mov	r3, r7
 801ab44:	4680      	mov	r8, r0
 801ab46:	4689      	mov	r9, r1
 801ab48:	f7e5 fba8 	bl	800029c <__aeabi_dsub>
 801ab4c:	4602      	mov	r2, r0
 801ab4e:	460b      	mov	r3, r1
 801ab50:	4620      	mov	r0, r4
 801ab52:	4629      	mov	r1, r5
 801ab54:	f7e5 fba2 	bl	800029c <__aeabi_dsub>
 801ab58:	4642      	mov	r2, r8
 801ab5a:	4606      	mov	r6, r0
 801ab5c:	460f      	mov	r7, r1
 801ab5e:	464b      	mov	r3, r9
 801ab60:	4640      	mov	r0, r8
 801ab62:	4649      	mov	r1, r9
 801ab64:	f7e5 fd52 	bl	800060c <__aeabi_dmul>
 801ab68:	a35b      	add	r3, pc, #364	; (adr r3, 801acd8 <__ieee754_pow+0x9d0>)
 801ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab6e:	4604      	mov	r4, r0
 801ab70:	460d      	mov	r5, r1
 801ab72:	f7e5 fd4b 	bl	800060c <__aeabi_dmul>
 801ab76:	a35a      	add	r3, pc, #360	; (adr r3, 801ace0 <__ieee754_pow+0x9d8>)
 801ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab7c:	f7e5 fb8e 	bl	800029c <__aeabi_dsub>
 801ab80:	4622      	mov	r2, r4
 801ab82:	462b      	mov	r3, r5
 801ab84:	f7e5 fd42 	bl	800060c <__aeabi_dmul>
 801ab88:	a357      	add	r3, pc, #348	; (adr r3, 801ace8 <__ieee754_pow+0x9e0>)
 801ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab8e:	f7e5 fb87 	bl	80002a0 <__adddf3>
 801ab92:	4622      	mov	r2, r4
 801ab94:	462b      	mov	r3, r5
 801ab96:	f7e5 fd39 	bl	800060c <__aeabi_dmul>
 801ab9a:	a355      	add	r3, pc, #340	; (adr r3, 801acf0 <__ieee754_pow+0x9e8>)
 801ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba0:	f7e5 fb7c 	bl	800029c <__aeabi_dsub>
 801aba4:	4622      	mov	r2, r4
 801aba6:	462b      	mov	r3, r5
 801aba8:	f7e5 fd30 	bl	800060c <__aeabi_dmul>
 801abac:	a352      	add	r3, pc, #328	; (adr r3, 801acf8 <__ieee754_pow+0x9f0>)
 801abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb2:	f7e5 fb75 	bl	80002a0 <__adddf3>
 801abb6:	4622      	mov	r2, r4
 801abb8:	462b      	mov	r3, r5
 801abba:	f7e5 fd27 	bl	800060c <__aeabi_dmul>
 801abbe:	4602      	mov	r2, r0
 801abc0:	460b      	mov	r3, r1
 801abc2:	4640      	mov	r0, r8
 801abc4:	4649      	mov	r1, r9
 801abc6:	f7e5 fb69 	bl	800029c <__aeabi_dsub>
 801abca:	4604      	mov	r4, r0
 801abcc:	460d      	mov	r5, r1
 801abce:	4602      	mov	r2, r0
 801abd0:	460b      	mov	r3, r1
 801abd2:	4640      	mov	r0, r8
 801abd4:	4649      	mov	r1, r9
 801abd6:	f7e5 fd19 	bl	800060c <__aeabi_dmul>
 801abda:	2200      	movs	r2, #0
 801abdc:	e9cd 0100 	strd	r0, r1, [sp]
 801abe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801abe4:	4620      	mov	r0, r4
 801abe6:	4629      	mov	r1, r5
 801abe8:	f7e5 fb58 	bl	800029c <__aeabi_dsub>
 801abec:	4602      	mov	r2, r0
 801abee:	460b      	mov	r3, r1
 801abf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801abf4:	f7e5 fe34 	bl	8000860 <__aeabi_ddiv>
 801abf8:	4632      	mov	r2, r6
 801abfa:	4604      	mov	r4, r0
 801abfc:	460d      	mov	r5, r1
 801abfe:	463b      	mov	r3, r7
 801ac00:	4640      	mov	r0, r8
 801ac02:	4649      	mov	r1, r9
 801ac04:	f7e5 fd02 	bl	800060c <__aeabi_dmul>
 801ac08:	4632      	mov	r2, r6
 801ac0a:	463b      	mov	r3, r7
 801ac0c:	f7e5 fb48 	bl	80002a0 <__adddf3>
 801ac10:	4602      	mov	r2, r0
 801ac12:	460b      	mov	r3, r1
 801ac14:	4620      	mov	r0, r4
 801ac16:	4629      	mov	r1, r5
 801ac18:	f7e5 fb40 	bl	800029c <__aeabi_dsub>
 801ac1c:	4642      	mov	r2, r8
 801ac1e:	464b      	mov	r3, r9
 801ac20:	f7e5 fb3c 	bl	800029c <__aeabi_dsub>
 801ac24:	4602      	mov	r2, r0
 801ac26:	460b      	mov	r3, r1
 801ac28:	2000      	movs	r0, #0
 801ac2a:	4939      	ldr	r1, [pc, #228]	; (801ad10 <__ieee754_pow+0xa08>)
 801ac2c:	f7e5 fb36 	bl	800029c <__aeabi_dsub>
 801ac30:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801ac34:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ac38:	4602      	mov	r2, r0
 801ac3a:	460b      	mov	r3, r1
 801ac3c:	da2f      	bge.n	801ac9e <__ieee754_pow+0x996>
 801ac3e:	4650      	mov	r0, sl
 801ac40:	ec43 2b10 	vmov	d0, r2, r3
 801ac44:	f001 fa3c 	bl	801c0c0 <scalbn>
 801ac48:	ec51 0b10 	vmov	r0, r1, d0
 801ac4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ac50:	f7ff bbf1 	b.w	801a436 <__ieee754_pow+0x12e>
 801ac54:	4b2f      	ldr	r3, [pc, #188]	; (801ad14 <__ieee754_pow+0xa0c>)
 801ac56:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ac5a:	429e      	cmp	r6, r3
 801ac5c:	f77f af0c 	ble.w	801aa78 <__ieee754_pow+0x770>
 801ac60:	4b2d      	ldr	r3, [pc, #180]	; (801ad18 <__ieee754_pow+0xa10>)
 801ac62:	440b      	add	r3, r1
 801ac64:	4303      	orrs	r3, r0
 801ac66:	d00b      	beq.n	801ac80 <__ieee754_pow+0x978>
 801ac68:	a325      	add	r3, pc, #148	; (adr r3, 801ad00 <__ieee754_pow+0x9f8>)
 801ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ac72:	f7e5 fccb 	bl	800060c <__aeabi_dmul>
 801ac76:	a322      	add	r3, pc, #136	; (adr r3, 801ad00 <__ieee754_pow+0x9f8>)
 801ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7c:	f7ff bbdb 	b.w	801a436 <__ieee754_pow+0x12e>
 801ac80:	4622      	mov	r2, r4
 801ac82:	462b      	mov	r3, r5
 801ac84:	f7e5 fb0a 	bl	800029c <__aeabi_dsub>
 801ac88:	4642      	mov	r2, r8
 801ac8a:	464b      	mov	r3, r9
 801ac8c:	f7e5 ff44 	bl	8000b18 <__aeabi_dcmpge>
 801ac90:	2800      	cmp	r0, #0
 801ac92:	f43f aef1 	beq.w	801aa78 <__ieee754_pow+0x770>
 801ac96:	e7e7      	b.n	801ac68 <__ieee754_pow+0x960>
 801ac98:	f04f 0a00 	mov.w	sl, #0
 801ac9c:	e718      	b.n	801aad0 <__ieee754_pow+0x7c8>
 801ac9e:	4621      	mov	r1, r4
 801aca0:	e7d4      	b.n	801ac4c <__ieee754_pow+0x944>
 801aca2:	2000      	movs	r0, #0
 801aca4:	491a      	ldr	r1, [pc, #104]	; (801ad10 <__ieee754_pow+0xa08>)
 801aca6:	f7ff bb8f 	b.w	801a3c8 <__ieee754_pow+0xc0>
 801acaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801acae:	f7ff bb8b 	b.w	801a3c8 <__ieee754_pow+0xc0>
 801acb2:	4630      	mov	r0, r6
 801acb4:	4639      	mov	r1, r7
 801acb6:	f7ff bb87 	b.w	801a3c8 <__ieee754_pow+0xc0>
 801acba:	4693      	mov	fp, r2
 801acbc:	f7ff bb98 	b.w	801a3f0 <__ieee754_pow+0xe8>
 801acc0:	00000000 	.word	0x00000000
 801acc4:	3fe62e43 	.word	0x3fe62e43
 801acc8:	fefa39ef 	.word	0xfefa39ef
 801accc:	3fe62e42 	.word	0x3fe62e42
 801acd0:	0ca86c39 	.word	0x0ca86c39
 801acd4:	be205c61 	.word	0xbe205c61
 801acd8:	72bea4d0 	.word	0x72bea4d0
 801acdc:	3e663769 	.word	0x3e663769
 801ace0:	c5d26bf1 	.word	0xc5d26bf1
 801ace4:	3ebbbd41 	.word	0x3ebbbd41
 801ace8:	af25de2c 	.word	0xaf25de2c
 801acec:	3f11566a 	.word	0x3f11566a
 801acf0:	16bebd93 	.word	0x16bebd93
 801acf4:	3f66c16c 	.word	0x3f66c16c
 801acf8:	5555553e 	.word	0x5555553e
 801acfc:	3fc55555 	.word	0x3fc55555
 801ad00:	c2f8f359 	.word	0xc2f8f359
 801ad04:	01a56e1f 	.word	0x01a56e1f
 801ad08:	3fe00000 	.word	0x3fe00000
 801ad0c:	000fffff 	.word	0x000fffff
 801ad10:	3ff00000 	.word	0x3ff00000
 801ad14:	4090cbff 	.word	0x4090cbff
 801ad18:	3f6f3400 	.word	0x3f6f3400
 801ad1c:	652b82fe 	.word	0x652b82fe
 801ad20:	3c971547 	.word	0x3c971547
 801ad24:	00000000 	.word	0x00000000

0801ad28 <__ieee754_rem_pio2>:
 801ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad2c:	ec57 6b10 	vmov	r6, r7, d0
 801ad30:	4bc3      	ldr	r3, [pc, #780]	; (801b040 <__ieee754_rem_pio2+0x318>)
 801ad32:	b08d      	sub	sp, #52	; 0x34
 801ad34:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801ad38:	4598      	cmp	r8, r3
 801ad3a:	4604      	mov	r4, r0
 801ad3c:	9704      	str	r7, [sp, #16]
 801ad3e:	dc07      	bgt.n	801ad50 <__ieee754_rem_pio2+0x28>
 801ad40:	2200      	movs	r2, #0
 801ad42:	2300      	movs	r3, #0
 801ad44:	ed84 0b00 	vstr	d0, [r4]
 801ad48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ad4c:	2500      	movs	r5, #0
 801ad4e:	e027      	b.n	801ada0 <__ieee754_rem_pio2+0x78>
 801ad50:	4bbc      	ldr	r3, [pc, #752]	; (801b044 <__ieee754_rem_pio2+0x31c>)
 801ad52:	4598      	cmp	r8, r3
 801ad54:	dc75      	bgt.n	801ae42 <__ieee754_rem_pio2+0x11a>
 801ad56:	9b04      	ldr	r3, [sp, #16]
 801ad58:	4dbb      	ldr	r5, [pc, #748]	; (801b048 <__ieee754_rem_pio2+0x320>)
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	ee10 0a10 	vmov	r0, s0
 801ad60:	a3a9      	add	r3, pc, #676	; (adr r3, 801b008 <__ieee754_rem_pio2+0x2e0>)
 801ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad66:	4639      	mov	r1, r7
 801ad68:	dd36      	ble.n	801add8 <__ieee754_rem_pio2+0xb0>
 801ad6a:	f7e5 fa97 	bl	800029c <__aeabi_dsub>
 801ad6e:	45a8      	cmp	r8, r5
 801ad70:	4606      	mov	r6, r0
 801ad72:	460f      	mov	r7, r1
 801ad74:	d018      	beq.n	801ada8 <__ieee754_rem_pio2+0x80>
 801ad76:	a3a6      	add	r3, pc, #664	; (adr r3, 801b010 <__ieee754_rem_pio2+0x2e8>)
 801ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad7c:	f7e5 fa8e 	bl	800029c <__aeabi_dsub>
 801ad80:	4602      	mov	r2, r0
 801ad82:	460b      	mov	r3, r1
 801ad84:	e9c4 2300 	strd	r2, r3, [r4]
 801ad88:	4630      	mov	r0, r6
 801ad8a:	4639      	mov	r1, r7
 801ad8c:	f7e5 fa86 	bl	800029c <__aeabi_dsub>
 801ad90:	a39f      	add	r3, pc, #636	; (adr r3, 801b010 <__ieee754_rem_pio2+0x2e8>)
 801ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad96:	f7e5 fa81 	bl	800029c <__aeabi_dsub>
 801ad9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ad9e:	2501      	movs	r5, #1
 801ada0:	4628      	mov	r0, r5
 801ada2:	b00d      	add	sp, #52	; 0x34
 801ada4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ada8:	a39b      	add	r3, pc, #620	; (adr r3, 801b018 <__ieee754_rem_pio2+0x2f0>)
 801adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adae:	f7e5 fa75 	bl	800029c <__aeabi_dsub>
 801adb2:	a39b      	add	r3, pc, #620	; (adr r3, 801b020 <__ieee754_rem_pio2+0x2f8>)
 801adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adb8:	4606      	mov	r6, r0
 801adba:	460f      	mov	r7, r1
 801adbc:	f7e5 fa6e 	bl	800029c <__aeabi_dsub>
 801adc0:	4602      	mov	r2, r0
 801adc2:	460b      	mov	r3, r1
 801adc4:	e9c4 2300 	strd	r2, r3, [r4]
 801adc8:	4630      	mov	r0, r6
 801adca:	4639      	mov	r1, r7
 801adcc:	f7e5 fa66 	bl	800029c <__aeabi_dsub>
 801add0:	a393      	add	r3, pc, #588	; (adr r3, 801b020 <__ieee754_rem_pio2+0x2f8>)
 801add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add6:	e7de      	b.n	801ad96 <__ieee754_rem_pio2+0x6e>
 801add8:	f7e5 fa62 	bl	80002a0 <__adddf3>
 801addc:	45a8      	cmp	r8, r5
 801adde:	4606      	mov	r6, r0
 801ade0:	460f      	mov	r7, r1
 801ade2:	d016      	beq.n	801ae12 <__ieee754_rem_pio2+0xea>
 801ade4:	a38a      	add	r3, pc, #552	; (adr r3, 801b010 <__ieee754_rem_pio2+0x2e8>)
 801ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adea:	f7e5 fa59 	bl	80002a0 <__adddf3>
 801adee:	4602      	mov	r2, r0
 801adf0:	460b      	mov	r3, r1
 801adf2:	e9c4 2300 	strd	r2, r3, [r4]
 801adf6:	4630      	mov	r0, r6
 801adf8:	4639      	mov	r1, r7
 801adfa:	f7e5 fa4f 	bl	800029c <__aeabi_dsub>
 801adfe:	a384      	add	r3, pc, #528	; (adr r3, 801b010 <__ieee754_rem_pio2+0x2e8>)
 801ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae04:	f7e5 fa4c 	bl	80002a0 <__adddf3>
 801ae08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ae0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ae10:	e7c6      	b.n	801ada0 <__ieee754_rem_pio2+0x78>
 801ae12:	a381      	add	r3, pc, #516	; (adr r3, 801b018 <__ieee754_rem_pio2+0x2f0>)
 801ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae18:	f7e5 fa42 	bl	80002a0 <__adddf3>
 801ae1c:	a380      	add	r3, pc, #512	; (adr r3, 801b020 <__ieee754_rem_pio2+0x2f8>)
 801ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae22:	4606      	mov	r6, r0
 801ae24:	460f      	mov	r7, r1
 801ae26:	f7e5 fa3b 	bl	80002a0 <__adddf3>
 801ae2a:	4602      	mov	r2, r0
 801ae2c:	460b      	mov	r3, r1
 801ae2e:	e9c4 2300 	strd	r2, r3, [r4]
 801ae32:	4630      	mov	r0, r6
 801ae34:	4639      	mov	r1, r7
 801ae36:	f7e5 fa31 	bl	800029c <__aeabi_dsub>
 801ae3a:	a379      	add	r3, pc, #484	; (adr r3, 801b020 <__ieee754_rem_pio2+0x2f8>)
 801ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae40:	e7e0      	b.n	801ae04 <__ieee754_rem_pio2+0xdc>
 801ae42:	4b82      	ldr	r3, [pc, #520]	; (801b04c <__ieee754_rem_pio2+0x324>)
 801ae44:	4598      	cmp	r8, r3
 801ae46:	f300 80d0 	bgt.w	801afea <__ieee754_rem_pio2+0x2c2>
 801ae4a:	f7fe f939 	bl	80190c0 <fabs>
 801ae4e:	ec57 6b10 	vmov	r6, r7, d0
 801ae52:	ee10 0a10 	vmov	r0, s0
 801ae56:	a374      	add	r3, pc, #464	; (adr r3, 801b028 <__ieee754_rem_pio2+0x300>)
 801ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae5c:	4639      	mov	r1, r7
 801ae5e:	f7e5 fbd5 	bl	800060c <__aeabi_dmul>
 801ae62:	2200      	movs	r2, #0
 801ae64:	4b7a      	ldr	r3, [pc, #488]	; (801b050 <__ieee754_rem_pio2+0x328>)
 801ae66:	f7e5 fa1b 	bl	80002a0 <__adddf3>
 801ae6a:	f7e5 fe7f 	bl	8000b6c <__aeabi_d2iz>
 801ae6e:	4605      	mov	r5, r0
 801ae70:	f7e5 fb62 	bl	8000538 <__aeabi_i2d>
 801ae74:	a364      	add	r3, pc, #400	; (adr r3, 801b008 <__ieee754_rem_pio2+0x2e0>)
 801ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae7e:	f7e5 fbc5 	bl	800060c <__aeabi_dmul>
 801ae82:	4602      	mov	r2, r0
 801ae84:	460b      	mov	r3, r1
 801ae86:	4630      	mov	r0, r6
 801ae88:	4639      	mov	r1, r7
 801ae8a:	f7e5 fa07 	bl	800029c <__aeabi_dsub>
 801ae8e:	a360      	add	r3, pc, #384	; (adr r3, 801b010 <__ieee754_rem_pio2+0x2e8>)
 801ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae94:	4682      	mov	sl, r0
 801ae96:	468b      	mov	fp, r1
 801ae98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ae9c:	f7e5 fbb6 	bl	800060c <__aeabi_dmul>
 801aea0:	2d1f      	cmp	r5, #31
 801aea2:	4606      	mov	r6, r0
 801aea4:	460f      	mov	r7, r1
 801aea6:	dc0c      	bgt.n	801aec2 <__ieee754_rem_pio2+0x19a>
 801aea8:	1e6a      	subs	r2, r5, #1
 801aeaa:	4b6a      	ldr	r3, [pc, #424]	; (801b054 <__ieee754_rem_pio2+0x32c>)
 801aeac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aeb0:	4543      	cmp	r3, r8
 801aeb2:	d006      	beq.n	801aec2 <__ieee754_rem_pio2+0x19a>
 801aeb4:	4632      	mov	r2, r6
 801aeb6:	463b      	mov	r3, r7
 801aeb8:	4650      	mov	r0, sl
 801aeba:	4659      	mov	r1, fp
 801aebc:	f7e5 f9ee 	bl	800029c <__aeabi_dsub>
 801aec0:	e00e      	b.n	801aee0 <__ieee754_rem_pio2+0x1b8>
 801aec2:	4632      	mov	r2, r6
 801aec4:	463b      	mov	r3, r7
 801aec6:	4650      	mov	r0, sl
 801aec8:	4659      	mov	r1, fp
 801aeca:	f7e5 f9e7 	bl	800029c <__aeabi_dsub>
 801aece:	ea4f 5328 	mov.w	r3, r8, asr #20
 801aed2:	9305      	str	r3, [sp, #20]
 801aed4:	9a05      	ldr	r2, [sp, #20]
 801aed6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801aeda:	1ad3      	subs	r3, r2, r3
 801aedc:	2b10      	cmp	r3, #16
 801aede:	dc02      	bgt.n	801aee6 <__ieee754_rem_pio2+0x1be>
 801aee0:	e9c4 0100 	strd	r0, r1, [r4]
 801aee4:	e039      	b.n	801af5a <__ieee754_rem_pio2+0x232>
 801aee6:	a34c      	add	r3, pc, #304	; (adr r3, 801b018 <__ieee754_rem_pio2+0x2f0>)
 801aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aef0:	f7e5 fb8c 	bl	800060c <__aeabi_dmul>
 801aef4:	4606      	mov	r6, r0
 801aef6:	460f      	mov	r7, r1
 801aef8:	4602      	mov	r2, r0
 801aefa:	460b      	mov	r3, r1
 801aefc:	4650      	mov	r0, sl
 801aefe:	4659      	mov	r1, fp
 801af00:	f7e5 f9cc 	bl	800029c <__aeabi_dsub>
 801af04:	4602      	mov	r2, r0
 801af06:	460b      	mov	r3, r1
 801af08:	4680      	mov	r8, r0
 801af0a:	4689      	mov	r9, r1
 801af0c:	4650      	mov	r0, sl
 801af0e:	4659      	mov	r1, fp
 801af10:	f7e5 f9c4 	bl	800029c <__aeabi_dsub>
 801af14:	4632      	mov	r2, r6
 801af16:	463b      	mov	r3, r7
 801af18:	f7e5 f9c0 	bl	800029c <__aeabi_dsub>
 801af1c:	a340      	add	r3, pc, #256	; (adr r3, 801b020 <__ieee754_rem_pio2+0x2f8>)
 801af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af22:	4606      	mov	r6, r0
 801af24:	460f      	mov	r7, r1
 801af26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af2a:	f7e5 fb6f 	bl	800060c <__aeabi_dmul>
 801af2e:	4632      	mov	r2, r6
 801af30:	463b      	mov	r3, r7
 801af32:	f7e5 f9b3 	bl	800029c <__aeabi_dsub>
 801af36:	4602      	mov	r2, r0
 801af38:	460b      	mov	r3, r1
 801af3a:	4606      	mov	r6, r0
 801af3c:	460f      	mov	r7, r1
 801af3e:	4640      	mov	r0, r8
 801af40:	4649      	mov	r1, r9
 801af42:	f7e5 f9ab 	bl	800029c <__aeabi_dsub>
 801af46:	9a05      	ldr	r2, [sp, #20]
 801af48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801af4c:	1ad3      	subs	r3, r2, r3
 801af4e:	2b31      	cmp	r3, #49	; 0x31
 801af50:	dc20      	bgt.n	801af94 <__ieee754_rem_pio2+0x26c>
 801af52:	e9c4 0100 	strd	r0, r1, [r4]
 801af56:	46c2      	mov	sl, r8
 801af58:	46cb      	mov	fp, r9
 801af5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801af5e:	4650      	mov	r0, sl
 801af60:	4642      	mov	r2, r8
 801af62:	464b      	mov	r3, r9
 801af64:	4659      	mov	r1, fp
 801af66:	f7e5 f999 	bl	800029c <__aeabi_dsub>
 801af6a:	463b      	mov	r3, r7
 801af6c:	4632      	mov	r2, r6
 801af6e:	f7e5 f995 	bl	800029c <__aeabi_dsub>
 801af72:	9b04      	ldr	r3, [sp, #16]
 801af74:	2b00      	cmp	r3, #0
 801af76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801af7a:	f6bf af11 	bge.w	801ada0 <__ieee754_rem_pio2+0x78>
 801af7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801af82:	6063      	str	r3, [r4, #4]
 801af84:	f8c4 8000 	str.w	r8, [r4]
 801af88:	60a0      	str	r0, [r4, #8]
 801af8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af8e:	60e3      	str	r3, [r4, #12]
 801af90:	426d      	negs	r5, r5
 801af92:	e705      	b.n	801ada0 <__ieee754_rem_pio2+0x78>
 801af94:	a326      	add	r3, pc, #152	; (adr r3, 801b030 <__ieee754_rem_pio2+0x308>)
 801af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af9e:	f7e5 fb35 	bl	800060c <__aeabi_dmul>
 801afa2:	4606      	mov	r6, r0
 801afa4:	460f      	mov	r7, r1
 801afa6:	4602      	mov	r2, r0
 801afa8:	460b      	mov	r3, r1
 801afaa:	4640      	mov	r0, r8
 801afac:	4649      	mov	r1, r9
 801afae:	f7e5 f975 	bl	800029c <__aeabi_dsub>
 801afb2:	4602      	mov	r2, r0
 801afb4:	460b      	mov	r3, r1
 801afb6:	4682      	mov	sl, r0
 801afb8:	468b      	mov	fp, r1
 801afba:	4640      	mov	r0, r8
 801afbc:	4649      	mov	r1, r9
 801afbe:	f7e5 f96d 	bl	800029c <__aeabi_dsub>
 801afc2:	4632      	mov	r2, r6
 801afc4:	463b      	mov	r3, r7
 801afc6:	f7e5 f969 	bl	800029c <__aeabi_dsub>
 801afca:	a31b      	add	r3, pc, #108	; (adr r3, 801b038 <__ieee754_rem_pio2+0x310>)
 801afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd0:	4606      	mov	r6, r0
 801afd2:	460f      	mov	r7, r1
 801afd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801afd8:	f7e5 fb18 	bl	800060c <__aeabi_dmul>
 801afdc:	4632      	mov	r2, r6
 801afde:	463b      	mov	r3, r7
 801afe0:	f7e5 f95c 	bl	800029c <__aeabi_dsub>
 801afe4:	4606      	mov	r6, r0
 801afe6:	460f      	mov	r7, r1
 801afe8:	e764      	b.n	801aeb4 <__ieee754_rem_pio2+0x18c>
 801afea:	4b1b      	ldr	r3, [pc, #108]	; (801b058 <__ieee754_rem_pio2+0x330>)
 801afec:	4598      	cmp	r8, r3
 801afee:	dd35      	ble.n	801b05c <__ieee754_rem_pio2+0x334>
 801aff0:	ee10 2a10 	vmov	r2, s0
 801aff4:	463b      	mov	r3, r7
 801aff6:	4630      	mov	r0, r6
 801aff8:	4639      	mov	r1, r7
 801affa:	f7e5 f94f 	bl	800029c <__aeabi_dsub>
 801affe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b002:	e9c4 0100 	strd	r0, r1, [r4]
 801b006:	e6a1      	b.n	801ad4c <__ieee754_rem_pio2+0x24>
 801b008:	54400000 	.word	0x54400000
 801b00c:	3ff921fb 	.word	0x3ff921fb
 801b010:	1a626331 	.word	0x1a626331
 801b014:	3dd0b461 	.word	0x3dd0b461
 801b018:	1a600000 	.word	0x1a600000
 801b01c:	3dd0b461 	.word	0x3dd0b461
 801b020:	2e037073 	.word	0x2e037073
 801b024:	3ba3198a 	.word	0x3ba3198a
 801b028:	6dc9c883 	.word	0x6dc9c883
 801b02c:	3fe45f30 	.word	0x3fe45f30
 801b030:	2e000000 	.word	0x2e000000
 801b034:	3ba3198a 	.word	0x3ba3198a
 801b038:	252049c1 	.word	0x252049c1
 801b03c:	397b839a 	.word	0x397b839a
 801b040:	3fe921fb 	.word	0x3fe921fb
 801b044:	4002d97b 	.word	0x4002d97b
 801b048:	3ff921fb 	.word	0x3ff921fb
 801b04c:	413921fb 	.word	0x413921fb
 801b050:	3fe00000 	.word	0x3fe00000
 801b054:	0801c740 	.word	0x0801c740
 801b058:	7fefffff 	.word	0x7fefffff
 801b05c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801b060:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801b064:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801b068:	4630      	mov	r0, r6
 801b06a:	460f      	mov	r7, r1
 801b06c:	f7e5 fd7e 	bl	8000b6c <__aeabi_d2iz>
 801b070:	f7e5 fa62 	bl	8000538 <__aeabi_i2d>
 801b074:	4602      	mov	r2, r0
 801b076:	460b      	mov	r3, r1
 801b078:	4630      	mov	r0, r6
 801b07a:	4639      	mov	r1, r7
 801b07c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b080:	f7e5 f90c 	bl	800029c <__aeabi_dsub>
 801b084:	2200      	movs	r2, #0
 801b086:	4b1f      	ldr	r3, [pc, #124]	; (801b104 <__ieee754_rem_pio2+0x3dc>)
 801b088:	f7e5 fac0 	bl	800060c <__aeabi_dmul>
 801b08c:	460f      	mov	r7, r1
 801b08e:	4606      	mov	r6, r0
 801b090:	f7e5 fd6c 	bl	8000b6c <__aeabi_d2iz>
 801b094:	f7e5 fa50 	bl	8000538 <__aeabi_i2d>
 801b098:	4602      	mov	r2, r0
 801b09a:	460b      	mov	r3, r1
 801b09c:	4630      	mov	r0, r6
 801b09e:	4639      	mov	r1, r7
 801b0a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0a4:	f7e5 f8fa 	bl	800029c <__aeabi_dsub>
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	4b16      	ldr	r3, [pc, #88]	; (801b104 <__ieee754_rem_pio2+0x3dc>)
 801b0ac:	f7e5 faae 	bl	800060c <__aeabi_dmul>
 801b0b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801b0b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801b0b8:	f04f 0803 	mov.w	r8, #3
 801b0bc:	2600      	movs	r6, #0
 801b0be:	2700      	movs	r7, #0
 801b0c0:	4632      	mov	r2, r6
 801b0c2:	463b      	mov	r3, r7
 801b0c4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801b0c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 801b0cc:	f7e5 fd06 	bl	8000adc <__aeabi_dcmpeq>
 801b0d0:	b9b0      	cbnz	r0, 801b100 <__ieee754_rem_pio2+0x3d8>
 801b0d2:	4b0d      	ldr	r3, [pc, #52]	; (801b108 <__ieee754_rem_pio2+0x3e0>)
 801b0d4:	9301      	str	r3, [sp, #4]
 801b0d6:	2302      	movs	r3, #2
 801b0d8:	9300      	str	r3, [sp, #0]
 801b0da:	462a      	mov	r2, r5
 801b0dc:	4643      	mov	r3, r8
 801b0de:	4621      	mov	r1, r4
 801b0e0:	a806      	add	r0, sp, #24
 801b0e2:	f000 f98d 	bl	801b400 <__kernel_rem_pio2>
 801b0e6:	9b04      	ldr	r3, [sp, #16]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	4605      	mov	r5, r0
 801b0ec:	f6bf ae58 	bge.w	801ada0 <__ieee754_rem_pio2+0x78>
 801b0f0:	6863      	ldr	r3, [r4, #4]
 801b0f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b0f6:	6063      	str	r3, [r4, #4]
 801b0f8:	68e3      	ldr	r3, [r4, #12]
 801b0fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b0fe:	e746      	b.n	801af8e <__ieee754_rem_pio2+0x266>
 801b100:	46d0      	mov	r8, sl
 801b102:	e7dd      	b.n	801b0c0 <__ieee754_rem_pio2+0x398>
 801b104:	41700000 	.word	0x41700000
 801b108:	0801c7c0 	.word	0x0801c7c0

0801b10c <__ieee754_sqrt>:
 801b10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b110:	4955      	ldr	r1, [pc, #340]	; (801b268 <__ieee754_sqrt+0x15c>)
 801b112:	ec55 4b10 	vmov	r4, r5, d0
 801b116:	43a9      	bics	r1, r5
 801b118:	462b      	mov	r3, r5
 801b11a:	462a      	mov	r2, r5
 801b11c:	d112      	bne.n	801b144 <__ieee754_sqrt+0x38>
 801b11e:	ee10 2a10 	vmov	r2, s0
 801b122:	ee10 0a10 	vmov	r0, s0
 801b126:	4629      	mov	r1, r5
 801b128:	f7e5 fa70 	bl	800060c <__aeabi_dmul>
 801b12c:	4602      	mov	r2, r0
 801b12e:	460b      	mov	r3, r1
 801b130:	4620      	mov	r0, r4
 801b132:	4629      	mov	r1, r5
 801b134:	f7e5 f8b4 	bl	80002a0 <__adddf3>
 801b138:	4604      	mov	r4, r0
 801b13a:	460d      	mov	r5, r1
 801b13c:	ec45 4b10 	vmov	d0, r4, r5
 801b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b144:	2d00      	cmp	r5, #0
 801b146:	ee10 0a10 	vmov	r0, s0
 801b14a:	4621      	mov	r1, r4
 801b14c:	dc0f      	bgt.n	801b16e <__ieee754_sqrt+0x62>
 801b14e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b152:	4330      	orrs	r0, r6
 801b154:	d0f2      	beq.n	801b13c <__ieee754_sqrt+0x30>
 801b156:	b155      	cbz	r5, 801b16e <__ieee754_sqrt+0x62>
 801b158:	ee10 2a10 	vmov	r2, s0
 801b15c:	4620      	mov	r0, r4
 801b15e:	4629      	mov	r1, r5
 801b160:	f7e5 f89c 	bl	800029c <__aeabi_dsub>
 801b164:	4602      	mov	r2, r0
 801b166:	460b      	mov	r3, r1
 801b168:	f7e5 fb7a 	bl	8000860 <__aeabi_ddiv>
 801b16c:	e7e4      	b.n	801b138 <__ieee754_sqrt+0x2c>
 801b16e:	151b      	asrs	r3, r3, #20
 801b170:	d073      	beq.n	801b25a <__ieee754_sqrt+0x14e>
 801b172:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b176:	07dd      	lsls	r5, r3, #31
 801b178:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b17c:	bf48      	it	mi
 801b17e:	0fc8      	lsrmi	r0, r1, #31
 801b180:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801b184:	bf44      	itt	mi
 801b186:	0049      	lslmi	r1, r1, #1
 801b188:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801b18c:	2500      	movs	r5, #0
 801b18e:	1058      	asrs	r0, r3, #1
 801b190:	0fcb      	lsrs	r3, r1, #31
 801b192:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801b196:	0049      	lsls	r1, r1, #1
 801b198:	2316      	movs	r3, #22
 801b19a:	462c      	mov	r4, r5
 801b19c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801b1a0:	19a7      	adds	r7, r4, r6
 801b1a2:	4297      	cmp	r7, r2
 801b1a4:	bfde      	ittt	le
 801b1a6:	19bc      	addle	r4, r7, r6
 801b1a8:	1bd2      	suble	r2, r2, r7
 801b1aa:	19ad      	addle	r5, r5, r6
 801b1ac:	0fcf      	lsrs	r7, r1, #31
 801b1ae:	3b01      	subs	r3, #1
 801b1b0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801b1b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b1b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b1bc:	d1f0      	bne.n	801b1a0 <__ieee754_sqrt+0x94>
 801b1be:	f04f 0c20 	mov.w	ip, #32
 801b1c2:	469e      	mov	lr, r3
 801b1c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801b1c8:	42a2      	cmp	r2, r4
 801b1ca:	eb06 070e 	add.w	r7, r6, lr
 801b1ce:	dc02      	bgt.n	801b1d6 <__ieee754_sqrt+0xca>
 801b1d0:	d112      	bne.n	801b1f8 <__ieee754_sqrt+0xec>
 801b1d2:	428f      	cmp	r7, r1
 801b1d4:	d810      	bhi.n	801b1f8 <__ieee754_sqrt+0xec>
 801b1d6:	2f00      	cmp	r7, #0
 801b1d8:	eb07 0e06 	add.w	lr, r7, r6
 801b1dc:	da42      	bge.n	801b264 <__ieee754_sqrt+0x158>
 801b1de:	f1be 0f00 	cmp.w	lr, #0
 801b1e2:	db3f      	blt.n	801b264 <__ieee754_sqrt+0x158>
 801b1e4:	f104 0801 	add.w	r8, r4, #1
 801b1e8:	1b12      	subs	r2, r2, r4
 801b1ea:	428f      	cmp	r7, r1
 801b1ec:	bf88      	it	hi
 801b1ee:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801b1f2:	1bc9      	subs	r1, r1, r7
 801b1f4:	4433      	add	r3, r6
 801b1f6:	4644      	mov	r4, r8
 801b1f8:	0052      	lsls	r2, r2, #1
 801b1fa:	f1bc 0c01 	subs.w	ip, ip, #1
 801b1fe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801b202:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b206:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b20a:	d1dd      	bne.n	801b1c8 <__ieee754_sqrt+0xbc>
 801b20c:	430a      	orrs	r2, r1
 801b20e:	d006      	beq.n	801b21e <__ieee754_sqrt+0x112>
 801b210:	1c5c      	adds	r4, r3, #1
 801b212:	bf13      	iteet	ne
 801b214:	3301      	addne	r3, #1
 801b216:	3501      	addeq	r5, #1
 801b218:	4663      	moveq	r3, ip
 801b21a:	f023 0301 	bicne.w	r3, r3, #1
 801b21e:	106a      	asrs	r2, r5, #1
 801b220:	085b      	lsrs	r3, r3, #1
 801b222:	07e9      	lsls	r1, r5, #31
 801b224:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b228:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b22c:	bf48      	it	mi
 801b22e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b232:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801b236:	461c      	mov	r4, r3
 801b238:	e780      	b.n	801b13c <__ieee754_sqrt+0x30>
 801b23a:	0aca      	lsrs	r2, r1, #11
 801b23c:	3815      	subs	r0, #21
 801b23e:	0549      	lsls	r1, r1, #21
 801b240:	2a00      	cmp	r2, #0
 801b242:	d0fa      	beq.n	801b23a <__ieee754_sqrt+0x12e>
 801b244:	02d6      	lsls	r6, r2, #11
 801b246:	d50a      	bpl.n	801b25e <__ieee754_sqrt+0x152>
 801b248:	f1c3 0420 	rsb	r4, r3, #32
 801b24c:	fa21 f404 	lsr.w	r4, r1, r4
 801b250:	1e5d      	subs	r5, r3, #1
 801b252:	4099      	lsls	r1, r3
 801b254:	4322      	orrs	r2, r4
 801b256:	1b43      	subs	r3, r0, r5
 801b258:	e78b      	b.n	801b172 <__ieee754_sqrt+0x66>
 801b25a:	4618      	mov	r0, r3
 801b25c:	e7f0      	b.n	801b240 <__ieee754_sqrt+0x134>
 801b25e:	0052      	lsls	r2, r2, #1
 801b260:	3301      	adds	r3, #1
 801b262:	e7ef      	b.n	801b244 <__ieee754_sqrt+0x138>
 801b264:	46a0      	mov	r8, r4
 801b266:	e7bf      	b.n	801b1e8 <__ieee754_sqrt+0xdc>
 801b268:	7ff00000 	.word	0x7ff00000
 801b26c:	00000000 	.word	0x00000000

0801b270 <__kernel_cos>:
 801b270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b274:	ec59 8b10 	vmov	r8, r9, d0
 801b278:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801b27c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801b280:	ed2d 8b02 	vpush	{d8}
 801b284:	eeb0 8a41 	vmov.f32	s16, s2
 801b288:	eef0 8a61 	vmov.f32	s17, s3
 801b28c:	da07      	bge.n	801b29e <__kernel_cos+0x2e>
 801b28e:	ee10 0a10 	vmov	r0, s0
 801b292:	4649      	mov	r1, r9
 801b294:	f7e5 fc6a 	bl	8000b6c <__aeabi_d2iz>
 801b298:	2800      	cmp	r0, #0
 801b29a:	f000 8089 	beq.w	801b3b0 <__kernel_cos+0x140>
 801b29e:	4642      	mov	r2, r8
 801b2a0:	464b      	mov	r3, r9
 801b2a2:	4640      	mov	r0, r8
 801b2a4:	4649      	mov	r1, r9
 801b2a6:	f7e5 f9b1 	bl	800060c <__aeabi_dmul>
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	4b4e      	ldr	r3, [pc, #312]	; (801b3e8 <__kernel_cos+0x178>)
 801b2ae:	4604      	mov	r4, r0
 801b2b0:	460d      	mov	r5, r1
 801b2b2:	f7e5 f9ab 	bl	800060c <__aeabi_dmul>
 801b2b6:	a340      	add	r3, pc, #256	; (adr r3, 801b3b8 <__kernel_cos+0x148>)
 801b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2bc:	4682      	mov	sl, r0
 801b2be:	468b      	mov	fp, r1
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	4629      	mov	r1, r5
 801b2c4:	f7e5 f9a2 	bl	800060c <__aeabi_dmul>
 801b2c8:	a33d      	add	r3, pc, #244	; (adr r3, 801b3c0 <__kernel_cos+0x150>)
 801b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ce:	f7e4 ffe7 	bl	80002a0 <__adddf3>
 801b2d2:	4622      	mov	r2, r4
 801b2d4:	462b      	mov	r3, r5
 801b2d6:	f7e5 f999 	bl	800060c <__aeabi_dmul>
 801b2da:	a33b      	add	r3, pc, #236	; (adr r3, 801b3c8 <__kernel_cos+0x158>)
 801b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2e0:	f7e4 ffdc 	bl	800029c <__aeabi_dsub>
 801b2e4:	4622      	mov	r2, r4
 801b2e6:	462b      	mov	r3, r5
 801b2e8:	f7e5 f990 	bl	800060c <__aeabi_dmul>
 801b2ec:	a338      	add	r3, pc, #224	; (adr r3, 801b3d0 <__kernel_cos+0x160>)
 801b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2f2:	f7e4 ffd5 	bl	80002a0 <__adddf3>
 801b2f6:	4622      	mov	r2, r4
 801b2f8:	462b      	mov	r3, r5
 801b2fa:	f7e5 f987 	bl	800060c <__aeabi_dmul>
 801b2fe:	a336      	add	r3, pc, #216	; (adr r3, 801b3d8 <__kernel_cos+0x168>)
 801b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b304:	f7e4 ffca 	bl	800029c <__aeabi_dsub>
 801b308:	4622      	mov	r2, r4
 801b30a:	462b      	mov	r3, r5
 801b30c:	f7e5 f97e 	bl	800060c <__aeabi_dmul>
 801b310:	a333      	add	r3, pc, #204	; (adr r3, 801b3e0 <__kernel_cos+0x170>)
 801b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b316:	f7e4 ffc3 	bl	80002a0 <__adddf3>
 801b31a:	4622      	mov	r2, r4
 801b31c:	462b      	mov	r3, r5
 801b31e:	f7e5 f975 	bl	800060c <__aeabi_dmul>
 801b322:	4622      	mov	r2, r4
 801b324:	462b      	mov	r3, r5
 801b326:	f7e5 f971 	bl	800060c <__aeabi_dmul>
 801b32a:	ec53 2b18 	vmov	r2, r3, d8
 801b32e:	4604      	mov	r4, r0
 801b330:	460d      	mov	r5, r1
 801b332:	4640      	mov	r0, r8
 801b334:	4649      	mov	r1, r9
 801b336:	f7e5 f969 	bl	800060c <__aeabi_dmul>
 801b33a:	460b      	mov	r3, r1
 801b33c:	4602      	mov	r2, r0
 801b33e:	4629      	mov	r1, r5
 801b340:	4620      	mov	r0, r4
 801b342:	f7e4 ffab 	bl	800029c <__aeabi_dsub>
 801b346:	4b29      	ldr	r3, [pc, #164]	; (801b3ec <__kernel_cos+0x17c>)
 801b348:	429e      	cmp	r6, r3
 801b34a:	4680      	mov	r8, r0
 801b34c:	4689      	mov	r9, r1
 801b34e:	dc11      	bgt.n	801b374 <__kernel_cos+0x104>
 801b350:	4602      	mov	r2, r0
 801b352:	460b      	mov	r3, r1
 801b354:	4650      	mov	r0, sl
 801b356:	4659      	mov	r1, fp
 801b358:	f7e4 ffa0 	bl	800029c <__aeabi_dsub>
 801b35c:	460b      	mov	r3, r1
 801b35e:	4924      	ldr	r1, [pc, #144]	; (801b3f0 <__kernel_cos+0x180>)
 801b360:	4602      	mov	r2, r0
 801b362:	2000      	movs	r0, #0
 801b364:	f7e4 ff9a 	bl	800029c <__aeabi_dsub>
 801b368:	ecbd 8b02 	vpop	{d8}
 801b36c:	ec41 0b10 	vmov	d0, r0, r1
 801b370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b374:	4b1f      	ldr	r3, [pc, #124]	; (801b3f4 <__kernel_cos+0x184>)
 801b376:	491e      	ldr	r1, [pc, #120]	; (801b3f0 <__kernel_cos+0x180>)
 801b378:	429e      	cmp	r6, r3
 801b37a:	bfcc      	ite	gt
 801b37c:	4d1e      	ldrgt	r5, [pc, #120]	; (801b3f8 <__kernel_cos+0x188>)
 801b37e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801b382:	2400      	movs	r4, #0
 801b384:	4622      	mov	r2, r4
 801b386:	462b      	mov	r3, r5
 801b388:	2000      	movs	r0, #0
 801b38a:	f7e4 ff87 	bl	800029c <__aeabi_dsub>
 801b38e:	4622      	mov	r2, r4
 801b390:	4606      	mov	r6, r0
 801b392:	460f      	mov	r7, r1
 801b394:	462b      	mov	r3, r5
 801b396:	4650      	mov	r0, sl
 801b398:	4659      	mov	r1, fp
 801b39a:	f7e4 ff7f 	bl	800029c <__aeabi_dsub>
 801b39e:	4642      	mov	r2, r8
 801b3a0:	464b      	mov	r3, r9
 801b3a2:	f7e4 ff7b 	bl	800029c <__aeabi_dsub>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	460b      	mov	r3, r1
 801b3aa:	4630      	mov	r0, r6
 801b3ac:	4639      	mov	r1, r7
 801b3ae:	e7d9      	b.n	801b364 <__kernel_cos+0xf4>
 801b3b0:	2000      	movs	r0, #0
 801b3b2:	490f      	ldr	r1, [pc, #60]	; (801b3f0 <__kernel_cos+0x180>)
 801b3b4:	e7d8      	b.n	801b368 <__kernel_cos+0xf8>
 801b3b6:	bf00      	nop
 801b3b8:	be8838d4 	.word	0xbe8838d4
 801b3bc:	bda8fae9 	.word	0xbda8fae9
 801b3c0:	bdb4b1c4 	.word	0xbdb4b1c4
 801b3c4:	3e21ee9e 	.word	0x3e21ee9e
 801b3c8:	809c52ad 	.word	0x809c52ad
 801b3cc:	3e927e4f 	.word	0x3e927e4f
 801b3d0:	19cb1590 	.word	0x19cb1590
 801b3d4:	3efa01a0 	.word	0x3efa01a0
 801b3d8:	16c15177 	.word	0x16c15177
 801b3dc:	3f56c16c 	.word	0x3f56c16c
 801b3e0:	5555554c 	.word	0x5555554c
 801b3e4:	3fa55555 	.word	0x3fa55555
 801b3e8:	3fe00000 	.word	0x3fe00000
 801b3ec:	3fd33332 	.word	0x3fd33332
 801b3f0:	3ff00000 	.word	0x3ff00000
 801b3f4:	3fe90000 	.word	0x3fe90000
 801b3f8:	3fd20000 	.word	0x3fd20000
 801b3fc:	00000000 	.word	0x00000000

0801b400 <__kernel_rem_pio2>:
 801b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b404:	ed2d 8b02 	vpush	{d8}
 801b408:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801b40c:	1ed4      	subs	r4, r2, #3
 801b40e:	9308      	str	r3, [sp, #32]
 801b410:	9101      	str	r1, [sp, #4]
 801b412:	4bc5      	ldr	r3, [pc, #788]	; (801b728 <__kernel_rem_pio2+0x328>)
 801b414:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801b416:	9009      	str	r0, [sp, #36]	; 0x24
 801b418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b41c:	9304      	str	r3, [sp, #16]
 801b41e:	9b08      	ldr	r3, [sp, #32]
 801b420:	3b01      	subs	r3, #1
 801b422:	9307      	str	r3, [sp, #28]
 801b424:	2318      	movs	r3, #24
 801b426:	fb94 f4f3 	sdiv	r4, r4, r3
 801b42a:	f06f 0317 	mvn.w	r3, #23
 801b42e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801b432:	fb04 3303 	mla	r3, r4, r3, r3
 801b436:	eb03 0a02 	add.w	sl, r3, r2
 801b43a:	9b04      	ldr	r3, [sp, #16]
 801b43c:	9a07      	ldr	r2, [sp, #28]
 801b43e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801b718 <__kernel_rem_pio2+0x318>
 801b442:	eb03 0802 	add.w	r8, r3, r2
 801b446:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801b448:	1aa7      	subs	r7, r4, r2
 801b44a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b44e:	ae22      	add	r6, sp, #136	; 0x88
 801b450:	2500      	movs	r5, #0
 801b452:	4545      	cmp	r5, r8
 801b454:	dd13      	ble.n	801b47e <__kernel_rem_pio2+0x7e>
 801b456:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801b718 <__kernel_rem_pio2+0x318>
 801b45a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801b45e:	2600      	movs	r6, #0
 801b460:	9b04      	ldr	r3, [sp, #16]
 801b462:	429e      	cmp	r6, r3
 801b464:	dc32      	bgt.n	801b4cc <__kernel_rem_pio2+0xcc>
 801b466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b468:	9302      	str	r3, [sp, #8]
 801b46a:	9b08      	ldr	r3, [sp, #32]
 801b46c:	199d      	adds	r5, r3, r6
 801b46e:	ab22      	add	r3, sp, #136	; 0x88
 801b470:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b474:	9306      	str	r3, [sp, #24]
 801b476:	ec59 8b18 	vmov	r8, r9, d8
 801b47a:	2700      	movs	r7, #0
 801b47c:	e01f      	b.n	801b4be <__kernel_rem_pio2+0xbe>
 801b47e:	42ef      	cmn	r7, r5
 801b480:	d407      	bmi.n	801b492 <__kernel_rem_pio2+0x92>
 801b482:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b486:	f7e5 f857 	bl	8000538 <__aeabi_i2d>
 801b48a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b48e:	3501      	adds	r5, #1
 801b490:	e7df      	b.n	801b452 <__kernel_rem_pio2+0x52>
 801b492:	ec51 0b18 	vmov	r0, r1, d8
 801b496:	e7f8      	b.n	801b48a <__kernel_rem_pio2+0x8a>
 801b498:	9906      	ldr	r1, [sp, #24]
 801b49a:	9d02      	ldr	r5, [sp, #8]
 801b49c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801b4a0:	9106      	str	r1, [sp, #24]
 801b4a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801b4a6:	9502      	str	r5, [sp, #8]
 801b4a8:	f7e5 f8b0 	bl	800060c <__aeabi_dmul>
 801b4ac:	4602      	mov	r2, r0
 801b4ae:	460b      	mov	r3, r1
 801b4b0:	4640      	mov	r0, r8
 801b4b2:	4649      	mov	r1, r9
 801b4b4:	f7e4 fef4 	bl	80002a0 <__adddf3>
 801b4b8:	3701      	adds	r7, #1
 801b4ba:	4680      	mov	r8, r0
 801b4bc:	4689      	mov	r9, r1
 801b4be:	9b07      	ldr	r3, [sp, #28]
 801b4c0:	429f      	cmp	r7, r3
 801b4c2:	dde9      	ble.n	801b498 <__kernel_rem_pio2+0x98>
 801b4c4:	e8eb 8902 	strd	r8, r9, [fp], #8
 801b4c8:	3601      	adds	r6, #1
 801b4ca:	e7c9      	b.n	801b460 <__kernel_rem_pio2+0x60>
 801b4cc:	9b04      	ldr	r3, [sp, #16]
 801b4ce:	aa0e      	add	r2, sp, #56	; 0x38
 801b4d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b4d4:	930c      	str	r3, [sp, #48]	; 0x30
 801b4d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801b4d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b4dc:	9c04      	ldr	r4, [sp, #16]
 801b4de:	930b      	str	r3, [sp, #44]	; 0x2c
 801b4e0:	ab9a      	add	r3, sp, #616	; 0x268
 801b4e2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801b4e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b4ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801b4ee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801b4f2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801b4f6:	ab9a      	add	r3, sp, #616	; 0x268
 801b4f8:	445b      	add	r3, fp
 801b4fa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801b4fe:	2500      	movs	r5, #0
 801b500:	1b63      	subs	r3, r4, r5
 801b502:	2b00      	cmp	r3, #0
 801b504:	dc78      	bgt.n	801b5f8 <__kernel_rem_pio2+0x1f8>
 801b506:	4650      	mov	r0, sl
 801b508:	ec49 8b10 	vmov	d0, r8, r9
 801b50c:	f000 fdd8 	bl	801c0c0 <scalbn>
 801b510:	ec57 6b10 	vmov	r6, r7, d0
 801b514:	2200      	movs	r2, #0
 801b516:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b51a:	ee10 0a10 	vmov	r0, s0
 801b51e:	4639      	mov	r1, r7
 801b520:	f7e5 f874 	bl	800060c <__aeabi_dmul>
 801b524:	ec41 0b10 	vmov	d0, r0, r1
 801b528:	f7fd fdd6 	bl	80190d8 <floor>
 801b52c:	2200      	movs	r2, #0
 801b52e:	ec51 0b10 	vmov	r0, r1, d0
 801b532:	4b7e      	ldr	r3, [pc, #504]	; (801b72c <__kernel_rem_pio2+0x32c>)
 801b534:	f7e5 f86a 	bl	800060c <__aeabi_dmul>
 801b538:	4602      	mov	r2, r0
 801b53a:	460b      	mov	r3, r1
 801b53c:	4630      	mov	r0, r6
 801b53e:	4639      	mov	r1, r7
 801b540:	f7e4 feac 	bl	800029c <__aeabi_dsub>
 801b544:	460f      	mov	r7, r1
 801b546:	4606      	mov	r6, r0
 801b548:	f7e5 fb10 	bl	8000b6c <__aeabi_d2iz>
 801b54c:	9006      	str	r0, [sp, #24]
 801b54e:	f7e4 fff3 	bl	8000538 <__aeabi_i2d>
 801b552:	4602      	mov	r2, r0
 801b554:	460b      	mov	r3, r1
 801b556:	4630      	mov	r0, r6
 801b558:	4639      	mov	r1, r7
 801b55a:	f7e4 fe9f 	bl	800029c <__aeabi_dsub>
 801b55e:	f1ba 0f00 	cmp.w	sl, #0
 801b562:	4606      	mov	r6, r0
 801b564:	460f      	mov	r7, r1
 801b566:	dd6c      	ble.n	801b642 <__kernel_rem_pio2+0x242>
 801b568:	1e62      	subs	r2, r4, #1
 801b56a:	ab0e      	add	r3, sp, #56	; 0x38
 801b56c:	f1ca 0118 	rsb	r1, sl, #24
 801b570:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b574:	9d06      	ldr	r5, [sp, #24]
 801b576:	fa40 f301 	asr.w	r3, r0, r1
 801b57a:	441d      	add	r5, r3
 801b57c:	408b      	lsls	r3, r1
 801b57e:	1ac0      	subs	r0, r0, r3
 801b580:	ab0e      	add	r3, sp, #56	; 0x38
 801b582:	9506      	str	r5, [sp, #24]
 801b584:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b588:	f1ca 0317 	rsb	r3, sl, #23
 801b58c:	fa40 f303 	asr.w	r3, r0, r3
 801b590:	9302      	str	r3, [sp, #8]
 801b592:	9b02      	ldr	r3, [sp, #8]
 801b594:	2b00      	cmp	r3, #0
 801b596:	dd62      	ble.n	801b65e <__kernel_rem_pio2+0x25e>
 801b598:	9b06      	ldr	r3, [sp, #24]
 801b59a:	2200      	movs	r2, #0
 801b59c:	3301      	adds	r3, #1
 801b59e:	9306      	str	r3, [sp, #24]
 801b5a0:	4615      	mov	r5, r2
 801b5a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b5a6:	4294      	cmp	r4, r2
 801b5a8:	f300 8095 	bgt.w	801b6d6 <__kernel_rem_pio2+0x2d6>
 801b5ac:	f1ba 0f00 	cmp.w	sl, #0
 801b5b0:	dd07      	ble.n	801b5c2 <__kernel_rem_pio2+0x1c2>
 801b5b2:	f1ba 0f01 	cmp.w	sl, #1
 801b5b6:	f000 80a2 	beq.w	801b6fe <__kernel_rem_pio2+0x2fe>
 801b5ba:	f1ba 0f02 	cmp.w	sl, #2
 801b5be:	f000 80c1 	beq.w	801b744 <__kernel_rem_pio2+0x344>
 801b5c2:	9b02      	ldr	r3, [sp, #8]
 801b5c4:	2b02      	cmp	r3, #2
 801b5c6:	d14a      	bne.n	801b65e <__kernel_rem_pio2+0x25e>
 801b5c8:	4632      	mov	r2, r6
 801b5ca:	463b      	mov	r3, r7
 801b5cc:	2000      	movs	r0, #0
 801b5ce:	4958      	ldr	r1, [pc, #352]	; (801b730 <__kernel_rem_pio2+0x330>)
 801b5d0:	f7e4 fe64 	bl	800029c <__aeabi_dsub>
 801b5d4:	4606      	mov	r6, r0
 801b5d6:	460f      	mov	r7, r1
 801b5d8:	2d00      	cmp	r5, #0
 801b5da:	d040      	beq.n	801b65e <__kernel_rem_pio2+0x25e>
 801b5dc:	4650      	mov	r0, sl
 801b5de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801b720 <__kernel_rem_pio2+0x320>
 801b5e2:	f000 fd6d 	bl	801c0c0 <scalbn>
 801b5e6:	4630      	mov	r0, r6
 801b5e8:	4639      	mov	r1, r7
 801b5ea:	ec53 2b10 	vmov	r2, r3, d0
 801b5ee:	f7e4 fe55 	bl	800029c <__aeabi_dsub>
 801b5f2:	4606      	mov	r6, r0
 801b5f4:	460f      	mov	r7, r1
 801b5f6:	e032      	b.n	801b65e <__kernel_rem_pio2+0x25e>
 801b5f8:	2200      	movs	r2, #0
 801b5fa:	4b4e      	ldr	r3, [pc, #312]	; (801b734 <__kernel_rem_pio2+0x334>)
 801b5fc:	4640      	mov	r0, r8
 801b5fe:	4649      	mov	r1, r9
 801b600:	f7e5 f804 	bl	800060c <__aeabi_dmul>
 801b604:	f7e5 fab2 	bl	8000b6c <__aeabi_d2iz>
 801b608:	f7e4 ff96 	bl	8000538 <__aeabi_i2d>
 801b60c:	2200      	movs	r2, #0
 801b60e:	4b4a      	ldr	r3, [pc, #296]	; (801b738 <__kernel_rem_pio2+0x338>)
 801b610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b614:	f7e4 fffa 	bl	800060c <__aeabi_dmul>
 801b618:	4602      	mov	r2, r0
 801b61a:	460b      	mov	r3, r1
 801b61c:	4640      	mov	r0, r8
 801b61e:	4649      	mov	r1, r9
 801b620:	f7e4 fe3c 	bl	800029c <__aeabi_dsub>
 801b624:	f7e5 faa2 	bl	8000b6c <__aeabi_d2iz>
 801b628:	ab0e      	add	r3, sp, #56	; 0x38
 801b62a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801b62e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801b632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b636:	f7e4 fe33 	bl	80002a0 <__adddf3>
 801b63a:	3501      	adds	r5, #1
 801b63c:	4680      	mov	r8, r0
 801b63e:	4689      	mov	r9, r1
 801b640:	e75e      	b.n	801b500 <__kernel_rem_pio2+0x100>
 801b642:	d105      	bne.n	801b650 <__kernel_rem_pio2+0x250>
 801b644:	1e63      	subs	r3, r4, #1
 801b646:	aa0e      	add	r2, sp, #56	; 0x38
 801b648:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b64c:	15c3      	asrs	r3, r0, #23
 801b64e:	e79f      	b.n	801b590 <__kernel_rem_pio2+0x190>
 801b650:	2200      	movs	r2, #0
 801b652:	4b3a      	ldr	r3, [pc, #232]	; (801b73c <__kernel_rem_pio2+0x33c>)
 801b654:	f7e5 fa60 	bl	8000b18 <__aeabi_dcmpge>
 801b658:	2800      	cmp	r0, #0
 801b65a:	d139      	bne.n	801b6d0 <__kernel_rem_pio2+0x2d0>
 801b65c:	9002      	str	r0, [sp, #8]
 801b65e:	2200      	movs	r2, #0
 801b660:	2300      	movs	r3, #0
 801b662:	4630      	mov	r0, r6
 801b664:	4639      	mov	r1, r7
 801b666:	f7e5 fa39 	bl	8000adc <__aeabi_dcmpeq>
 801b66a:	2800      	cmp	r0, #0
 801b66c:	f000 80c7 	beq.w	801b7fe <__kernel_rem_pio2+0x3fe>
 801b670:	1e65      	subs	r5, r4, #1
 801b672:	462b      	mov	r3, r5
 801b674:	2200      	movs	r2, #0
 801b676:	9904      	ldr	r1, [sp, #16]
 801b678:	428b      	cmp	r3, r1
 801b67a:	da6a      	bge.n	801b752 <__kernel_rem_pio2+0x352>
 801b67c:	2a00      	cmp	r2, #0
 801b67e:	f000 8088 	beq.w	801b792 <__kernel_rem_pio2+0x392>
 801b682:	ab0e      	add	r3, sp, #56	; 0x38
 801b684:	f1aa 0a18 	sub.w	sl, sl, #24
 801b688:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	f000 80b4 	beq.w	801b7fa <__kernel_rem_pio2+0x3fa>
 801b692:	4650      	mov	r0, sl
 801b694:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801b720 <__kernel_rem_pio2+0x320>
 801b698:	f000 fd12 	bl	801c0c0 <scalbn>
 801b69c:	00ec      	lsls	r4, r5, #3
 801b69e:	ab72      	add	r3, sp, #456	; 0x1c8
 801b6a0:	191e      	adds	r6, r3, r4
 801b6a2:	ec59 8b10 	vmov	r8, r9, d0
 801b6a6:	f106 0a08 	add.w	sl, r6, #8
 801b6aa:	462f      	mov	r7, r5
 801b6ac:	2f00      	cmp	r7, #0
 801b6ae:	f280 80df 	bge.w	801b870 <__kernel_rem_pio2+0x470>
 801b6b2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801b718 <__kernel_rem_pio2+0x318>
 801b6b6:	f04f 0a00 	mov.w	sl, #0
 801b6ba:	eba5 030a 	sub.w	r3, r5, sl
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	f2c0 810a 	blt.w	801b8d8 <__kernel_rem_pio2+0x4d8>
 801b6c4:	f8df b078 	ldr.w	fp, [pc, #120]	; 801b740 <__kernel_rem_pio2+0x340>
 801b6c8:	ec59 8b18 	vmov	r8, r9, d8
 801b6cc:	2700      	movs	r7, #0
 801b6ce:	e0f5      	b.n	801b8bc <__kernel_rem_pio2+0x4bc>
 801b6d0:	2302      	movs	r3, #2
 801b6d2:	9302      	str	r3, [sp, #8]
 801b6d4:	e760      	b.n	801b598 <__kernel_rem_pio2+0x198>
 801b6d6:	ab0e      	add	r3, sp, #56	; 0x38
 801b6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b6dc:	b94d      	cbnz	r5, 801b6f2 <__kernel_rem_pio2+0x2f2>
 801b6de:	b12b      	cbz	r3, 801b6ec <__kernel_rem_pio2+0x2ec>
 801b6e0:	a80e      	add	r0, sp, #56	; 0x38
 801b6e2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b6e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b6ea:	2301      	movs	r3, #1
 801b6ec:	3201      	adds	r2, #1
 801b6ee:	461d      	mov	r5, r3
 801b6f0:	e759      	b.n	801b5a6 <__kernel_rem_pio2+0x1a6>
 801b6f2:	a80e      	add	r0, sp, #56	; 0x38
 801b6f4:	1acb      	subs	r3, r1, r3
 801b6f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b6fa:	462b      	mov	r3, r5
 801b6fc:	e7f6      	b.n	801b6ec <__kernel_rem_pio2+0x2ec>
 801b6fe:	1e62      	subs	r2, r4, #1
 801b700:	ab0e      	add	r3, sp, #56	; 0x38
 801b702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b706:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b70a:	a90e      	add	r1, sp, #56	; 0x38
 801b70c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b710:	e757      	b.n	801b5c2 <__kernel_rem_pio2+0x1c2>
 801b712:	bf00      	nop
 801b714:	f3af 8000 	nop.w
	...
 801b724:	3ff00000 	.word	0x3ff00000
 801b728:	0801c908 	.word	0x0801c908
 801b72c:	40200000 	.word	0x40200000
 801b730:	3ff00000 	.word	0x3ff00000
 801b734:	3e700000 	.word	0x3e700000
 801b738:	41700000 	.word	0x41700000
 801b73c:	3fe00000 	.word	0x3fe00000
 801b740:	0801c8c8 	.word	0x0801c8c8
 801b744:	1e62      	subs	r2, r4, #1
 801b746:	ab0e      	add	r3, sp, #56	; 0x38
 801b748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b74c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b750:	e7db      	b.n	801b70a <__kernel_rem_pio2+0x30a>
 801b752:	a90e      	add	r1, sp, #56	; 0x38
 801b754:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b758:	3b01      	subs	r3, #1
 801b75a:	430a      	orrs	r2, r1
 801b75c:	e78b      	b.n	801b676 <__kernel_rem_pio2+0x276>
 801b75e:	3301      	adds	r3, #1
 801b760:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b764:	2900      	cmp	r1, #0
 801b766:	d0fa      	beq.n	801b75e <__kernel_rem_pio2+0x35e>
 801b768:	9a08      	ldr	r2, [sp, #32]
 801b76a:	4422      	add	r2, r4
 801b76c:	00d2      	lsls	r2, r2, #3
 801b76e:	a922      	add	r1, sp, #136	; 0x88
 801b770:	18e3      	adds	r3, r4, r3
 801b772:	9206      	str	r2, [sp, #24]
 801b774:	440a      	add	r2, r1
 801b776:	9302      	str	r3, [sp, #8]
 801b778:	f10b 0108 	add.w	r1, fp, #8
 801b77c:	f102 0308 	add.w	r3, r2, #8
 801b780:	1c66      	adds	r6, r4, #1
 801b782:	910a      	str	r1, [sp, #40]	; 0x28
 801b784:	2500      	movs	r5, #0
 801b786:	930d      	str	r3, [sp, #52]	; 0x34
 801b788:	9b02      	ldr	r3, [sp, #8]
 801b78a:	42b3      	cmp	r3, r6
 801b78c:	da04      	bge.n	801b798 <__kernel_rem_pio2+0x398>
 801b78e:	461c      	mov	r4, r3
 801b790:	e6a6      	b.n	801b4e0 <__kernel_rem_pio2+0xe0>
 801b792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b794:	2301      	movs	r3, #1
 801b796:	e7e3      	b.n	801b760 <__kernel_rem_pio2+0x360>
 801b798:	9b06      	ldr	r3, [sp, #24]
 801b79a:	18ef      	adds	r7, r5, r3
 801b79c:	ab22      	add	r3, sp, #136	; 0x88
 801b79e:	441f      	add	r7, r3
 801b7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801b7a6:	f7e4 fec7 	bl	8000538 <__aeabi_i2d>
 801b7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7ac:	461c      	mov	r4, r3
 801b7ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7b0:	e9c7 0100 	strd	r0, r1, [r7]
 801b7b4:	eb03 0b05 	add.w	fp, r3, r5
 801b7b8:	2700      	movs	r7, #0
 801b7ba:	f04f 0800 	mov.w	r8, #0
 801b7be:	f04f 0900 	mov.w	r9, #0
 801b7c2:	9b07      	ldr	r3, [sp, #28]
 801b7c4:	429f      	cmp	r7, r3
 801b7c6:	dd08      	ble.n	801b7da <__kernel_rem_pio2+0x3da>
 801b7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7ca:	aa72      	add	r2, sp, #456	; 0x1c8
 801b7cc:	18eb      	adds	r3, r5, r3
 801b7ce:	4413      	add	r3, r2
 801b7d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801b7d4:	3601      	adds	r6, #1
 801b7d6:	3508      	adds	r5, #8
 801b7d8:	e7d6      	b.n	801b788 <__kernel_rem_pio2+0x388>
 801b7da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b7de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b7e2:	f7e4 ff13 	bl	800060c <__aeabi_dmul>
 801b7e6:	4602      	mov	r2, r0
 801b7e8:	460b      	mov	r3, r1
 801b7ea:	4640      	mov	r0, r8
 801b7ec:	4649      	mov	r1, r9
 801b7ee:	f7e4 fd57 	bl	80002a0 <__adddf3>
 801b7f2:	3701      	adds	r7, #1
 801b7f4:	4680      	mov	r8, r0
 801b7f6:	4689      	mov	r9, r1
 801b7f8:	e7e3      	b.n	801b7c2 <__kernel_rem_pio2+0x3c2>
 801b7fa:	3d01      	subs	r5, #1
 801b7fc:	e741      	b.n	801b682 <__kernel_rem_pio2+0x282>
 801b7fe:	f1ca 0000 	rsb	r0, sl, #0
 801b802:	ec47 6b10 	vmov	d0, r6, r7
 801b806:	f000 fc5b 	bl	801c0c0 <scalbn>
 801b80a:	ec57 6b10 	vmov	r6, r7, d0
 801b80e:	2200      	movs	r2, #0
 801b810:	4b99      	ldr	r3, [pc, #612]	; (801ba78 <__kernel_rem_pio2+0x678>)
 801b812:	ee10 0a10 	vmov	r0, s0
 801b816:	4639      	mov	r1, r7
 801b818:	f7e5 f97e 	bl	8000b18 <__aeabi_dcmpge>
 801b81c:	b1f8      	cbz	r0, 801b85e <__kernel_rem_pio2+0x45e>
 801b81e:	2200      	movs	r2, #0
 801b820:	4b96      	ldr	r3, [pc, #600]	; (801ba7c <__kernel_rem_pio2+0x67c>)
 801b822:	4630      	mov	r0, r6
 801b824:	4639      	mov	r1, r7
 801b826:	f7e4 fef1 	bl	800060c <__aeabi_dmul>
 801b82a:	f7e5 f99f 	bl	8000b6c <__aeabi_d2iz>
 801b82e:	4680      	mov	r8, r0
 801b830:	f7e4 fe82 	bl	8000538 <__aeabi_i2d>
 801b834:	2200      	movs	r2, #0
 801b836:	4b90      	ldr	r3, [pc, #576]	; (801ba78 <__kernel_rem_pio2+0x678>)
 801b838:	f7e4 fee8 	bl	800060c <__aeabi_dmul>
 801b83c:	460b      	mov	r3, r1
 801b83e:	4602      	mov	r2, r0
 801b840:	4639      	mov	r1, r7
 801b842:	4630      	mov	r0, r6
 801b844:	f7e4 fd2a 	bl	800029c <__aeabi_dsub>
 801b848:	f7e5 f990 	bl	8000b6c <__aeabi_d2iz>
 801b84c:	1c65      	adds	r5, r4, #1
 801b84e:	ab0e      	add	r3, sp, #56	; 0x38
 801b850:	f10a 0a18 	add.w	sl, sl, #24
 801b854:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b858:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801b85c:	e719      	b.n	801b692 <__kernel_rem_pio2+0x292>
 801b85e:	4630      	mov	r0, r6
 801b860:	4639      	mov	r1, r7
 801b862:	f7e5 f983 	bl	8000b6c <__aeabi_d2iz>
 801b866:	ab0e      	add	r3, sp, #56	; 0x38
 801b868:	4625      	mov	r5, r4
 801b86a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b86e:	e710      	b.n	801b692 <__kernel_rem_pio2+0x292>
 801b870:	ab0e      	add	r3, sp, #56	; 0x38
 801b872:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801b876:	f7e4 fe5f 	bl	8000538 <__aeabi_i2d>
 801b87a:	4642      	mov	r2, r8
 801b87c:	464b      	mov	r3, r9
 801b87e:	f7e4 fec5 	bl	800060c <__aeabi_dmul>
 801b882:	2200      	movs	r2, #0
 801b884:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801b888:	4b7c      	ldr	r3, [pc, #496]	; (801ba7c <__kernel_rem_pio2+0x67c>)
 801b88a:	4640      	mov	r0, r8
 801b88c:	4649      	mov	r1, r9
 801b88e:	f7e4 febd 	bl	800060c <__aeabi_dmul>
 801b892:	3f01      	subs	r7, #1
 801b894:	4680      	mov	r8, r0
 801b896:	4689      	mov	r9, r1
 801b898:	e708      	b.n	801b6ac <__kernel_rem_pio2+0x2ac>
 801b89a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8a2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801b8a6:	f7e4 feb1 	bl	800060c <__aeabi_dmul>
 801b8aa:	4602      	mov	r2, r0
 801b8ac:	460b      	mov	r3, r1
 801b8ae:	4640      	mov	r0, r8
 801b8b0:	4649      	mov	r1, r9
 801b8b2:	f7e4 fcf5 	bl	80002a0 <__adddf3>
 801b8b6:	3701      	adds	r7, #1
 801b8b8:	4680      	mov	r8, r0
 801b8ba:	4689      	mov	r9, r1
 801b8bc:	9b04      	ldr	r3, [sp, #16]
 801b8be:	429f      	cmp	r7, r3
 801b8c0:	dc01      	bgt.n	801b8c6 <__kernel_rem_pio2+0x4c6>
 801b8c2:	45ba      	cmp	sl, r7
 801b8c4:	dae9      	bge.n	801b89a <__kernel_rem_pio2+0x49a>
 801b8c6:	ab4a      	add	r3, sp, #296	; 0x128
 801b8c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b8cc:	e9c3 8900 	strd	r8, r9, [r3]
 801b8d0:	f10a 0a01 	add.w	sl, sl, #1
 801b8d4:	3e08      	subs	r6, #8
 801b8d6:	e6f0      	b.n	801b6ba <__kernel_rem_pio2+0x2ba>
 801b8d8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801b8da:	2b03      	cmp	r3, #3
 801b8dc:	d85b      	bhi.n	801b996 <__kernel_rem_pio2+0x596>
 801b8de:	e8df f003 	tbb	[pc, r3]
 801b8e2:	264a      	.short	0x264a
 801b8e4:	0226      	.short	0x0226
 801b8e6:	ab9a      	add	r3, sp, #616	; 0x268
 801b8e8:	441c      	add	r4, r3
 801b8ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801b8ee:	46a2      	mov	sl, r4
 801b8f0:	46ab      	mov	fp, r5
 801b8f2:	f1bb 0f00 	cmp.w	fp, #0
 801b8f6:	dc6c      	bgt.n	801b9d2 <__kernel_rem_pio2+0x5d2>
 801b8f8:	46a2      	mov	sl, r4
 801b8fa:	46ab      	mov	fp, r5
 801b8fc:	f1bb 0f01 	cmp.w	fp, #1
 801b900:	f300 8086 	bgt.w	801ba10 <__kernel_rem_pio2+0x610>
 801b904:	2000      	movs	r0, #0
 801b906:	2100      	movs	r1, #0
 801b908:	2d01      	cmp	r5, #1
 801b90a:	f300 80a0 	bgt.w	801ba4e <__kernel_rem_pio2+0x64e>
 801b90e:	9b02      	ldr	r3, [sp, #8]
 801b910:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801b914:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801b918:	2b00      	cmp	r3, #0
 801b91a:	f040 809e 	bne.w	801ba5a <__kernel_rem_pio2+0x65a>
 801b91e:	9b01      	ldr	r3, [sp, #4]
 801b920:	e9c3 7800 	strd	r7, r8, [r3]
 801b924:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801b928:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b92c:	e033      	b.n	801b996 <__kernel_rem_pio2+0x596>
 801b92e:	3408      	adds	r4, #8
 801b930:	ab4a      	add	r3, sp, #296	; 0x128
 801b932:	441c      	add	r4, r3
 801b934:	462e      	mov	r6, r5
 801b936:	2000      	movs	r0, #0
 801b938:	2100      	movs	r1, #0
 801b93a:	2e00      	cmp	r6, #0
 801b93c:	da3a      	bge.n	801b9b4 <__kernel_rem_pio2+0x5b4>
 801b93e:	9b02      	ldr	r3, [sp, #8]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d03d      	beq.n	801b9c0 <__kernel_rem_pio2+0x5c0>
 801b944:	4602      	mov	r2, r0
 801b946:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b94a:	9c01      	ldr	r4, [sp, #4]
 801b94c:	e9c4 2300 	strd	r2, r3, [r4]
 801b950:	4602      	mov	r2, r0
 801b952:	460b      	mov	r3, r1
 801b954:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801b958:	f7e4 fca0 	bl	800029c <__aeabi_dsub>
 801b95c:	ae4c      	add	r6, sp, #304	; 0x130
 801b95e:	2401      	movs	r4, #1
 801b960:	42a5      	cmp	r5, r4
 801b962:	da30      	bge.n	801b9c6 <__kernel_rem_pio2+0x5c6>
 801b964:	9b02      	ldr	r3, [sp, #8]
 801b966:	b113      	cbz	r3, 801b96e <__kernel_rem_pio2+0x56e>
 801b968:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b96c:	4619      	mov	r1, r3
 801b96e:	9b01      	ldr	r3, [sp, #4]
 801b970:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b974:	e00f      	b.n	801b996 <__kernel_rem_pio2+0x596>
 801b976:	ab9a      	add	r3, sp, #616	; 0x268
 801b978:	441c      	add	r4, r3
 801b97a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801b97e:	2000      	movs	r0, #0
 801b980:	2100      	movs	r1, #0
 801b982:	2d00      	cmp	r5, #0
 801b984:	da10      	bge.n	801b9a8 <__kernel_rem_pio2+0x5a8>
 801b986:	9b02      	ldr	r3, [sp, #8]
 801b988:	b113      	cbz	r3, 801b990 <__kernel_rem_pio2+0x590>
 801b98a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b98e:	4619      	mov	r1, r3
 801b990:	9b01      	ldr	r3, [sp, #4]
 801b992:	e9c3 0100 	strd	r0, r1, [r3]
 801b996:	9b06      	ldr	r3, [sp, #24]
 801b998:	f003 0007 	and.w	r0, r3, #7
 801b99c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801b9a0:	ecbd 8b02 	vpop	{d8}
 801b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9a8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b9ac:	f7e4 fc78 	bl	80002a0 <__adddf3>
 801b9b0:	3d01      	subs	r5, #1
 801b9b2:	e7e6      	b.n	801b982 <__kernel_rem_pio2+0x582>
 801b9b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b9b8:	f7e4 fc72 	bl	80002a0 <__adddf3>
 801b9bc:	3e01      	subs	r6, #1
 801b9be:	e7bc      	b.n	801b93a <__kernel_rem_pio2+0x53a>
 801b9c0:	4602      	mov	r2, r0
 801b9c2:	460b      	mov	r3, r1
 801b9c4:	e7c1      	b.n	801b94a <__kernel_rem_pio2+0x54a>
 801b9c6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801b9ca:	f7e4 fc69 	bl	80002a0 <__adddf3>
 801b9ce:	3401      	adds	r4, #1
 801b9d0:	e7c6      	b.n	801b960 <__kernel_rem_pio2+0x560>
 801b9d2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801b9d6:	ed3a 7b02 	vldmdb	sl!, {d7}
 801b9da:	4640      	mov	r0, r8
 801b9dc:	ec53 2b17 	vmov	r2, r3, d7
 801b9e0:	4649      	mov	r1, r9
 801b9e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b9e6:	f7e4 fc5b 	bl	80002a0 <__adddf3>
 801b9ea:	4602      	mov	r2, r0
 801b9ec:	460b      	mov	r3, r1
 801b9ee:	4606      	mov	r6, r0
 801b9f0:	460f      	mov	r7, r1
 801b9f2:	4640      	mov	r0, r8
 801b9f4:	4649      	mov	r1, r9
 801b9f6:	f7e4 fc51 	bl	800029c <__aeabi_dsub>
 801b9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b9fe:	f7e4 fc4f 	bl	80002a0 <__adddf3>
 801ba02:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801ba06:	e9ca 0100 	strd	r0, r1, [sl]
 801ba0a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801ba0e:	e770      	b.n	801b8f2 <__kernel_rem_pio2+0x4f2>
 801ba10:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801ba14:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ba18:	4630      	mov	r0, r6
 801ba1a:	ec53 2b17 	vmov	r2, r3, d7
 801ba1e:	4639      	mov	r1, r7
 801ba20:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ba24:	f7e4 fc3c 	bl	80002a0 <__adddf3>
 801ba28:	4602      	mov	r2, r0
 801ba2a:	460b      	mov	r3, r1
 801ba2c:	4680      	mov	r8, r0
 801ba2e:	4689      	mov	r9, r1
 801ba30:	4630      	mov	r0, r6
 801ba32:	4639      	mov	r1, r7
 801ba34:	f7e4 fc32 	bl	800029c <__aeabi_dsub>
 801ba38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ba3c:	f7e4 fc30 	bl	80002a0 <__adddf3>
 801ba40:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801ba44:	e9ca 0100 	strd	r0, r1, [sl]
 801ba48:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801ba4c:	e756      	b.n	801b8fc <__kernel_rem_pio2+0x4fc>
 801ba4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ba52:	f7e4 fc25 	bl	80002a0 <__adddf3>
 801ba56:	3d01      	subs	r5, #1
 801ba58:	e756      	b.n	801b908 <__kernel_rem_pio2+0x508>
 801ba5a:	9b01      	ldr	r3, [sp, #4]
 801ba5c:	9a01      	ldr	r2, [sp, #4]
 801ba5e:	601f      	str	r7, [r3, #0]
 801ba60:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801ba64:	605c      	str	r4, [r3, #4]
 801ba66:	609d      	str	r5, [r3, #8]
 801ba68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801ba6c:	60d3      	str	r3, [r2, #12]
 801ba6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ba72:	6110      	str	r0, [r2, #16]
 801ba74:	6153      	str	r3, [r2, #20]
 801ba76:	e78e      	b.n	801b996 <__kernel_rem_pio2+0x596>
 801ba78:	41700000 	.word	0x41700000
 801ba7c:	3e700000 	.word	0x3e700000

0801ba80 <__kernel_sin>:
 801ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba84:	ec55 4b10 	vmov	r4, r5, d0
 801ba88:	b085      	sub	sp, #20
 801ba8a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ba8e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ba92:	ed8d 1b00 	vstr	d1, [sp]
 801ba96:	9002      	str	r0, [sp, #8]
 801ba98:	da06      	bge.n	801baa8 <__kernel_sin+0x28>
 801ba9a:	ee10 0a10 	vmov	r0, s0
 801ba9e:	4629      	mov	r1, r5
 801baa0:	f7e5 f864 	bl	8000b6c <__aeabi_d2iz>
 801baa4:	2800      	cmp	r0, #0
 801baa6:	d051      	beq.n	801bb4c <__kernel_sin+0xcc>
 801baa8:	4622      	mov	r2, r4
 801baaa:	462b      	mov	r3, r5
 801baac:	4620      	mov	r0, r4
 801baae:	4629      	mov	r1, r5
 801bab0:	f7e4 fdac 	bl	800060c <__aeabi_dmul>
 801bab4:	4682      	mov	sl, r0
 801bab6:	468b      	mov	fp, r1
 801bab8:	4602      	mov	r2, r0
 801baba:	460b      	mov	r3, r1
 801babc:	4620      	mov	r0, r4
 801babe:	4629      	mov	r1, r5
 801bac0:	f7e4 fda4 	bl	800060c <__aeabi_dmul>
 801bac4:	a341      	add	r3, pc, #260	; (adr r3, 801bbcc <__kernel_sin+0x14c>)
 801bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baca:	4680      	mov	r8, r0
 801bacc:	4689      	mov	r9, r1
 801bace:	4650      	mov	r0, sl
 801bad0:	4659      	mov	r1, fp
 801bad2:	f7e4 fd9b 	bl	800060c <__aeabi_dmul>
 801bad6:	a33f      	add	r3, pc, #252	; (adr r3, 801bbd4 <__kernel_sin+0x154>)
 801bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801badc:	f7e4 fbde 	bl	800029c <__aeabi_dsub>
 801bae0:	4652      	mov	r2, sl
 801bae2:	465b      	mov	r3, fp
 801bae4:	f7e4 fd92 	bl	800060c <__aeabi_dmul>
 801bae8:	a33c      	add	r3, pc, #240	; (adr r3, 801bbdc <__kernel_sin+0x15c>)
 801baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baee:	f7e4 fbd7 	bl	80002a0 <__adddf3>
 801baf2:	4652      	mov	r2, sl
 801baf4:	465b      	mov	r3, fp
 801baf6:	f7e4 fd89 	bl	800060c <__aeabi_dmul>
 801bafa:	a33a      	add	r3, pc, #232	; (adr r3, 801bbe4 <__kernel_sin+0x164>)
 801bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb00:	f7e4 fbcc 	bl	800029c <__aeabi_dsub>
 801bb04:	4652      	mov	r2, sl
 801bb06:	465b      	mov	r3, fp
 801bb08:	f7e4 fd80 	bl	800060c <__aeabi_dmul>
 801bb0c:	a337      	add	r3, pc, #220	; (adr r3, 801bbec <__kernel_sin+0x16c>)
 801bb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb12:	f7e4 fbc5 	bl	80002a0 <__adddf3>
 801bb16:	9b02      	ldr	r3, [sp, #8]
 801bb18:	4606      	mov	r6, r0
 801bb1a:	460f      	mov	r7, r1
 801bb1c:	b9db      	cbnz	r3, 801bb56 <__kernel_sin+0xd6>
 801bb1e:	4602      	mov	r2, r0
 801bb20:	460b      	mov	r3, r1
 801bb22:	4650      	mov	r0, sl
 801bb24:	4659      	mov	r1, fp
 801bb26:	f7e4 fd71 	bl	800060c <__aeabi_dmul>
 801bb2a:	a325      	add	r3, pc, #148	; (adr r3, 801bbc0 <__kernel_sin+0x140>)
 801bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb30:	f7e4 fbb4 	bl	800029c <__aeabi_dsub>
 801bb34:	4642      	mov	r2, r8
 801bb36:	464b      	mov	r3, r9
 801bb38:	f7e4 fd68 	bl	800060c <__aeabi_dmul>
 801bb3c:	4602      	mov	r2, r0
 801bb3e:	460b      	mov	r3, r1
 801bb40:	4620      	mov	r0, r4
 801bb42:	4629      	mov	r1, r5
 801bb44:	f7e4 fbac 	bl	80002a0 <__adddf3>
 801bb48:	4604      	mov	r4, r0
 801bb4a:	460d      	mov	r5, r1
 801bb4c:	ec45 4b10 	vmov	d0, r4, r5
 801bb50:	b005      	add	sp, #20
 801bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb56:	2200      	movs	r2, #0
 801bb58:	4b1b      	ldr	r3, [pc, #108]	; (801bbc8 <__kernel_sin+0x148>)
 801bb5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bb5e:	f7e4 fd55 	bl	800060c <__aeabi_dmul>
 801bb62:	4632      	mov	r2, r6
 801bb64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb68:	463b      	mov	r3, r7
 801bb6a:	4640      	mov	r0, r8
 801bb6c:	4649      	mov	r1, r9
 801bb6e:	f7e4 fd4d 	bl	800060c <__aeabi_dmul>
 801bb72:	4602      	mov	r2, r0
 801bb74:	460b      	mov	r3, r1
 801bb76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb7a:	f7e4 fb8f 	bl	800029c <__aeabi_dsub>
 801bb7e:	4652      	mov	r2, sl
 801bb80:	465b      	mov	r3, fp
 801bb82:	f7e4 fd43 	bl	800060c <__aeabi_dmul>
 801bb86:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb8a:	f7e4 fb87 	bl	800029c <__aeabi_dsub>
 801bb8e:	a30c      	add	r3, pc, #48	; (adr r3, 801bbc0 <__kernel_sin+0x140>)
 801bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb94:	4606      	mov	r6, r0
 801bb96:	460f      	mov	r7, r1
 801bb98:	4640      	mov	r0, r8
 801bb9a:	4649      	mov	r1, r9
 801bb9c:	f7e4 fd36 	bl	800060c <__aeabi_dmul>
 801bba0:	4602      	mov	r2, r0
 801bba2:	460b      	mov	r3, r1
 801bba4:	4630      	mov	r0, r6
 801bba6:	4639      	mov	r1, r7
 801bba8:	f7e4 fb7a 	bl	80002a0 <__adddf3>
 801bbac:	4602      	mov	r2, r0
 801bbae:	460b      	mov	r3, r1
 801bbb0:	4620      	mov	r0, r4
 801bbb2:	4629      	mov	r1, r5
 801bbb4:	f7e4 fb72 	bl	800029c <__aeabi_dsub>
 801bbb8:	e7c6      	b.n	801bb48 <__kernel_sin+0xc8>
 801bbba:	bf00      	nop
 801bbbc:	f3af 8000 	nop.w
 801bbc0:	55555549 	.word	0x55555549
 801bbc4:	3fc55555 	.word	0x3fc55555
 801bbc8:	3fe00000 	.word	0x3fe00000
 801bbcc:	5acfd57c 	.word	0x5acfd57c
 801bbd0:	3de5d93a 	.word	0x3de5d93a
 801bbd4:	8a2b9ceb 	.word	0x8a2b9ceb
 801bbd8:	3e5ae5e6 	.word	0x3e5ae5e6
 801bbdc:	57b1fe7d 	.word	0x57b1fe7d
 801bbe0:	3ec71de3 	.word	0x3ec71de3
 801bbe4:	19c161d5 	.word	0x19c161d5
 801bbe8:	3f2a01a0 	.word	0x3f2a01a0
 801bbec:	1110f8a6 	.word	0x1110f8a6
 801bbf0:	3f811111 	.word	0x3f811111
 801bbf4:	00000000 	.word	0x00000000

0801bbf8 <__kernel_tan>:
 801bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbfc:	ec5b ab10 	vmov	sl, fp, d0
 801bc00:	4bbf      	ldr	r3, [pc, #764]	; (801bf00 <__kernel_tan+0x308>)
 801bc02:	b089      	sub	sp, #36	; 0x24
 801bc04:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801bc08:	429f      	cmp	r7, r3
 801bc0a:	ec59 8b11 	vmov	r8, r9, d1
 801bc0e:	4606      	mov	r6, r0
 801bc10:	f8cd b008 	str.w	fp, [sp, #8]
 801bc14:	dc22      	bgt.n	801bc5c <__kernel_tan+0x64>
 801bc16:	ee10 0a10 	vmov	r0, s0
 801bc1a:	4659      	mov	r1, fp
 801bc1c:	f7e4 ffa6 	bl	8000b6c <__aeabi_d2iz>
 801bc20:	2800      	cmp	r0, #0
 801bc22:	d145      	bne.n	801bcb0 <__kernel_tan+0xb8>
 801bc24:	1c73      	adds	r3, r6, #1
 801bc26:	4652      	mov	r2, sl
 801bc28:	4313      	orrs	r3, r2
 801bc2a:	433b      	orrs	r3, r7
 801bc2c:	d110      	bne.n	801bc50 <__kernel_tan+0x58>
 801bc2e:	ec4b ab10 	vmov	d0, sl, fp
 801bc32:	f7fd fa45 	bl	80190c0 <fabs>
 801bc36:	49b3      	ldr	r1, [pc, #716]	; (801bf04 <__kernel_tan+0x30c>)
 801bc38:	ec53 2b10 	vmov	r2, r3, d0
 801bc3c:	2000      	movs	r0, #0
 801bc3e:	f7e4 fe0f 	bl	8000860 <__aeabi_ddiv>
 801bc42:	4682      	mov	sl, r0
 801bc44:	468b      	mov	fp, r1
 801bc46:	ec4b ab10 	vmov	d0, sl, fp
 801bc4a:	b009      	add	sp, #36	; 0x24
 801bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc50:	2e01      	cmp	r6, #1
 801bc52:	d0f8      	beq.n	801bc46 <__kernel_tan+0x4e>
 801bc54:	465b      	mov	r3, fp
 801bc56:	2000      	movs	r0, #0
 801bc58:	49ab      	ldr	r1, [pc, #684]	; (801bf08 <__kernel_tan+0x310>)
 801bc5a:	e7f0      	b.n	801bc3e <__kernel_tan+0x46>
 801bc5c:	4bab      	ldr	r3, [pc, #684]	; (801bf0c <__kernel_tan+0x314>)
 801bc5e:	429f      	cmp	r7, r3
 801bc60:	dd26      	ble.n	801bcb0 <__kernel_tan+0xb8>
 801bc62:	9b02      	ldr	r3, [sp, #8]
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	da09      	bge.n	801bc7c <__kernel_tan+0x84>
 801bc68:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bc6c:	469b      	mov	fp, r3
 801bc6e:	ee10 aa10 	vmov	sl, s0
 801bc72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801bc76:	ee11 8a10 	vmov	r8, s2
 801bc7a:	4699      	mov	r9, r3
 801bc7c:	4652      	mov	r2, sl
 801bc7e:	465b      	mov	r3, fp
 801bc80:	a181      	add	r1, pc, #516	; (adr r1, 801be88 <__kernel_tan+0x290>)
 801bc82:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc86:	f7e4 fb09 	bl	800029c <__aeabi_dsub>
 801bc8a:	4642      	mov	r2, r8
 801bc8c:	464b      	mov	r3, r9
 801bc8e:	4604      	mov	r4, r0
 801bc90:	460d      	mov	r5, r1
 801bc92:	a17f      	add	r1, pc, #508	; (adr r1, 801be90 <__kernel_tan+0x298>)
 801bc94:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc98:	f7e4 fb00 	bl	800029c <__aeabi_dsub>
 801bc9c:	4622      	mov	r2, r4
 801bc9e:	462b      	mov	r3, r5
 801bca0:	f7e4 fafe 	bl	80002a0 <__adddf3>
 801bca4:	f04f 0800 	mov.w	r8, #0
 801bca8:	4682      	mov	sl, r0
 801bcaa:	468b      	mov	fp, r1
 801bcac:	f04f 0900 	mov.w	r9, #0
 801bcb0:	4652      	mov	r2, sl
 801bcb2:	465b      	mov	r3, fp
 801bcb4:	4650      	mov	r0, sl
 801bcb6:	4659      	mov	r1, fp
 801bcb8:	f7e4 fca8 	bl	800060c <__aeabi_dmul>
 801bcbc:	4602      	mov	r2, r0
 801bcbe:	460b      	mov	r3, r1
 801bcc0:	e9cd 0100 	strd	r0, r1, [sp]
 801bcc4:	f7e4 fca2 	bl	800060c <__aeabi_dmul>
 801bcc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bccc:	4604      	mov	r4, r0
 801bcce:	460d      	mov	r5, r1
 801bcd0:	4650      	mov	r0, sl
 801bcd2:	4659      	mov	r1, fp
 801bcd4:	f7e4 fc9a 	bl	800060c <__aeabi_dmul>
 801bcd8:	a36f      	add	r3, pc, #444	; (adr r3, 801be98 <__kernel_tan+0x2a0>)
 801bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bce2:	4620      	mov	r0, r4
 801bce4:	4629      	mov	r1, r5
 801bce6:	f7e4 fc91 	bl	800060c <__aeabi_dmul>
 801bcea:	a36d      	add	r3, pc, #436	; (adr r3, 801bea0 <__kernel_tan+0x2a8>)
 801bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf0:	f7e4 fad6 	bl	80002a0 <__adddf3>
 801bcf4:	4622      	mov	r2, r4
 801bcf6:	462b      	mov	r3, r5
 801bcf8:	f7e4 fc88 	bl	800060c <__aeabi_dmul>
 801bcfc:	a36a      	add	r3, pc, #424	; (adr r3, 801bea8 <__kernel_tan+0x2b0>)
 801bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd02:	f7e4 facd 	bl	80002a0 <__adddf3>
 801bd06:	4622      	mov	r2, r4
 801bd08:	462b      	mov	r3, r5
 801bd0a:	f7e4 fc7f 	bl	800060c <__aeabi_dmul>
 801bd0e:	a368      	add	r3, pc, #416	; (adr r3, 801beb0 <__kernel_tan+0x2b8>)
 801bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd14:	f7e4 fac4 	bl	80002a0 <__adddf3>
 801bd18:	4622      	mov	r2, r4
 801bd1a:	462b      	mov	r3, r5
 801bd1c:	f7e4 fc76 	bl	800060c <__aeabi_dmul>
 801bd20:	a365      	add	r3, pc, #404	; (adr r3, 801beb8 <__kernel_tan+0x2c0>)
 801bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd26:	f7e4 fabb 	bl	80002a0 <__adddf3>
 801bd2a:	4622      	mov	r2, r4
 801bd2c:	462b      	mov	r3, r5
 801bd2e:	f7e4 fc6d 	bl	800060c <__aeabi_dmul>
 801bd32:	a363      	add	r3, pc, #396	; (adr r3, 801bec0 <__kernel_tan+0x2c8>)
 801bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd38:	f7e4 fab2 	bl	80002a0 <__adddf3>
 801bd3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bd40:	f7e4 fc64 	bl	800060c <__aeabi_dmul>
 801bd44:	a360      	add	r3, pc, #384	; (adr r3, 801bec8 <__kernel_tan+0x2d0>)
 801bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bd4e:	4620      	mov	r0, r4
 801bd50:	4629      	mov	r1, r5
 801bd52:	f7e4 fc5b 	bl	800060c <__aeabi_dmul>
 801bd56:	a35e      	add	r3, pc, #376	; (adr r3, 801bed0 <__kernel_tan+0x2d8>)
 801bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd5c:	f7e4 faa0 	bl	80002a0 <__adddf3>
 801bd60:	4622      	mov	r2, r4
 801bd62:	462b      	mov	r3, r5
 801bd64:	f7e4 fc52 	bl	800060c <__aeabi_dmul>
 801bd68:	a35b      	add	r3, pc, #364	; (adr r3, 801bed8 <__kernel_tan+0x2e0>)
 801bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd6e:	f7e4 fa97 	bl	80002a0 <__adddf3>
 801bd72:	4622      	mov	r2, r4
 801bd74:	462b      	mov	r3, r5
 801bd76:	f7e4 fc49 	bl	800060c <__aeabi_dmul>
 801bd7a:	a359      	add	r3, pc, #356	; (adr r3, 801bee0 <__kernel_tan+0x2e8>)
 801bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd80:	f7e4 fa8e 	bl	80002a0 <__adddf3>
 801bd84:	4622      	mov	r2, r4
 801bd86:	462b      	mov	r3, r5
 801bd88:	f7e4 fc40 	bl	800060c <__aeabi_dmul>
 801bd8c:	a356      	add	r3, pc, #344	; (adr r3, 801bee8 <__kernel_tan+0x2f0>)
 801bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd92:	f7e4 fa85 	bl	80002a0 <__adddf3>
 801bd96:	4622      	mov	r2, r4
 801bd98:	462b      	mov	r3, r5
 801bd9a:	f7e4 fc37 	bl	800060c <__aeabi_dmul>
 801bd9e:	a354      	add	r3, pc, #336	; (adr r3, 801bef0 <__kernel_tan+0x2f8>)
 801bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bda4:	f7e4 fa7c 	bl	80002a0 <__adddf3>
 801bda8:	4602      	mov	r2, r0
 801bdaa:	460b      	mov	r3, r1
 801bdac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bdb0:	f7e4 fa76 	bl	80002a0 <__adddf3>
 801bdb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bdb8:	f7e4 fc28 	bl	800060c <__aeabi_dmul>
 801bdbc:	4642      	mov	r2, r8
 801bdbe:	464b      	mov	r3, r9
 801bdc0:	f7e4 fa6e 	bl	80002a0 <__adddf3>
 801bdc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bdc8:	f7e4 fc20 	bl	800060c <__aeabi_dmul>
 801bdcc:	4642      	mov	r2, r8
 801bdce:	464b      	mov	r3, r9
 801bdd0:	f7e4 fa66 	bl	80002a0 <__adddf3>
 801bdd4:	a348      	add	r3, pc, #288	; (adr r3, 801bef8 <__kernel_tan+0x300>)
 801bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdda:	4604      	mov	r4, r0
 801bddc:	460d      	mov	r5, r1
 801bdde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bde2:	f7e4 fc13 	bl	800060c <__aeabi_dmul>
 801bde6:	4622      	mov	r2, r4
 801bde8:	462b      	mov	r3, r5
 801bdea:	f7e4 fa59 	bl	80002a0 <__adddf3>
 801bdee:	e9cd 0100 	strd	r0, r1, [sp]
 801bdf2:	460b      	mov	r3, r1
 801bdf4:	4602      	mov	r2, r0
 801bdf6:	4659      	mov	r1, fp
 801bdf8:	4650      	mov	r0, sl
 801bdfa:	f7e4 fa51 	bl	80002a0 <__adddf3>
 801bdfe:	4b43      	ldr	r3, [pc, #268]	; (801bf0c <__kernel_tan+0x314>)
 801be00:	429f      	cmp	r7, r3
 801be02:	4604      	mov	r4, r0
 801be04:	460d      	mov	r5, r1
 801be06:	f340 8083 	ble.w	801bf10 <__kernel_tan+0x318>
 801be0a:	4630      	mov	r0, r6
 801be0c:	f7e4 fb94 	bl	8000538 <__aeabi_i2d>
 801be10:	4622      	mov	r2, r4
 801be12:	4680      	mov	r8, r0
 801be14:	4689      	mov	r9, r1
 801be16:	462b      	mov	r3, r5
 801be18:	4620      	mov	r0, r4
 801be1a:	4629      	mov	r1, r5
 801be1c:	f7e4 fbf6 	bl	800060c <__aeabi_dmul>
 801be20:	4642      	mov	r2, r8
 801be22:	4606      	mov	r6, r0
 801be24:	460f      	mov	r7, r1
 801be26:	464b      	mov	r3, r9
 801be28:	4620      	mov	r0, r4
 801be2a:	4629      	mov	r1, r5
 801be2c:	f7e4 fa38 	bl	80002a0 <__adddf3>
 801be30:	4602      	mov	r2, r0
 801be32:	460b      	mov	r3, r1
 801be34:	4630      	mov	r0, r6
 801be36:	4639      	mov	r1, r7
 801be38:	f7e4 fd12 	bl	8000860 <__aeabi_ddiv>
 801be3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be40:	f7e4 fa2c 	bl	800029c <__aeabi_dsub>
 801be44:	4602      	mov	r2, r0
 801be46:	460b      	mov	r3, r1
 801be48:	4650      	mov	r0, sl
 801be4a:	4659      	mov	r1, fp
 801be4c:	f7e4 fa26 	bl	800029c <__aeabi_dsub>
 801be50:	4602      	mov	r2, r0
 801be52:	460b      	mov	r3, r1
 801be54:	f7e4 fa24 	bl	80002a0 <__adddf3>
 801be58:	4602      	mov	r2, r0
 801be5a:	460b      	mov	r3, r1
 801be5c:	4640      	mov	r0, r8
 801be5e:	4649      	mov	r1, r9
 801be60:	f7e4 fa1c 	bl	800029c <__aeabi_dsub>
 801be64:	9b02      	ldr	r3, [sp, #8]
 801be66:	4604      	mov	r4, r0
 801be68:	1798      	asrs	r0, r3, #30
 801be6a:	f000 0002 	and.w	r0, r0, #2
 801be6e:	f1c0 0001 	rsb	r0, r0, #1
 801be72:	460d      	mov	r5, r1
 801be74:	f7e4 fb60 	bl	8000538 <__aeabi_i2d>
 801be78:	4602      	mov	r2, r0
 801be7a:	460b      	mov	r3, r1
 801be7c:	4620      	mov	r0, r4
 801be7e:	4629      	mov	r1, r5
 801be80:	f7e4 fbc4 	bl	800060c <__aeabi_dmul>
 801be84:	e6dd      	b.n	801bc42 <__kernel_tan+0x4a>
 801be86:	bf00      	nop
 801be88:	54442d18 	.word	0x54442d18
 801be8c:	3fe921fb 	.word	0x3fe921fb
 801be90:	33145c07 	.word	0x33145c07
 801be94:	3c81a626 	.word	0x3c81a626
 801be98:	74bf7ad4 	.word	0x74bf7ad4
 801be9c:	3efb2a70 	.word	0x3efb2a70
 801bea0:	32f0a7e9 	.word	0x32f0a7e9
 801bea4:	3f12b80f 	.word	0x3f12b80f
 801bea8:	1a8d1068 	.word	0x1a8d1068
 801beac:	3f3026f7 	.word	0x3f3026f7
 801beb0:	fee08315 	.word	0xfee08315
 801beb4:	3f57dbc8 	.word	0x3f57dbc8
 801beb8:	e96e8493 	.word	0xe96e8493
 801bebc:	3f8226e3 	.word	0x3f8226e3
 801bec0:	1bb341fe 	.word	0x1bb341fe
 801bec4:	3faba1ba 	.word	0x3faba1ba
 801bec8:	db605373 	.word	0xdb605373
 801becc:	bef375cb 	.word	0xbef375cb
 801bed0:	a03792a6 	.word	0xa03792a6
 801bed4:	3f147e88 	.word	0x3f147e88
 801bed8:	f2f26501 	.word	0xf2f26501
 801bedc:	3f4344d8 	.word	0x3f4344d8
 801bee0:	c9560328 	.word	0xc9560328
 801bee4:	3f6d6d22 	.word	0x3f6d6d22
 801bee8:	8406d637 	.word	0x8406d637
 801beec:	3f9664f4 	.word	0x3f9664f4
 801bef0:	1110fe7a 	.word	0x1110fe7a
 801bef4:	3fc11111 	.word	0x3fc11111
 801bef8:	55555563 	.word	0x55555563
 801befc:	3fd55555 	.word	0x3fd55555
 801bf00:	3e2fffff 	.word	0x3e2fffff
 801bf04:	3ff00000 	.word	0x3ff00000
 801bf08:	bff00000 	.word	0xbff00000
 801bf0c:	3fe59427 	.word	0x3fe59427
 801bf10:	2e01      	cmp	r6, #1
 801bf12:	d036      	beq.n	801bf82 <__kernel_tan+0x38a>
 801bf14:	460f      	mov	r7, r1
 801bf16:	4602      	mov	r2, r0
 801bf18:	460b      	mov	r3, r1
 801bf1a:	2000      	movs	r0, #0
 801bf1c:	491a      	ldr	r1, [pc, #104]	; (801bf88 <__kernel_tan+0x390>)
 801bf1e:	f7e4 fc9f 	bl	8000860 <__aeabi_ddiv>
 801bf22:	2600      	movs	r6, #0
 801bf24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf28:	4652      	mov	r2, sl
 801bf2a:	465b      	mov	r3, fp
 801bf2c:	4630      	mov	r0, r6
 801bf2e:	4639      	mov	r1, r7
 801bf30:	f7e4 f9b4 	bl	800029c <__aeabi_dsub>
 801bf34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bf38:	4602      	mov	r2, r0
 801bf3a:	460b      	mov	r3, r1
 801bf3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf40:	f7e4 f9ac 	bl	800029c <__aeabi_dsub>
 801bf44:	4632      	mov	r2, r6
 801bf46:	462b      	mov	r3, r5
 801bf48:	f7e4 fb60 	bl	800060c <__aeabi_dmul>
 801bf4c:	4632      	mov	r2, r6
 801bf4e:	4682      	mov	sl, r0
 801bf50:	468b      	mov	fp, r1
 801bf52:	462b      	mov	r3, r5
 801bf54:	4630      	mov	r0, r6
 801bf56:	4639      	mov	r1, r7
 801bf58:	f7e4 fb58 	bl	800060c <__aeabi_dmul>
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	4b0b      	ldr	r3, [pc, #44]	; (801bf8c <__kernel_tan+0x394>)
 801bf60:	f7e4 f99e 	bl	80002a0 <__adddf3>
 801bf64:	4602      	mov	r2, r0
 801bf66:	460b      	mov	r3, r1
 801bf68:	4650      	mov	r0, sl
 801bf6a:	4659      	mov	r1, fp
 801bf6c:	f7e4 f998 	bl	80002a0 <__adddf3>
 801bf70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf74:	f7e4 fb4a 	bl	800060c <__aeabi_dmul>
 801bf78:	4632      	mov	r2, r6
 801bf7a:	462b      	mov	r3, r5
 801bf7c:	f7e4 f990 	bl	80002a0 <__adddf3>
 801bf80:	e65f      	b.n	801bc42 <__kernel_tan+0x4a>
 801bf82:	4682      	mov	sl, r0
 801bf84:	468b      	mov	fp, r1
 801bf86:	e65e      	b.n	801bc46 <__kernel_tan+0x4e>
 801bf88:	bff00000 	.word	0xbff00000
 801bf8c:	3ff00000 	.word	0x3ff00000

0801bf90 <finite>:
 801bf90:	ee10 3a90 	vmov	r3, s1
 801bf94:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801bf98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801bf9c:	0fc0      	lsrs	r0, r0, #31
 801bf9e:	4770      	bx	lr

0801bfa0 <matherr>:
 801bfa0:	2000      	movs	r0, #0
 801bfa2:	4770      	bx	lr
 801bfa4:	0000      	movs	r0, r0
	...

0801bfa8 <nan>:
 801bfa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801bfb0 <nan+0x8>
 801bfac:	4770      	bx	lr
 801bfae:	bf00      	nop
 801bfb0:	00000000 	.word	0x00000000
 801bfb4:	7ff80000 	.word	0x7ff80000

0801bfb8 <rint>:
 801bfb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bfba:	ec51 0b10 	vmov	r0, r1, d0
 801bfbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801bfc2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801bfc6:	2e13      	cmp	r6, #19
 801bfc8:	460b      	mov	r3, r1
 801bfca:	ee10 4a10 	vmov	r4, s0
 801bfce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801bfd2:	dc56      	bgt.n	801c082 <rint+0xca>
 801bfd4:	2e00      	cmp	r6, #0
 801bfd6:	da2b      	bge.n	801c030 <rint+0x78>
 801bfd8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801bfdc:	4302      	orrs	r2, r0
 801bfde:	d023      	beq.n	801c028 <rint+0x70>
 801bfe0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801bfe4:	4302      	orrs	r2, r0
 801bfe6:	4254      	negs	r4, r2
 801bfe8:	4314      	orrs	r4, r2
 801bfea:	0c4b      	lsrs	r3, r1, #17
 801bfec:	0b24      	lsrs	r4, r4, #12
 801bfee:	045b      	lsls	r3, r3, #17
 801bff0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801bff4:	ea44 0103 	orr.w	r1, r4, r3
 801bff8:	460b      	mov	r3, r1
 801bffa:	492f      	ldr	r1, [pc, #188]	; (801c0b8 <rint+0x100>)
 801bffc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801c000:	e9d1 6700 	ldrd	r6, r7, [r1]
 801c004:	4602      	mov	r2, r0
 801c006:	4639      	mov	r1, r7
 801c008:	4630      	mov	r0, r6
 801c00a:	f7e4 f949 	bl	80002a0 <__adddf3>
 801c00e:	e9cd 0100 	strd	r0, r1, [sp]
 801c012:	463b      	mov	r3, r7
 801c014:	4632      	mov	r2, r6
 801c016:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c01a:	f7e4 f93f 	bl	800029c <__aeabi_dsub>
 801c01e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c022:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c026:	4639      	mov	r1, r7
 801c028:	ec41 0b10 	vmov	d0, r0, r1
 801c02c:	b003      	add	sp, #12
 801c02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c030:	4a22      	ldr	r2, [pc, #136]	; (801c0bc <rint+0x104>)
 801c032:	4132      	asrs	r2, r6
 801c034:	ea01 0702 	and.w	r7, r1, r2
 801c038:	4307      	orrs	r7, r0
 801c03a:	d0f5      	beq.n	801c028 <rint+0x70>
 801c03c:	0852      	lsrs	r2, r2, #1
 801c03e:	4011      	ands	r1, r2
 801c040:	430c      	orrs	r4, r1
 801c042:	d00b      	beq.n	801c05c <rint+0xa4>
 801c044:	ea23 0202 	bic.w	r2, r3, r2
 801c048:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c04c:	2e13      	cmp	r6, #19
 801c04e:	fa43 f306 	asr.w	r3, r3, r6
 801c052:	bf0c      	ite	eq
 801c054:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c058:	2400      	movne	r4, #0
 801c05a:	4313      	orrs	r3, r2
 801c05c:	4916      	ldr	r1, [pc, #88]	; (801c0b8 <rint+0x100>)
 801c05e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c062:	4622      	mov	r2, r4
 801c064:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c068:	4620      	mov	r0, r4
 801c06a:	4629      	mov	r1, r5
 801c06c:	f7e4 f918 	bl	80002a0 <__adddf3>
 801c070:	e9cd 0100 	strd	r0, r1, [sp]
 801c074:	4622      	mov	r2, r4
 801c076:	462b      	mov	r3, r5
 801c078:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c07c:	f7e4 f90e 	bl	800029c <__aeabi_dsub>
 801c080:	e7d2      	b.n	801c028 <rint+0x70>
 801c082:	2e33      	cmp	r6, #51	; 0x33
 801c084:	dd07      	ble.n	801c096 <rint+0xde>
 801c086:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c08a:	d1cd      	bne.n	801c028 <rint+0x70>
 801c08c:	ee10 2a10 	vmov	r2, s0
 801c090:	f7e4 f906 	bl	80002a0 <__adddf3>
 801c094:	e7c8      	b.n	801c028 <rint+0x70>
 801c096:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801c09a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c09e:	40f2      	lsrs	r2, r6
 801c0a0:	4210      	tst	r0, r2
 801c0a2:	d0c1      	beq.n	801c028 <rint+0x70>
 801c0a4:	0852      	lsrs	r2, r2, #1
 801c0a6:	4210      	tst	r0, r2
 801c0a8:	bf1f      	itttt	ne
 801c0aa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c0ae:	ea20 0202 	bicne.w	r2, r0, r2
 801c0b2:	4134      	asrne	r4, r6
 801c0b4:	4314      	orrne	r4, r2
 801c0b6:	e7d1      	b.n	801c05c <rint+0xa4>
 801c0b8:	0801c918 	.word	0x0801c918
 801c0bc:	000fffff 	.word	0x000fffff

0801c0c0 <scalbn>:
 801c0c0:	b570      	push	{r4, r5, r6, lr}
 801c0c2:	ec55 4b10 	vmov	r4, r5, d0
 801c0c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c0ca:	4606      	mov	r6, r0
 801c0cc:	462b      	mov	r3, r5
 801c0ce:	b9aa      	cbnz	r2, 801c0fc <scalbn+0x3c>
 801c0d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c0d4:	4323      	orrs	r3, r4
 801c0d6:	d03b      	beq.n	801c150 <scalbn+0x90>
 801c0d8:	4b31      	ldr	r3, [pc, #196]	; (801c1a0 <scalbn+0xe0>)
 801c0da:	4629      	mov	r1, r5
 801c0dc:	2200      	movs	r2, #0
 801c0de:	ee10 0a10 	vmov	r0, s0
 801c0e2:	f7e4 fa93 	bl	800060c <__aeabi_dmul>
 801c0e6:	4b2f      	ldr	r3, [pc, #188]	; (801c1a4 <scalbn+0xe4>)
 801c0e8:	429e      	cmp	r6, r3
 801c0ea:	4604      	mov	r4, r0
 801c0ec:	460d      	mov	r5, r1
 801c0ee:	da12      	bge.n	801c116 <scalbn+0x56>
 801c0f0:	a327      	add	r3, pc, #156	; (adr r3, 801c190 <scalbn+0xd0>)
 801c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f6:	f7e4 fa89 	bl	800060c <__aeabi_dmul>
 801c0fa:	e009      	b.n	801c110 <scalbn+0x50>
 801c0fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c100:	428a      	cmp	r2, r1
 801c102:	d10c      	bne.n	801c11e <scalbn+0x5e>
 801c104:	ee10 2a10 	vmov	r2, s0
 801c108:	4620      	mov	r0, r4
 801c10a:	4629      	mov	r1, r5
 801c10c:	f7e4 f8c8 	bl	80002a0 <__adddf3>
 801c110:	4604      	mov	r4, r0
 801c112:	460d      	mov	r5, r1
 801c114:	e01c      	b.n	801c150 <scalbn+0x90>
 801c116:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c11a:	460b      	mov	r3, r1
 801c11c:	3a36      	subs	r2, #54	; 0x36
 801c11e:	4432      	add	r2, r6
 801c120:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c124:	428a      	cmp	r2, r1
 801c126:	dd0b      	ble.n	801c140 <scalbn+0x80>
 801c128:	ec45 4b11 	vmov	d1, r4, r5
 801c12c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801c198 <scalbn+0xd8>
 801c130:	f000 f83c 	bl	801c1ac <copysign>
 801c134:	a318      	add	r3, pc, #96	; (adr r3, 801c198 <scalbn+0xd8>)
 801c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c13a:	ec51 0b10 	vmov	r0, r1, d0
 801c13e:	e7da      	b.n	801c0f6 <scalbn+0x36>
 801c140:	2a00      	cmp	r2, #0
 801c142:	dd08      	ble.n	801c156 <scalbn+0x96>
 801c144:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c148:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c14c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c150:	ec45 4b10 	vmov	d0, r4, r5
 801c154:	bd70      	pop	{r4, r5, r6, pc}
 801c156:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c15a:	da0d      	bge.n	801c178 <scalbn+0xb8>
 801c15c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c160:	429e      	cmp	r6, r3
 801c162:	ec45 4b11 	vmov	d1, r4, r5
 801c166:	dce1      	bgt.n	801c12c <scalbn+0x6c>
 801c168:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801c190 <scalbn+0xd0>
 801c16c:	f000 f81e 	bl	801c1ac <copysign>
 801c170:	a307      	add	r3, pc, #28	; (adr r3, 801c190 <scalbn+0xd0>)
 801c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c176:	e7e0      	b.n	801c13a <scalbn+0x7a>
 801c178:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c17c:	3236      	adds	r2, #54	; 0x36
 801c17e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c182:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c186:	4620      	mov	r0, r4
 801c188:	4629      	mov	r1, r5
 801c18a:	2200      	movs	r2, #0
 801c18c:	4b06      	ldr	r3, [pc, #24]	; (801c1a8 <scalbn+0xe8>)
 801c18e:	e7b2      	b.n	801c0f6 <scalbn+0x36>
 801c190:	c2f8f359 	.word	0xc2f8f359
 801c194:	01a56e1f 	.word	0x01a56e1f
 801c198:	8800759c 	.word	0x8800759c
 801c19c:	7e37e43c 	.word	0x7e37e43c
 801c1a0:	43500000 	.word	0x43500000
 801c1a4:	ffff3cb0 	.word	0xffff3cb0
 801c1a8:	3c900000 	.word	0x3c900000

0801c1ac <copysign>:
 801c1ac:	ec51 0b10 	vmov	r0, r1, d0
 801c1b0:	ee11 0a90 	vmov	r0, s3
 801c1b4:	ee10 2a10 	vmov	r2, s0
 801c1b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801c1bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801c1c0:	ea41 0300 	orr.w	r3, r1, r0
 801c1c4:	ec43 2b10 	vmov	d0, r2, r3
 801c1c8:	4770      	bx	lr
	...

0801c1cc <_init>:
 801c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1ce:	bf00      	nop
 801c1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c1d2:	bc08      	pop	{r3}
 801c1d4:	469e      	mov	lr, r3
 801c1d6:	4770      	bx	lr

0801c1d8 <_fini>:
 801c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1da:	bf00      	nop
 801c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c1de:	bc08      	pop	{r3}
 801c1e0:	469e      	mov	lr, r3
 801c1e2:	4770      	bx	lr
